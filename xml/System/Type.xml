<Type Name="Type" FullName="System.Type">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4c442b0e3855ad0206a02ff13f35e3b09a89b66f" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48621105" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <TypeSignature Language="DocId" Value="T:System.Type" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Type&#xA;Inherits MemberInfo&#xA;Implements _Type, IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class Type abstract : System::Reflection::MemberInfo, System::Reflection::IReflect, System::Runtime::InteropServices::_Type" />
  <TypeSignature Language="F#" Value="type Type = class&#xA;    inherit MemberInfo&#xA;    interface _Type&#xA;    interface IReflect" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c5b52-101">Représente les déclarations de types : types classe, types interface, types tableau, types valeur, types énumération, paramètres de type, définitions de type générique et types génériques construits ouverts ou fermés.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c5b52-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-102">`Type` est la racine de la <xref:System.Reflection> fonctionnalité et constitue le principal moyen d’accéder aux métadonnées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-102">`Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata.</span></span> <span data-ttu-id="c5b52-103">Utiliser les membres de <xref:System.Type> pour obtenir des informations sur une déclaration de type, sur les membres d’un type (par exemple, les constructeurs, méthodes, champs, propriétés et événements d’une classe), ainsi que le module et l’assembly dans lequel la classe est déployée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-103">Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</span></span>  
  
 <span data-ttu-id="c5b52-104">Aucune autorisation n’est requise pour utiliser la réflexion pour obtenir des informations sur les types et leurs membres, indépendamment de leurs niveaux d’accès de code.</span><span class="sxs-lookup"><span data-stu-id="c5b52-104">No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels.</span></span> <span data-ttu-id="c5b52-105">Aucune autorisation n’est requise pour le code d’utiliser la réflexion pour accéder aux membres publics ou autres membres dont les niveaux d’accès rendre visible pendant la compilation normale.</span><span class="sxs-lookup"><span data-stu-id="c5b52-105">No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation.</span></span> <span data-ttu-id="c5b52-106">Toutefois, votre code peut utiliser la réflexion pour accéder aux membres qui seraient normalement inaccessibles, tels que les méthodes privées ou internes ou les champs protégés d’un type de votre classe n’hérite pas, votre code doit avoir <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-106">However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="c5b52-107">Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-107">See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span>  
  
 <span data-ttu-id="c5b52-108">`Type` est une classe de base abstraite qui permet plusieurs implémentations.</span><span class="sxs-lookup"><span data-stu-id="c5b52-108">`Type` is an abstract base class that allows multiple implementations.</span></span> <span data-ttu-id="c5b52-109">Le système fournira toujours la classe dérivée `RuntimeType`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-109">The system will always provide the derived class `RuntimeType`.</span></span> <span data-ttu-id="c5b52-110">Dans la réflexion, toutes les classes commençant par le mot Runtime sont créés une seule fois par objet dans les opérations de comparaison système et la prise en charge.</span><span class="sxs-lookup"><span data-stu-id="c5b52-110">In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-111">Dans les scénarios multithread, ne verrouillent pas <xref:System.Type> objets afin de synchroniser l’accès à `static` données.</span><span class="sxs-lookup"><span data-stu-id="c5b52-111">In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data.</span></span> <span data-ttu-id="c5b52-112">Tout autre code sur laquelle vous n’avez aucun contrôle, pourrait également verrouiller votre type de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-112">Other code, over which you have no control, might also lock your class type.</span></span> <span data-ttu-id="c5b52-113">Cela peut entraîner un blocage.</span><span class="sxs-lookup"><span data-stu-id="c5b52-113">This might result in a deadlock.</span></span> <span data-ttu-id="c5b52-114">Au lieu de cela, synchroniser l’accès aux données statiques en verrouillant privé `static` objet.</span><span class="sxs-lookup"><span data-stu-id="c5b52-114">Instead, synchronize access to static data by locking a private `static` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-115">Une classe dérivée peut accéder aux membres protégés des classes de base du code appelant.</span><span class="sxs-lookup"><span data-stu-id="c5b52-115">A derived class can access protected members of the calling code's base classes.</span></span> <span data-ttu-id="c5b52-116">En outre, l’accès est autorisé aux membres de l’assembly de l’assembly du code appelant.</span><span class="sxs-lookup"><span data-stu-id="c5b52-116">Also, access is allowed to assembly members of the calling code's assembly.</span></span> <span data-ttu-id="c5b52-117">En règle générale, si vous êtes autorisé à accéder dans le code à liaison anticipée, puis vous sont également autorisés dans le code à liaison tardive.</span><span class="sxs-lookup"><span data-stu-id="c5b52-117">As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-118">Les interfaces qui étendent les autres interfaces n’héritent pas les méthodes définies dans les interfaces étendues.</span><span class="sxs-lookup"><span data-stu-id="c5b52-118">Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</span></span>  
  
 <span data-ttu-id="c5b52-119">Dans cette section :</span><span class="sxs-lookup"><span data-stu-id="c5b52-119">In this section:</span></span>  
  
 <span data-ttu-id="c5b52-120">[Les types représente un objet de Type ?](#WhatTypes) </span><span class="sxs-lookup"><span data-stu-id="c5b52-120">[What types does a Type object represent?](#WhatTypes) </span></span>  
 <span data-ttu-id="c5b52-121">[Récupération d’un objet de Type](#Retrieve) </span><span class="sxs-lookup"><span data-stu-id="c5b52-121">[Retrieving a Type object](#Retrieve) </span></span>  
 [<span data-ttu-id="c5b52-122">Comparaison d’égalité des objets de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-122">Comparing type objects for equality</span></span>](#Equality)  
  
<a name="WhatTypes"></a>   
## <a name="what-types-does-a-type-object-represent"></a><span data-ttu-id="c5b52-123">Les types représente un objet de Type ?</span><span class="sxs-lookup"><span data-stu-id="c5b52-123">What types does a Type object represent?</span></span>  
 <span data-ttu-id="c5b52-124">Cette classe est thread-safe ; plusieurs threads peuvent lire simultanément à partir d’une instance de ce type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-124">This class is thread safe; multiple threads can concurrently read from an instance of this type.</span></span> <span data-ttu-id="c5b52-125">Une instance de la <xref:System.Type> classe peut représenter l’un des types suivants :</span><span class="sxs-lookup"><span data-stu-id="c5b52-125">An instance of the <xref:System.Type> class can represent any of the following types:</span></span>  
  
-   <span data-ttu-id="c5b52-126">Classes</span><span class="sxs-lookup"><span data-stu-id="c5b52-126">Classes</span></span>  
  
-   <span data-ttu-id="c5b52-127">Types de valeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-127">Value types</span></span>  
  
-   <span data-ttu-id="c5b52-128">Tableaux</span><span class="sxs-lookup"><span data-stu-id="c5b52-128">Arrays</span></span>  
  
-   <span data-ttu-id="c5b52-129">Interfaces</span><span class="sxs-lookup"><span data-stu-id="c5b52-129">Interfaces</span></span>  
  
-   <span data-ttu-id="c5b52-130">Énumérations</span><span class="sxs-lookup"><span data-stu-id="c5b52-130">Enumerations</span></span>  
  
-   <span data-ttu-id="c5b52-131">Délégués</span><span class="sxs-lookup"><span data-stu-id="c5b52-131">Delegates</span></span>  
  
-   <span data-ttu-id="c5b52-132">Types génériques construits et définitions de type générique</span><span class="sxs-lookup"><span data-stu-id="c5b52-132">Constructed generic types and generic type definitions</span></span>  
  
-   <span data-ttu-id="c5b52-133">Arguments de type et les paramètres de type des types génériques construits, les définitions de type générique et les définitions de méthode générique</span><span class="sxs-lookup"><span data-stu-id="c5b52-133">Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions</span></span>  
  
<a name="Retrieve"></a>   
## <a name="retrieving-a-type-object"></a><span data-ttu-id="c5b52-134">Récupération d’un objet de Type</span><span class="sxs-lookup"><span data-stu-id="c5b52-134">Retrieving a Type object</span></span>  
 <span data-ttu-id="c5b52-135">Le <xref:System.Type> objet associé à un type particulier peut être obtenu de plusieurs manières :</span><span class="sxs-lookup"><span data-stu-id="c5b52-135">The <xref:System.Type> object associated with a particular type can be obtained in the following ways:</span></span>  
  
-   <span data-ttu-id="c5b52-136">L’instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Type> objet qui représente le type d’une instance.</span><span class="sxs-lookup"><span data-stu-id="c5b52-136">The instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> method returns a <xref:System.Type> object that represents the type of an instance.</span></span> <span data-ttu-id="c5b52-137">Étant donné que tous les types managés dérivent <xref:System.Object>, le <xref:System.Object.GetType%2A> méthode peut être appelée sur une instance de n’importe quel type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-137">Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.</span></span>  
  
     <span data-ttu-id="c5b52-138">L’exemple suivant appelle la <xref:System.Object.GetType%2A?displayProperty=nameWithType> méthode pour déterminer le type de runtime de chaque objet dans un tableau d’objets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-138">The following example calls the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to determine the runtime type of each object in an object array.</span></span>  
  
     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]
     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]
     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  
  
-   <span data-ttu-id="c5b52-139">La méthode statique <xref:System.Type.GetType%2A?displayProperty=nameWithType> méthodes retournent un <xref:System.Type> objet qui représente un type spécifié par son nom qualifié complet.</span><span class="sxs-lookup"><span data-stu-id="c5b52-139">The static <xref:System.Type.GetType%2A?displayProperty=nameWithType> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.</span></span>  
  
-   <span data-ttu-id="c5b52-140">Le <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, et <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> méthodes retournent `Type` objets qui représentent les types définis dans un module.</span><span class="sxs-lookup"><span data-stu-id="c5b52-140">The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> methods return `Type` objects that represent the types defined in a module.</span></span> <span data-ttu-id="c5b52-141">La première méthode peut être utilisée pour obtenir un tableau de <xref:System.Type> objets pour tous les types publics et privés définis dans un module.</span><span class="sxs-lookup"><span data-stu-id="c5b52-141">The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module.</span></span> <span data-ttu-id="c5b52-142">(Vous pouvez obtenir une instance de `Module` via la <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> (méthode), ou via le <xref:System.Type.Module%2A?displayProperty=nameWithType> propriété.)</span><span class="sxs-lookup"><span data-stu-id="c5b52-142">(You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> method, or through the <xref:System.Type.Module%2A?displayProperty=nameWithType> property.)</span></span>  
  
-   <span data-ttu-id="c5b52-143">Le <xref:System.Reflection.Assembly?displayProperty=nameWithType> objet contient un nombre de méthodes pour récupérer les classes définies dans un assembly, y compris <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, et <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-143">The <xref:System.Reflection.Assembly?displayProperty=nameWithType> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="c5b52-144">Le <xref:System.Type.FindInterfaces%2A> méthode retourne une liste filtrée des types d’interface pris en charge par un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-144">The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="c5b52-145">Le <xref:System.Type.GetElementType%2A> méthode retourne un `Type` objet qui représente l’élément.</span><span class="sxs-lookup"><span data-stu-id="c5b52-145">The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.</span></span>  
  
-   <span data-ttu-id="c5b52-146">Le <xref:System.Type.GetInterfaces%2A> et <xref:System.Type.GetInterface%2A> méthodes retournent <xref:System.Type> objets représentant les types d’interface pris en charge par un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-146">The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="c5b52-147">Le <xref:System.Type.GetTypeArray%2A> méthode retourne un tableau de <xref:System.Type> objets représentant les types spécifiés par un ensemble arbitraire d’objets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-147">The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects.</span></span> <span data-ttu-id="c5b52-148">Les objets sont spécifiés avec un tableau de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-148">The objects are specified with an array of type <xref:System.Object>.</span></span>  
  
-   <span data-ttu-id="c5b52-149">Le <xref:System.Type.GetTypeFromProgID%2A> et <xref:System.Type.GetTypeFromCLSID%2A> méthodes sont fournies pour l’interopérabilité COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-149">The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability.</span></span> <span data-ttu-id="c5b52-150">Elles retournent un <xref:System.Type> objet qui représente le type spécifié par un `ProgID` ou `CLSID`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-150">They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.</span></span>  
  
-   <span data-ttu-id="c5b52-151">Le <xref:System.Type.GetTypeFromHandle%2A> méthode est fournie pour l’interopérabilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-151">The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability.</span></span> <span data-ttu-id="c5b52-152">Elle retourne un `Type` objet qui représente le type spécifié par un handle de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-152">It returns a `Type` object that represents the type specified by a class handle.</span></span>  
  
-   <span data-ttu-id="c5b52-153">C# `typeof` opérateur, le C++ `typeid` opérateur et Visual Basic `GetType` opérateur obtenir la `Type` objet pour un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-153">The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.</span></span>  
  
-   <span data-ttu-id="c5b52-154">Le <xref:System.Type.MakeGenericType%2A> méthode retourne un <xref:System.Type> objet représentant un type générique construit, qui est un type construit ouvert si sa <xref:System.Type.ContainsGenericParameters%2A> retourne de la propriété `true`, et un fermé type construit de sinon.</span><span class="sxs-lookup"><span data-stu-id="c5b52-154">The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise.</span></span> <span data-ttu-id="c5b52-155">Un type générique peut être instancié uniquement s’il est fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-155">A generic type can be instantiated only if it is closed.</span></span>  
  
-   <span data-ttu-id="c5b52-156">Le <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, et <xref:System.Type.MakeByRefType%2A> méthodes retournent <xref:System.Type> objets qui représentent, respectivement, un tableau d’un type spécifié, un pointeur vers un type spécifié et le type d’un paramètre de référence (`ref` en c#, `ByRef`en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-156">The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).</span></span>  
  
<a name="Equality"></a>   
## <a name="comparing-type-objects-for-equality"></a><span data-ttu-id="c5b52-157">Comparaison d’égalité des objets de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-157">Comparing type objects for equality</span></span>  
 <span data-ttu-id="c5b52-158">Un <xref:System.Type> objet que représente un type est unique ; autrement dit, deux <xref:System.Type> références d’objet font référence au même objet si et seulement si elles représentent le même type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-158">A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type.</span></span> <span data-ttu-id="c5b52-159">Ainsi, pour la comparaison de <xref:System.Type> objets à l’aide de l’égalité de référence.</span><span class="sxs-lookup"><span data-stu-id="c5b52-159">This allows for comparison of <xref:System.Type> objects using reference equality.</span></span> <span data-ttu-id="c5b52-160">L’exemple suivant compare le <xref:System.Type> objets qui représentent un nombre de valeurs entières pour déterminer si elles sont du même type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-160">The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.</span></span>  
  
 [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]
 [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]
 [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-161">L’exemple suivant montre quelques caractéristiques représentatives de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-161">The following  example shows a few representative features of <xref:System.Type>.</span></span> <span data-ttu-id="c5b52-162">C# `typeof` opérateur (`GetType` opérateur en Visual Basic, `typeid` opérateur dans Visual C++) est utilisée pour obtenir un <xref:System.Type> objet représentant <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-162">The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a <xref:System.Type> object representing <xref:System.String>.</span></span> <span data-ttu-id="c5b52-163">À partir de ce <xref:System.Type> objet, le <xref:System.Type.GetMethod%2A> méthode est utilisée pour obtenir un <xref:System.Reflection.MethodInfo> représentant le <xref:System.String.Substring%2A> surcharge qui accepte un emplacement de départ et une longueur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-163">From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.</span></span>  
  
 <span data-ttu-id="c5b52-164">Pour identifier la signature de surcharge, l’exemple de code crée un tableau temporaire contenant deux <xref:System.Type> représentant des objets `int` (`Integer` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-164">To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-165">Pour être précis, le tableau contient deux références à l’instance de <xref:System.Type> qui représente `int` dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-165">To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain.</span></span> <span data-ttu-id="c5b52-166">Pour n’importe quel type, il existe une seule instance de <xref:System.Type> par domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="c5b52-166">For any type, there is only one instance of <xref:System.Type> per application domain.</span></span>  
  
 <span data-ttu-id="c5b52-167">L’exemple de code utilise le <xref:System.Reflection.MethodInfo> pour appeler le <xref:System.String.Substring%2A> méthode sur la chaîne « Hello, World ! » et affiche le résultat.</span><span class="sxs-lookup"><span data-stu-id="c5b52-167">The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.</span></span>  
  
 [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]
 [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]
 [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c5b52-168">Ce type est thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c5b52-168">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="c5b52-169">Lorsque vous héritez de <see langword="Type" />, vous devez substituer les membres suivants : </span>
        <span class="sxs-lookup">
          <span data-stu-id="c5b52-169">When you inherit from <see langword="Type" />, you must override the following members:</span>
        </span> 
-   <see cref="P:System.Type.Assembly" />  
  
-   <see cref="P:System.Type.AssemblyQualifiedName" />  
  
-   <see cref="P:System.Type.BaseType" />  
  
-   <see cref="P:System.Type.FullName" />  
  
-   <see cref="M:System.Type.GetAttributeFlagsImpl" />  
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" /><span data-ttu-id="c5b52-170">
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span><span class="sxs-lookup"><span data-stu-id="c5b52-170">
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span></span> 
-   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para>
    </block>
    <altmember cref="T:System.Object" />
    <altmember cref="N:System.Reflection" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
    <related type="Article" href="~/docs/framework/reflection-and-codedom/viewing-type-information.md">
      <span data-ttu-id="c5b52-171">Affichage des informations de type</span>
      <span class="sxs-lookup">
        <span data-stu-id="c5b52-171">Viewing Type Information</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-172">Initialise une nouvelle instance de la classe <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-172">Initializes a new instance of the <see cref="T:System.Type" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-173">Ce constructeur est appelé par les classes dérivées lors de la construction d’objets de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-173">This constructor is invoked by derived classes during the construction of type objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Type.Assembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-174">Obtient le <see cref="T:System.Reflection.Assembly" /> dans lequel le type est déclaré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-174">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span>
          </span>
          <span data-ttu-id="c5b52-175">Pour les types génériques, obtient le <see cref="T:System.Reflection.Assembly" /> dans lequel le type générique est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-175">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-176">Instance de <see cref="T:System.Reflection.Assembly" /> qui décrit l'assembly contenant le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-176">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span>
          </span>
          <span data-ttu-id="c5b52-177">Pour les types génériques, l'instance décrit l'assembly qui contient la définition de type générique, et non pas l'assembly qui crée et utilise un type construit particulier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-177">For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-178">Si actuel <xref:System.Type> objet représente un type générique construit, cette propriété retourne l’assembly qui contient la définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-178">If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition.</span></span> <span data-ttu-id="c5b52-179">Par exemple, supposons que vous créez un assembly nommé MyGenerics.dll, qui contient la définition de type générique `MyGenericStack<T>` (`MyGenericStack(Of T)` en Visual Basic, `generic<T> ref class MyGenericStack` dans C++).</span><span class="sxs-lookup"><span data-stu-id="c5b52-179">For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++).</span></span> <span data-ttu-id="c5b52-180">Si vous créez une instance de `MyGenericStack<int>` (`MyGenericStack(Of Integer)` en Visual Basic) dans un autre assembly, le <xref:System.Type.Assembly%2A> propriété pour le type construit retourne un <xref:System.Reflection.Assembly> objet qui représente MyGenerics.dll.</span><span class="sxs-lookup"><span data-stu-id="c5b52-180">If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.</span></span>  
  
 <span data-ttu-id="c5b52-181">De même, si actuel <xref:System.Type> objet représente un paramètre générique non assigné `T`, cette propriété retourne l’assembly qui contient le type générique qui définit `T`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-181">Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
 <span data-ttu-id="c5b52-182">Si le <xref:System.Type.Assembly%2A?displayProperty=nameWithType> propriété n’est pas disponible sur une implémentation particulière de .NET, telles que .NET Core ou de la plateforme Windows universelle, utilisez le <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> propriété à la place.</span><span class="sxs-lookup"><span data-stu-id="c5b52-182">If the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property is not available on a particular .NET implementation, such as .NET Core or the Universal Windows Platform, use the <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> property instead.</span></span>      
  
 <span data-ttu-id="c5b52-183">Cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="c5b52-183">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-184">L’exemple suivant affiche le nom de l’assembly associé à la classe et le nom qualifié complet du type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-184">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.AssemblyQualifiedName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-185">Obtient le nom qualifié d'assembly du type, y compris le nom de l'assembly à partir duquel l'objet <see cref="T:System.Type" /> a été chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-185">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-186">Le nom qualifié d'assembly du <see cref="T:System.Type" />, qui inclut le nom de l'assembly à partir duquel le <see cref="T:System.Type" /> a été chargé ou <see langword="null" /> si l'instance actuelle représente un paramètre de type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-186">The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-187">Le nom qualifié d’assembly d’un type se compose du nom de type, y compris son espace de noms, suivi par une virgule, suivie du nom d’affichage de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-187">The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly.</span></span> <span data-ttu-id="c5b52-188">Le nom complet d’un assembly est obtenu en utilisant le <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-188">The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-189">Dans le .NET Framework version 2.0, architecture de processeur est ajoutée à l’identité de l’assembly et peut être spécifié en tant que partie de chaînes de nom d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-189">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="c5b52-190">Par exemple, « ProcessorArchitecture = msil ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-190">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="c5b52-191">Toutefois, il n’est pas inclus dans la chaîne retournée par la <xref:System.Type.AssemblyQualifiedName%2A> propriété, pour des raisons de compatibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-191">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="c5b52-192">Consultez <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-192">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c5b52-193">Tous les compilateurs qui prennent en charge le common language runtime émettent le nom simple d’une classe imbriquée et la réflexion construit un nom tronqué interrogées, conformément aux conventions suivantes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-193">All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
|<span data-ttu-id="c5b52-194">Délimiteur</span><span class="sxs-lookup"><span data-stu-id="c5b52-194">Delimiter</span></span>|<span data-ttu-id="c5b52-195">Signification</span><span class="sxs-lookup"><span data-stu-id="c5b52-195">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="c5b52-196">Barre oblique inverse (\\)</span><span class="sxs-lookup"><span data-stu-id="c5b52-196">Backslash (\\)</span></span>|<span data-ttu-id="c5b52-197">Caractère d’échappement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-197">Escape character.</span></span>|  
|<span data-ttu-id="c5b52-198">Virgule ()</span><span class="sxs-lookup"><span data-stu-id="c5b52-198">Comma (,)</span></span>|<span data-ttu-id="c5b52-199">Précède le nom de l’Assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-199">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="c5b52-200">Signe plus (+)</span><span class="sxs-lookup"><span data-stu-id="c5b52-200">Plus sign (+)</span></span>|<span data-ttu-id="c5b52-201">Précède une classe imbriquée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-201">Precedes a nested class.</span></span>|  
|<span data-ttu-id="c5b52-202">Point (.)</span><span class="sxs-lookup"><span data-stu-id="c5b52-202">Period (.)</span></span>|<span data-ttu-id="c5b52-203">Indique les identificateurs d’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-203">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="c5b52-204">Crochets ([])</span><span class="sxs-lookup"><span data-stu-id="c5b52-204">Brackets ([])</span></span>|<span data-ttu-id="c5b52-205">Après un nom de type, indique un tableau de ce type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-205">After a type name, denotes an array of that type.</span></span><br /><br /> <span data-ttu-id="c5b52-206">- ou -</span><span class="sxs-lookup"><span data-stu-id="c5b52-206">-or-</span></span><br /><br /> <span data-ttu-id="c5b52-207">Pour un type générique, englobe la liste d’arguments de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-207">For a generic type, encloses the generic type argument list.</span></span><br /><br /> <span data-ttu-id="c5b52-208">- ou -</span><span class="sxs-lookup"><span data-stu-id="c5b52-208">-or-</span></span><br /><br /> <span data-ttu-id="c5b52-209">Dans une liste d’arguments de type, englobe un type qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-209">Within a type argument list, encloses an assembly-qualified type.</span></span>|  
  
 <span data-ttu-id="c5b52-210">Par exemple, le nom qualifié d’assembly pour une classe peut ressembler à ceci :</span><span class="sxs-lookup"><span data-stu-id="c5b52-210">For example, the assembly-qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 <span data-ttu-id="c5b52-211">Si l’espace de noms contenait un signe plus, par exemple TopNamespace, puis le signe plus (+) serait précédé d’un caractère d’échappement (\\) pour éviter qu’il soit interprété comme un séparateur d’imbrication.</span><span class="sxs-lookup"><span data-stu-id="c5b52-211">If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="c5b52-212">Réflexion émettrait cette chaîne comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-212">Reflection would emit this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 <span data-ttu-id="c5b52-213">Un « ++ » devient «\\+\\+ » et un «\\« devient »\\\\».</span><span class="sxs-lookup"><span data-stu-id="c5b52-213">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="c5b52-214">Ce nom qualifié peut être persistant et utilisé ultérieurement pour charger le <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-214">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="c5b52-215">Pour rechercher et charger un <xref:System.Type>, utilisez <xref:System.Type.GetType%2A> avec le type de nom uniquement ou avec le nom de type qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-215">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="c5b52-216"><xref:System.Type.GetType%2A> avec le type de nom uniquement recherchera le <xref:System.Type> dans l’assembly de l’appelant, puis dans l’assembly système.</span><span class="sxs-lookup"><span data-stu-id="c5b52-216"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="c5b52-217"><xref:System.Type.GetType%2A> avec l’assembly de nom de type qualifié recherchera le <xref:System.Type> dans n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-217"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="c5b52-218">Les noms de type peuvent inclure des caractères de fin qui indiquent des informations supplémentaires sur le type, par exemple si le type est un type référence, un type pointeur ou un type tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-218">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="c5b52-219">Pour récupérer le nom de type sans ces caractères de fin, utilisez `t.GetElementType().ToString()`, où `t` est le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-219">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="c5b52-220">Les espaces sont pertinents dans tous les composants de nom de type autre que le nom de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-220">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="c5b52-221">Nom de l’assembly, espaces avant le séparateur ',', mais les espaces après le séparateur ',' sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-221">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="c5b52-222">Les arguments génériques de types génériques sont eux-mêmes qualifiés par le nom de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-222">Generic arguments of generic types are themselves qualified by assembly name.</span></span> <span data-ttu-id="c5b52-223">Par exemple, dans le nom de type qualifié d’assembly pour `MyGenericClass<int>` (`MyGenericClass(Of Integer)` en Visual Basic), `int` est développé pour le nom de type qualifié d’assembly pour <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-223">For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="c5b52-224">Si actuel <xref:System.Type> objet représente un paramètre générique, cette propriété retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-224">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-225">L’exemple suivant affiche le nom de l’assembly associé à la classe et le nom qualifié complet du type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-225">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 <span data-ttu-id="c5b52-226">L’exemple suivant compare les chaînes retournées par la <xref:System.Type.ToString%2A> (méthode) et le `Name`, <xref:System.Type.FullName%2A>, et <xref:System.Type.AssemblyQualifiedName%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-226">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetType" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="c5b52-227">Spécification des noms de types qualifiés complets</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-227">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Type.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-228">Obtient les attributs associés à <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-228">Gets the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-229">Objet <see cref="T:System.Reflection.TypeAttributes" /> qui représente l'ensemble d'attributs du <see cref="T:System.Type" />, à moins que le <see cref="T:System.Type" /> représente un paramètre de type générique, cas dans lequel la valeur est non spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-229">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-230">Certains membres de la <xref:System.Reflection.TypeAttributes> énumération sont masques qui représentent un groupe de valeurs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-230">Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values.</span></span> <span data-ttu-id="c5b52-231">Chaque groupe comprend un membre dont la valeur sous-jacente est égal à zéro.</span><span class="sxs-lookup"><span data-stu-id="c5b52-231">Each group includes one member whose underlying value is zero.</span></span> <span data-ttu-id="c5b52-232">Par exemple, la valeur sous-jacente de la <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> membre dans le <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> groupe est égal à zéro, car est le <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> membre dans le <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> groupe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-232">For example, the underlying value of the <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> group is zero, as is the <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> group.</span></span> <span data-ttu-id="c5b52-233">Pour cette raison, vous devez utiliser le masque avant de tester ces valeurs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-233">Because of this, you must use the mask before testing for those values.</span></span> <span data-ttu-id="c5b52-234">Cet exemple en fournit une illustration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-234">The example provides an illustration.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="c5b52-235">La plupart des cas, les propriétés telles que <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, et <xref:System.Type.IsSpecialName%2A> sont plus faciles à utiliser que les attributs de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-235">For most purposes, properties like <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and <xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.</span></span>  
  
 <span data-ttu-id="c5b52-236">Si actuel <xref:System.Type> représente un type générique construit, cette propriété retourne les attributs de la définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-236">If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition.</span></span> <span data-ttu-id="c5b52-237">Par exemple, les attributs retournés pour `MyGenericClass<int>` (`MyGenericClass(Of Integer)` en Visual Basic) sont les attributs de `MyGenericClass<T>` (`MyGenericClass(Of T)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-237">For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="c5b52-238">Si actuel <xref:System.Type> représente un paramètre de type générique, autrement dit, si le <xref:System.Type.IsGenericParameter%2A> retourne de la propriété `true` — le <xref:System.Reflection.TypeAttributes> valeur retournée par cette propriété n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-238">If the current <xref:System.Type> represents a generic type parameter — that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` — the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-239">L’option de l’exemple suivant <xref:System.Type.Attributes%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-239">The following example usesthe <xref:System.Type.Attributes%2A> property.</span></span>  
  
 [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]
 [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetAttributeFlagsImpl" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Type.BaseType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.BaseType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-240">Obtient le type dont le <see cref="T:System.Type" /> actuel hérite directement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-240">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-241">
            <see cref="T:System.Type" /> dont le <see cref="T:System.Type" /> actuel hérite directement ou <see langword="null" /> si le <see langword="Type" /> actuel représente la classe <see cref="T:System.Object" /> ou une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-241">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-242">Le type de base est le type à partir duquel le type actuel hérite directement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-242">The base type is the type from which the current type directly inherits.</span></span> <span data-ttu-id="c5b52-243"><xref:System.Object> est le seul type qui n’a pas un type de base, par conséquent `null` est retourné en tant que type de base de <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-243"><xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="c5b52-244">Les interfaces hériter de zéro ou plusieurs interfaces de base ; Par conséquent, cette propriété retourne `null` si le `Type` objet représente une interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-244">Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface.</span></span> <span data-ttu-id="c5b52-245">Les interfaces de base peuvent être déterminés avec <xref:System.Type.GetInterfaces%2A> ou <xref:System.Type.FindInterfaces%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-245">The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.</span></span>  
  
 <span data-ttu-id="c5b52-246">Si actuel <xref:System.Type> représente un type générique construit, le type de base reflète les arguments génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-246">If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments.</span></span> <span data-ttu-id="c5b52-247">Observez, par exemple, les déclarations suivantes :</span><span class="sxs-lookup"><span data-stu-id="c5b52-247">For example, consider the following declarations:</span></span>  
  
 [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]
 [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="c5b52-248">Pour le type construit `C<int>` (`C(Of Integer)` en Visual Basic), la <xref:System.Type.BaseType%2A> retourne de la propriété `B<int>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-248">For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.</span></span>  
  
 <span data-ttu-id="c5b52-249">Si actuel <xref:System.Type> représente un paramètre de type d’une définition de type générique, <xref:System.Type.BaseType%2A> retourne la contrainte de classe, autrement dit, la classe que le paramètre de type doit hériter.</span><span class="sxs-lookup"><span data-stu-id="c5b52-249">If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit.</span></span> <span data-ttu-id="c5b52-250">S’il n’existe aucune contrainte de classe, <xref:System.Type.BaseType%2A> retourne <xref:System.Object?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-250">If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c5b52-251">Cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="c5b52-251">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-252">L’exemple suivant montre comment utiliser le <xref:System.Type.BaseType%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-252">The following example demonstrates using the <xref:System.Type.BaseType%2A> property.</span></span>  
  
 [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]
 [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]
 [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  
  
 <span data-ttu-id="c5b52-253">L’exemple suivant utilise la récursivité pour afficher la hiérarchie d’héritage complète de chaque classe trouvé dans un assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-253">The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly.</span></span> <span data-ttu-id="c5b52-254">L’exemple définit une classe nommée `C` qui dérive d’une classe nommée `B`, qui, à son tour, dérive une classe nommée `A`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-254">The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.</span></span>  
  
 [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]
 [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
        <altmember cref="P:System.Type.UnderlyingSystemType" />
        <altmember cref="M:System.Type.IsSubclassOf(System.Type)" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-255">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-255">Reflection and Generic Types</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Type.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Type.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-256">Obtient une valeur indiquant si l'objet <see cref="T:System.Type" /> actuel a des paramètres de type qui n'ont pas été remplacés par des types spécifiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-256">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-257">
            <see langword="true" /> si l'objet <see cref="T:System.Type" /> est lui-même un paramètre de type générique ou a des paramètres de type pour lesquels les types spécifiques n'ont pas été fournis ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-257">
              <see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-258">Pour créer une instance d’un type, il doit ne pas les définitions de type générique ou les types construits ouverts dans les arguments de type du type lui-même, dans les types génériques englobants, ou dans tous les éléments du type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-258">In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type.</span></span> <span data-ttu-id="c5b52-259">Est une autre façon de dire ce que quand examinée de manière récursive, le type ne doit contenir aucun paramètre de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-259">Another way of saying this is that when examined recursively, the type must contain no generic type parameters.</span></span>  
  
 <span data-ttu-id="c5b52-260">Dans la mesure où les types peuvent être arbitrairement complexes, il est difficile de cette décision.</span><span class="sxs-lookup"><span data-stu-id="c5b52-260">Since types can be arbitrarily complex, making this determination is difficult.</span></span> <span data-ttu-id="c5b52-261">Pour plus de commodité et pour réduire le risque d’erreur, le <xref:System.Type.ContainsGenericParameters%2A> propriété offre un moyen standard de faire la distinction entre les types construits fermés, qui peuvent être instanciés, et open construit des types qui ne peuvent pas.</span><span class="sxs-lookup"><span data-stu-id="c5b52-261">For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot.</span></span> <span data-ttu-id="c5b52-262">Si le <xref:System.Type.ContainsGenericParameters%2A> retourne de la propriété `true`, le type ne peut pas être instancié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-262">If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.</span></span>  
  
 <span data-ttu-id="c5b52-263">Le <xref:System.Type.ContainsGenericParameters%2A> propriété recherche de manière récursive pour les paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-263">The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="c5b52-264">Par exemple, elle retourne `true` pour un tableau dont les éléments sont de type `A<T>` (`A(Of T)` en Visual Basic), même si le tableau n’est pas générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-264">For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic.</span></span> <span data-ttu-id="c5b52-265">Comparez ceci avec le comportement de la <xref:System.Type.IsGenericType%2A> propriété, qui retourne `false` pour les tableaux.</span><span class="sxs-lookup"><span data-stu-id="c5b52-265">Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.</span></span>  
  
 <span data-ttu-id="c5b52-266">Pour un ensemble de classes d’exemple et un tableau indiquant les valeurs de la <xref:System.Type.ContainsGenericParameters%2A> propriété, consultez <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-266">For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-267">L’exemple suivant définit une classe générique avec deux paramètres de type et définit ensuite une deuxième classe générique qui dérive de la première classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-267">The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="c5b52-268">Classe de base de la classe dérivée a deux arguments de type : le premier est <xref:System.Int32> et le second est un paramètre de type du type dérivé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-268">The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="c5b52-269">L’exemple affiche des informations sur ces classes génériques, y compris les positions rapportées par le <xref:System.Type.GenericParameterPosition%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-269">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-270">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-270">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-271">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-271">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringMethod : System.Reflection.MethodBase" Usage="System.Type.DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-272">Obtient un <see cref="T:System.Reflection.MethodBase" /> représentant la méthode de déclaration, si le <see cref="T:System.Type" /> actuel représente un paramètre de type d'une méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-272">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-273">Si le <see cref="T:System.Type" /> actuel représente un paramètre de type d'une méthode générique, <see cref="T:System.Reflection.MethodBase" /> qui représente la méthode de déclaration ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-273">If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-274">La méthode de déclaration est une définition de méthode générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-274">The declaring method is a generic method definition.</span></span> <span data-ttu-id="c5b52-275">Autrement dit, si <xref:System.Type.DeclaringMethod%2A> ne retourne pas `null`, puis `DeclaringMethod.IsGenericMethodDefinition` retourne `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-275">That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.</span></span>  
  
 <span data-ttu-id="c5b52-276">Le <xref:System.Type.DeclaringType%2A> et <xref:System.Type.DeclaringMethod%2A> propriétés identifient la définition de type générique ou la définition de méthode générique dans lequel le paramètre de type générique a été défini à l’origine :</span><span class="sxs-lookup"><span data-stu-id="c5b52-276">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="c5b52-277">Si le <xref:System.Type.DeclaringMethod%2A> propriété retourne un <xref:System.Reflection.MethodInfo>, qui <xref:System.Reflection.MethodInfo> représente une définition de méthode générique et en cours <xref:System.Type> objet représente un paramètre de type de cette définition de méthode générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-277">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="c5b52-278">Si le <xref:System.Type.DeclaringMethod%2A> retourne de la propriété `null`, puis le <xref:System.Type.DeclaringType%2A> propriété retourne toujours un <xref:System.Type> objet représentant une définition de type générique et en cours <xref:System.Type> objet représente un paramètre de type de ce type générique définition.</span><span class="sxs-lookup"><span data-stu-id="c5b52-278">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="c5b52-279">Obtention de la <xref:System.Type.DeclaringMethod%2A> propriété sur un type dont <xref:System.Type.IsGenericParameter%2A> propriété est `false` lève une <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-279">Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="c5b52-280">Le <xref:System.Reflection.MethodBase> qui est retourné par la <xref:System.Type.DeclaringMethod%2A> propriété est un <xref:System.Reflection.MethodInfo> dans le cas d’une méthode générique, ou un <xref:System.Reflection.ConstructorInfo> dans le cas d’un constructeur générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-280">The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-281">Dans le .NET Framework version 2.0, les constructeurs génériques ne sont pas pris en charge.</span><span class="sxs-lookup"><span data-stu-id="c5b52-281">In the .NET Framework version 2.0, generic constructors are not supported.</span></span>  
  
 <span data-ttu-id="c5b52-282">Pour obtenir la liste des conditions indifférentes pour les termes utilisés dans la réflexion générique, consultez les notes sur la propriété <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-282">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-283">L’exemple de code suivant définit une classe qui possède une méthode générique, assigne un argument de type à la méthode et appelle la méthode générique construite résultante.</span><span class="sxs-lookup"><span data-stu-id="c5b52-283">The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method.</span></span> <span data-ttu-id="c5b52-284">Elle affiche également des informations sur la définition de méthode générique et la méthode construite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-284">It also displays information about the generic method definition and the constructed method.</span></span> <span data-ttu-id="c5b52-285">Lors de l’affichage d’informations sur les paramètres de type de la définition de méthode générique, dans le `DisplayGenericMethodInfo` (méthode), l’exemple de code affiche la valeur de la <xref:System.Type.DeclaringMethod%2A> propriété pour le paramètre de type générique de la méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-285">When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-286">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-286">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-287">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-287">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-288">Obtient le type qui déclare le type imbriqué ou paramètre de type générique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-288">Gets the type that declares the current nested type or generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-289">Objet <see cref="T:System.Type" /> représentant le type englobant, si le type actuel est un type imbriqué ; ou définition du type générique, si le type actuel est un paramètre de type d'un type générique ; ou type qui déclare la méthode générique, si le type actuel est un paramètre de type d'une méthode générique ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-289">A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-290">Si actuel <xref:System.Type> objet représente un paramètre de type d’un type générique, cette propriété retourne la définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-290">If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.</span></span>  
  
 <span data-ttu-id="c5b52-291">Si actuel <xref:System.Type> objet représente un paramètre de type d’une méthode générique, cette propriété retourne le type qui contient la définition de méthode générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-291">If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition.</span></span> <span data-ttu-id="c5b52-292">Si le type est générique, la définition de type générique est retournée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-292">If the type is generic, the generic type definition is returned.</span></span> <span data-ttu-id="c5b52-293">Autrement dit, le code suivant retourne la définition de type générique de la <xref:System.Collections.Generic.List%601> classe générique, qui contient le <xref:System.Collections.Generic.List%601.ConvertAll%2A> méthode générique :</span><span class="sxs-lookup"><span data-stu-id="c5b52-293">That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:</span></span>  
  
 [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]
 [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="c5b52-294">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, la <xref:System.Type.DeclaringType%2A> et <xref:System.Type.DeclaringMethod%2A> propriétés identifient la définition de type générique ou la définition de méthode générique où la paramètre de type générique a été initialement définie :</span><span class="sxs-lookup"><span data-stu-id="c5b52-294">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="c5b52-295">Si le <xref:System.Type.DeclaringMethod%2A> propriété retourne un <xref:System.Reflection.MethodInfo>, qui <xref:System.Reflection.MethodInfo> représente une définition de méthode générique et en cours <xref:System.Type> objet représente un paramètre de type de cette définition de méthode générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-295">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="c5b52-296">Si le <xref:System.Type.DeclaringMethod%2A> retourne de la propriété `null`, puis le <xref:System.Type.DeclaringType%2A> propriété retourne toujours un <xref:System.Type> objet représentant une définition de type générique et en cours <xref:System.Type> objet représente un paramètre de type de ce type générique définition.</span><span class="sxs-lookup"><span data-stu-id="c5b52-296">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="c5b52-297">Obtention de la <xref:System.Type.DeclaringType%2A> propriété sur un type dont <xref:System.Type.IsGenericParameter%2A> propriété est `false` lève une <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-297">Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-298">Cet exemple affiche le type déclarant d’une méthode dans une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-298">This example displays the declaring type of a method in a derived class.</span></span>  
  
 [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.ReflectedType" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberSignature Language="DocId" Value="P:System.Type.DefaultBinder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBinder As Binder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Binder ^ DefaultBinder { System::Reflection::Binder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBinder : System.Reflection.Binder" Usage="System.Type.DefaultBinder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-299">Obtient une référence au binder par défaut, qui implémente les règles internes pour la sélection des membres appropriés appelés par <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-299">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-300">Référence au binder par défaut utilisé par le système.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-300">A reference to the default binder used by the system.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-301">Le binder par défaut fourni avec le common language runtime est applicable dans tous les cas plus spécifiques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-301">The default binder provided with the common language runtime is applicable in all but the most specialized circumstances.</span></span> <span data-ttu-id="c5b52-302">Si vous avez besoin d’un binder qui applique des règles différentes de celles du binder par défaut fournie, qui définissent un type dérivé le <xref:System.Reflection.Binder> classe et passer une instance de ce type à l’aide de la `binder` paramètre d’un de la <xref:System.Type.InvokeMember%2A> surcharges.</span><span class="sxs-lookup"><span data-stu-id="c5b52-302">If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.</span></span>  
  
 <span data-ttu-id="c5b52-303">La réflexion modélise les règles d’accessibilité du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-303">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="c5b52-304">Par exemple, si l’appelant est dans le même assembly, l’appelant n’a besoin pas des autorisations spéciales pour les membres internes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-304">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="c5b52-305">Sinon, l’appelant doit <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-305">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="c5b52-306">Cela est cohérent avec la recherche de membres qui sont protégées, privées et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-306">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="c5b52-307">Le principe général est que <xref:System.Reflection.Binder.ChangeType%2A> doit effectuer que des conversions étendues, qui ne perdent jamais de données.</span><span class="sxs-lookup"><span data-stu-id="c5b52-307">The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data.</span></span> <span data-ttu-id="c5b52-308">La conversion d’une valeur qui est un entier signé 32 bits à une valeur qui est un entier signé 64 bits est un exemple de conversion étendue.</span><span class="sxs-lookup"><span data-stu-id="c5b52-308">An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="c5b52-309">Elle se distingue d’une conversion restrictive, ce qui peut perdre des données.</span><span class="sxs-lookup"><span data-stu-id="c5b52-309">This is distinguished from a narrowing conversion, which may lose data.</span></span> <span data-ttu-id="c5b52-310">Un exemple d’une conversion restrictive convertit un entier signé 64 bits à un entier signé 32 bits.</span><span class="sxs-lookup"><span data-stu-id="c5b52-310">An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="c5b52-311">Le tableau suivant répertorie les conversions prises en charge par le binder par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-311">The following table lists the conversions supported by the default binder.</span></span>  
  
|<span data-ttu-id="c5b52-312">Type de source</span><span class="sxs-lookup"><span data-stu-id="c5b52-312">Source Type</span></span>|<span data-ttu-id="c5b52-313">Type de cible</span><span class="sxs-lookup"><span data-stu-id="c5b52-313">Target Type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="c5b52-314">Tout type</span><span class="sxs-lookup"><span data-stu-id="c5b52-314">Any type</span></span>|<span data-ttu-id="c5b52-315">Son type de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-315">Its base type.</span></span>|  
|<span data-ttu-id="c5b52-316">Tout type</span><span class="sxs-lookup"><span data-stu-id="c5b52-316">Any type</span></span>|<span data-ttu-id="c5b52-317">L’interface qu’elle implémente.</span><span class="sxs-lookup"><span data-stu-id="c5b52-317">The interface it implements.</span></span>|  
|<span data-ttu-id="c5b52-318">Char</span><span class="sxs-lookup"><span data-stu-id="c5b52-318">Char</span></span>|<span data-ttu-id="c5b52-319">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-319">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="c5b52-320">Byte</span><span class="sxs-lookup"><span data-stu-id="c5b52-320">Byte</span></span>|<span data-ttu-id="c5b52-321">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-321">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="c5b52-322">SByte</span><span class="sxs-lookup"><span data-stu-id="c5b52-322">SByte</span></span>|<span data-ttu-id="c5b52-323">Int16, Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-323">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="c5b52-324">UInt16</span><span class="sxs-lookup"><span data-stu-id="c5b52-324">UInt16</span></span>|<span data-ttu-id="c5b52-325">UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-325">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="c5b52-326">Int16</span><span class="sxs-lookup"><span data-stu-id="c5b52-326">Int16</span></span>|<span data-ttu-id="c5b52-327">Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-327">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="c5b52-328">UInt32</span><span class="sxs-lookup"><span data-stu-id="c5b52-328">UInt32</span></span>|<span data-ttu-id="c5b52-329">UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-329">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="c5b52-330">Int32</span><span class="sxs-lookup"><span data-stu-id="c5b52-330">Int32</span></span>|<span data-ttu-id="c5b52-331">Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-331">Int64, Single, Double</span></span>|  
|<span data-ttu-id="c5b52-332">UInt64</span><span class="sxs-lookup"><span data-stu-id="c5b52-332">UInt64</span></span>|<span data-ttu-id="c5b52-333">Single, Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-333">Single, Double</span></span>|  
|<span data-ttu-id="c5b52-334">Int64</span><span class="sxs-lookup"><span data-stu-id="c5b52-334">Int64</span></span>|<span data-ttu-id="c5b52-335">Single, Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-335">Single, Double</span></span>|  
|<span data-ttu-id="c5b52-336">Single</span><span class="sxs-lookup"><span data-stu-id="c5b52-336">Single</span></span>|<span data-ttu-id="c5b52-337">Double</span><span class="sxs-lookup"><span data-stu-id="c5b52-337">Double</span></span>|  
|<span data-ttu-id="c5b52-338">Non-reference</span><span class="sxs-lookup"><span data-stu-id="c5b52-338">Non-reference</span></span>|<span data-ttu-id="c5b52-339">Par référence.</span><span class="sxs-lookup"><span data-stu-id="c5b52-339">By-reference.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-340">L’exemple suivant obtient le binder par défaut à partir de la `DefaultBinder` propriété et appelle un membre de MyClass en passant la `DefaultBinder` valeur en tant que paramètre à <xref:System.Type.InvokeMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-340">The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.</span></span>  
  
 [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]
 [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]
 [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberSignature Language="DocId" Value="F:System.Type.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Delimiter As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char Delimiter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Delimiter : char" Usage="System.Type.Delimiter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-341">Sépare les noms dans l'espace de noms de <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-341">Separates names in the namespace of the <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-342">Ce champ est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-342">This field is read-only.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberSignature Language="DocId" Value="F:System.Type.EmptyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EmptyTypes As Type() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;Type ^&gt; ^ EmptyTypes;" />
      <MemberSignature Language="F#" Value=" staticval mutable EmptyTypes : Type[]" Usage="System.Type.EmptyTypes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-343">Représente un tableau vide du type <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-343">Represents an empty array of type <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-344">Ce champ est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-344">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c5b52-345">Le code suivant montre l’exemple le `EmptyTypes` champ utilisé dans un de le `GetConstructor` méthodes pour obtenir un constructeur qui n’accepte aucun paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-345">The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.</span></span>  
  
 [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]
 [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-346">Détermine si le type de système sous-jacent du <see cref="T:System.Type" /> actuel est identique au type de système sous-jacent du <see cref="T:System.Object" /> ou <see cref="T:System.Type" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-346">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="c5b52-347">Objet dont le type de système sous-jacent doit être comparé au type de système sous-jacent du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-347">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-348">Pour que la comparaison puisse être effectuée, <c>o</c> doit pouvoir être casté ou converti en un objet de type <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-348">For the comparison to succeed, <c>o</c> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-349">Détermine si le type de système sous-jacent de l’objet <see cref="T:System.Type" /> actuel est identique au type de système sous-jacent du <see cref="T:System.Object" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-349">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-350">
            <see langword="true" /> si le type de système sous-jacent de <paramref name="o" /> est identique au type de système sous-jacent du <see cref="T:System.Type" /> en cours ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-350">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c5b52-351">Cette méthode retourne également <see langword="false" /> si :</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-351">This method also returns <see langword="false" /> if: .</span>
          </span>
          <span data-ttu-id="c5b52-352">
-   <paramref name="o" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-352">
-   <paramref name="o" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-353">
-   <paramref name="o" /> ne peut pas être casté ou converti en objet <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-353">
-   <paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-354">Cette méthode se substitue à <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-354">This method overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c5b52-355">Elle convertit `o` à un objet de type <xref:System.Type> et appelle le <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-355">It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-356">L’exemple suivant utilise <xref:System.Type.Equals%28System.Object%29> pour comparer différents <xref:System.Type> instances avec différents d’objet <xref:System.Object> instances.</span><span class="sxs-lookup"><span data-stu-id="c5b52-356">The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.</span></span>  
  
 [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]
 [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  
  
 <span data-ttu-id="c5b52-357">Deux choses sont particulièrement important de noter à propos de l’exemple :</span><span class="sxs-lookup"><span data-stu-id="c5b52-357">Two things are particularly worth noting about the example:</span></span>  
  
-   <span data-ttu-id="c5b52-358">La comparaison d’un <xref:System.Type> objet qui représente un entier avec une <xref:System.Reflection.TypeInfo> objet qui représente un entier retour `true` , car <xref:System.Reflection.TypeInfo> est dérivée de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-358">The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.</span></span>  
  
-   <span data-ttu-id="c5b52-359">La comparaison d’un <xref:System.Type> objet qui représente un <xref:System.Collections.Generic.IList%601> objet (un type générique ouvert) avec un `List(Of String)` objet (un type générique fermé) retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-359">The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : Type -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="c5b52-360">Objet dont le type de système sous-jacent doit être comparé au type de système sous-jacent du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-360">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-361">Détermine si le type de système sous-jacent du <see cref="T:System.Type" /> actuel est identique au type de système sous-jacent du <see cref="T:System.Type" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-361">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-362">
            <see langword="true" /> si le type de système sous-jacent de <paramref name="o" /> est identique au type de système sous-jacent du <see cref="T:System.Type" /> en cours ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-362">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c5b52-363">L’exemple suivant utilise `Equals` pour comparer deux types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-363">The following example uses `Equals` to compare two types.</span></span>  
  
 [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]
 [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterAttribute As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterAttribute;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterAttribute : System.Reflection.MemberFilter" Usage="System.Type.FilterAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-364">Représente le filtre de membres utilisé avec les attributs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-364">Represents the member filter used on attributes.</span>
          </span>
          <span data-ttu-id="c5b52-365">Ce champ est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-365">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-366">Ce champ conserve une référence au délégué utilisé par le <xref:System.Type.FindMembers%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-366">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="c5b52-367">La méthode encapsulée par ce délégué prend deux paramètres : le premier est un <xref:System.Reflection.MemberInfo> objet et le second est un `Object`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-367">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="c5b52-368">La méthode détermine si le `MemberInfo` objet correspond aux critères spécifiés par le `Object`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-368">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="c5b52-369">Le `Object` peut avoir la valeur de l’un des champs sur les classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, ou <xref:System.Reflection.MethodImplAttributes>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-369">The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.</span></span>  
  
 <span data-ttu-id="c5b52-370">Par exemple, le `Object` peut avoir la valeur d’un champ de `FieldAttributes` comme Public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-370">For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public.</span></span> <span data-ttu-id="c5b52-371">Dans ce cas, lorsque le `FilterAttribute` délégué est appelé, elle retournera `true` uniquement si la méthode représentée par le `MemberInfo` objet est décoré avec l’attribut de champ public dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-371">In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-372">L’exemple suivant obtient le `FilterAttribute` le délégué, il passe en tant que paramètre à la <xref:System.Type.FindMembers%2A> (méthode) et affiche les membres spécifiés et leurs attributs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-372">The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.</span></span>  
  
 [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]
 [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]
 [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterName As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterName;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterName : System.Reflection.MemberFilter" Usage="System.Type.FilterName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-373">Représente le filtre de membres, avec respect de la casse, utilisé sur les noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-373">Represents the case-sensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="c5b52-374">Ce champ est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-374">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-375">Ce champ conserve une référence au délégué utilisé par le <xref:System.Type.FindMembers%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-375">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="c5b52-376">La méthode encapsulée par ce délégué prend deux paramètres : le premier est un <xref:System.Reflection.MemberInfo> objet et le second est un `Object`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-376">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="c5b52-377">La méthode détermine si le `MemberInfo` objet correspond aux critères spécifiés par le `Object`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-377">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="c5b52-378">Le `Object` est affectée une valeur de chaîne, ce qui peut se terminer par un « \* » caractère générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-378">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="c5b52-379">Seule fin chaîne caractères génériques est prise en charge.</span><span class="sxs-lookup"><span data-stu-id="c5b52-379">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="c5b52-380">Par exemple, le `Object` peut avoir la valeur « Octets \* ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-380">For example, the `Object` may be assigned the value "Byte\*".</span></span> <span data-ttu-id="c5b52-381">Dans ce cas, lorsque le `FilterName` délégué est appelé, elle retournera `true` uniquement si la méthode représentée par le `MemberInfo` objet a un nom qui commence par « Byte ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-381">In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-382">L’exemple de code suivant obtient les méthodes associées défini par l’utilisateur `Application` type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-382">The following code example gets the methods associated with the user-defined `Application` type.</span></span>  
  
 [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterNameIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterNameIgnoreCase;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterNameIgnoreCase : System.Reflection.MemberFilter" Usage="System.Type.FilterNameIgnoreCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-383">Représente le filtre de membres, sans respect de la casse, utilisé sur les noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-383">Represents the case-insensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="c5b52-384">Ce champ est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-384">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-385">Ce champ conserve une référence au délégué utilisé par le <xref:System.Type.FindMembers%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-385">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="c5b52-386">La méthode encapsulée par ce délégué prend deux paramètres : le premier est un <xref:System.Reflection.MemberInfo> objet et le second est un `Object`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-386">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="c5b52-387">La méthode détermine si le `MemberInfo` objet correspond aux critères spécifiés par le `Object`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-387">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="c5b52-388">Le `Object` est affectée une valeur de chaîne, ce qui peut se terminer par un « \* » caractère générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-388">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="c5b52-389">Seule fin chaîne caractères génériques est prise en charge.</span><span class="sxs-lookup"><span data-stu-id="c5b52-389">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="c5b52-390">Par exemple, le `Object` peut avoir la valeur « Octets \* ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-390">For example, the `Object` may be assigned the value "ByTe\*".</span></span> <span data-ttu-id="c5b52-391">Dans ce cas, lorsque le `FilterName` délégué est appelé, il retourne true uniquement si la méthode représentée par le `MemberInfo` objet a un nom qui commence par « byte », indépendamment de la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-391">In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-392">L’exemple suivant obtient le `MemberFilter` le délégué, il passe en tant que paramètre à la <xref:System.Type.FindMembers%2A> (méthode) et affiche les méthodes et leurs attributs de la `String` classe qui commencent par la lettre « c », en ignorant la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-392">The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.</span></span>  
  
 [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]
 [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]
 [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]&#xA;override this.FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="c5b52-393">Délégué qui compare les interfaces à <c>filterCriteria</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-393">The delegate that compares the interfaces against <c>filterCriteria</c>.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="c5b52-394">Critère de recherche qui détermine si une interface doit être incluse dans le tableau retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-394">The search criteria that determines whether an interface should be included in the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-395">Retourne un tableau d'objets <see cref="T:System.Type" /> représentant une liste filtrée d'interfaces implémentées ou héritées par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-395">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-396">Un tableau d'objets <see cref="T:System.Type" /> qui représente une liste filtrée des interfaces implémentées ou héritées par le <see cref="T:System.Type" /> actuel ou un tableau vide de type <see cref="T:System.Type" /> si aucune interface correspondant au filtre n'est implémentée ou héritée par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-396">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-397">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-397">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="c5b52-398">Le <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> et <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> délégués fournie par le <xref:System.Reflection.Module?displayProperty=nameWithType> classe peut également être utilisée, à la place du <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> déléguer.</span><span class="sxs-lookup"><span data-stu-id="c5b52-398">The <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegates supplied by the <xref:System.Reflection.Module?displayProperty=nameWithType> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegate.</span></span>  
  
 <span data-ttu-id="c5b52-399">Toutes les interfaces implémentées par cette classe sont considérés comme lors de la recherche, si déclaré par une classe de base ou de cette classe lui-même.</span><span class="sxs-lookup"><span data-stu-id="c5b52-399">All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.</span></span>  
  
 <span data-ttu-id="c5b52-400">Cette méthode recherche dans la hiérarchie de classe de base, retournant chacune des interfaces correspondantes de chaque classe implémente, ainsi que toutes les correspondances des interfaces chacun de ces implémente les interfaces (autrement dit, la fermeture transitive des interfaces correspondantes est retournée).</span><span class="sxs-lookup"><span data-stu-id="c5b52-400">This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned).</span></span> <span data-ttu-id="c5b52-401">Aucune interface en double n’est retournés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-401">No duplicate interfaces are returned.</span></span>  
  
 <span data-ttu-id="c5b52-402">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, <xref:System.Type.FindInterfaces%2A> recherche toutes les interfaces déclarées dans les contraintes sur le paramètre de type, et toutes les interfaces héritent via les interfaces déclarées dans les contraintes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-402">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints.</span></span> <span data-ttu-id="c5b52-403">Si actuel <xref:System.Type> représente un argument de type d’un type générique, <xref:System.Type.FindInterfaces%2A> recherche toutes les interfaces implémentées par le type, s’ils correspondent aux contraintes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-403">If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-404"><xref:System.Type.FindInterfaces%2A> peut retourner des interfaces génériques, même sur des types qui ne sont pas génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-404"><xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic.</span></span> <span data-ttu-id="c5b52-405">Par exemple, un type non générique peut implémenter `IEnumerable<int>` (`IEnumerable(Of Integer)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-405">For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-406">L’exemple suivant recherche l’interface spécifiée implémentée ou héritée par le type spécifié, puis affiche les noms d’interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-406">The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.</span></span>  
  
 [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]
 [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]
 [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-407">
            <paramref name="filter" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-407">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-408">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-408">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.Module" />
        <altmember cref="T:System.Reflection.TypeFilter" />
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.GetInterfaces" />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]&#xA;override this.FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">
          <span data-ttu-id="c5b52-409">Objet qui indique le type du membre à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-409">An object that indicates the type of member to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-410">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-410">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-411">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-411">-or-</span>
          </span>
          <span data-ttu-id="c5b52-412">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-412">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="c5b52-413">Délégué qui effectue les comparaisons, retournant <see langword="true" /> si le membre en cours d’examen correspond à <c>filterCriteria</c> et <see langword="false" /> dans le cas contraire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-413">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <c>filterCriteria</c> and <see langword="false" /> otherwise.</span>
          </span>
          <span data-ttu-id="c5b52-414">Vous pouvez utiliser les délégués <see langword="FilterAttribute" />, <see langword="FilterName" /> et <see langword="FilterNameIgnoreCase" /> fournis par cette classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-414">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          </span>
          <span data-ttu-id="c5b52-415">Le premier délégué utilise les champs de <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> et <see langword="MethodImplAttributes" /> comme critère de recherche et les deux autres utilisent les objets <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-415">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="c5b52-416">Critère de recherche qui détermine si un membre est retourné dans le tableau d'objets <see langword="MemberInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-416">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          </span>
          <span data-ttu-id="c5b52-417">Les champs de <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> et <see langword="MethodImplAttributes" /> peuvent être utilisés conjointement au délégué <see langword="FilterAttribute" /> fourni par cette classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-417">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-418">Retourne un tableau filtré d'objets <see cref="T:System.Reflection.MemberInfo" /> du type du membre spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-418">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-419">Tableau filtré d'objets <see cref="T:System.Reflection.MemberInfo" /> du type du membre spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-419">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
          <span data-ttu-id="c5b52-420">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-420">-or-</span>
          </span>
          <span data-ttu-id="c5b52-421">Tableau vide de type <see cref="T:System.Reflection.MemberInfo" />, si le <see cref="T:System.Type" /> actuel n'a pas de membres de type <paramref name="memberType" /> qui correspondent aux critères de filtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-421">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-422">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-422">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="c5b52-423">Comprendre les propriétés, méthodes, champs, événements et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-423">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="c5b52-424">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les membres à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-424">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-425">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-425">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-426">Spécifiez `BindingFlags.Instance` pour inclure les membres d’instance dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-426">Specify `BindingFlags.Instance` to include instance members in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-427">Spécifiez `BindingFlags.Static` pour inclure les membres statiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-427">Specify `BindingFlags.Static` to include static members in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-428">Spécifiez `BindingFlags.Public` pour inclure les membres publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-428">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-429">Spécifiez `BindingFlags.NonPublic` pour inclure les membres non publics (autrement dit, les membres privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-429">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
 <span data-ttu-id="c5b52-430">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-430">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-431">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les membres déclarés sur le <xref:System.Type>, pas les membres qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-431">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-432">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-432">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-433">Les valeurs valides pour <xref:System.Type.MemberType%2A> sont définis dans <xref:System.Reflection.MemberInfo>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-433">Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>.</span></span> <span data-ttu-id="c5b52-434">Si aucun membre n’est trouvé, un tableau vide est retourné.</span><span class="sxs-lookup"><span data-stu-id="c5b52-434">If no such members are found, an empty array is returned.</span></span>  
  
 <span data-ttu-id="c5b52-435">Pour obtenir l’initialiseur de classe (.cctor) à l’aide de cette méthode, vous devez spécifier <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-435">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-436">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-436">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-437">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique ou une méthode générique, <xref:System.Type.FindMembers%2A> traite tous les membres déclarés par la contrainte de classe et les contraintes d’interface du paramètre de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-437">If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-438">L’exemple suivant recherche tous les membres dans une classe qui correspondent aux critères de recherche spécifiés, puis affiche les membres correspondants.</span><span class="sxs-lookup"><span data-stu-id="c5b52-438">The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.</span></span>  
  
 [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]
 [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]
 [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-439">
            <paramref name="filter" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-439">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Type.FullName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-440">Obtient le nom qualifié complet du type, y compris son espace de noms, mais pas l'assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-440">Gets the fully qualified name of the type, including its namespace but not its assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-441">Nom qualifié complet du type, y compris son espace de noms, mais sans l'assembly ; ou <see langword="null" /> si l'instance actuelle représente un paramètre de type générique, un type de tableau, un type pointeur, un type <see langword="byref" /> reposant sur un paramètre de type ou un type générique qui n'est pas une définition de type générique mais contient des paramètres de type non résolus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-441">The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-442">Par exemple, le nom qualifié complet de le <xref:System.String> est de type `System.String`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-442">For example, the fully qualified name of the <xref:System.String> type is `System.String`.</span></span> <span data-ttu-id="c5b52-443">Comparez ceci avec le nom qualifié d’assembly retourné par la <xref:System.Type.AssemblyQualifiedName%2A> propriété constitué du nom complet et le nom complet de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-443">Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.</span></span>  
  
 <span data-ttu-id="c5b52-444">Si le type actuel représente un type générique fermé, les arguments de type dans la chaîne retournée par la <xref:System.Type.FullName%2A> propriété sont qualifiés par leur nom complet de l’assembly, même si la représentation sous forme de chaîne du type générique lui-même n’est pas qualifiée par son intégral nom de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-444">If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A> property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name.</span></span> <span data-ttu-id="c5b52-445">L’exemple suivant illustre la différence dans la propriété FullName de type qui représente la définition de type générique qui représente un type générique fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-445">The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.</span></span>  
  
 [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]
 [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  
  
 <span data-ttu-id="c5b52-446">Cette propriété retourne `null` si :</span><span class="sxs-lookup"><span data-stu-id="c5b52-446">This property returns `null` if:</span></span>  
  
-   <span data-ttu-id="c5b52-447">Actuel <xref:System.Type> objet représente un paramètre de type d’un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-447">The current <xref:System.Type> object represents a type parameter of a generic type.</span></span>  
  
     <span data-ttu-id="c5b52-448">L’exemple suivant récupère le paramètre de type de la <xref:System.Nullable%601> type et tente d’afficher son <xref:System.Type.FullName%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-448">The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.</span></span>  
  
     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]
     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  
  
-   <span data-ttu-id="c5b52-449">Actuel <xref:System.Type> objet représente un type de tableau, un type pointeur, ou un `byref` type qui est basé sur un paramètre de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-449">The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.</span></span>  
  
     <span data-ttu-id="c5b52-450">L’exemple suivant définit un type générique, `Generictype1<T>`, avec trois méthodes : `Display(T[])`, qui est transmis à un tableau de type T ; `HandleT(T)`, qui est transmis à un objet T ; et `ChangeValue(ref T)`, un objet de T qui est passé par référence.</span><span class="sxs-lookup"><span data-stu-id="c5b52-450">The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference.</span></span> <span data-ttu-id="c5b52-451">Étant donné que c# et Visual Basic ne permettent pas nous pouvons T en tant que pointeur dans la `HandleT` (méthode), nous devons appeler le <xref:System.Type.MakePointerType%2A> méthode sur le <xref:System.Type> objet qui représente le type de paramètre pour créer un pointeur vers un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-451">Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type.</span></span> <span data-ttu-id="c5b52-452">La sortie de l’exemple montre que dans les trois cas, le <xref:System.Type.FullName%2A> propriété est `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-452">The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]
     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  
  
-   <span data-ttu-id="c5b52-453">Le type actuel contient des paramètres de type générique qui n’ont pas été remplacés par des types spécifiques (autrement dit, le <xref:System.Type.ContainsGenericParameters%2A> retourne de la propriété `true`), mais le type n’est pas une définition de type générique (autrement dit, le <xref:System.Type.IsGenericTypeDefinition%2A> retourne de propriété `false`</span><span class="sxs-lookup"><span data-stu-id="c5b52-453">The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`</span></span>  
  
     <span data-ttu-id="c5b52-454">Dans l’exemple suivant, `Derived<T>` hérite `Base<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-454">In the following example, `Derived<T>` inherits from `Base<T>`.</span></span> <span data-ttu-id="c5b52-455">Le <xref:System.Type.BaseType%2A> propriété obtient le <xref:System.Type> objet qui représente le type de base de `Derived<T>`et son <xref:System.Type.FullName%2A> retourne de la propriété `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-455">The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]
     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  
  
     <span data-ttu-id="c5b52-456">Pour obtenir un <xref:System.Type.FullName%2A> qui n’est pas `null`, vous pouvez utiliser la <xref:System.Type.GetGenericTypeDefinition%2A> méthode pour obtenir la définition de type générique, comme l’illustre l’exemple.</span><span class="sxs-lookup"><span data-stu-id="c5b52-456">To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.</span></span>  
  
 <span data-ttu-id="c5b52-457">Cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="c5b52-457">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-458">L’exemple suivant affiche le nom complet du type spécifié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-458">The following example displays the full name of the specified type.</span></span>  
  
 [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]
 [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]
 [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  
  
 <span data-ttu-id="c5b52-459">L’exemple suivant compare les chaînes retournées par la <xref:System.Type.ToString%2A> (méthode) et le `Name`, <xref:System.Type.FullName%2A>, et <xref:System.Type.AssemblyQualifiedName%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-459">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="c5b52-460">Spécification des noms de types qualifiés complets</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-460">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterAttributes : System.Reflection.GenericParameterAttributes" Usage="System.Type.GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-461">Obtient une combinaison d'indicateurs <see cref="T:System.Reflection.GenericParameterAttributes" /> qui décrivent la covariance et des contraintes spéciales du paramètre de type générique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-461">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-462">Combinaison d'opérations de bits de valeurs <see cref="T:System.Reflection.GenericParameterAttributes" /> qui décrit la covariance et les contraintes spéciales du paramètre de type générique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-462">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-463">La valeur de cette propriété contient des indicateurs qui décrivent si le paramètre de type générique actuel est covariant et les indicateurs qui décrivent toutes les contraintes spéciales.</span><span class="sxs-lookup"><span data-stu-id="c5b52-463">The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints.</span></span> <span data-ttu-id="c5b52-464">Utiliser le <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> pour sélectionner les indicateurs de covariance et utilisez le <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> valeur pour sélectionner les indicateurs de contrainte.</span><span class="sxs-lookup"><span data-stu-id="c5b52-464">Use the <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> value to select the constraint flags.</span></span>  
  
 <span data-ttu-id="c5b52-465">Pour obtenir la liste des conditions indifférentes pour les termes utilisés dans la réflexion générique, consultez les notes sur la propriété <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-465">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-466">L’exemple de code suivant définit un type générique `Test` avec deux paramètres de type qui possèdent des contraintes différentes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-466">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="c5b52-467">Lorsque le programme s’exécute, les contraintes sont examinées à l’aide de la <xref:System.Type.GenericParameterAttributes%2A> propriété et la <xref:System.Type.GetGenericParameterConstraints%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-467">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-468">L'objet <see cref="T:System.Type" /> actuel n'est pas un paramètre de type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-468">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="c5b52-469">Autrement dit, la propriété <see cref="P:System.Type.IsGenericParameter" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-469">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-470">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-470">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-471">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-471">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-472">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-472">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterPosition : int" Usage="System.Type.GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-473">Obtient la position du paramètre de type dans la liste des paramètres de type du type générique ou de la méthode qui a déclaré le paramètre, quand l'objet <see cref="T:System.Type" /> représente un paramètre de type d'un type générique ou une méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-473">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-474">Position d’un paramètre de type dans la liste des paramètres de type du type générique ou de la méthode qui a défini le paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-474">The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.</span>
          </span>
          <span data-ttu-id="c5b52-475">La numérotation des positions commence à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-475">Position numbers begin at 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-476">Le <xref:System.Type.GenericParameterPosition%2A> propriété retourne la position d’un paramètre de type dans la liste des paramètres de la définition de type générique ou de la définition de méthode générique où le paramètre de type a été initialement défini.</span><span class="sxs-lookup"><span data-stu-id="c5b52-476">The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined.</span></span> <span data-ttu-id="c5b52-477">Le <xref:System.Type.DeclaringType%2A> et <xref:System.Type.DeclaringMethod%2A> propriétés identifient la définition de type ou de méthode générique :</span><span class="sxs-lookup"><span data-stu-id="c5b52-477">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:</span></span>  
  
-   <span data-ttu-id="c5b52-478">Si le <xref:System.Type.DeclaringMethod%2A> propriété retourne un <xref:System.Reflection.MethodInfo>, qui <xref:System.Reflection.MethodInfo> représente une définition de méthode générique et en cours <xref:System.Type> objet représente un paramètre de type de cette définition de méthode générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-478">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="c5b52-479">Si le <xref:System.Type.DeclaringMethod%2A> retourne de la propriété `null`, puis le <xref:System.Type.DeclaringType%2A> propriété retourne toujours un <xref:System.Type> objet représentant une définition de type générique et en cours <xref:System.Type> objet représente un paramètre de type de ce type générique définition.</span><span class="sxs-lookup"><span data-stu-id="c5b52-479">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
 <span data-ttu-id="c5b52-480">Pour fournir le contexte correct pour la valeur de la <xref:System.Type.GenericParameterPosition%2A> propriété, il est nécessaire identifier le type générique ou la méthode un paramètre de type appartient.</span><span class="sxs-lookup"><span data-stu-id="c5b52-480">To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to.</span></span> <span data-ttu-id="c5b52-481">Par exemple, considérez la valeur de retour de la méthode générique `GetSomething` dans le code suivant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-481">For example, consider the return value of the generic method `GetSomething` in the following code:</span></span>  
  
 [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]
 [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  
  
 <span data-ttu-id="c5b52-482">Le type retourné par `GetSomething` varie selon les arguments de type fournis à la classe `A` et `GetSomething` lui-même.</span><span class="sxs-lookup"><span data-stu-id="c5b52-482">The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself.</span></span> <span data-ttu-id="c5b52-483">Vous pouvez obtenir un <xref:System.Reflection.MethodInfo> pour `GetSomething`, et à partir de là, vous pouvez obtenir le type de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-483">You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type.</span></span> <span data-ttu-id="c5b52-484">Lorsque vous examinez les paramètres de type du type de retour, <xref:System.Type.GenericParameterPosition%2A> retourne 0 pour les deux.</span><span class="sxs-lookup"><span data-stu-id="c5b52-484">When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both.</span></span> <span data-ttu-id="c5b52-485">La position de `V` est 0 car `V` est le premier paramètre de type dans la liste de paramètres de type pour la classe `A`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-485">The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`.</span></span> <span data-ttu-id="c5b52-486">La position de `X` est 0 car `X` est le premier paramètre de type dans la liste de paramètres de type `GetSomething`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-486">The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-487">Appel de la <xref:System.Type.GenericParameterPosition%2A> propriété provoque une exception si actuel <xref:System.Type> ne représente pas un paramètre de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-487">Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter.</span></span> <span data-ttu-id="c5b52-488">Lorsque vous examinez les arguments de type d’un type construit ouvert, utilisez la <xref:System.Type.IsGenericParameter%2A> propriété pour indiquer à qui sont des paramètres de type et les types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-488">When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types.</span></span> <span data-ttu-id="c5b52-489">Le <xref:System.Type.IsGenericParameter%2A> retourne de la propriété `true` pour un paramètre de type ; vous pouvez ensuite utiliser le <xref:System.Type.GenericParameterPosition%2A> méthode permet d’obtenir sa position et la <xref:System.Type.DeclaringMethod%2A> et <xref:System.Type.DeclaringType%2A> propriétés pour déterminer la méthode générique ou de définition qui le définit de type .</span><span class="sxs-lookup"><span data-stu-id="c5b52-489">The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-490">L’exemple suivant définit une classe générique avec deux paramètres de type et une deuxième classe générique qui dérive de la première classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-490">The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="c5b52-491">Classe de base de la classe dérivée a deux arguments de type : le premier est <xref:System.Int32>, et le second est un paramètre de type du type dérivé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-491">The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="c5b52-492">L’exemple affiche des informations sur ces classes génériques, y compris les positions rapportées par le <xref:System.Type.GenericParameterPosition%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-492">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-493">Le type actuel ne représente pas un paramètre de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-493">The current type does not represent a type parameter.</span>
          </span>
          <span data-ttu-id="c5b52-494">Autrement dit, <see cref="P:System.Type.IsGenericParameter" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-494">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-495">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-495">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-496">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-496">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericTypeArguments : Type[]" Usage="System.Type.GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-497">Obtient un tableau des arguments de type générique pour ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-497">Gets an array of the generic type arguments for this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-498">Tableau des arguments de type générique pour ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-498">An array of the generic type arguments for this type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-499">Cette propriété obtient uniquement les arguments de type générique ; Autrement dit, les types qui ont été spécifiées pour les paramètres de type générique du type actuel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-499">This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type.</span></span> <span data-ttu-id="c5b52-500">Si le type actuel est une définition de type générique, cette propriété retourne un tableau vide.</span><span class="sxs-lookup"><span data-stu-id="c5b52-500">If the current type is a generic type definition, this property returns an empty array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-501">Si un type générique est utilisé dans une méthode générique ou dans un autre type générique, certaines de ses arguments de type générique peuvent être des paramètres de type générique de la méthode ou le type englobant.</span><span class="sxs-lookup"><span data-stu-id="c5b52-501">If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.</span></span>  
  
 <span data-ttu-id="c5b52-502">Pour obtenir les paramètres de type générique d’un type qui représente une définition de type générique, utilisez le <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-502">To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c5b52-503">Pour obtenir un <xref:System.Reflection.TypeInfo> objet actif <xref:System.Type> de l’objet, utilisez le <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> méthode d’extension.</span><span class="sxs-lookup"><span data-stu-id="c5b52-503">To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> extension method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int&#xA;override this.GetArrayRank : unit -&gt; int" Usage="type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetArrayRank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-504">Obtient le nombre de dimensions dans un tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-504">Gets the number of dimensions in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-505">Entier comportant le nombre de dimensions figurant dans le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-505">An integer that contains the number of dimensions in the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c5b52-506">L’exemple suivant affiche le nombre de dimensions dans un tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-506">The following example displays the number of dimensions in an array.</span></span>  
  
 [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]
 [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]
 [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-507">La fonctionnalité de cette méthode n’est pas prise en charge dans la classe de base et doit être implémentée dans une classe dérivée à la place.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-507">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-508">Le type actuel n’est pas un tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-508">The current type is not an array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="type.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-509">En cas de substitution dans une classe dérivée, implémente la propriété <see cref="P:System.Type.Attributes" /> et obtient un masque de bits indiquant les attributs associés à <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-509">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-510">Objet <see cref="T:System.Reflection.TypeAttributes" /> qui représente l'ensemble des attributs de <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-510">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.Attributes" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-511">Obtient un constructeur spécifique du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-511">Gets a specific constructor of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="c5b52-512">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres du constructeur souhaité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-512">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          </span>
          <span data-ttu-id="c5b52-513">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-513">-or-</span>
          </span>
          <span data-ttu-id="c5b52-514">Tableau vide d'objets <see cref="T:System.Type" /> pour obtenir un constructeur n'acceptant aucun paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-514">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="c5b52-515">Un tel tableau vide est fourni par le champ <see langword="static" /><see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-515">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-516">Recherche un constructeur d'instance public dont les paramètres correspondent aux types contenus dans le tableau spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-516">Searches for a public instance constructor whose parameters match the types in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-517">Objet représentant le constructeur d'instance public dont les paramètres correspondent aux types contenus dans le tableau de types de paramètres, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-517">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-518">Cette surcharge de méthode recherche des constructeurs d’instance publics et ne peut pas être utilisée pour obtenir un initialiseur de classe (.cctor).</span><span class="sxs-lookup"><span data-stu-id="c5b52-518">This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor).</span></span> <span data-ttu-id="c5b52-519">Pour obtenir un initialiseur de classe, utilisez une surcharge qui accepte <xref:System.Reflection.BindingFlags>et spécifiez <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-519">To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-520">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-520">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-521">Si le constructeur demandé est non public, cette méthode retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-521">If the requested constructor is non-public, this method returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-522">Vous ne pouvez pas omettre les paramètres lors de la recherche les constructeurs et méthodes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-522">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="c5b52-523">Vous pouvez omettre les paramètres uniquement lors de l’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-523">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="c5b52-524">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.ConstructorInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-524">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="c5b52-525">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode retourne toujours `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-525">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-526">L’exemple suivant obtient le type de `MyClass`, obtient le <xref:System.Reflection.ConstructorInfo> de l’objet et affiche la signature du constructeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-526">The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]
 [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]
 [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-527">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-527">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-528">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-528">-or-</span>
          </span>
          <span data-ttu-id="c5b52-529">Un des éléments de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-529">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-530">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-530">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-531">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-531">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-532">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-532">-or-</span>
          </span>
          <span data-ttu-id="c5b52-533">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-533">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-534">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-534">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-535">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-535">-or-</span>
          </span>
          <span data-ttu-id="c5b52-536">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-536">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-537">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres du constructeur à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-537">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="c5b52-538">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-538">-or-</span>
          </span>
          <span data-ttu-id="c5b52-539">Tableau vide de type <see cref="T:System.Type" /> (c'est-à-dire Type[] types = new Type[0]) pour obtenir un constructeur qui ne prend aucun paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-539">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="c5b52-540">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-540">-or-</span>
          </span>
          <span data-ttu-id="c5b52-541">
            <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-541">
              <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-542">Tableau d'objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l'élément correspondant dans le tableau de types de paramètres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-542">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          </span>
          <span data-ttu-id="c5b52-543">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-543">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-544">Recherche un constructeur dont les paramètres correspondent aux types d’arguments et modificateurs spécifiés, à l’aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-544">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-545">Objet <see cref="T:System.Reflection.ConstructorInfo" /> qui représente le constructeur correspondant aux critères spécifiés, s'il existe ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-545">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-546">Si une correspondance exacte n’existe pas, le `binder` va tenter de forcer les types de paramètre spécifiés dans le `types` tableau afin de sélectionner une correspondance.</span><span class="sxs-lookup"><span data-stu-id="c5b52-546">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="c5b52-547">Si le `binder` ne parvient pas à sélectionner une correspondance, puis `null` est retourné.</span><span class="sxs-lookup"><span data-stu-id="c5b52-547">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="c5b52-548">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les constructeurs à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-548">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-549">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-549">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-550">Spécifiez `BindingFlags.Public` pour inclure les constructeurs publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-550">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-551">Spécifiez `BindingFlags.NonPublic` pour inclure des constructeurs non publics (autrement dit, les constructeurs privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-551">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="c5b52-552">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-552">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-553">Pour obtenir l’initialiseur de classe (.cctor) à l’aide de cette surcharge de méthode, vous devez spécifier <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-553">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-554">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-554">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-555">Vous ne pouvez pas omettre les paramètres lors de la recherche les constructeurs et méthodes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-555">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="c5b52-556">Vous pouvez omettre les paramètres uniquement lors de l’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-556">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="c5b52-557">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.ConstructorInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-557">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="c5b52-558">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode retourne toujours `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-558">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-559">Le programme suivant obtient le type de `MyClass1` classe, obtient le <xref:System.Reflection.ConstructorInfo> de l’objet correspondant aux indicateurs de liaison spécifiées et affiche la signature du constructeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-559">The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.</span></span>  
  
 [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]
 [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]
 [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-560">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-560">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-561">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-561">-or-</span>
          </span>
          <span data-ttu-id="c5b52-562">Un des éléments de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-562">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-563">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-563">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-564">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-564">-or-</span>
          </span>
          <span data-ttu-id="c5b52-565">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-565">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-566">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-566">-or-</span>
          </span>
          <span data-ttu-id="c5b52-567">
            <paramref name="types" /> et <paramref name="modifiers" /> n’ont pas la même longueur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-567">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-568">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-568">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-569">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-569">-or-</span>
          </span>
          <span data-ttu-id="c5b52-570">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-570">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-571">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-571">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-572">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-572">-or-</span>
          </span>
          <span data-ttu-id="c5b52-573">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-573">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="c5b52-574">Objet qui spécifie l’ensemble de règles à utiliser en ce qui concerne l’ordre et la disposition des arguments, la manière dont la valeur de retour est passée, les registres utilisés pour les arguments et la manière dont la pile est nettoyée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-574">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-575">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres du constructeur à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-575">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="c5b52-576">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-576">-or-</span>
          </span>
          <span data-ttu-id="c5b52-577">Tableau vide de type <see cref="T:System.Type" /> (c'est-à-dire Type[] types = new Type[0]) pour obtenir un constructeur qui ne prend aucun paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-577">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-578">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-578">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-579">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-579">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-580">Recherche un constructeur dont les paramètres correspondent aux types d’arguments et aux modificateurs spécifiés, en utilisant les contraintes de liaison et la convention d’appel indiquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-580">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-581">Objet représentant le constructeur qui correspond aux critères spécifiés, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-581">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-582">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> (le `modifiers` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-582">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="c5b52-583">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-583">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-584">Si une correspondance exacte n’existe pas, le `binder` va tenter de forcer les types de paramètre spécifiés dans le `types` tableau afin de sélectionner une correspondance.</span><span class="sxs-lookup"><span data-stu-id="c5b52-584">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="c5b52-585">Si le `binder` ne parvient pas à sélectionner une correspondance, puis `null` est retourné.</span><span class="sxs-lookup"><span data-stu-id="c5b52-585">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="c5b52-586">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les constructeurs à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-586">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-587">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-587">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-588">Spécifiez `BindingFlags.Public` pour inclure les constructeurs publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-588">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-589">Spécifiez `BindingFlags.NonPublic` pour inclure des constructeurs non publics (autrement dit, les constructeurs privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-589">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="c5b52-590">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-590">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-591">Pour obtenir l’initialiseur de classe (.cctor) à l’aide de cette méthode, vous devez spécifier <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-591">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-592">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-592">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-593">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-593">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-594">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-594">Member Type</span></span>|<span data-ttu-id="c5b52-595">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-595">Static</span></span>|<span data-ttu-id="c5b52-596">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-596">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-597">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-597">Constructor</span></span>|<span data-ttu-id="c5b52-598">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-598">No</span></span>|<span data-ttu-id="c5b52-599">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-599">No</span></span>|  
|<span data-ttu-id="c5b52-600">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-600">Field</span></span>|<span data-ttu-id="c5b52-601">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-601">No</span></span>|<span data-ttu-id="c5b52-602">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-602">Yes.</span></span> <span data-ttu-id="c5b52-603">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-603">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-604">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-604">Event</span></span>|<span data-ttu-id="c5b52-605">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-605">Not applicable</span></span>|<span data-ttu-id="c5b52-606">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-606">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-607">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-607">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-608">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-608">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-609">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-609">Method</span></span>|<span data-ttu-id="c5b52-610">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-610">No</span></span>|<span data-ttu-id="c5b52-611">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-611">Yes.</span></span> <span data-ttu-id="c5b52-612">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-612">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-613">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-613">Nested Type</span></span>|<span data-ttu-id="c5b52-614">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-614">No</span></span>|<span data-ttu-id="c5b52-615">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-615">No</span></span>|  
|<span data-ttu-id="c5b52-616">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-616">Property</span></span>|<span data-ttu-id="c5b52-617">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-617">Not applicable</span></span>|<span data-ttu-id="c5b52-618">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-618">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-619">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-619">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-620">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-620">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-621">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-621">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-622">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-622">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-623">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-623">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-624">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-624">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-625">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-625">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-626">Vous ne pouvez pas omettre les paramètres lors de la recherche les constructeurs et méthodes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-626">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="c5b52-627">Vous pouvez omettre les paramètres uniquement lors de l’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-627">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="c5b52-628">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.ConstructorInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-628">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="c5b52-629">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode retourne toujours `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-629">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-630">L’exemple suivant obtient le type de `MyClass1`, obtient le <xref:System.Reflection.ConstructorInfo> objet qui correspond aux indicateurs de liaison spécifiés et affiche la signature du constructeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-630">The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-631">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-631">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-632">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-632">-or-</span>
          </span>
          <span data-ttu-id="c5b52-633">Un des éléments de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-633">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-634">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-634">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-635">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-635">-or-</span>
          </span>
          <span data-ttu-id="c5b52-636">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-636">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-637">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-637">-or-</span>
          </span>
          <span data-ttu-id="c5b52-638">
            <paramref name="types" /> et <paramref name="modifiers" /> n’ont pas la même longueur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-638">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-639">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-639">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-640">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-640">-or-</span>
          </span>
          <span data-ttu-id="c5b52-641">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-641">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-642">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-642">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-643">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-643">-or-</span>
          </span>
          <span data-ttu-id="c5b52-644">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-644">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="c5b52-645">Objet qui spécifie l’ensemble de règles à utiliser en ce qui concerne l’ordre et la disposition des arguments, la manière dont la valeur de retour est passée, les registres utilisés pour les arguments et la manière dont la pile est nettoyée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-645">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-646">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres du constructeur à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-646">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="c5b52-647">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-647">-or-</span>
          </span>
          <span data-ttu-id="c5b52-648">Tableau vide de type <see cref="T:System.Type" /> (c'est-à-dire Type[] types = new Type[0]) pour obtenir un constructeur qui ne prend aucun paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-648">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-649">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-649">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-650">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-650">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-651">En cas de substitution dans une classe dérivée, recherche un constructeur dont les paramètres correspondent aux types d’arguments et modificateurs spécifiés, à l’aide des contraintes de liaison et de la convention d’appel spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-651">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-652">Objet <see cref="T:System.Reflection.ConstructorInfo" /> qui représente le constructeur correspondant aux critères spécifiés, s'il existe ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-652">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-653">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> (le `modifiers` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-653">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="c5b52-654">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-654">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-655">Si une correspondance exacte n’existe pas, le `binder` va tenter de forcer les types de paramètre spécifiés dans le `types` tableau afin de sélectionner une correspondance.</span><span class="sxs-lookup"><span data-stu-id="c5b52-655">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="c5b52-656">Si le `binder` ne parvient pas à sélectionner une correspondance, puis `null` est retourné.</span><span class="sxs-lookup"><span data-stu-id="c5b52-656">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="c5b52-657">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les constructeurs à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-657">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-658">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-658">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-659">Spécifiez `BindingFlags.Public` pour inclure les constructeurs publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-659">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-660">Spécifiez `BindingFlags.NonPublic` pour inclure des constructeurs non publics (autrement dit, les constructeurs privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-660">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="c5b52-661">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-661">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-662">Cette méthode implémente <xref:System.Type.GetConstructor%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-662">This method implements <xref:System.Type.GetConstructor%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-663">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-663">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-664">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-664">-or-</span>
          </span>
          <span data-ttu-id="c5b52-665">Un des éléments de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-665">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-666">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-666">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-667">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-667">-or-</span>
          </span>
          <span data-ttu-id="c5b52-668">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-668">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-669">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-669">-or-</span>
          </span>
          <span data-ttu-id="c5b52-670">
            <paramref name="types" /> et <paramref name="modifiers" /> n’ont pas la même longueur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-670">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-671">Le type actuel est un <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou un <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-671">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-672">Obtient les constructeurs du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-672">Gets the constructors of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]&#xA;override this.GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-673">Retourne tous les constructeurs publics définis pour le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-673">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-674">Tableau d'objets <see cref="T:System.Reflection.ConstructorInfo" /> représentant tous les constructeurs d'instance publics définis pour le <see cref="T:System.Type" /> actuel, sans inclure l'initialiseur de type (constructeur statique).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-674">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          </span>
          <span data-ttu-id="c5b52-675">Si aucun constructeur d'instance public n'est défini pour le <see cref="T:System.Type" /> actuel ou si le <see cref="T:System.Type" /> actuel représente un paramètre de type d'une définition de type ou de méthode générique, un tableau vide de type <see cref="T:System.Reflection.ConstructorInfo" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-675">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-676">Le <xref:System.Type.GetConstructors%2A> méthode ne retourne pas les constructeurs dans un ordre particulier, comme l’ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-676">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="c5b52-677">Votre code ne doit pas dépendent l’ordre dans lequel les constructeurs sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-677">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-678">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-678">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-679">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-679">Member Type</span></span>|<span data-ttu-id="c5b52-680">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-680">Static</span></span>|<span data-ttu-id="c5b52-681">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-681">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-682">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-682">Constructor</span></span>|<span data-ttu-id="c5b52-683">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-683">No</span></span>|<span data-ttu-id="c5b52-684">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-684">No</span></span>|  
|<span data-ttu-id="c5b52-685">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-685">Field</span></span>|<span data-ttu-id="c5b52-686">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-686">No</span></span>|<span data-ttu-id="c5b52-687">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-687">Yes.</span></span> <span data-ttu-id="c5b52-688">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-688">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-689">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-689">Event</span></span>|<span data-ttu-id="c5b52-690">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-690">Not applicable</span></span>|<span data-ttu-id="c5b52-691">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-691">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-692">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-692">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-693">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-693">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-694">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-694">Method</span></span>|<span data-ttu-id="c5b52-695">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-695">No</span></span>|<span data-ttu-id="c5b52-696">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-696">Yes.</span></span> <span data-ttu-id="c5b52-697">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-697">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-698">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-698">Nested Type</span></span>|<span data-ttu-id="c5b52-699">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-699">No</span></span>|<span data-ttu-id="c5b52-700">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-700">No</span></span>|  
|<span data-ttu-id="c5b52-701">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-701">Property</span></span>|<span data-ttu-id="c5b52-702">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-702">Not applicable</span></span>|<span data-ttu-id="c5b52-703">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-703">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-704">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-704">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-705">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-705">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-706">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-706">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-707">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-707">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-708">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-708">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-709">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-709">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-710">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-710">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-711">Cette surcharge de méthode appelle la <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> surcharge de méthode, avec <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-711">This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-712">Elle ne trouvera pas les initialiseurs de classe (.cctor).</span><span class="sxs-lookup"><span data-stu-id="c5b52-712">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="c5b52-713">Pour rechercher des initialiseurs de classe, utilisez une surcharge qui accepte <xref:System.Reflection.BindingFlags>et spécifiez <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-713">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-714">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-714">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-715">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne le <xref:System.Reflection.ConstructorInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-715">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="c5b52-716">Par exemple, si classe `C<T>` a un constructeur `C(T t1)` (`Sub New(ByVal t1 As T)` en Visual Basic), l’appel <xref:System.Type.GetConstructors%2A> sur `C<int>` retourne un <xref:System.Reflection.ConstructorInfo> représentant `C(int t1)` en c# (`Sub New(ByVal t1 As Integer)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-716">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="c5b52-717">Si actuel <xref:System.Type> représente un paramètre de type générique, le <xref:System.Type.GetConstructors%2A> méthode retourne un tableau vide.</span><span class="sxs-lookup"><span data-stu-id="c5b52-717">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-718">Cet exemple montre la sortie de la <xref:System.Type.GetConstructors%2A> surcharger à partir d’une classe qui possède deux constructeurs d’instance et un constructeur statique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-718">This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="c5b52-719">La sortie de ce code est :</span><span class="sxs-lookup"><span data-stu-id="c5b52-719">The output of this code is:</span></span>  
  
 <span data-ttu-id="c5b52-720">2</span><span class="sxs-lookup"><span data-stu-id="c5b52-720">2</span></span>  
  
 <span data-ttu-id="c5b52-721">False</span><span class="sxs-lookup"><span data-stu-id="c5b52-721">False</span></span>  
  
 <span data-ttu-id="c5b52-722">False</span><span class="sxs-lookup"><span data-stu-id="c5b52-722">False</span></span>  
  
 <span data-ttu-id="c5b52-723">Étant donné que le <xref:System.Type.GetConstructors> surcharge utilise uniquement <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> et <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, le constructeur statique n’est ni compté par le `for` expression ni évalué par `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-723">Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="c5b52-724">Pour rechercher des constructeurs statiques, utilisez le <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> surcharge et passez la combinaison (logique `OR`) de <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, comme illustré dans l’exemple de code suivant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-724">To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="c5b52-725">La sortie est maintenant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-725">Now the output is:</span></span>  
  
 <span data-ttu-id="c5b52-726">3</span><span class="sxs-lookup"><span data-stu-id="c5b52-726">3</span></span>  
  
 <span data-ttu-id="c5b52-727">False</span><span class="sxs-lookup"><span data-stu-id="c5b52-727">False</span></span>  
  
 <span data-ttu-id="c5b52-728">True</span><span class="sxs-lookup"><span data-stu-id="c5b52-728">True</span></span>  
  
 <span data-ttu-id="c5b52-729">False</span><span class="sxs-lookup"><span data-stu-id="c5b52-729">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-730">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-730">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-731">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-731">-or-</span>
          </span>
          <span data-ttu-id="c5b52-732">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-732">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-733">En cas de substitution dans une classe dérivée, recherche les constructeurs définis pour le <see cref="T:System.Type" /> actuel, à l'aide du <see langword="BindingFlags" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-733">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-734">Tableau d'objets <see cref="T:System.Reflection.ConstructorInfo" /> représentant tous les constructeurs définis pour le <see cref="T:System.Type" /> actuel qui correspondent aux contraintes de liaison spécifiées, y compris l'initialiseur de type s'il est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-734">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          </span>
          <span data-ttu-id="c5b52-735">Retourne un tableau vide de type <see cref="T:System.Reflection.ConstructorInfo" /> si aucun constructeur n'est défini pour le <see cref="T:System.Type" /> actuel, si aucun des constructeurs définis ne correspond aux contraintes de liaison, ou si le <see cref="T:System.Type" /> actuel représente un paramètre de type d'une définition de type ou de méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-735">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-736">Le <xref:System.Type.GetConstructors%2A> méthode ne retourne pas les constructeurs dans un ordre particulier, comme l’ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-736">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="c5b52-737">Votre code ne doit pas dépendent l’ordre dans lequel les constructeurs sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-737">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-738">`bindingAttr` peut être utilisé pour spécifier s’il faut retourner uniquement les constructeurs publics ou les constructeurs publics et non publics.</span><span class="sxs-lookup"><span data-stu-id="c5b52-738">`bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.</span></span>  
  
 <span data-ttu-id="c5b52-739">Si une correspondance exacte n’existe pas, le `binder` va tenter de forcer les types de paramètre spécifiés dans le `types` tableau afin de sélectionner une correspondance.</span><span class="sxs-lookup"><span data-stu-id="c5b52-739">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="c5b52-740">Si le `binder` ne parvient pas à sélectionner une correspondance, puis `null` est retourné.</span><span class="sxs-lookup"><span data-stu-id="c5b52-740">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="c5b52-741">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les constructeurs à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-741">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-742">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-742">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-743">Spécifiez `BindingFlags.Public` pour inclure les constructeurs publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-743">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-744">Spécifiez `BindingFlags.NonPublic` pour inclure des constructeurs non publics (autrement dit, les constructeurs privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-744">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span> <span data-ttu-id="c5b52-745">Constructeurs de classes de base ne sont pas retournés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-745">Constructors of base classes are not returned.</span></span>  
  
 <span data-ttu-id="c5b52-746">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-746">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-747">Pour obtenir l’initialiseur de classe (.cctor) à l’aide de cette surcharge de méthode, vous devez spécifier <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-747">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-748">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-748">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-749">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne le <xref:System.Reflection.ConstructorInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-749">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="c5b52-750">Par exemple, si classe `C<T>` a un constructeur `C(T t1)` (`Sub New(ByVal t1 As T)` en Visual Basic), l’appel <xref:System.Type.GetConstructors%2A> sur `C<int>` retourne un <xref:System.Reflection.ConstructorInfo> représentant `C(int t1)` en c# (`Sub New(ByVal t1 As Integer)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-750">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="c5b52-751">Si actuel <xref:System.Type> représente un paramètre de type générique, le <xref:System.Type.GetConstructors%2A> méthode retourne un tableau vide.</span><span class="sxs-lookup"><span data-stu-id="c5b52-751">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-752">Cet exemple montre la sortie de la <xref:System.Type.GetConstructors> surcharger à partir d’une classe qui possède deux constructeurs d’instance et un constructeur statique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-752">This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="c5b52-753">La sortie de ce code est :</span><span class="sxs-lookup"><span data-stu-id="c5b52-753">The output of this code is:</span></span>  
  
 <span data-ttu-id="c5b52-754">2</span><span class="sxs-lookup"><span data-stu-id="c5b52-754">2</span></span>  
  
 <span data-ttu-id="c5b52-755">False</span><span class="sxs-lookup"><span data-stu-id="c5b52-755">False</span></span>  
  
 <span data-ttu-id="c5b52-756">False</span><span class="sxs-lookup"><span data-stu-id="c5b52-756">False</span></span>  
  
 <span data-ttu-id="c5b52-757">Étant donné que le <xref:System.Type.GetConstructors%2A> surcharge utilise uniquement <xref:System.Reflection.BindingFlags.Public> et <xref:System.Reflection.BindingFlags.Instance>, le constructeur statique n’est ni compté par le `for` expression ni évalué par `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-757">Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="c5b52-758">Pour rechercher des constructeurs statiques, utilisez le <xref:System.Type.GetConstructors%2A> surcharge et passez la combinaison (OR logique) de <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, comme illustré dans l’exemple de code suivant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-758">To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="c5b52-759">La sortie est maintenant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-759">Now the output is:</span></span>  
  
 <span data-ttu-id="c5b52-760">3</span><span class="sxs-lookup"><span data-stu-id="c5b52-760">3</span></span>  
  
 <span data-ttu-id="c5b52-761">False</span><span class="sxs-lookup"><span data-stu-id="c5b52-761">False</span></span>  
  
 <span data-ttu-id="c5b52-762">True</span><span class="sxs-lookup"><span data-stu-id="c5b52-762">True</span></span>  
  
 <span data-ttu-id="c5b52-763">False</span><span class="sxs-lookup"><span data-stu-id="c5b52-763">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetDefaultMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-764">Recherche les membres définis pour le <see cref="T:System.Type" /> actuel dont le <see cref="T:System.Reflection.DefaultMemberAttribute" /> est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-764">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-765">Tableau d'objets <see cref="T:System.Reflection.MemberInfo" /> représentant tous les membres par défaut du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-765">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-766">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-766">-or-</span>
          </span>
          <span data-ttu-id="c5b52-767">Tableau vide du type <see cref="T:System.Reflection.MemberInfo" /> si le <see cref="T:System.Type" /> actuel n'a pas de membres par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-767">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-768">Le <xref:System.Type.GetDefaultMembers%2A> méthode ne retourne pas les membres dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-768">The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-769">Votre code ne doit pas dépendent l’ordre dans lequel les membres sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-769">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-770">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-770">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="c5b52-771">Comprendre les propriétés, méthodes, champs, événements et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-771">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="c5b52-772">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-772">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-773">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-773">Member Type</span></span>|<span data-ttu-id="c5b52-774">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-774">Static</span></span>|<span data-ttu-id="c5b52-775">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-775">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-776">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-776">Constructor</span></span>|<span data-ttu-id="c5b52-777">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-777">No</span></span>|<span data-ttu-id="c5b52-778">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-778">No</span></span>|  
|<span data-ttu-id="c5b52-779">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-779">Field</span></span>|<span data-ttu-id="c5b52-780">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-780">No</span></span>|<span data-ttu-id="c5b52-781">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-781">Yes.</span></span> <span data-ttu-id="c5b52-782">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-782">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-783">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-783">Event</span></span>|<span data-ttu-id="c5b52-784">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-784">Not applicable</span></span>|<span data-ttu-id="c5b52-785">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-785">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-786">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-786">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-787">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-787">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-788">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-788">Method</span></span>|<span data-ttu-id="c5b52-789">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-789">No</span></span>|<span data-ttu-id="c5b52-790">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-790">Yes.</span></span> <span data-ttu-id="c5b52-791">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-791">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-792">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-792">Nested Type</span></span>|<span data-ttu-id="c5b52-793">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-793">No</span></span>|<span data-ttu-id="c5b52-794">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-794">No</span></span>|  
|<span data-ttu-id="c5b52-795">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-795">Property</span></span>|<span data-ttu-id="c5b52-796">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-796">Not applicable</span></span>|<span data-ttu-id="c5b52-797">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-797">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-798">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-798">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-799">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-799">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-800">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-800">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-801">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-801">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-802">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-802">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-803">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-803">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-804">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-804">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-805">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne le <xref:System.Reflection.MemberInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-805">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="c5b52-806">Par exemple, si classe `C<T>` possède une propriété `P` qui retourne `T`, l’appel <xref:System.Type.GetDefaultMembers%2A> sur `C<int>` retourne `int P` en c# (`Property P As Integer` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-806">For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).</span></span>  
  
 <span data-ttu-id="c5b52-807">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les membres de la contrainte de classe, ou les membres de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-807">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-808">L’exemple suivant obtient les informations de membre par défaut de `MyClass` et affiche les membres par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-808">The following example obtains the default member information of `MyClass` and displays the default members.</span></span>  
  
 [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]
 [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]
 [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.DefaultMemberAttribute" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="type.GetElementType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-809">En cas de substitution dans une classe dérivée, retourne le <see cref="T:System.Type" /> de l'objet englobé ou de l'objet auquel le tableau, pointeur ou type référence actuel fait référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-809">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-810">
            <see cref="T:System.Type" /> de l'objet englobé ou auquel le tableau, pointeur ou type référence actuel fait référence, ou <see langword="null" /> si le <see cref="T:System.Type" /> actuel n'est pas un tableau ou un pointeur, ou n'est pas passé par référence ou représente un type générique ou un paramètre de type dans la définition d'un type ou d'une méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-810">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-811">Cette méthode retourne `null` pour la <xref:System.Array> classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-811">This method returns `null` for the <xref:System.Array> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-812">L’exemple suivant montre comment utiliser le `GetElementType` (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-812">The following example demonstrates using the `GetElementType` method.</span></span>  
  
 [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]
 [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]
 [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumName (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetEnumName(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetEnumName : obj -&gt; string&#xA;override this.GetEnumName : obj -&gt; string" Usage="type.GetEnumName value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="c5b52-813">Valeur dont le nom doit être récupéré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-813">The value whose name is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-814">Retourne le nom de la constante qui a la valeur spécifiée, pour le type énumération actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-814">Returns the name of the constant that has the specified value, for the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-815">Nom du membre du type énumération actuel qui a la valeur spécifiée, ou <see langword="null" /> si une telle constante est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-815">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-816">Le type actuel n’est pas une énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-816">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="c5b52-817">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-817">-or-</span>
          </span>
          <span data-ttu-id="c5b52-818">
            <paramref name="value" /> n'est pas du type actuel et n'a pas le même type sous-jacent que le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-818">
              <paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-819">
            <paramref name="value" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-819">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetEnumNames();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumNames : unit -&gt; string[]&#xA;override this.GetEnumNames : unit -&gt; string[]" Usage="type.GetEnumNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-820">Retourne les noms des membres du type énumération actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-820">Returns the names of the members of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-821">Tableau qui contient les noms des membres de l'énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-821">An array that contains the names of the members of the enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-822">Les éléments du tableau de valeur de retour sont triés par les valeurs binaires (autrement dit, les valeurs non signées) des constantes énumérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-822">The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants.</span></span> <span data-ttu-id="c5b52-823">Si le tableau contient des constantes énumérées avec la même valeur, l’ordre de leurs noms correspondants n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-823">If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-824">Le type actuel n’est pas une énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-824">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetEnumUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumUnderlyingType : unit -&gt; Type&#xA;override this.GetEnumUnderlyingType : unit -&gt; Type" Usage="type.GetEnumUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-825">Retourne le type sous-jacent du type énumération actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-825">Returns the underlying type of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-826">Type sous-jacent de l'énumération actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-826">The underlying type of the current enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-827">Par défaut, le type sous-jacent d’une énumération en c# et Visual Basic est <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-827">By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>.</span></span> <span data-ttu-id="c5b52-828">Autres types d’entiers peuvent être spécifiés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-828">Other integer types can be specified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-829">Le type actuel n’est pas une énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-829">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="c5b52-830">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-830">-or-</span>
          </span>
          <span data-ttu-id="c5b52-831">Le type d’énumération n’est pas valide, car il contient plusieurs champs d’instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-831">The enumeration type is not valid, because it contains more than one instance field.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumValues () As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Array ^ GetEnumValues();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumValues : unit -&gt; Array&#xA;override this.GetEnumValues : unit -&gt; Array" Usage="type.GetEnumValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-832">Retourne un tableau des valeurs des constantes dans le type énumération actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-832">Returns an array of the values of the constants in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-833">Tableau qui contient les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-833">An array that contains the values.</span>
          </span>
          <span data-ttu-id="c5b52-834">Les éléments du tableau sont triés en fonction des valeurs binaires (à savoir les valeurs non signées) des constantes de l'énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-834">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-835">Le type actuel n’est pas une énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-835">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-836">Obtient un événement spécifique déclaré ou hérité par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-836">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo&#xA;override this.GetEvent : string -&gt; System.Reflection.EventInfo" Usage="type.GetEvent name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-837">Chaîne contenant le nom d'un événement déclaré ou hérité par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-837">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-838">Retourne l'objet <see cref="T:System.Reflection.EventInfo" /> représentant l'événement public spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-838">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-839">Objet représentant l'événement public spécifié qui est déclaré ou hérité par le <see cref="T:System.Type" /> actuel, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-839">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-840">Un événement est considérée comme publique à la réflexion s’il comporte au moins une méthode ou accesseurs est public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-840">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="c5b52-841">Sinon, l’événement est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-841">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-842">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-842">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-843">La recherche inclut des événements d’instance publique de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-843">The search includes public static and public instance events.</span></span>  
  
 <span data-ttu-id="c5b52-844">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-844">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-845">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-845">Member Type</span></span>|<span data-ttu-id="c5b52-846">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-846">Static</span></span>|<span data-ttu-id="c5b52-847">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-847">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-848">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-848">Constructor</span></span>|<span data-ttu-id="c5b52-849">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-849">No</span></span>|<span data-ttu-id="c5b52-850">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-850">No</span></span>|  
|<span data-ttu-id="c5b52-851">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-851">Field</span></span>|<span data-ttu-id="c5b52-852">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-852">No</span></span>|<span data-ttu-id="c5b52-853">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-853">Yes.</span></span> <span data-ttu-id="c5b52-854">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-854">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-855">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-855">Event</span></span>|<span data-ttu-id="c5b52-856">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-856">Not applicable</span></span>|<span data-ttu-id="c5b52-857">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-857">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-858">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-858">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-859">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-859">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-860">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-860">Method</span></span>|<span data-ttu-id="c5b52-861">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-861">No</span></span>|<span data-ttu-id="c5b52-862">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-862">Yes.</span></span> <span data-ttu-id="c5b52-863">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-863">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-864">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-864">Nested Type</span></span>|<span data-ttu-id="c5b52-865">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-865">No</span></span>|<span data-ttu-id="c5b52-866">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-866">No</span></span>|  
|<span data-ttu-id="c5b52-867">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-867">Property</span></span>|<span data-ttu-id="c5b52-868">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-868">Not applicable</span></span>|<span data-ttu-id="c5b52-869">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-869">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-870">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-870">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-871">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-871">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-872">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-872">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-873">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-873">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-874">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-874">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-875">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-875">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-876">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-876">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-877">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.EventInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-877">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-878">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les événements de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-878">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-879">L’exemple suivant crée un <xref:System.Reflection.EventInfo> de l’objet et obtient l’événement pour une classe de bouton pour l’événement spécifié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-879">The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.</span></span>  
  
 [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]
 [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]
 [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-880">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-880">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-881">Chaîne contenant le nom d'un événement déclaré ou hérité par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-881">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-882">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-882">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-883">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-883">-or-</span>
          </span>
          <span data-ttu-id="c5b52-884">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-884">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-885">En cas de substitution dans une classe dérivée, retourne l'objet <see cref="T:System.Reflection.EventInfo" /> représentant l'événement spécifié, à l'aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-885">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-886">Objet représentant l'événement spécifié qui est déclaré ou hérité par le <see cref="T:System.Type" /> actuel, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-886">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-887">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les événements à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-887">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-888">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-888">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-889">Spécifiez `BindingFlags.Public` pour inclure les événements publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-889">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-890">Spécifiez `BindingFlags.NonPublic` pour inclure les événements non publics (autrement dit, les événements privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-890">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-891">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-891">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-892">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-892">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-893">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-893">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-894">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les événements déclarés sur le <xref:System.Type>, pas les événements qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-894">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-895">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-895">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-896">Un événement est considérée comme publique à la réflexion s’il comporte au moins une méthode ou accesseurs est public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-896">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="c5b52-897">Sinon, l’événement est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-897">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-898">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.EventInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-898">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-899">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les événements de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-899">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-900">Le code suivant exemple utilise le <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> méthode pour rechercher un type pour un événement public ou non public nommé « Click » qui n’est pas `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-900">The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).</span></span>  
  
 [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-901">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-901">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-902">Obtient les événements qui sont déclarés ou hérités par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-902">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]&#xA;override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-903">Retourne tous les événements publics qui sont déclarés ou hérités par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-903">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-904">Tableau d'objets <see cref="T:System.Reflection.EventInfo" /> représentant tous les événements publics qui sont déclarés ou hérités par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-904">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-905">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-905">-or-</span>
          </span>
          <span data-ttu-id="c5b52-906">Tableau vide du type <see cref="T:System.Reflection.EventInfo" /> si le <see cref="T:System.Type" /> actuel n'a pas d'événements publics.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-906">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-907">Un événement est considérée comme publique à la réflexion s’il comporte au moins une méthode ou accesseurs est public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-907">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="c5b52-908">Sinon, l’événement est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-908">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-909">Le <xref:System.Type.GetEvents%2A> méthode ne retourne pas les événements dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-909">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-910">Votre code ne doit pas dépendent l’ordre dans lequel les événements sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-910">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-911">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-911">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="c5b52-912">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-912">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-913">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-913">Member Type</span></span>|<span data-ttu-id="c5b52-914">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-914">Static</span></span>|<span data-ttu-id="c5b52-915">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-915">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-916">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-916">Constructor</span></span>|<span data-ttu-id="c5b52-917">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-917">No</span></span>|<span data-ttu-id="c5b52-918">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-918">No</span></span>|  
|<span data-ttu-id="c5b52-919">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-919">Field</span></span>|<span data-ttu-id="c5b52-920">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-920">No</span></span>|<span data-ttu-id="c5b52-921">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-921">Yes.</span></span> <span data-ttu-id="c5b52-922">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-922">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-923">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-923">Event</span></span>|<span data-ttu-id="c5b52-924">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-924">Not applicable</span></span>|<span data-ttu-id="c5b52-925">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-925">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-926">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-926">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-927">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-927">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-928">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-928">Method</span></span>|<span data-ttu-id="c5b52-929">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-929">No</span></span>|<span data-ttu-id="c5b52-930">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-930">Yes.</span></span> <span data-ttu-id="c5b52-931">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-931">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-932">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-932">Nested Type</span></span>|<span data-ttu-id="c5b52-933">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-933">No</span></span>|<span data-ttu-id="c5b52-934">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-934">No</span></span>|  
|<span data-ttu-id="c5b52-935">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-935">Property</span></span>|<span data-ttu-id="c5b52-936">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-936">Not applicable</span></span>|<span data-ttu-id="c5b52-937">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-937">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-938">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-938">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-939">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-939">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-940">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-940">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-941">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-941">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-942">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-942">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-943">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-943">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-944">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-944">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-945">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne le <xref:System.Reflection.EventInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-945">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-946">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les événements de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-946">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-947">L’exemple suivant obtient un tableau de <xref:System.Reflection.EventInfo> des objets, tous les événements pour un `Button` classe et affiche les noms d’événements.</span><span class="sxs-lookup"><span data-stu-id="c5b52-947">The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="c5b52-948">Pour compiler l’exemple Visual Basic, utilisez la ligne de commande suivante :</span><span class="sxs-lookup"><span data-stu-id="c5b52-948">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]
 [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]
 [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-949">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-949">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-950">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-950">-or-</span>
          </span>
          <span data-ttu-id="c5b52-951">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-951">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-952">En cas de substitution dans une classe dérivée, recherche les événements qui sont déclarés ou hérités par le <see cref="T:System.Type" /> actuel, à l'aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-952">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-953">Tableau d'objets <see cref="T:System.Reflection.EventInfo" /> représentant tous les événements qui sont déclarés ou hérités par le <see cref="T:System.Type" /> actuel et correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-953">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="c5b52-954">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-954">-or-</span>
          </span>
          <span data-ttu-id="c5b52-955">Tableau vide du type <see cref="T:System.Reflection.EventInfo" /> si le <see cref="T:System.Type" /> actuel n'a pas d'événements ou si aucun des événements ne correspond aux contraintes de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-955">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-956">Le <xref:System.Type.GetEvents%2A> méthode ne retourne pas les événements dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-956">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-957">Votre code ne doit pas dépendent l’ordre dans lequel les événements sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-957">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-958">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les événements à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-958">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-959">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-959">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-960">Spécifiez `BindingFlags.Public` pour inclure les événements publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-960">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-961">Spécifiez `BindingFlags.NonPublic` pour inclure les événements non publics (autrement dit, les événements privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-961">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span> <span data-ttu-id="c5b52-962">Seuls protégés et des événements internes sur les classes de base sont retournés ; événements privés sur les classes de base ne sont pas retournés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-962">Only protected and internal events on base classes are returned; private events on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="c5b52-963">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-963">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-964">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-964">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-965">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les événements déclarés sur le <xref:System.Type>, pas les événements qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-965">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-966">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-966">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-967">Un événement est considérée comme publique à la réflexion s’il comporte au moins une méthode ou accesseurs est public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-967">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="c5b52-968">Sinon, l’événement est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-968">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-969">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne le <xref:System.Reflection.EventInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-969">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-970">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les événements de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-970">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-971">L’exemple suivant obtient un tableau de <xref:System.Reflection.EventInfo> objets qui correspondent aux indicateurs de liaison spécifiés, obtient tous les événements pour un `Button` classe et affiche les noms d’événements.</span><span class="sxs-lookup"><span data-stu-id="c5b52-971">The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="c5b52-972">Pour compiler l’exemple Visual Basic, utilisez la ligne de commande suivante :</span><span class="sxs-lookup"><span data-stu-id="c5b52-972">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]
 [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]
 [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-973">Obtient un champ spécifique du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-973">Gets a specific field of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo&#xA;override this.GetField : string -&gt; System.Reflection.FieldInfo" Usage="type.GetField name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-974">Chaîne contenant le nom du champ de données à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-974">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-975">Recherche le champ public portant le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-975">Searches for the public field with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-976">Objet représentant le champ public avec le nom spécifié, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-976">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-977">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-977">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-978">La recherche inclut des champs d’instance publics de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-978">The search includes public static and public instance fields.</span></span>  
  
 <span data-ttu-id="c5b52-979">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.FieldInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-979">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-980">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les champs de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-980">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-981">L’exemple suivant obtient le `Type` de l’objet pour la classe spécifiée, qui obtient le <xref:System.Reflection.FieldInfo> objet pour le champ et affiche la valeur du champ.</span><span class="sxs-lookup"><span data-stu-id="c5b52-981">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]
 [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]
 [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-982">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-982">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-983">Cet objet <see cref="T:System.Type" /> est un <see cref="T:System.Reflection.Emit.TypeBuilder" /> dont la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> n'a pas encore été appelée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-983">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-984">Chaîne contenant le nom du champ de données à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-984">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-985">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-985">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-986">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-986">-or-</span>
          </span>
          <span data-ttu-id="c5b52-987">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-987">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-988">Recherche le champ spécifié, à l’aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-988">Searches for the specified field, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-989">Objet représentant le champ qui correspond aux critères spécifiés, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-989">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-990">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-990">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-991">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-991">Member Type</span></span>|<span data-ttu-id="c5b52-992">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-992">Static</span></span>|<span data-ttu-id="c5b52-993">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-993">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-994">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-994">Constructor</span></span>|<span data-ttu-id="c5b52-995">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-995">No</span></span>|<span data-ttu-id="c5b52-996">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-996">No</span></span>|  
|<span data-ttu-id="c5b52-997">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-997">Field</span></span>|<span data-ttu-id="c5b52-998">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-998">No</span></span>|<span data-ttu-id="c5b52-999">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-999">Yes.</span></span> <span data-ttu-id="c5b52-1000">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1000">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1001">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-1001">Event</span></span>|<span data-ttu-id="c5b52-1002">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1002">Not applicable</span></span>|<span data-ttu-id="c5b52-1003">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1003">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1004">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1004">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1005">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1005">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-1006">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-1006">Method</span></span>|<span data-ttu-id="c5b52-1007">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1007">No</span></span>|<span data-ttu-id="c5b52-1008">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1008">Yes.</span></span> <span data-ttu-id="c5b52-1009">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1009">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1010">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-1010">Nested Type</span></span>|<span data-ttu-id="c5b52-1011">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1011">No</span></span>|<span data-ttu-id="c5b52-1012">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1012">No</span></span>|  
|<span data-ttu-id="c5b52-1013">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-1013">Property</span></span>|<span data-ttu-id="c5b52-1014">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1014">Not applicable</span></span>|<span data-ttu-id="c5b52-1015">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1015">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1016">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1016">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1017">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1017">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-1018">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1018">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-1019">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1019">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-1020">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1020">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1021">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1021">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-1022">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1022">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-1023">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les champs à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1023">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1024">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1024">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1025">Spécifiez `BindingFlags.Public` pour inclure des champs publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1025">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1026">Spécifiez `BindingFlags.NonPublic` pour inclure les champs non publics (autrement dit, les champs privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1026">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1027">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1027">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1028">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1028">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1029">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1029">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-1030">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les champs déclarés sur le <xref:System.Type>, pas les champs qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1030">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1031">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1031">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-1032">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.FieldInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1032">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1033">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les champs de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1033">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1034">L’exemple suivant obtient le `Type` de l’objet pour la classe spécifiée, qui obtient le <xref:System.Reflection.FieldInfo> objet pour le champ qui correspond aux indicateurs de liaison spécifiés et affiche la valeur du champ.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1034">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]
 [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]
 [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1035">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1035">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1036">Obtient les champs du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1036">Gets the fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]&#xA;override this.GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1037">Retourne tous les champs publics du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1037">Returns all the public fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1038">Tableau d'objets <see cref="T:System.Reflection.FieldInfo" /> représentant tous les champs publics définis pour le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1038">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-1039">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1039">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1040">Tableau vide du type <see cref="T:System.Reflection.FieldInfo" /> si aucun champ public n'est défini pour le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1040">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1041">Le <xref:System.Type.GetFields%2A> méthode ne retourne pas les champs dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1041">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1042">Votre code ne doit pas dépendent l’ordre dans lequel les champs sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1042">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1043">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1043">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-1044">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-1044">Member Type</span></span>|<span data-ttu-id="c5b52-1045">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1045">Static</span></span>|<span data-ttu-id="c5b52-1046">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1046">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-1047">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-1047">Constructor</span></span>|<span data-ttu-id="c5b52-1048">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1048">No</span></span>|<span data-ttu-id="c5b52-1049">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1049">No</span></span>|  
|<span data-ttu-id="c5b52-1050">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-1050">Field</span></span>|<span data-ttu-id="c5b52-1051">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1051">No</span></span>|<span data-ttu-id="c5b52-1052">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1052">Yes.</span></span> <span data-ttu-id="c5b52-1053">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1053">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1054">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-1054">Event</span></span>|<span data-ttu-id="c5b52-1055">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1055">Not applicable</span></span>|<span data-ttu-id="c5b52-1056">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1056">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1057">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1057">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1058">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1058">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-1059">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-1059">Method</span></span>|<span data-ttu-id="c5b52-1060">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1060">No</span></span>|<span data-ttu-id="c5b52-1061">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1061">Yes.</span></span> <span data-ttu-id="c5b52-1062">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1062">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1063">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-1063">Nested Type</span></span>|<span data-ttu-id="c5b52-1064">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1064">No</span></span>|<span data-ttu-id="c5b52-1065">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1065">No</span></span>|  
|<span data-ttu-id="c5b52-1066">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-1066">Property</span></span>|<span data-ttu-id="c5b52-1067">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1067">Not applicable</span></span>|<span data-ttu-id="c5b52-1068">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1068">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1069">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1069">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1070">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1070">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-1071">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1071">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-1072">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1072">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-1073">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1073">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1074">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1074">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-1075">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1075">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-1076">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne le <xref:System.Reflection.FieldInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1076">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1077">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les champs publics de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1077">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1078">L’exemple suivant montre une utilisation de la `GetFields()` (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1078">The following example shows a use of the `GetFields()` method.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1079">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1079">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1080">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1080">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1081">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1081">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1082">En cas de substitution dans une classe dérivée, recherche les champs définis pour le <see cref="T:System.Type" /> actuel, à l'aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1082">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1083">Tableau d'objets <see cref="T:System.Reflection.FieldInfo" /> représentant tous les champs définis pour le <see cref="T:System.Type" /> actuel qui correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1083">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="c5b52-1084">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1084">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1085">Tableau vide du type <see cref="T:System.Reflection.FieldInfo" /> si aucun champ n'est défini pour le <see cref="T:System.Type" /> actuel ou si aucun des champs définis ne correspond aux contraintes de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1085">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1086">Le <xref:System.Type.GetFields%2A> méthode ne retourne pas les champs dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1086">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1087">Votre code ne doit pas dépendent l’ordre dans lequel les champs sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1087">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1088">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les champs à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1088">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1089">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1089">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1090">Spécifiez `BindingFlags.Public` pour inclure des champs publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1090">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1091">Spécifiez `BindingFlags.NonPublic` pour inclure les champs non publics (autrement dit, les champs privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1091">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span> <span data-ttu-id="c5b52-1092">Seuls protégés et des champs internes sur les classes de base sont retournés ; les champs privés sur les classes de base ne sont pas retournés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1092">Only protected and internal fields on base classes are returned; private fields on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="c5b52-1093">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1093">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1094">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1094">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1095">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les champs déclarés sur le <xref:System.Type>, pas les champs qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1095">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1096">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1096">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-1097">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne le <xref:System.Reflection.FieldInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1097">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1098">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les champs publics de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1098">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1099">L’exemple suivant montre une utilisation de la `GetFields(BindingFlags)` (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1099">The following example shows a use of the `GetFields(BindingFlags)` method.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericArguments : unit -&gt; Type[]&#xA;override this.GetGenericArguments : unit -&gt; Type[]" Usage="type.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1100">Retourne un tableau d'objets <see cref="T:System.Type" /> qui représentent les arguments de type d'un type générique fermé ou les paramètres de type d'une définition de type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1100">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1101">Tableau d'objets <see cref="T:System.Type" /> qui représentent les arguments de type d'un type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1101">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span>
          </span>
          <span data-ttu-id="c5b52-1102">Retourne un tableau vide si le type actuel n'est pas un type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1102">Returns an empty array if the current type is not a generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1103">Les éléments du tableau sont retournés dans l’ordre dans lequel ils apparaissent dans la liste d’arguments de type pour le type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1103">The array elements are returned in the order in which they appear in the list of type arguments for the generic type.</span></span>  
  
-   <span data-ttu-id="c5b52-1104">Si le type actuel est un type construit fermé (autrement dit, le <xref:System.Type.ContainsGenericParameters%2A> retourne de la propriété `false`), le tableau retourné par la <xref:System.Type.GetGenericArguments%2A> méthode contient les types qui ont été affectées aux paramètres de type générique de la définition de type générique .</span><span class="sxs-lookup"><span data-stu-id="c5b52-1104">If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.</span></span>  
  
-   <span data-ttu-id="c5b52-1105">Si le type actuel est une définition de type générique, le tableau contient les paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1105">If the current type is a generic type definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="c5b52-1106">Si le type actuel est un type construit ouvert (autrement dit, le <xref:System.Type.ContainsGenericParameters%2A> retourne de la propriété `true`) dans lequel des types spécifiques n’ont pas été assignés à tous les paramètres de type et les paramètres de type de types génériques ou méthodes englobants, le tableau contient les types et les paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1106">If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters.</span></span> <span data-ttu-id="c5b52-1107">Utilisez le <xref:System.Type.IsGenericParameter%2A> propriété pour les distinguer.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1107">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="c5b52-1108">Pour une démonstration de ce scénario, consultez l’exemple de code pour le <xref:System.Type.ContainsGenericParameters%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1108">For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-1109">Pour obtenir la liste des conditions indifférentes pour les termes utilisés dans la réflexion générique, consultez les notes sur la propriété <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1109">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1110">Le code suivant exemple utilise le <xref:System.Type.GetGenericArguments%2A> méthode pour afficher les arguments de type d’un type construit et les paramètres de type de sa définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1110">The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.</span></span>  
  
 <span data-ttu-id="c5b52-1111">Cet exemple de code fait partie d’un exemple plus complet fourni pour le <xref:System.Type.IsGenericTypeDefinition%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1111">This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property.</span></span> <span data-ttu-id="c5b52-1112">Consultez l’exemple plus complet pour l’exemple de sortie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1112">See the larger example for sample output.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-1113">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1113">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="c5b52-1114">Les classes dérivées doivent fournir une implémentation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1114">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-1115">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1115">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-1116">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1116">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericParameterConstraints : unit -&gt; Type[]&#xA;override this.GetGenericParameterConstraints : unit -&gt; Type[]" Usage="type.GetGenericParameterConstraints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1117">Retourne un tableau d'objets <see cref="T:System.Type" /> qui représentent les contraintes qui s'exercent sur le paramètre de type générique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1117">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1118">Tableau d'objets <see cref="T:System.Type" /> qui représentent les contraintes qui s'exercent sur le paramètre de type générique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1118">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1119">Chaque contrainte sur un paramètre de type générique est exprimée comme un <xref:System.Type> objet.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1119">Each constraint on a generic type parameter is expressed as a <xref:System.Type> object.</span></span> <span data-ttu-id="c5b52-1120">Utilisez le <xref:System.Type.IsClass%2A> propriété afin de déterminer si une contrainte est la contrainte de classe de base ; si la propriété retourne `false`, la contrainte est une contrainte d’interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1120">Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint.</span></span> <span data-ttu-id="c5b52-1121">Si un paramètre de type a aucune contrainte de classe et les contraintes d’interface, un tableau vide est retourné.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1121">If a type parameter has no class constraint and no interface constraints, an empty array is returned.</span></span>  
  
 <span data-ttu-id="c5b52-1122">Pour obtenir la liste des conditions indifférentes pour les termes utilisés dans la réflexion générique, consultez les notes sur la propriété <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1122">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1123">L’exemple de code suivant définit un type générique `Test` avec deux paramètres de type qui possèdent des contraintes différentes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1123">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="c5b52-1124">Lorsque le programme s’exécute, les contraintes sont examinées à l’aide de la <xref:System.Type.GenericParameterAttributes%2A> propriété et la <xref:System.Type.GetGenericParameterConstraints%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1124">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-1125">L'objet <see cref="T:System.Type" /> actuel n'est pas un paramètre de type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1125">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="c5b52-1126">Autrement dit, la propriété <see cref="P:System.Type.IsGenericParameter" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1126">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-1127">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1127">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGenericTypeDefinition();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericTypeDefinition : unit -&gt; Type&#xA;override this.GetGenericTypeDefinition : unit -&gt; Type" Usage="type.GetGenericTypeDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1128">Retourne un objet <see cref="T:System.Type" /> qui représente une définition de type générique à partir de laquelle le type générique actuel peut être construit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1128">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1129">Objet <see cref="T:System.Type" /> représentant un type générique à partir duquel le type actuel peut être construit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1129">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1130">Une définition de type générique est un modèle à partir de laquelle d’autres types peuvent être construits.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1130">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="c5b52-1131">Par exemple, à partir de la définition de type générique `G<T>` (exprimée en syntaxe c# ; `G(Of T)` en Visual Basic ou `generic <typename T> ref class G` en C++) vous pouvez construire et instancier le type `G<int>` (`G(Of Integer)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1131">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic).</span></span> <span data-ttu-id="c5b52-1132">Étant donné un <xref:System.Type> objet représentant ce type construit, le <xref:System.Type.GetGenericTypeDefinition%2A> méthode retourne la définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1132">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.</span></span>  
  
 <span data-ttu-id="c5b52-1133">Si deux types construits sont créés à partir de la même définition de type générique, avec les mêmes arguments de type, le <xref:System.Type.GetGenericTypeDefinition%2A> méthode renvoie le même type <xref:System.Type> objet pour les deux types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1133">If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.</span></span>  
  
 <span data-ttu-id="c5b52-1134">Si vous appelez le <xref:System.Type.GetGenericTypeDefinition%2A> méthode sur un <xref:System.Type> objet qui représente déjà une définition de type générique, elle retourne actuel <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1134">If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c5b52-1135">Un tableau de types génériques n’est pas générique lui-même.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1135">An array of generic types is not itself generic.</span></span> <span data-ttu-id="c5b52-1136">Dans le code c# `A<int>[] v;` ou le code Visual Basic `Dim v() As A(Of Integer)`, le type de variable `v` n’est pas générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1136">In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic.</span></span> <span data-ttu-id="c5b52-1137">Utilisez <xref:System.Type.IsGenericType%2A> pour déterminer si un type est générique avant d’appeler <xref:System.Type.GetGenericTypeDefinition%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1137">Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.</span></span>  
  
 <span data-ttu-id="c5b52-1138">Pour obtenir la liste des conditions indifférentes pour les termes utilisés dans la réflexion générique, consultez les notes sur la propriété <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1138">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1139">L’exemple de code suivant crée une instance d’un type construit à l’aide de la création d’instance ordinaire, puis utilise le <xref:System.Type.GetType%2A> et <xref:System.Type.GetGenericTypeDefinition%2A> méthodes pour récupérer le type construit et la définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1139">The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition.</span></span> <span data-ttu-id="c5b52-1140">Cet exemple utilise le modèle générique <xref:System.Collections.Generic.Dictionary%602> type ; le type construit représente un <xref:System.Collections.Generic.Dictionary%602> de `Test` objets avec des clés de chaîne.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1140">This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-1141">Le type actuel n’est pas un type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1141">The current type is not a generic type.</span>
          </span>
          <span data-ttu-id="c5b52-1142">Autrement dit, <see cref="P:System.Type.IsGenericType" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1142">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-1143">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1143">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="c5b52-1144">Les classes dérivées doivent fournir une implémentation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1144">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-1145">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1145">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-1146">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1146">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="type.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1147">Retourne le code de hachage de cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1147">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1148">Code de hachage de cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1148">The hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1149">Cette méthode se substitue à <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1149">This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1150">L’exemple suivant affiche le code de hachage de la `System.Windows.Forms.Button` classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1150">The following example displays the hash code of the `System.Windows.Forms.Button` class.</span></span>  
  
 [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]
 [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]
 [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1151">Obtient une interface spécifique implémentée ou héritée par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1151">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type&#xA;override this.GetInterface : string -&gt; Type" Usage="type.GetInterface name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1152">Chaîne contenant le nom de l'interface à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1152">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="c5b52-1153">Pour les interfaces génériques, il s'agit du nom tronqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1153">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1154">Recherche l'interface avec le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1154">Searches for the interface with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1155">Objet qui représente l'interface ayant le nom spécifié, implémentée ou héritée par le <see cref="T:System.Type" /> actuel, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1155">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1156">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1156">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="c5b52-1157">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Type> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1157">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1158">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les contraintes d’interface et toutes les interfaces héritées des contraintes de classe ou interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1158">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1159">Pour les interfaces génériques, le `name` paramètre est le nom tronqué, se terminant par un accent grave (\`) et le nombre de paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1159">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="c5b52-1160">Cela est vrai pour les définitions d’interface générique et les interfaces génériques construites.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1160">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="c5b52-1161">Par exemple, pour rechercher `IExample<T>` (`IExample(Of T)` en Visual Basic) ou `IExample<string>` (`IExample(Of String)` en Visual Basic), recherchez ``"IExample`1"``.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1161">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``"IExample`1"``.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1162">Le code suivant exemple utilise le <xref:System.Type.GetInterface%28System.String%29> méthode pour rechercher le <xref:System.Collections.Hashtable> classe pour le <xref:System.Runtime.Serialization.IDeserializationCallback> interface et répertorie les méthodes de l’interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1162">The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.</span></span>  
  
 <span data-ttu-id="c5b52-1163">L’exemple de code montre également le <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> surcharge de méthode et la <xref:System.Type.GetInterfaceMap%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1163">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]
 [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]
 [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1164">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1164">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1165">Le <see cref="T:System.Type" /> actuel représente un type qui implémente la même interface générique avec des arguments de type différents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1165">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1166">Chaîne contenant le nom de l'interface à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1166">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="c5b52-1167">Pour les interfaces génériques, il s'agit du nom tronqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1167">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="c5b52-1168">
            <see langword="true" /> pour ignorer la casse de cette partie de <c>name</c> qui spécifie le nom d’interface simple (la casse de la partie qui spécifie l’espace de noms doit être respectée).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1168">
              <see langword="true" /> to ignore the case of that part of <c>name</c> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span>
          </span>
          <span data-ttu-id="c5b52-1169">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1169">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1170">
            <see langword="false" /> pour effectuer une recherche qui respecte la casse de toutes les parties de <c>name</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1170">
              <see langword="false" /> to perform a case-sensitive search for all parts of <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1171">En cas de substitution dans une classe dérivée, recherche l'interface spécifiée, en indiquant s'il faut faire une recherche qui ne respecte pas la casse pour le nom de l'interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1171">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1172">Objet qui représente l'interface ayant le nom spécifié, implémentée ou héritée par le <see cref="T:System.Type" /> actuel, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1172">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1173">Le `ignoreCase` paramètre s’applique uniquement au nom d’interface simple, pas à l’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1173">The `ignoreCase` parameter applies only to the simple interface name, not to the namespace.</span></span> <span data-ttu-id="c5b52-1174">La partie de `name` qui spécifie l’espace de noms doit respecter la casse, ou l’interface ne sera pas trouvée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1174">The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found.</span></span> <span data-ttu-id="c5b52-1175">Par exemple, la chaîne « System.icomparable » recherche les <xref:System.IComparable> interface, la chaîne « system.icomparable » ne mais pas.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1175">For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.</span></span>  
  
 <span data-ttu-id="c5b52-1176">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Type> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1176">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1177">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les contraintes d’interface et toutes les interfaces héritées des contraintes de classe ou interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1177">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1178">Pour les interfaces génériques, le `name` paramètre est le nom tronqué, se terminant par un accent grave (\`) et le nombre de paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1178">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="c5b52-1179">Cela est vrai pour les définitions d’interface générique et les interfaces génériques construites.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1179">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="c5b52-1180">Par exemple, pour rechercher `IExample<T>` (`IExample(Of T)` en Visual Basic) ou `IExample<string>` (`IExample(Of String)` en Visual Basic), recherchez `"IExample`1 » '.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1180">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"\`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1181">Le code suivant exemple utilise le <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> méthode pour effectuer une recherche respectant la casse de la <xref:System.Collections.Hashtable> classe pour le <xref:System.Collections.IEnumerable> interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1181">The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="c5b52-1182">L’exemple de code montre également le <xref:System.Type.GetInterface%28System.String%29> surcharge de méthode et la <xref:System.Type.GetInterfaceMap%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1182">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]
 [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]
 [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1183">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1183">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1184">Le <see cref="T:System.Type" /> actuel représente un type qui implémente la même interface générique avec des arguments de type différents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1184">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping&#xA;override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="c5b52-1185">Type d'interface pour lequel extraire un mappage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1185">The interface type to retrieve a mapping for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1186">Retourne un mappage d'interface pour le type interface spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1186">Returns an interface mapping for the specified interface type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1187">Objet qui représente le mappage d'interface pour <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1187">An object that represents the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1188">Le mappage d’interface indique comment une interface est mis en correspondance les membres réels sur une classe qui implémente cette interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1188">The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.</span></span>  
  
 <span data-ttu-id="c5b52-1189">Si actuel <xref:System.Type> représente un type générique construit, type de paramètres sont remplacés par les arguments de type approprié dans les éléments de la <xref:System.Reflection.InterfaceMapping> retourné par cette méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1189">If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1190">L’exemple suivant appelle la <xref:System.Type.GetInterfaceMap%2A> méthode pour déterminer comment la <xref:System.IFormatProvider> interface mappe à <xref:System.Globalization.CultureInfo> méthodes et comment la <xref:System.IAppDomainSetup> interface mappe à <xref:System.AppDomainSetup> propriétés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1190">The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties.</span></span> <span data-ttu-id="c5b52-1191">Notez que, étant donné que le <xref:System.IAppDomainSetup> interface définit un ensemble de propriétés, retournés <xref:System.Reflection.InterfaceMapping> objet inclut distinct <xref:System.Reflection.MethodInfo> objets pour d’une propriété accesseurs get et set.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1191">Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.</span></span>  
  
 [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]
 [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-1192">
            <paramref name="interfaceType" /> n'est pas implémenté par le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1192">
              <paramref name="interfaceType" /> is not implemented by the current type.</span>
          </span>
          <span data-ttu-id="c5b52-1193">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1193">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1194">Le paramètre <paramref name="interfaceType" /> ne fait pas référence à une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1194">The <paramref name="interfaceType" /> parameter does not refer to an interface.</span>
          </span>
          <span data-ttu-id="c5b52-1195">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1195">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1196">
            <paramref name="interfaceType" /> est une interface générique et le type actuel est un type de tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1196">
              <paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1197">
            <paramref name="interfaceType" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1197">
              <paramref name="interfaceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-1198">Le <see cref="T:System.Type" /> actuel représente un paramètre de type générique ; c'est-à-dire que <see cref="P:System.Type.IsGenericParameter" /> a la valeur <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1198">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-1199">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1199">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="c5b52-1200">Les classes dérivées doivent fournir une implémentation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1200">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1201">En cas de substitution dans une classe dérivée, obtient toutes les interfaces implémentées ou héritées par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1201">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1202">Tableau d'objets <see cref="T:System.Type" /> représentant toutes les interfaces implémentées ou héritées par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1202">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-1203">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1203">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1204">Tableau vide du type <see cref="T:System.Type" /> si aucune interface n'est implémentée ou héritée par le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1204">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1205">Le <xref:System.Type.GetInterfaces%2A> méthode ne retourne pas les interfaces dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1205">The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1206">Votre code ne doit pas dépendent l’ordre dans lequel les interfaces sont retournées, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1206">Your code must not depend on the order in which interfaces are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1207">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne le <xref:System.Type> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1207">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1208">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les contraintes d’interface et toutes les interfaces héritées des contraintes de classe ou interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1208">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1209">L’exemple suivant obtient le type de la classe spécifiée et affiche toutes les interfaces que le type implémente ou en hérite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1209">The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits.</span></span> <span data-ttu-id="c5b52-1210">Pour compiler l’exemple Visual Basic, utilisez les commandes de compilateur suivantes :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1210">To compile the Visual Basic example, use the following compiler commands:</span></span>  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]
 [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]
 [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-1211">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1211">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1212">Obtient les membres spécifiés du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1212">Gets the specified members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1213">Chaîne contenant le nom des membres publics à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1213">The string containing the name of the public members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1214">Recherche les membres publics portant le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1214">Searches for the public members with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1215">Tableau d'objets <see cref="T:System.Reflection.MemberInfo" /> représentant les membres publics portant le nom spécifié, si ces objets sont trouvés ; sinon, un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1215">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1216">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1216">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-1217">La recherche inclut des membres d’instance publics de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1217">The search includes public static and public instance members.</span></span>  
  
 <span data-ttu-id="c5b52-1218">Comprendre les propriétés, méthodes, champs, événements et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1218">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="c5b52-1219">Le <xref:System.Type.GetMember%2A> méthode ne retourne pas les membres dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1219">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1220">Votre code ne doit pas dépendent l’ordre dans lequel les membres sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1220">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1221">Cette surcharge de méthode ne trouvera pas les initialiseurs de classe (.cctor).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1221">This method overload will not find class initializers (.cctor).</span></span> <span data-ttu-id="c5b52-1222">Pour rechercher des initialiseurs de classe, utilisez une surcharge qui accepte <xref:System.Reflection.BindingFlags>et spécifiez <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1222">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-1223">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1223">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-1224">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1224">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-1225">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-1225">Member Type</span></span>|<span data-ttu-id="c5b52-1226">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1226">Static</span></span>|<span data-ttu-id="c5b52-1227">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1227">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-1228">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-1228">Constructor</span></span>|<span data-ttu-id="c5b52-1229">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1229">No</span></span>|<span data-ttu-id="c5b52-1230">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1230">No</span></span>|  
|<span data-ttu-id="c5b52-1231">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-1231">Field</span></span>|<span data-ttu-id="c5b52-1232">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1232">No</span></span>|<span data-ttu-id="c5b52-1233">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1233">Yes.</span></span> <span data-ttu-id="c5b52-1234">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1234">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1235">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-1235">Event</span></span>|<span data-ttu-id="c5b52-1236">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1236">Not applicable</span></span>|<span data-ttu-id="c5b52-1237">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1237">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1238">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1238">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1239">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1239">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-1240">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-1240">Method</span></span>|<span data-ttu-id="c5b52-1241">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1241">No</span></span>|<span data-ttu-id="c5b52-1242">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1242">Yes.</span></span> <span data-ttu-id="c5b52-1243">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1243">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1244">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-1244">Nested Type</span></span>|<span data-ttu-id="c5b52-1245">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1245">No</span></span>|<span data-ttu-id="c5b52-1246">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1246">No</span></span>|  
|<span data-ttu-id="c5b52-1247">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-1247">Property</span></span>|<span data-ttu-id="c5b52-1248">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1248">Not applicable</span></span>|<span data-ttu-id="c5b52-1249">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1249">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1250">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1250">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1251">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1251">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-1252">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1252">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-1253">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1253">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-1254">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1254">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1255">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1255">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-1256">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1256">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-1257">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.MemberInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1257">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1258">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les membres de la contrainte de classe, ou les membres de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1258">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1259">Pour les méthodes génériques, n’incluez pas les arguments de type dans `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1259">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="c5b52-1260">Par exemple, le code c# `GetMember("MyMethod<int>")` recherche un membre portant le nom de texte «`MyMethod<int>`», plutôt que pour une méthode nommée `MyMethod` qui possède un argument générique de type `int`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1260">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1261">L’exemple suivant affiche tous les membres de la `String` classe qui commencent par la lettre C.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1261">The following example displays all the members of the `String` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]
 [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]
 [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1262">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1262">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1263">Chaîne contenant le nom des membres à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1263">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1264">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1264">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1265">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1265">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1266">Zéro, pour retourner un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1266">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1267">Recherche les membres spécifiés, à l’aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1267">Searches for the specified members, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1268">Tableau d'objets <see cref="T:System.Reflection.MemberInfo" /> représentant les membres publics portant le nom spécifié, si ces objets sont trouvés ; sinon, un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1268">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1269">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1269">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="c5b52-1270">Comprendre les propriétés, méthodes, champs, événements et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1270">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="c5b52-1271">Le <xref:System.Type.GetMember%2A> méthode ne retourne pas les membres dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1271">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1272">Votre code ne doit pas dépendent l’ordre dans lequel les membres sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1272">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1273">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les membres à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1273">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1274">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1274">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1275">Spécifiez `BindingFlags.Public` pour inclure les membres publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1275">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1276">Spécifiez `BindingFlags.NonPublic` pour inclure les membres non publics (autrement dit, les membres privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1276">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1277">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1277">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1278">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1278">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1279">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1279">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-1280">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les membres déclarés sur le <xref:System.Type>, pas les membres qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1280">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1281">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1281">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-1282">Pour obtenir l’initialiseur de classe (.cctor) à l’aide de cette surcharge de méthode, vous devez spécifier « .cctor » pour `name`, et <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic) pour `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1282">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="c5b52-1283">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1283">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-1284">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.MemberInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1284">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1285">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les membres de la contrainte de classe, ou les membres de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1285">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1286">Pour les méthodes génériques, n’incluez pas les arguments de type dans `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1286">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="c5b52-1287">Par exemple, le code c# `GetMember("MyMethod<int>")` recherche un membre portant le nom de texte «`MyMethod<int>`», plutôt que pour une méthode nommée `MyMethod` qui possède un argument générique de type `int`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1287">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1288">L’exemple suivant affiche tous les membres statiques publics de la `myString` classe qui commencent par la lettre C.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1288">The following example displays all the public static members of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]
 [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]
 [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1289">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1289">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1290">Chaîne contenant le nom des membres à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1290">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="c5b52-1291">La valeur à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1291">The value to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1292">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1292">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1293">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1293">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1294">Zéro, pour retourner un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1294">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1295">Recherche les membres spécifiés du type de membre spécifié, à l’aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1295">Searches for the specified members of the specified member type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1296">Tableau d'objets <see cref="T:System.Reflection.MemberInfo" /> représentant les membres publics portant le nom spécifié, si ces objets sont trouvés ; sinon, un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1296">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1297">Comprendre les propriétés, méthodes, champs, événements et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1297">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="c5b52-1298">Le <xref:System.Type.GetMember%2A> méthode ne retourne pas les membres dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1298">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1299">Votre code ne doit pas dépendent l’ordre dans lequel les membres sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1299">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1300">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les membres à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1300">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1301">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1301">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1302">Spécifiez `BindingFlags.Public` pour inclure les membres publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1302">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1303">Spécifiez `BindingFlags.NonPublic` pour inclure les membres non publics (autrement dit, les membres privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1303">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1304">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1304">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1305">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1305">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1306">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1306">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-1307">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les membres déclarés sur le <xref:System.Type>, pas les membres qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1307">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1308">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1308">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-1309">Pour obtenir l’initialiseur de classe (.cctor) à l’aide de cette surcharge de méthode, vous devez spécifier « .cctor » pour `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> pour `type`, et <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> dans Visual Basic) pour `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1309">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`, and  <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="c5b52-1310">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1310">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-1311">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.MemberInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1311">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1312">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les membres de la contrainte de classe, ou les membres de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1312">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1313">Pour les méthodes génériques, n’incluez pas les arguments de type dans `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1313">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="c5b52-1314">Par exemple, le code c# `GetMember("MyMethod<int>")` recherche un membre portant le nom de texte «`MyMethod<int>`», plutôt que pour une méthode nommée `MyMethod` qui possède un argument générique de type `int`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1314">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1315">L’exemple suivant affiche toutes les méthodes de la `myString` classe qui commencent par la lettre C.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1315">The following example displays all the methods of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]
 [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]
 [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1316">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1316">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-1317">Une classe dérivée doit fournir une implémentation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1317">A derived class must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1318">Obtient les membres (propriétés, méthodes, champs, événements, etc.) du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1318">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1319">Retourne tous les membres publics du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1319">Returns all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1320">Tableau d'objets <see cref="T:System.Reflection.MemberInfo" /> représentant tous les membres publics du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1320">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-1321">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1321">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1322">Tableau vide du type <see cref="T:System.Reflection.MemberInfo" /> si le <see cref="T:System.Type" /> actuel n'a pas de membres publics.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1322">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1323">Comprendre les propriétés, méthodes, champs, événements et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1323">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="c5b52-1324">Le <xref:System.Type.GetMembers%2A> méthode ne retourne pas les membres dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1324">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1325">Votre code ne doit pas dépendent l’ordre dans lequel les membres sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1325">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1326">Cette surcharge de méthode appelle la <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> surcharge de méthode, avec <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1326">This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-1327">Elle ne trouvera pas les initialiseurs de classe (.cctor).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1327">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="c5b52-1328">Pour rechercher des initialiseurs de classe, utilisez une surcharge qui accepte <xref:System.Reflection.BindingFlags>et spécifiez <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1328">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-1329">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1329">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-1330">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1330">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-1331">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-1331">Member Type</span></span>|<span data-ttu-id="c5b52-1332">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1332">Static</span></span>|<span data-ttu-id="c5b52-1333">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1333">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-1334">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-1334">Constructor</span></span>|<span data-ttu-id="c5b52-1335">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1335">No</span></span>|<span data-ttu-id="c5b52-1336">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1336">No</span></span>|  
|<span data-ttu-id="c5b52-1337">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-1337">Field</span></span>|<span data-ttu-id="c5b52-1338">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1338">No</span></span>|<span data-ttu-id="c5b52-1339">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1339">Yes.</span></span> <span data-ttu-id="c5b52-1340">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1340">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1341">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-1341">Event</span></span>|<span data-ttu-id="c5b52-1342">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1342">Not applicable</span></span>|<span data-ttu-id="c5b52-1343">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1343">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1344">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1344">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1345">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1345">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-1346">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-1346">Method</span></span>|<span data-ttu-id="c5b52-1347">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1347">No</span></span>|<span data-ttu-id="c5b52-1348">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1348">Yes.</span></span> <span data-ttu-id="c5b52-1349">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1349">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1350">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-1350">Nested Type</span></span>|<span data-ttu-id="c5b52-1351">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1351">No</span></span>|<span data-ttu-id="c5b52-1352">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1352">No</span></span>|  
|<span data-ttu-id="c5b52-1353">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-1353">Property</span></span>|<span data-ttu-id="c5b52-1354">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1354">Not applicable</span></span>|<span data-ttu-id="c5b52-1355">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1355">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1356">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1356">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1357">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1357">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-1358">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1358">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-1359">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1359">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-1360">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1360">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1361">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1361">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-1362">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1362">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-1363">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne le <xref:System.Reflection.MemberInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1363">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1364">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les membres de la contrainte de classe, ou les membres de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1364">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1365">L’exemple de code suivant montre comment utiliser le <xref:System.Type.GetMembers> surcharge de méthode pour collecter des informations sur tous les membres publics d’une classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1365">The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]
 [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]
 [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1366">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1366">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1367">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1367">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1368">Zéro (<see cref="F:System.Reflection.BindingFlags.Default" />), pour retourner un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1368">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1369">En cas de substitution dans une classe dérivée, recherche les membres définis pour le <see cref="T:System.Type" /> actuel, à l'aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1369">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1370">Tableau d'objets <see cref="T:System.Reflection.MemberInfo" /> représentant tous les membres définis pour le <see cref="T:System.Type" /> actuel qui correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1370">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="c5b52-1371">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1371">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1372">Tableau vide du type <see cref="T:System.Reflection.MemberInfo" /> si aucun membre n'est défini pour le <see cref="T:System.Type" /> actuel ou si aucun des membres définis ne correspond aux contraintes de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1372">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1373">Comprendre les propriétés, méthodes, champs, événements et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1373">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="c5b52-1374">Le <xref:System.Type.GetMembers%2A> méthode ne retourne pas les membres dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1374">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1375">Votre code ne doit pas dépendent l’ordre dans lequel les membres sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1375">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1376">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les membres à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1376">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1377">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1377">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1378">Spécifiez `BindingFlags.Public` pour inclure les membres publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1378">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1379">Spécifiez `BindingFlags.NonPublic` pour inclure les membres non publics (autrement dit, les membres privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1379">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span> <span data-ttu-id="c5b52-1380">Seuls protégés et des membres internes sur les classes de base sont retournés ; les membres privés sur les classes de base ne sont pas retournés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1380">Only protected and internal members on base classes are returned; private members on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="c5b52-1381">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1381">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1382">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1382">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1383">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les membres déclarés sur le <xref:System.Type>, pas les membres qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1383">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1384">Appel de cette méthode avec uniquement le `Public` indicateur ou uniquement le `NonPublic` indicateur retournera les membres spécifiés et ne nécessite pas de tous les autres indicateurs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1384">Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.</span></span>  
  
 <span data-ttu-id="c5b52-1385">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1385">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-1386">Pour obtenir l’initialiseur de classe (.cctor) à l’aide de cette surcharge de méthode, vous devez spécifier <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1386">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="c5b52-1387">Vous pouvez également obtenir l’initialiseur de classe à l’aide de la <xref:System.Type.TypeInitializer%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1387">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-1388">Si le t : System.type actuel représente un type générique construit, cette méthode retourne le <xref:System.Reflection.MemberInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1388">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1389">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les membres de la contrainte de classe, ou les membres de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1389">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1390">L’exemple de code suivant montre comment utiliser le <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> surcharge de méthode pour collecter des informations sur tous les membres d’instance publics d’une classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1390">The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]
 [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]
 [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1391">Obtient une méthode spécifique du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1391">Gets a specific method of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1392">Chaîne contenant le nom de la méthode publique à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1392">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1393">Recherche la méthode publique avec le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1393">Searches for the public method with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1394">Objet qui représente la méthode publique avec le nom spécifié, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1394">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1395">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1395">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-1396">La recherche inclut des méthodes d’instance publique de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1396">The search includes public static and public instance methods.</span></span>  
  
 <span data-ttu-id="c5b52-1397">Si une méthode est surchargée et a plus d’une méthode publique, la <xref:System.Type.GetMethod%28System.String%29> méthode lève un <xref:System.Reflection.AmbiguousMatchException> exception.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1397">If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="c5b52-1398">Dans l’exemple suivant, une exception est levée, car il existe plusieurs surcharges publique de la <xref:System.Int32.ToString%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1398">In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="c5b52-1399">Quant à eux, étant donné que le `Person.ToString` substitutions de méthode <xref:System.Object.ToString%2A?displayProperty=nameWithType> et par conséquent n’est pas surchargé, la <xref:System.Type.GetMethod%28System.String%29> méthode est en mesure de récupérer le <xref:System.Reflection.MethodInfo> objet.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1399">On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=nameWithType> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]
 [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  
  
 <span data-ttu-id="c5b52-1400">Vous pouvez effectuer l’une des opérations suivantes pour récupérer une méthode spécifique :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1400">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="c5b52-1401">Appelez le <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> (méthode) et spécifiez un `bindingAttr` argument qui identifie de façon unique la méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1401">Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method.</span></span> <span data-ttu-id="c5b52-1402">Par exemple, si l’exception est levée, car un type a un statique et une surcharge de l’instance, vous pouvez spécifier un `bindingAttr` argument de <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1402">For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="c5b52-1403">Appelez une surcharge de la <xref:System.Type.GetMethod%2A> méthode inclut un `types` paramètre qui définit les types de paramètres de la méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1403">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="c5b52-1404">Appelez le <xref:System.Type.GetMethods> méthode pour récupérer un tableau contenant toutes les méthodes publiques qui appartiennent à un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1404">Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type.</span></span> <span data-ttu-id="c5b52-1405">Vous pouvez ensuite itérer pour identifier les méthodes en double nommés `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1405">You can then iterate it to identify the duplicate methods named `name`.</span></span>  
  
 <span data-ttu-id="c5b52-1406">Si le t : System.type actuel représente un type générique construit, cette méthode retourne la <xref:System.Reflection.MethodInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1406">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1407">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les méthodes de la contrainte de classe, ou les méthodes de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1407">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1408">Pour les méthodes génériques, n’incluez pas les arguments de type dans `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1408">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="c5b52-1409">Par exemple, le code c# `GetMember("MyMethod<int>")` recherche un membre portant le nom de texte «`MyMethod<int>`», plutôt que pour une méthode nommée `MyMethod` qui possède un argument générique de type `int`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1409">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1410">L’exemple suivant obtient une méthode nommée `MethodA`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1410">The following example gets a method named `MethodA`.</span></span>  
  
 [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]
 [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]
 [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1411">Plusieurs méthodes ont été trouvées avec le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1411">More than one method is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1412">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1412">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1413">Chaîne contenant le nom de la méthode à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1413">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1414">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1414">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1415">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1415">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1416">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1416">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1417">Recherche la méthode spécifiée, à l'aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1417">Searches for the specified method, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1418">Objet qui représente la méthode correspondant aux critères spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1418">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1419">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les méthodes à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1419">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1420">Vous devez spécifier soit <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> ou <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1420">You must specify either <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1421">Spécifiez <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> pour inclure des méthodes publiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1421">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1422">Spécifiez <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> pour inclure des méthodes non publiques (autrement dit, les méthodes privées, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1422">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1423">Spécifiez <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1423">Specify <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1424">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1424">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1425"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1425"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-1426"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> Pour rechercher uniquement les méthodes déclarées sur le <xref:System.Type>, pas les méthodes qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1426"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1427">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1427">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-1428">Si une méthode est surchargée et plusieurs surcharges aux contraintes spécifiées par le `bindingAttr` argument, la méthode lève un <xref:System.Reflection.AmbiguousMatchException> exception.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1428">If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="c5b52-1429">Dans l’exemple suivant, une exception est levée, car :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1429">In the following example, an exception is thrown because:</span></span>  
  
-   <span data-ttu-id="c5b52-1430">Le `TestClass` type a deux surcharges d’instance publique de la `DisplayValue` (méthode), `DisplayValue(String)` et `DisplayValue(String, Object[])`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1430">The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.</span></span>  
  
-   <span data-ttu-id="c5b52-1431">Le `TestClass` type a deux surcharges d’instance publique de la `Equals` méthode, un d'entre eux est hérité de <xref:System.Object>: `Equals(TestClass)` et `Equals(Object)`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1431">The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]
 [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  
  
 <span data-ttu-id="c5b52-1432">Vous pouvez effectuer l’une des opérations suivantes pour récupérer une méthode spécifique :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1432">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="c5b52-1433">Modifiez les contraintes de liaison.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1433">Change the binding constraints.</span></span> <span data-ttu-id="c5b52-1434">Dans l’exemple précédent, d’essayer de récupérer une instance publique `Equals` récupère de la méthode qui est déclarée par le type et pas hérité avec succès `Equals(TestClass)`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1434">In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.</span></span>  
  
-   <span data-ttu-id="c5b52-1435">Appelez une surcharge de la <xref:System.Type.GetMethod%2A> méthode inclut un `types` paramètre qui définit les types de paramètres de la méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1435">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="c5b52-1436">Appelez le <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> méthode pour récupérer un tableau contenant toutes les méthodes appartenant à un type dont les attributs de liaison spécifiées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1436">Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes.</span></span> <span data-ttu-id="c5b52-1437">Vous pouvez ensuite itérer pour identifier les méthodes en double nommés `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1437">You can then iterate it to identify the duplicate methods named `name`.</span></span> <span data-ttu-id="c5b52-1438">Cette approche est illustrée dans le Gestionnaire de l’exemple précédent pour le <xref:System.Reflection.AmbiguousMatchException> exception.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1438">This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.</span></span>  
  
 <span data-ttu-id="c5b52-1439">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.MethodInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1439">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1440">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les méthodes de la contrainte de classe, ou les méthodes de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1440">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1441">Pour les méthodes génériques, n’incluez pas les arguments de type dans `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1441">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="c5b52-1442">Par exemple, le code c# `GetMember("MyMethod<int>")` recherche un membre portant le nom de texte «`MyMethod<int>`», plutôt que pour une méthode nommée `MyMethod` qui possède un argument générique de type `int`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1442">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1443">L’exemple suivant obtient la méthode qui correspond aux indicateurs de liaison spécifiés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1443">The following example gets the method that matches the specified binding flags.</span></span>  
  
 [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]
 [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]
 [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1444">Au moins deux méthodes portent le nom spécifié et correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1444">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1445">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1445">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1446">Chaîne contenant le nom de la méthode publique à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1446">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-1447">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la méthode à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1447">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="c5b52-1448">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1448">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1449">Tableau vide d'objets <see cref="T:System.Type" /> (tels que le champ <see cref="F:System.Type.EmptyTypes" /> les fournit) pour obtenir une méthode qui ne prend aucun paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1449">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1450">Recherche la méthode publique spécifiée dont les paramètres correspondent aux types d'arguments spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1450">Searches for the specified public method whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1451">Objet représentant la méthode publique dont les paramètres correspondent aux types d'arguments spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1451">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1452">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1452">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-1453">La recherche inclut des méthodes d’instance publique de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1453">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1454">Vous ne pouvez pas omettre les paramètres lors de la recherche les constructeurs et méthodes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1454">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="c5b52-1455">Vous pouvez omettre les paramètres uniquement lors de l’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1455">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="c5b52-1456">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.MethodInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1456">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1457">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les méthodes de la contrainte de classe, ou les méthodes de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1457">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1458">Le `name` paramètre ne peut pas inclure les arguments de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1458">The `name` parameter cannot include type arguments.</span></span> <span data-ttu-id="c5b52-1459">Par exemple, le code c# `GetMethod("MyGenericMethod<int>")` recherche une méthode avec le nom de texte «`MyGenericMethod<int>`», plutôt que pour une méthode nommée `MyGenericMethod` qui possède un argument générique de type `int`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1459">For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="c5b52-1460">Au lieu de cela, utilisez `GetMethod("MyGenericMethod")` avec le paramètre approprié dans le `types` tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1460">Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1461">L’exemple suivant recherche des surcharges spécifiques de `MethodA`, en spécifiant une variété de types d’arguments.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1461">The following example finds specific overloads of `MethodA`, specifying a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1462">Le [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] exemple requiert le `/unsafe` option du compilateur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1462">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]
 [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]
 [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  
  
 <span data-ttu-id="c5b52-1463">L’exemple suivant récupère <xref:System.Reflection.MethodInfo> des objets qui représentent le `Add` méthodes d’un type non générique (le <xref:System.Collections.ArrayList> classe), un type générique ouvert (le <xref:System.Collections.Generic.List%601> classe) et un type générique fermé (les `List(Of String)` type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1463">The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]
 [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  
  
 <span data-ttu-id="c5b52-1464">L’exemple définit un `GetAddMethod` méthode qui Récupère le texte approprié <xref:System.Reflection.MethodInfo> objet.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1464">The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object.</span></span> <span data-ttu-id="c5b52-1465">Pour fournir la `types` argument pour un type générique ouvert, il appelle le <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1465">To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c5b52-1466">Pour fournir la `types` argument pour un type générique fermé, il récupère la valeur de la <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1466">To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1467">Plusieurs méthodes ont été trouvées avec le nom et les paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1467">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1468">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1468">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-1469">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1469">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1470">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1470">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-1471">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1471">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1472">Un des éléments de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1472">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-1473">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1473">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1474">Chaîne contenant le nom de la méthode publique à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1474">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-1475">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la méthode à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1475">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="c5b52-1476">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1476">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1477">Tableau vide d'objets <see cref="T:System.Type" /> (tels que le champ <see cref="F:System.Type.EmptyTypes" /> les fournit) pour obtenir une méthode qui ne prend aucun paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1477">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-1478">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1478">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-1479">À utiliser uniquement au moment d'un appel via COM Interop ; de plus, seuls sont gérés les paramètres passés par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1479">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="c5b52-1480">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1480">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1481">Recherche la méthode publique spécifiée dont les paramètres correspondent aux types d’arguments et modificateurs spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1481">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1482">Objet qui représente la méthode publique correspondant aux critères spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1482">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1483">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> (le `modifiers` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1483">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="c5b52-1484">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1484">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-1485">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1485">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-1486">La recherche inclut des méthodes d’instance publique de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1486">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1487">Vous ne pouvez pas omettre les paramètres lors de la recherche les constructeurs et méthodes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1487">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="c5b52-1488">Vous pouvez omettre les paramètres uniquement lors de l’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1488">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="c5b52-1489">Si le t : System.type actuel représente un type générique construit, cette méthode retourne la <xref:System.Reflection.MethodInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1489">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1490">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les méthodes de la contrainte de classe, ou les méthodes de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1490">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1491">Pour les méthodes génériques, n’incluez pas les arguments de type dans `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1491">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="c5b52-1492">Par exemple, le code c# `GetMethod("MyMethod<int>")` recherche un membre portant le nom de texte «`MyMethod<int>`», plutôt que pour une méthode nommée `MyMethod` qui possède un argument générique de type `int`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1492">For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="c5b52-1493">Au lieu de cela, utilisez `GetMethod("MyMethod")` avec le paramètre approprié dans le `types` tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1493">Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1494">Plusieurs méthodes ont été trouvées avec le nom et les paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1494">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1495">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1495">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-1496">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1496">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1497">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1497">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-1498">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1498">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1499">Un des éléments de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1499">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-1500">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1500">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-1501">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1501">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1502">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1502">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1503">Chaîne contenant le nom de la méthode à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1503">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1504">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1504">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1505">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1505">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1506">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1506">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-1507">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1507">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-1508">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1508">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1509">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1509">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-1510">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la méthode à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1510">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="c5b52-1511">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1511">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1512">Tableau vide d'objets <see cref="T:System.Type" /> (tels que le champ <see cref="F:System.Type.EmptyTypes" /> les fournit) pour obtenir une méthode qui ne prend aucun paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1512">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-1513">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1513">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-1514">À utiliser uniquement au moment d'un appel via COM Interop ; de plus, seuls sont gérés les paramètres passés par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1514">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="c5b52-1515">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1515">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1516">Recherche la méthode spécifiée dont les paramètres correspondent aux types d’arguments et modificateurs spécifiés, à l’aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1516">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1517">Objet qui représente la méthode correspondant aux critères spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1517">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1518">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> (le `modifiers` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1518">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="c5b52-1519">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1519">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-1520">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les méthodes à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1520">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1521">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1521">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1522">Spécifiez `BindingFlags.Public` pour inclure des méthodes publiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1522">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1523">Spécifiez `BindingFlags.NonPublic` pour inclure des méthodes non publiques (autrement dit, les méthodes privées, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1523">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1524">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1524">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1525">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1525">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1526">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1526">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-1527">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les méthodes déclarées sur le <xref:System.Type>, pas les méthodes qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1527">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1528">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1528">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1529">Vous ne pouvez pas omettre les paramètres lors de la recherche les constructeurs et méthodes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1529">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="c5b52-1530">Vous pouvez omettre les paramètres uniquement lors de l’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1530">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="c5b52-1531">Si le t : System.type actuel représente un type générique construit, cette méthode retourne la <xref:System.Reflection.MethodInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1531">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1532">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les méthodes de la contrainte de classe, ou les méthodes de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1532">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1533">Pour les méthodes génériques, n’incluez pas les arguments de type dans `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1533">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="c5b52-1534">Par exemple, le code c# `GetMember("MyMethod<int>")` recherche un membre portant le nom de texte «`MyMethod<int>`», plutôt que pour une méthode nommée `MyMethod` qui possède un argument générique de type `int`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1534">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1535">L’exemple suivant recherche des surcharges spécifiques de `MethodA`, en spécifiant des contraintes de liaison et une variété de types d’arguments.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1535">The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1536">Le [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] exemple requiert le `/unsafe` option du compilateur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1536">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]
 [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]
 [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1537">Au moins deux méthodes portent le nom spécifié et correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1537">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1538">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1538">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-1539">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1539">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1540">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1540">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-1541">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1541">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1542">Un des éléments de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1542">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-1543">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1543">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-1544">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1544">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1545">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1545">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1546">Chaîne contenant le nom de la méthode à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1546">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1547">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1547">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1548">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1548">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1549">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1549">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-1550">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1550">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-1551">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1551">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1552">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1552">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="c5b52-1553">Objet qui spécifie l’ensemble de règles à utiliser en ce qui concerne l’ordre et la disposition des arguments, la manière dont la valeur de retour est passée, les registres utilisés pour les arguments et la manière dont la pile est nettoyée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1553">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-1554">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la méthode à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1554">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="c5b52-1555">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1555">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1556">Tableau vide d'objets <see cref="T:System.Type" /> (tels que le champ <see cref="F:System.Type.EmptyTypes" /> les fournit) pour obtenir une méthode qui ne prend aucun paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1556">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-1557">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1557">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-1558">À utiliser uniquement au moment d'un appel via COM Interop ; de plus, seuls sont gérés les paramètres passés par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1558">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="c5b52-1559">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1559">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1560">Recherche la méthode spécifiée dont les paramètres correspondent aux types d’arguments et aux modificateurs spécifiés, en utilisant les contraintes de liaison et la convention d’appel indiquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1560">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1561">Objet qui représente la méthode correspondant aux critères spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1561">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1562">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> (le `modifiers` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1562">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="c5b52-1563">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1563">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-1564">Le tableau suivant présente les membres d’une classe de base sont retournés par la `GetXXX` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1564">The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-1565">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-1565">Member Type</span></span>|<span data-ttu-id="c5b52-1566">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1566">Static</span></span>|<span data-ttu-id="c5b52-1567">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1567">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-1568">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-1568">Constructor</span></span>|<span data-ttu-id="c5b52-1569">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1569">No</span></span>|<span data-ttu-id="c5b52-1570">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1570">No</span></span>|  
|<span data-ttu-id="c5b52-1571">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-1571">Field</span></span>|<span data-ttu-id="c5b52-1572">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1572">No</span></span>|<span data-ttu-id="c5b52-1573">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1573">Yes.</span></span> <span data-ttu-id="c5b52-1574">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1574">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1575">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-1575">Event</span></span>|<span data-ttu-id="c5b52-1576">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1576">Not applicable</span></span>|<span data-ttu-id="c5b52-1577">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1577">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1578">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1578">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1579">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1579">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-1580">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-1580">Method</span></span>|<span data-ttu-id="c5b52-1581">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1581">No</span></span>|<span data-ttu-id="c5b52-1582">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1582">Yes.</span></span> <span data-ttu-id="c5b52-1583">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1583">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1584">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-1584">Nested Type</span></span>|<span data-ttu-id="c5b52-1585">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1585">No</span></span>|<span data-ttu-id="c5b52-1586">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1586">No</span></span>|  
|<span data-ttu-id="c5b52-1587">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-1587">Property</span></span>|<span data-ttu-id="c5b52-1588">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1588">Not applicable</span></span>|<span data-ttu-id="c5b52-1589">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1589">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1590">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1590">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1591">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1591">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-1592">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1592">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-1593">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1593">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-1594">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1594">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1595">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1595">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-1596">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1596">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-1597">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les méthodes à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1597">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1598">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1598">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1599">Spécifiez `BindingFlags.Public` pour inclure des méthodes publiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1599">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1600">Spécifiez `BindingFlags.NonPublic` pour inclure des méthodes non publiques (autrement dit, les méthodes privées, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1600">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1601">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1601">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1602">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1602">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1603">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1603">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-1604">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les méthodes déclarées sur le <xref:System.Type>, pas les méthodes qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1604">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1605">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1605">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1606">Vous ne pouvez pas omettre les paramètres lors de la recherche les constructeurs et méthodes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1606">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="c5b52-1607">Vous pouvez omettre les paramètres uniquement lors de l’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1607">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="c5b52-1608">Si le t : System.type actuel représente un type générique construit, cette méthode retourne la <xref:System.Reflection.MethodInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1608">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1609">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les méthodes de la contrainte de classe, ou les méthodes de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1609">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1610">Pour les méthodes génériques, n’incluez pas les arguments de type dans `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1610">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="c5b52-1611">Par exemple, le code c# `GetMember("MyMethod<int>")` recherche un membre portant le nom de texte «`MyMethod<int>`», plutôt que pour une méthode nommée `MyMethod` qui possède un argument générique de type `int`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1611">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1612">L’exemple suivant recherche des surcharges spécifiques de `MethodA`, en spécifiant des contraintes de liaison, les conventions d’appel et divers types d’arguments.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1612">The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1613">Le [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] exemple requiert le `/unsafe` option du compilateur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1613">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]
 [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]
 [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1614">Au moins deux méthodes portent le nom spécifié et correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1614">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1615">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1615">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-1616">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1616">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1617">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1617">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-1618">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1618">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1619">Un des éléments de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1619">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-1620">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1620">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-1621">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1621">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1622">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1622">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1623">Chaîne contenant le nom de la méthode à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1623">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1624">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1624">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1625">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1625">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1626">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1626">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-1627">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1627">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-1628">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1628">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1629">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1629">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="c5b52-1630">Objet qui spécifie l'ensemble de règles à utiliser en ce qui concerne l'ordre et la disposition des arguments, la manière dont la valeur de retour est passée, les registres utilisés pour les arguments et le processus de nettoyage de la pile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1630">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-1631">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la méthode à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1631">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="c5b52-1632">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1632">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1633">Tableau vide de type <see cref="T:System.Type" /> (c'est-à-dire Type[] types = new Type[0]) pour obtenir une méthode qui ne prend aucun paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1633">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
          <span data-ttu-id="c5b52-1634">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1634">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1635">
            <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1635">
              <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-1636">Si <c>types</c> est <see langword="null" />, les arguments ne correspondent pas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1636">If <c>types</c> is <see langword="null" />, arguments are not matched.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-1637">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1637">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-1638">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1638">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1639">En cas de substitution dans une classe dérivée, recherche la méthode spécifiée dont les paramètres correspondent aux types d’arguments et modificateurs spécifiés, à l’aide des contraintes de liaison et de la convention d’appel spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1639">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1640">Objet qui représente la méthode correspondant aux critères spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1640">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1641">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> (le `modifiers` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1641">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="c5b52-1642">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1642">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-1643">Si `types` est `null`, les arguments ne correspondent pas.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1643">If `types` is `null`, arguments are not matched.</span></span>  
  
 <span data-ttu-id="c5b52-1644">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les méthodes à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1644">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1645">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1645">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1646">Spécifiez `BindingFlags.Public` pour inclure des méthodes publiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1646">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1647">Spécifiez `BindingFlags.NonPublic` pour inclure des méthodes non publiques (autrement dit, les méthodes privées, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1647">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1648">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1648">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1649">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1649">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1650">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1650">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-1651">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les méthodes déclarées sur le <xref:System.Type>, pas les méthodes qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1651">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1652">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1652">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1653">Au moins deux méthodes portent le nom spécifié et correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1653">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1654">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1654">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-1655">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1655">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-1656">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1656">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1657">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1657">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-1658">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1658">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1659">
            <paramref name="types" /> et <paramref name="modifiers" /> n’ont pas la même longueur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1659">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-1660">Le type actuel est un <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou un <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1660">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1661">Obtient les méthodes du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1661">Gets the methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1662">Retourne toutes les méthodes publiques du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1662">Returns all the public methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1663">Tableau d'objets <see cref="T:System.Reflection.MethodInfo" /> représentant toutes les méthodes publiques définies pour le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1663">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-1664">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1664">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1665">Tableau vide du type <see cref="T:System.Reflection.MethodInfo" /> si aucune méthode publique n'est définie pour le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1665">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1666">Le <xref:System.Type.GetMethods%2A> méthode ne retourne pas les méthodes dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1666">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1667">Votre code ne doit pas dépendent l’ordre dans lequel les méthodes sont retournées, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1667">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1668">Les constructeurs ne sont pas inclus dans le tableau de méthodes retourné par cet appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1668">Constructors are not included in the array of methods returned by this call.</span></span> <span data-ttu-id="c5b52-1669">Effectuer un appel distinct à `GetConstructors()` pour obtenir les méthodes de constructeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1669">Make a separate call to `GetConstructors()` to get the constructor methods.</span></span>  
  
 <span data-ttu-id="c5b52-1670">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1670">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-1671">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-1671">Member Type</span></span>|<span data-ttu-id="c5b52-1672">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1672">Static</span></span>|<span data-ttu-id="c5b52-1673">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1673">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-1674">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-1674">Constructor</span></span>|<span data-ttu-id="c5b52-1675">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1675">No</span></span>|<span data-ttu-id="c5b52-1676">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1676">No</span></span>|  
|<span data-ttu-id="c5b52-1677">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-1677">Field</span></span>|<span data-ttu-id="c5b52-1678">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1678">No</span></span>|<span data-ttu-id="c5b52-1679">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1679">Yes.</span></span> <span data-ttu-id="c5b52-1680">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1680">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1681">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-1681">Event</span></span>|<span data-ttu-id="c5b52-1682">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1682">Not applicable</span></span>|<span data-ttu-id="c5b52-1683">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1683">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1684">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1684">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1685">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1685">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-1686">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-1686">Method</span></span>|<span data-ttu-id="c5b52-1687">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1687">No</span></span>|<span data-ttu-id="c5b52-1688">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1688">Yes.</span></span> <span data-ttu-id="c5b52-1689">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1689">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1690">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-1690">Nested Type</span></span>|<span data-ttu-id="c5b52-1691">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1691">No</span></span>|<span data-ttu-id="c5b52-1692">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1692">No</span></span>|  
|<span data-ttu-id="c5b52-1693">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-1693">Property</span></span>|<span data-ttu-id="c5b52-1694">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1694">Not applicable</span></span>|<span data-ttu-id="c5b52-1695">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1695">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1696">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1696">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1697">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1697">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-1698">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1698">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-1699">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1699">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-1700">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1700">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1701">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1701">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-1702">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1702">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1703">Vous ne pouvez pas omettre les paramètres lors de la recherche les constructeurs et méthodes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1703">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="c5b52-1704">Vous pouvez omettre les paramètres uniquement lors de l’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1704">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="c5b52-1705">Si le t : System.type actuel représente un type générique construit, cette méthode retourne le <xref:System.Reflection.MethodInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1705">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1706">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les méthodes de la contrainte de classe, ou les méthodes de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1706">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1707">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1707">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1708">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1708">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1709">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1709">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1710">En cas de substitution dans une classe dérivée, recherche les méthodes définies pour le <see cref="T:System.Type" /> actuel, à l'aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1710">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1711">Tableau d'objets <see cref="T:System.Reflection.MethodInfo" /> représentant toutes les méthodes définies pour le <see cref="T:System.Type" /> actuel qui correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1711">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="c5b52-1712">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1712">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1713">Tableau vide du type <see cref="T:System.Reflection.MethodInfo" /> si aucune méthode n'est définie pour le <see cref="T:System.Type" /> actuel ou si aucune des méthodes définies ne correspond aux contraintes de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1713">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1714">Le <xref:System.Type.GetMethods%2A> méthode ne retourne pas les méthodes dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1714">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1715">Votre code ne doit pas dépendent l’ordre dans lequel les méthodes sont retournées, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1715">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1716">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les méthodes à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1716">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1717">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1717">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1718">Spécifiez `BindingFlags.Public` pour inclure des méthodes publiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1718">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1719">Spécifiez `BindingFlags.NonPublic` pour inclure des méthodes non publiques (autrement dit, les méthodes privées, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1719">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="c5b52-1720">Seuls protégés et des méthodes internes sur les classes de base sont retournés ; méthodes privées sur les classes de base ne sont pas retournés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1720">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="c5b52-1721">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1721">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1722">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1722">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1723">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les méthodes déclarées sur le <xref:System.Type>, pas les méthodes qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1723">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1724">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1724">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1725">Vous ne pouvez pas omettre les paramètres lors de la recherche les constructeurs et méthodes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1725">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="c5b52-1726">Vous pouvez omettre les paramètres uniquement lors de l’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1726">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="c5b52-1727">Si le t : System.type actuel représente un type générique construit, cette méthode retourne le <xref:System.Reflection.MethodInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1727">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1728">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode recherche les méthodes de la contrainte de classe, ou les méthodes de <xref:System.Object> s’il n’existe aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1728">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1729">L’exemple suivant crée une classe avec deux méthodes publiques et une méthode protégée, crée un `Type` objet correspondant à `MyTypeClass`Obtient toutes les méthodes publiques et non publics et affiche leurs noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1729">The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.</span></span>  
  
 [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]
 [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]
 [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1730">Obtient un type spécifique imbriqué dans le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1730">Gets a specific type nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type&#xA;override this.GetNestedType : string -&gt; Type" Usage="type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1731">Chaîne contenant le nom du type imbriqué à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1731">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1732">Recherche le type imbriqué public avec le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1732">Searches for the public nested type with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1733">Objet représentant le type imbriqué public avec le nom spécifié, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1733">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1734">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1734">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="c5b52-1735">Utilisez le nom simple de la classe imbriquée pour `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1735">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="c5b52-1736">Ne la qualifiez pas avec le nom de la classe externe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1736">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="c5b52-1737">Pour une classe imbriquée générique, utilisez le nom tronqué — c'est-à-dire, ajoutez un accent grave et le nombre d’arguments génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1737">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic arguments.</span></span> <span data-ttu-id="c5b52-1738">Par exemple, utilisez la chaîne « interne\`1 » pour obtenir le générique de classe imbriquée `Inner<T>` (`Inner(Of T)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1738">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="c5b52-1739">N’incluez pas de syntaxe spécifique au langage pour les paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1739">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="c5b52-1740">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1740">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-1741">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-1741">Member Type</span></span>|<span data-ttu-id="c5b52-1742">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1742">Static</span></span>|<span data-ttu-id="c5b52-1743">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1743">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-1744">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-1744">Constructor</span></span>|<span data-ttu-id="c5b52-1745">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1745">No</span></span>|<span data-ttu-id="c5b52-1746">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1746">No</span></span>|  
|<span data-ttu-id="c5b52-1747">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-1747">Field</span></span>|<span data-ttu-id="c5b52-1748">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1748">No</span></span>|<span data-ttu-id="c5b52-1749">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1749">Yes.</span></span> <span data-ttu-id="c5b52-1750">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1750">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1751">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-1751">Event</span></span>|<span data-ttu-id="c5b52-1752">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1752">Not applicable</span></span>|<span data-ttu-id="c5b52-1753">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1753">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1754">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1754">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1755">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1755">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-1756">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-1756">Method</span></span>|<span data-ttu-id="c5b52-1757">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1757">No</span></span>|<span data-ttu-id="c5b52-1758">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1758">Yes.</span></span> <span data-ttu-id="c5b52-1759">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1759">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1760">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-1760">Nested Type</span></span>|<span data-ttu-id="c5b52-1761">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1761">No</span></span>|<span data-ttu-id="c5b52-1762">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1762">No</span></span>|  
|<span data-ttu-id="c5b52-1763">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-1763">Property</span></span>|<span data-ttu-id="c5b52-1764">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1764">Not applicable</span></span>|<span data-ttu-id="c5b52-1765">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1765">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1766">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1766">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1767">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1767">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-1768">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1768">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-1769">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1769">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-1770">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1770">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1771">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1771">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-1772">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1772">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-1773">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les types imbriqués de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1773">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="c5b52-1774">Si un type imbriqué est générique, cette méthode retourne sa définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1774">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="c5b52-1775">Cela est vrai même si le type générique englobant est un type construit fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1775">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1776">Si actuel <xref:System.Type> représente un type générique défini dans c#, Visual Basic ou C++, ses types imbriqués sont tous génériques même s’ils n’ont aucuns leurs propres paramètres génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1776">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="c5b52-1777">Ce n’est pas nécessairement vrai pour les types imbriqués définis dans des assemblys dynamiques ou compilés avec le [Ilasm.exe (assembleur IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1777">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="c5b52-1778">Pour plus d’informations sur les types génériques imbriqués et sur la construction de types génériques imbriqués à partir de leurs définitions de type générique, consultez <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1778">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1779">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1779">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1780">Chaîne contenant le nom du type imbriqué à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1780">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1781">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1781">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1782">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1782">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1783">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1783">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1784">En cas de substitution dans une classe dérivée, recherche le type imbriqué spécifié, à l'aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1784">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1785">Objet qui représente le type imbriqué correspondant aux critères spécifiés, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1785">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1786">Utilisez le nom simple de la classe imbriquée pour `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1786">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="c5b52-1787">Ne la qualifiez pas avec le nom de la classe externe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1787">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="c5b52-1788">Pour une classe imbriquée générique, utilisez le nom tronqué — c'est-à-dire, ajoutez un accent grave et le nombre de paramètres génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1788">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic parameters.</span></span> <span data-ttu-id="c5b52-1789">Par exemple, utilisez la chaîne « interne\`1 » pour obtenir le générique de classe imbriquée `Inner<T>` (`Inner(Of T)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1789">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="c5b52-1790">N’incluez pas de syntaxe spécifique au langage pour les paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1790">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="c5b52-1791">Ce qui suit <xref:System.Reflection.BindingFlags> filtre indicateurs peuvent être utilisés pour définir qui imbriquées types à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1791">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1792">Vous devez spécifier soit <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> ou <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> pour obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1792">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1793">Spécifiez <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> pour inclure les types imbriqués publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1793">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1794">Spécifiez <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> pour inclure des types imbriqués non publics (autrement dit, privés, internes et protégés types imbriqués) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1794">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="c5b52-1795">Cette méthode retourne uniquement les types imbriqués du type actuel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1795">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="c5b52-1796">Il ne recherche pas les classes de base du type actuel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1796">It does not search the base classes of the current type.</span></span> <span data-ttu-id="c5b52-1797">Pour rechercher des types qui sont imbriqués dans les classes de base, vous devez parcourir la hiérarchie d’héritage, l’appel <xref:System.Type.GetNestedType%2A> à chaque niveau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1797">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.</span></span>  
  
 <span data-ttu-id="c5b52-1798"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> et <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1798"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="c5b52-1799">Appel de cette méthode avec uniquement le <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> indicateur ou uniquement le <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> indicateur retournera types l’imbriqués spécifiés et ne nécessitent pas de tous les autres indicateurs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1799">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="c5b52-1800">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1800">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-1801">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les types imbriqués de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1801">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="c5b52-1802">Si un type imbriqué est générique, cette méthode retourne sa définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1802">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="c5b52-1803">Cela est vrai même si le type générique englobant est un type construit fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1803">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1804">Si actuel <xref:System.Type> représente un type générique défini dans c#, Visual Basic ou C++, ses types imbriqués sont tous génériques même s’ils n’ont aucuns leurs propres paramètres génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1804">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="c5b52-1805">Ce n’est pas nécessairement vrai pour les types imbriqués définis dans des assemblys dynamiques ou compilés avec le [Ilasm.exe (assembleur IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1805">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="c5b52-1806">Pour plus d’informations sur les types génériques imbriqués et sur la construction de types génériques imbriqués à partir de leurs définitions de type générique, consultez <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1806">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1807">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1807">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1808">Obtient les types imbriqués dans le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1808">Gets the types nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]&#xA;override this.GetNestedTypes : unit -&gt; Type[]" Usage="type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1809">Retourne les types publics imbriqués dans le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1809">Returns the public types nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1810">Tableau d'objets <see cref="T:System.Type" /> représentant les types publics imbriqués dans le <see cref="T:System.Type" /> actuel (la recherche n'est pas récursive), ou tableau vide de type <see cref="T:System.Type" /> si aucun type public n'est imbriqué dans le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1810">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1811">Le <xref:System.Type.GetNestedTypes%2A> méthode ne retourne pas les types dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1811">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1812">Votre code ne doit pas dépendent l’ordre dans lequel les types sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1812">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1813">Seuls les types publics imbriqués immédiatement dans le type actuel sont retournés ; la recherche n’est pas récursive.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1813">Only the public types immediately nested in the current type are returned; the search is not recursive.</span></span>  
  
 <span data-ttu-id="c5b52-1814">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1814">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-1815">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-1815">Member Type</span></span>|<span data-ttu-id="c5b52-1816">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1816">Static</span></span>|<span data-ttu-id="c5b52-1817">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1817">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-1818">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-1818">Constructor</span></span>|<span data-ttu-id="c5b52-1819">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1819">No</span></span>|<span data-ttu-id="c5b52-1820">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1820">No</span></span>|  
|<span data-ttu-id="c5b52-1821">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-1821">Field</span></span>|<span data-ttu-id="c5b52-1822">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1822">No</span></span>|<span data-ttu-id="c5b52-1823">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1823">Yes.</span></span> <span data-ttu-id="c5b52-1824">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1824">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1825">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-1825">Event</span></span>|<span data-ttu-id="c5b52-1826">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1826">Not applicable</span></span>|<span data-ttu-id="c5b52-1827">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1827">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1828">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1828">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1829">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1829">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-1830">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-1830">Method</span></span>|<span data-ttu-id="c5b52-1831">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1831">No</span></span>|<span data-ttu-id="c5b52-1832">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1832">Yes.</span></span> <span data-ttu-id="c5b52-1833">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1833">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1834">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-1834">Nested Type</span></span>|<span data-ttu-id="c5b52-1835">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1835">No</span></span>|<span data-ttu-id="c5b52-1836">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1836">No</span></span>|  
|<span data-ttu-id="c5b52-1837">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-1837">Property</span></span>|<span data-ttu-id="c5b52-1838">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1838">Not applicable</span></span>|<span data-ttu-id="c5b52-1839">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1839">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1840">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1840">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1841">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1841">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-1842">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1842">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-1843">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1843">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-1844">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1844">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1845">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1845">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-1846">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1846">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-1847">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les types imbriqués de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1847">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="c5b52-1848">Si un type imbriqué est générique, cette méthode retourne sa définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1848">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="c5b52-1849">Cela est vrai même si le type générique englobant est un type construit fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1849">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1850">Si actuel <xref:System.Type> représente un type générique défini dans c#, Visual Basic ou C++, ses types imbriqués sont tous génériques même s’ils n’ont aucuns leurs propres paramètres génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1850">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="c5b52-1851">Ce n’est pas nécessairement vrai pour les types imbriqués définis dans des assemblys dynamiques ou compilés avec le [Ilasm.exe (assembleur IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1851">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="c5b52-1852">Pour plus d’informations sur les types génériques imbriqués et sur la construction de types génériques imbriqués à partir de leurs définitions de type générique, consultez <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1852">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1853">L’exemple suivant définit une classe imbriquée et un `struct` dans `MyClass`et puis obtient des objets des types imbriqués à l’aide du type de `MyClass`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1853">The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.</span></span>  
  
 [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]
 [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]
 [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1854">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1854">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1855">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1855">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1856">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1856">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1857">En cas de substitution dans une classe dérivée, recherche les types imbriqués dans le <see cref="T:System.Type" /> actuel, à l'aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1857">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1858">Tableau d'objets <see cref="T:System.Type" /> représentant tous les types imbriqués dans le <see cref="T:System.Type" /> actuel qui correspondent aux contraintes de liaison spécifiées (la recherche n'est pas récursive), ou tableau vide de type <see cref="T:System.Type" /> si aucun type imbriqué correspondant aux contraintes de liaison n'est trouvé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1858">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1859">La recherche pour les types imbriqués n’est pas récursive.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1859">The search for nested types is not recursive.</span></span>  
  
 <span data-ttu-id="c5b52-1860">Le <xref:System.Type.GetNestedTypes%2A> méthode ne retourne pas les types dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1860">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1861">Votre code ne doit pas dépendent l’ordre dans lequel les types sont retournés, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1861">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1862">Ce qui suit <xref:System.Reflection.BindingFlags> filtre indicateurs peuvent être utilisés pour définir qui imbriquées types à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1862">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1863">Vous devez spécifier soit <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> ou <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> pour obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1863">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1864">Spécifiez <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> pour inclure les types imbriqués publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1864">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1865">Spécifiez <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> pour inclure des types imbriqués non publics (autrement dit, privés, internes et protégés types imbriqués) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1865">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="c5b52-1866">Cette méthode retourne uniquement les types imbriqués du type actuel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1866">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="c5b52-1867">Il ne recherche pas les classes de base du type actuel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1867">It does not search the base classes of the current type.</span></span> <span data-ttu-id="c5b52-1868">Pour rechercher des types qui sont imbriqués dans les classes de base, vous devez parcourir la hiérarchie d’héritage, l’appel <xref:System.Type.GetNestedTypes%2A> à chaque niveau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1868">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.</span></span>  
  
 <span data-ttu-id="c5b52-1869"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> et <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1869"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="c5b52-1870">Appel de cette méthode avec uniquement le <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> indicateur ou uniquement le <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> indicateur retournera types l’imbriqués spécifiés et ne nécessitent pas de tous les autres indicateurs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1870">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="c5b52-1871">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1871">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-1872">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les types imbriqués de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1872">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="c5b52-1873">Si un type imbriqué est générique, cette méthode retourne sa définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1873">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="c5b52-1874">Cela est vrai même si le type générique englobant est un type construit fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1874">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-1875">Si actuel <xref:System.Type> représente un type générique défini dans c#, Visual Basic ou C++, ses types imbriqués sont tous génériques même s’ils n’ont aucuns leurs propres paramètres génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1875">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="c5b52-1876">Ce n’est pas nécessairement vrai pour les types imbriqués définis dans des assemblys dynamiques ou compilés avec le [Ilasm.exe (assembleur IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1876">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="c5b52-1877">Pour plus d’informations sur les types génériques imbriqués et sur la construction de types génériques imbriqués à partir de leurs définitions de type générique, consultez <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1877">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1878">L’exemple suivant crée deux classes publiques imbriquées et deux classes protégées imbriquées et affiche des informations pour les classes qui correspondent aux contraintes de liaison spécifiées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1878">The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]
 [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]
 [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1879">Obtient les propriétés du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1879">Gets the properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]&#xA;override this.GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1880">Retourne toutes les propriétés publiques du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1880">Returns all the public properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1881">Tableau d'objets <see cref="T:System.Reflection.PropertyInfo" /> représentant toutes les propriétés publiques du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1881">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="c5b52-1882">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1882">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1883">Tableau vide du type <see cref="T:System.Reflection.PropertyInfo" /> si le <see cref="T:System.Type" /> actuel n'a pas de propriétés publiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1883">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1884">Appel de cette surcharge revient à appeler le <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> surcharge avec un `bindingAttr` argument égal à `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` en c# et `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1884">Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span></span> <span data-ttu-id="c5b52-1885">Elle retourne toutes les instances publiques et propriétés statiques, les deux ceux définis par le type représenté par l’actuel <xref:System.Type> objet ainsi que celles héritent de ses types de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1885">It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.</span></span>  
  
 <span data-ttu-id="c5b52-1886">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1886">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-1887">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1887">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-1888">Le <xref:System.Type.GetProperties%2A> méthode ne retourne pas les propriétés dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1888">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1889">Votre code ne doit pas dépendent l’ordre dans lequel les propriétés sont retournées, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1889">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1890">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1890">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-1891">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-1891">Member Type</span></span>|<span data-ttu-id="c5b52-1892">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1892">Static</span></span>|<span data-ttu-id="c5b52-1893">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-1893">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-1894">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-1894">Constructor</span></span>|<span data-ttu-id="c5b52-1895">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1895">No</span></span>|<span data-ttu-id="c5b52-1896">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1896">No</span></span>|  
|<span data-ttu-id="c5b52-1897">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-1897">Field</span></span>|<span data-ttu-id="c5b52-1898">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1898">No</span></span>|<span data-ttu-id="c5b52-1899">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1899">Yes.</span></span> <span data-ttu-id="c5b52-1900">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1900">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1901">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-1901">Event</span></span>|<span data-ttu-id="c5b52-1902">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1902">Not applicable</span></span>|<span data-ttu-id="c5b52-1903">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1903">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1904">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1904">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1905">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1905">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-1906">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-1906">Method</span></span>|<span data-ttu-id="c5b52-1907">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1907">No</span></span>|<span data-ttu-id="c5b52-1908">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1908">Yes.</span></span> <span data-ttu-id="c5b52-1909">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1909">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-1910">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-1910">Nested Type</span></span>|<span data-ttu-id="c5b52-1911">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1911">No</span></span>|<span data-ttu-id="c5b52-1912">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-1912">No</span></span>|  
|<span data-ttu-id="c5b52-1913">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-1913">Property</span></span>|<span data-ttu-id="c5b52-1914">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-1914">Not applicable</span></span>|<span data-ttu-id="c5b52-1915">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1915">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-1916">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1916">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1917">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1917">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-1918">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1918">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-1919">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1919">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-1920">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1920">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-1921">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1921">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-1922">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1922">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-1923">Si le t : System.type actuel représente un type générique construit, cette méthode retourne le <xref:System.Reflection.PropertyInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1923">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1924">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les propriétés de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1924">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1925">L'exemple suivant illustre l'utilisation de la méthode `GetProperties`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1925">The following example demonstrates the use of the `GetProperties` method.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]
 [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]
 [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1926">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1926">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1927">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1927">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1928">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1928">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1929">En cas de substitution dans une classe dérivée, recherche les propriétés du <see cref="T:System.Type" /> actuel, à l'aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1929">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1930">Tableau d'objets <see cref="T:System.Reflection.PropertyInfo" /> représentant toutes les propriétés du <see cref="T:System.Type" /> actuel qui correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1930">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="c5b52-1931">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1931">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1932">Tableau vide du type <see cref="T:System.Reflection.PropertyInfo" /> si le <see cref="T:System.Type" /> actuel n'a pas de propriétés ou si aucune des propriétés ne correspond aux contraintes de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1932">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1933">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1933">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-1934">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1934">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-1935">Le <xref:System.Type.GetProperties%2A> méthode ne retourne pas les propriétés dans un ordre particulier, tel qu’alphabétique ou ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1935">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="c5b52-1936">Votre code ne doit pas dépendent l’ordre dans lequel les propriétés sont retournées, car cet ordre varie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1936">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="c5b52-1937">Ce qui suit <xref:System.Reflection.BindingFlags> filtre indicateurs peuvent être utilisés pour définir qui imbriquées types à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1937">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1938">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1938">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1939">Spécifiez `BindingFlags.Public` pour inclure les propriétés publiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1939">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1940">Spécifiez `BindingFlags.NonPublic` pour inclure les propriétés non publiques (autrement dit, les propriétés privées, internes et protégées) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1940">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span> <span data-ttu-id="c5b52-1941">Seuls protégés et des propriétés internes sur les classes de base sont retournées ; les propriétés privées sur les classes de base ne sont pas retournées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1941">Only protected and internal properties on base classes are returned; private properties on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="c5b52-1942">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1942">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1943">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1943">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1944">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les propriétés déclarées sur le <xref:System.Type>, pas les propriétés qui ont été simplement héritées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1944">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1945">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1945">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-1946">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1946">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-1947">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1947">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-1948">Si le t : System.type actuel représente un type générique construit, cette méthode retourne le <xref:System.Reflection.PropertyInfo> objets avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1948">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1949">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les propriétés de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1949">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1950">L’exemple suivant définit une classe nommée `PropertyClass` qui inclut six propriétés : deux sont publics, une est privée, un est protégé, un est interne (`Friend` en Visual Basic), et une est protected internal (`Protected Friend` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1950">The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic).</span></span> <span data-ttu-id="c5b52-1951">Il affiche ensuite des informations de propriété de base (le nom de propriété et le type, s’il est en lecture/écriture et la visibilité de ses `get` et `set` accesseurs) pour les propriétés qui correspondent aux contraintes de liaison spécifiées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1951">It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]
 [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]
 [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-1952">Obtient une propriété spécifique du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1952">Gets a specific property of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1953">Chaîne contenant le nom de la propriété publique à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1953">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1954">Recherche la propriété publique avec le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1954">Searches for the public property with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1955">Objet représentant la propriété publique avec le nom spécifié, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1955">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1956">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1956">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-1957">La recherche inclut des propriétés de l’instance publique de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1957">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="c5b52-1958">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1958">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-1959">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1959">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-1960">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.PropertyInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1960">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-1961">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les propriétés de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1961">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="c5b52-1962">Situations dans lesquelles <xref:System.Reflection.AmbiguousMatchException> se produit incluent les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1962">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="c5b52-1963">Un type contienne deux propriétés indexées qui ont le même nom mais des nombres de paramètres.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1963">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="c5b52-1964">Pour résoudre l’ambiguïté, utilisez une surcharge de la <xref:System.Type.GetProperty%2A> méthode qui spécifie les types de paramètres.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1964">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="c5b52-1965">Un type dérivé déclare une propriété qui masque une propriété héritée portant le même nom, à l’aide de la `new` modificateur (`Shadows` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-1965">A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="c5b52-1966">Pour résoudre l’ambiguïté, utilisez le <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> surcharge de méthode et ajoutez le <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> indicateur pour limiter la recherche aux membres qui ne sont pas hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1966">To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="c5b52-1967">Les indexeurs et les propriétés par défaut</span><span class="sxs-lookup"><span data-stu-id="c5b52-1967">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="c5b52-1968">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], et [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] ont une syntaxe simplifiée pour accéder aux propriétés indexées et permettent à une propriété indexée comme une valeur par défaut pour son type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1968">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="c5b52-1969">Par exemple, si la variable `myList` fait référence à un <xref:System.Collections.ArrayList>, la syntaxe `myList[3]` (`myList(3)` en Visual Basic) récupère l’élément avec l’index égal à 3.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1969">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="c5b52-1970">Vous pouvez surcharger la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1970">You can overload the property.</span></span>  
  
 <span data-ttu-id="c5b52-1971">En c#, cette fonctionnalité est appelée un indexeur et ne peut pas être référencée par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1971">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="c5b52-1972">Par défaut, un indexeur c# apparaît dans les métadonnées comme une propriété indexée nommée « Item ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-1972">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="c5b52-1973">Toutefois, un développeur de bibliothèque de classe peut utiliser le <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribut pour modifier le nom de l’indexeur dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1973">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="c5b52-1974">Par exemple, le <xref:System.String> classe possède un indexeur nommé <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1974">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="c5b52-1975">Propriétés indexées créées à l’aide des langages autres que c# peuvent avoir des noms différents d’élément, ainsi.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1975">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="c5b52-1976">Pour déterminer si un type a une propriété par défaut, utilisez le <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> méthode pour tester le <xref:System.Reflection.DefaultMemberAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1976">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="c5b52-1977">Si le type a <xref:System.Reflection.DefaultMemberAttribute>, le <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> propriété retourne le nom de la propriété par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1977">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-1978">L’exemple suivant récupère la `Type` objet d’une classe définie par l’utilisateur, récupère une propriété de cette classe et affiche le nom de propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1978">The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.</span></span>  
  
 [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]
 [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]
 [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  
  
 <span data-ttu-id="c5b52-1979">En interne, cette propriété est référencée dans les métadonnées par le nom « Élément ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-1979">Internally, this property is referred to in the metadata by the name "Item."</span></span> <span data-ttu-id="c5b52-1980">Toute tentative d’obtenir `PropertyInfo` à l’aide de la réflexion doit spécifier ce nom interne afin de retourner correctement les `PropertyInfo` propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1980">Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-1981">Plus d’une propriété a été trouvée avec le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1981">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-1982">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1982">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-1983">Chaîne contenant le nom de la propriété à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1983">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-1984">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1984">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-1985">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1985">-or-</span>
          </span>
          <span data-ttu-id="c5b52-1986">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1986">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-1987">Recherche la propriété spécifiée, à l’aide des contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1987">Searches for the specified property, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-1988">Objet représentant la propriété qui correspond aux critères spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-1988">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-1989">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1989">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-1990">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1990">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-1991">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les propriétés à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1991">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-1992">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1992">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-1993">Spécifiez `BindingFlags.Public` pour inclure les propriétés publiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1993">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1994">Spécifiez `BindingFlags.NonPublic` pour inclure les propriétés non publiques (autrement dit, les propriétés privées, internes et protégées) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1994">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-1995">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1995">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-1996">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-1996">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-1997">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1997">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-1998">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les propriétés déclarées sur le <xref:System.Type>, pas les propriétés qui ont été simplement héritées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1998">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-1999">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-1999">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-2000">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.PropertyInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2000">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-2001">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les propriétés de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2001">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="c5b52-2002">Situations dans lesquelles <xref:System.Reflection.AmbiguousMatchException> se produit incluent les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2002">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="c5b52-2003">Un type contienne deux propriétés indexées qui ont le même nom mais des nombres de paramètres.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2003">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="c5b52-2004">Pour résoudre l’ambiguïté, utilisez une surcharge de la <xref:System.Type.GetProperty%2A> méthode qui spécifie les types de paramètres.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2004">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="c5b52-2005">Un type dérivé déclare une propriété qui masque une propriété héritée portant le même nom, à l’aide de la `new` modificateur (`Shadows` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2005">A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="c5b52-2006">Pour résoudre l’ambiguïté, incluez <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> pour limiter la recherche aux membres qui ne sont pas hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2006">To resolve the ambiguity, include <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="c5b52-2007">Les indexeurs et les propriétés par défaut</span><span class="sxs-lookup"><span data-stu-id="c5b52-2007">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="c5b52-2008">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], et [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] ont une syntaxe simplifiée pour accéder aux propriétés indexées et permettent à une propriété indexée comme une valeur par défaut pour son type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2008">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="c5b52-2009">Par exemple, si la variable `myList` fait référence à un <xref:System.Collections.ArrayList>, la syntaxe `myList[3]` (`myList(3)` en Visual Basic) récupère l’élément avec l’index égal à 3.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2009">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="c5b52-2010">Vous pouvez surcharger la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2010">You can overload the property.</span></span>  
  
 <span data-ttu-id="c5b52-2011">En c#, cette fonctionnalité est appelée un indexeur et ne peut pas être référencée par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2011">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="c5b52-2012">Par défaut, un indexeur c# apparaît dans les métadonnées comme une propriété indexée nommée « Item ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2012">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="c5b52-2013">Toutefois, un développeur de bibliothèque de classe peut utiliser le <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribut pour modifier le nom de l’indexeur dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2013">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="c5b52-2014">Par exemple, le <xref:System.String> classe possède un indexeur nommé <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2014">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="c5b52-2015">Propriétés indexées créées à l’aide des langages autres que c# peuvent avoir des noms différents d’élément, ainsi.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2015">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="c5b52-2016">Pour déterminer si un type a une propriété par défaut, utilisez le <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> méthode pour tester le <xref:System.Reflection.DefaultMemberAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2016">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="c5b52-2017">Si le type a <xref:System.Reflection.DefaultMemberAttribute>, le <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> propriété retourne le nom de la propriété par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2017">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-2018">L’exemple suivant récupère le type d’une classe définie par l’utilisateur, récupère une propriété de cette classe et affiche le nom de propriété conformément aux contraintes de liaison spécifiées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2018">The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-2019">Au moins deux propriétés portent le nom spécifié et correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2019">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2020">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2020">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-2021">Chaîne contenant le nom de la propriété publique à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2021">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="c5b52-2022">Type de retour de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2022">The return type of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2023">Recherche la propriété publique à l’aide du nom et du type de retour spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2023">Searches for the public property with the specified name and return type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2024">Objet représentant la propriété publique avec le nom spécifié, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2024">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2025">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2025">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-2026">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2026">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-2027">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2027">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-2028">La recherche inclut des propriétés de l’instance publique de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2028">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="c5b52-2029">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.PropertyInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2029">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-2030">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les propriétés de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2030">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="c5b52-2031">Les indexeurs et les propriétés par défaut</span><span class="sxs-lookup"><span data-stu-id="c5b52-2031">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="c5b52-2032">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], et [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] ont une syntaxe simplifiée pour accéder aux propriétés indexées et permettent à une propriété indexée comme une valeur par défaut pour son type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2032">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="c5b52-2033">Par exemple, si la variable `myList` fait référence à un <xref:System.Collections.ArrayList>, la syntaxe `myList[3]` (`myList(3)` en Visual Basic) récupère l’élément avec l’index égal à 3.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2033">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="c5b52-2034">Vous pouvez surcharger la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2034">You can overload the property.</span></span>  
  
 <span data-ttu-id="c5b52-2035">En c#, cette fonctionnalité est appelée un indexeur et ne peut pas être référencée par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2035">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="c5b52-2036">Par défaut, un indexeur c# apparaît dans les métadonnées comme une propriété indexée nommée « Item ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2036">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="c5b52-2037">Toutefois, un développeur de bibliothèque de classe peut utiliser le <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribut pour modifier le nom de l’indexeur dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2037">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="c5b52-2038">Par exemple, le <xref:System.String> classe possède un indexeur nommé <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2038">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="c5b52-2039">Propriétés indexées créées à l’aide des langages autres que c# peuvent avoir des noms différents d’élément, ainsi.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2039">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="c5b52-2040">Pour déterminer si un type a une propriété par défaut, utilisez le <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> méthode pour tester le <xref:System.Reflection.DefaultMemberAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2040">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="c5b52-2041">Si le type a <xref:System.Reflection.DefaultMemberAttribute>, le <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> propriété retourne le nom de la propriété par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2041">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-2042">L’exemple suivant définit une classe avec une propriété et récupère le nom et le type de la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2042">The following example defines a class with one property and retrieves the name and type of the property.</span></span>  
  
 [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]
 [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]
 [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-2043">Plus d’une propriété a été trouvée avec le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2043">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2044">
            <paramref name="name" /> est <see langword="null" /> ou <paramref name="returnType" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2044">
              <paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-2045">Chaîne contenant le nom de la propriété publique à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2045">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-2046">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la propriété indexée à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2046">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="c5b52-2047">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2047">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2048">Tableau vide du type <see cref="T:System.Type" /> (c'est-à-dire Type[] types = new Type[0]) pour obtenir une propriété qui n'est pas indexée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2048">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2049">Recherche la propriété publique spécifiée dont les paramètres correspondent aux types d’arguments spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2049">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2050">Objet représentant la propriété publique dont les paramètres correspondent aux types d'arguments spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2050">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2051">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2051">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-2052">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2052">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-2053">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2053">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-2054">La recherche inclut des propriétés de l’instance publique de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2054">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="c5b52-2055">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.PropertyInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2055">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-2056">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les propriétés de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2056">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="c5b52-2057">Les indexeurs et les propriétés par défaut</span><span class="sxs-lookup"><span data-stu-id="c5b52-2057">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="c5b52-2058">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], et [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] ont une syntaxe simplifiée pour accéder aux propriétés indexées et permettent à une propriété indexée comme une valeur par défaut pour son type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2058">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="c5b52-2059">Par exemple, si la variable `myList` fait référence à un <xref:System.Collections.ArrayList>, la syntaxe `myList[3]` (`myList(3)` en Visual Basic) récupère l’élément avec l’index égal à 3.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2059">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="c5b52-2060">Vous pouvez surcharger la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2060">You can overload the property.</span></span>  
  
 <span data-ttu-id="c5b52-2061">En c#, cette fonctionnalité est appelée un indexeur et ne peut pas être référencée par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2061">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="c5b52-2062">Par défaut, un indexeur c# apparaît dans les métadonnées comme une propriété indexée nommée « Item ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2062">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="c5b52-2063">Toutefois, un développeur de bibliothèque de classe peut utiliser le <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribut pour modifier le nom de l’indexeur dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2063">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="c5b52-2064">Par exemple, le <xref:System.String> classe possède un indexeur nommé <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2064">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="c5b52-2065">Propriétés indexées créées à l’aide des langages autres que c# peuvent avoir des noms différents d’élément, ainsi.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2065">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="c5b52-2066">Pour déterminer si un type a une propriété par défaut, utilisez le <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> méthode pour tester le <xref:System.Reflection.DefaultMemberAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2066">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="c5b52-2067">Si le type a <xref:System.Reflection.DefaultMemberAttribute>, le <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> propriété retourne le nom de la propriété par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2067">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-2068">L’exemple suivant récupère la `Type` objet d’une classe définie par l’utilisateur, récupère la propriété de cette classe et affiche le nom de propriété et le type de la propriété comme spécifié par les arguments passés à `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2068">The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.</span></span>  
  
 [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]
 [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]
 [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-2069">Au moins deux propriétés portent le nom spécifié et correspondent aux types d’arguments spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2069">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2070">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2070">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-2071">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2071">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2072">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2072">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2073">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2073">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="c5b52-2074">Un élément de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2074">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-2075">Chaîne contenant le nom de la propriété publique à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2075">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="c5b52-2076">Type de retour de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2076">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-2077">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la propriété indexée à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2077">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="c5b52-2078">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2078">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2079">Tableau vide du type <see cref="T:System.Type" /> (c'est-à-dire Type[] types = new Type[0]) pour obtenir une propriété qui n'est pas indexée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2079">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2080">Recherche la propriété publique spécifiée dont les paramètres correspondent aux types d’arguments spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2080">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2081">Objet représentant la propriété publique dont les paramètres correspondent aux types d'arguments spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2081">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2082">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2082">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-2083">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2083">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-2084">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2084">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-2085">La recherche inclut des propriétés de l’instance publique de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2085">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="c5b52-2086">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.PropertyInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2086">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-2087">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les propriétés de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2087">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="c5b52-2088">Les indexeurs et les propriétés par défaut</span><span class="sxs-lookup"><span data-stu-id="c5b52-2088">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="c5b52-2089">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], et [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] ont une syntaxe simplifiée pour accéder aux propriétés indexées et permettent à une propriété indexée comme une valeur par défaut pour son type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2089">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="c5b52-2090">Par exemple, si la variable `myList` fait référence à un <xref:System.Collections.ArrayList>, la syntaxe `myList[3]` (`myList(3)` en Visual Basic) récupère l’élément avec l’index égal à 3.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2090">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="c5b52-2091">Vous pouvez surcharger la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2091">You can overload the property.</span></span>  
  
 <span data-ttu-id="c5b52-2092">En c#, cette fonctionnalité est appelée un indexeur et ne peut pas être référencée par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2092">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="c5b52-2093">Par défaut, un indexeur c# apparaît dans les métadonnées comme une propriété indexée nommée « Item ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2093">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="c5b52-2094">Toutefois, un développeur de bibliothèque de classe peut utiliser le <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribut pour modifier le nom de l’indexeur dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2094">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="c5b52-2095">Par exemple, le <xref:System.String> classe possède un indexeur nommé <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2095">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="c5b52-2096">Propriétés indexées créées à l’aide des langages autres que c# peuvent avoir des noms différents d’élément, ainsi.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2096">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="c5b52-2097">Pour déterminer si un type a une propriété par défaut, utilisez le <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> méthode pour tester le <xref:System.Reflection.DefaultMemberAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2097">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="c5b52-2098">Si le type a <xref:System.Reflection.DefaultMemberAttribute>, le <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> propriété retourne le nom de la propriété par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2098">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-2099">Au moins deux propriétés portent le nom spécifié et correspondent aux types d’arguments spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2099">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2100">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2100">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-2101">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2101">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2102">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2102">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2103">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2103">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="c5b52-2104">Un élément de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2104">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-2105">Chaîne contenant le nom de la propriété publique à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2105">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="c5b52-2106">Type de retour de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2106">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-2107">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la propriété indexée à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2107">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="c5b52-2108">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2108">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2109">Tableau vide du type <see cref="T:System.Type" /> (c'est-à-dire Type[] types = new Type[0]) pour obtenir une propriété qui n'est pas indexée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2109">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-2110">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2110">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-2111">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2111">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2112">Recherche la propriété publique spécifiée dont les paramètres correspondent aux types d’arguments et modificateurs spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2112">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2113">Objet qui représente la propriété publique correspondant aux critères spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2113">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2114">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2114">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-2115">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2115">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-2116">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> (le `modifiers` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2116">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="c5b52-2117">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2117">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-2118">La recherche de `name` respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2118">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="c5b52-2119">La recherche inclut des propriétés de l’instance publique de static et public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2119">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="c5b52-2120">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.PropertyInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2120">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-2121">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les propriétés de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2121">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="c5b52-2122">Les indexeurs et les propriétés par défaut</span><span class="sxs-lookup"><span data-stu-id="c5b52-2122">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="c5b52-2123">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], et [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] ont une syntaxe simplifiée pour accéder aux propriétés indexées et permettent à une propriété indexée comme une valeur par défaut pour son type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2123">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="c5b52-2124">Par exemple, si la variable `myList` fait référence à un <xref:System.Collections.ArrayList>, la syntaxe `myList[3]` (`myList(3)` en Visual Basic) récupère l’élément avec l’index égal à 3.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2124">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="c5b52-2125">Vous pouvez surcharger la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2125">You can overload the property.</span></span>  
  
 <span data-ttu-id="c5b52-2126">En c#, cette fonctionnalité est appelée un indexeur et ne peut pas être référencée par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2126">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="c5b52-2127">Par défaut, un indexeur c# apparaît dans les métadonnées comme une propriété indexée nommée « Item ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2127">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="c5b52-2128">Toutefois, un développeur de bibliothèque de classe peut utiliser le <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribut pour modifier le nom de l’indexeur dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2128">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="c5b52-2129">Par exemple, le <xref:System.String> classe possède un indexeur nommé <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2129">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="c5b52-2130">Propriétés indexées créées à l’aide des langages autres que c# peuvent avoir des noms différents d’élément, ainsi.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2130">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="c5b52-2131">Pour déterminer si un type a une propriété par défaut, utilisez le <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> méthode pour tester le <xref:System.Reflection.DefaultMemberAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2131">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="c5b52-2132">Si le type a <xref:System.Reflection.DefaultMemberAttribute>, le <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> propriété retourne le nom de la propriété par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2132">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-2133">L’exemple suivant obtient un `Type` objet correspondant à `MyPropertyClass`, et la propriété indexée de cette classe est récupérée en utilisant les arguments passés à la `GetProperty` (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2133">The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.</span></span>  
  
 [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-2134">Au moins deux propriétés portent le nom spécifié et correspondent aux types et modificateurs d’arguments spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2134">More than one property is found with the specified name and matching the specified argument types and modifiers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2135">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2135">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-2136">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2136">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2137">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2137">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2138">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2138">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-2139">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2139">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2140">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2140">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-2141">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2141">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2142">
            <paramref name="types" /> et <paramref name="modifiers" /> n’ont pas la même longueur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2142">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="c5b52-2143">Un élément de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2143">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-2144">Chaîne contenant le nom de la propriété à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2144">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-2145">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2145">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-2146">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2146">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2147">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2147">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-2148">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2148">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-2149">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2149">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2150">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2150">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="c5b52-2151">Type de retour de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2151">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-2152">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la propriété indexée à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2152">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="c5b52-2153">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2153">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2154">Tableau vide du type <see cref="T:System.Type" /> (c'est-à-dire Type[] types = new Type[0]) pour obtenir une propriété qui n'est pas indexée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2154">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-2155">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2155">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-2156">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2156">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2157">Recherche la propriété spécifiée dont les paramètres correspondent aux types d’arguments et aux modificateurs spécifiés, en utilisant les contraintes de liaison indiquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2157">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2158">Objet représentant la propriété qui correspond aux critères spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2158">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2159">Une propriété est considérée comme publique à la réflexion si elle a au moins un accesseur public.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2159">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="c5b52-2160">Sinon, la propriété est considérée comme privée, et vous devez utiliser <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (en Visual Basic, combinez les valeurs à l’aide de `Or`) pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2160">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="c5b52-2161">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> (le `modifiers` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2161">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="c5b52-2162">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2162">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-2163">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2163">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-2164">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-2164">Member Type</span></span>|<span data-ttu-id="c5b52-2165">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-2165">Static</span></span>|<span data-ttu-id="c5b52-2166">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-2166">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-2167">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-2167">Constructor</span></span>|<span data-ttu-id="c5b52-2168">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2168">No</span></span>|<span data-ttu-id="c5b52-2169">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2169">No</span></span>|  
|<span data-ttu-id="c5b52-2170">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-2170">Field</span></span>|<span data-ttu-id="c5b52-2171">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2171">No</span></span>|<span data-ttu-id="c5b52-2172">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2172">Yes.</span></span> <span data-ttu-id="c5b52-2173">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2173">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-2174">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-2174">Event</span></span>|<span data-ttu-id="c5b52-2175">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-2175">Not applicable</span></span>|<span data-ttu-id="c5b52-2176">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2176">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-2177">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2177">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2178">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2178">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-2179">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-2179">Method</span></span>|<span data-ttu-id="c5b52-2180">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2180">No</span></span>|<span data-ttu-id="c5b52-2181">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2181">Yes.</span></span> <span data-ttu-id="c5b52-2182">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2182">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-2183">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-2183">Nested Type</span></span>|<span data-ttu-id="c5b52-2184">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2184">No</span></span>|<span data-ttu-id="c5b52-2185">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2185">No</span></span>|  
|<span data-ttu-id="c5b52-2186">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-2186">Property</span></span>|<span data-ttu-id="c5b52-2187">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-2187">Not applicable</span></span>|<span data-ttu-id="c5b52-2188">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2188">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-2189">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2189">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2190">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2190">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-2191">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2191">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-2192">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2192">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-2193">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2193">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2194">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2194">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-2195">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2195">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-2196">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les propriétés à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2196">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-2197">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2197">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-2198">Spécifiez `BindingFlags.Public` pour inclure les propriétés publiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2198">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-2199">Spécifiez `BindingFlags.NonPublic` pour inclure les propriétés non publiques (autrement dit, les propriétés privées, internes et protégées) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2199">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-2200">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2200">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-2201">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2201">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-2202">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2202">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-2203">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les propriétés déclarées sur le <xref:System.Type>, pas les propriétés qui ont été simplement héritées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2203">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-2204">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2204">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-2205">Si actuel <xref:System.Type> représente un type générique construit, cette méthode retourne la <xref:System.Reflection.PropertyInfo> avec les paramètres de type remplacés par les arguments de type approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2205">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-2206">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette méthode recherche les propriétés de la contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2206">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="c5b52-2207">Les indexeurs et les propriétés par défaut</span><span class="sxs-lookup"><span data-stu-id="c5b52-2207">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="c5b52-2208">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], et [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] ont une syntaxe simplifiée pour accéder aux propriétés indexées et permettent à une propriété indexée comme une valeur par défaut pour son type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2208">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="c5b52-2209">Par exemple, si la variable `myList` fait référence à un <xref:System.Collections.ArrayList>, la syntaxe `myList[3]` (`myList(3)` en Visual Basic) récupère l’élément avec l’index égal à 3.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2209">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="c5b52-2210">Vous pouvez surcharger la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2210">You can overload the property.</span></span>  
  
 <span data-ttu-id="c5b52-2211">En c#, cette fonctionnalité est appelée un indexeur et ne peut pas être référencée par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2211">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="c5b52-2212">Par défaut, un indexeur c# apparaît dans les métadonnées comme une propriété indexée nommée « Item ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2212">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="c5b52-2213">Toutefois, un développeur de bibliothèque de classe peut utiliser le <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribut pour modifier le nom de l’indexeur dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2213">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="c5b52-2214">Par exemple, le <xref:System.String> classe possède un indexeur nommé <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2214">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="c5b52-2215">Propriétés indexées créées à l’aide des langages autres que c# peuvent avoir des noms différents d’élément, ainsi.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2215">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="c5b52-2216">Pour déterminer si un type a une propriété par défaut, utilisez le <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> méthode pour tester le <xref:System.Reflection.DefaultMemberAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2216">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="c5b52-2217">Si le type a <xref:System.Reflection.DefaultMemberAttribute>, le <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> propriété retourne le nom de la propriété par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2217">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-2218">Au moins deux propriétés portent le nom spécifié et correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2218">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2219">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2219">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-2220">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2220">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2221">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2221">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2222">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2222">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-2223">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2223">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2224">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2224">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-2225">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2225">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2226">
            <paramref name="types" /> et <paramref name="modifiers" /> n’ont pas la même longueur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2226">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="c5b52-2227">Un élément de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2227">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-2228">Chaîne contenant le nom de la propriété à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2228">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="c5b52-2229">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2229">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-2230">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2230">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2231">Zéro, pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2231">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-2232">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d’un membre surchargé, la contrainte de types d’arguments et l’appel d’un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2232">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-2233">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2233">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2234">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2234">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="c5b52-2235">Type de retour de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2235">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="c5b52-2236">Tableau d'objets <see cref="T:System.Type" /> représentant le nombre, l'ordre et le type des paramètres de la propriété indexée à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2236">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="c5b52-2237">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2237">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2238">Tableau vide du type <see cref="T:System.Type" /> (c'est-à-dire Type[] types = new Type[0]) pour obtenir une propriété qui n'est pas indexée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2238">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-2239">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2239">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-2240">Le binder par défaut ne traite pas ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2240">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2241">En cas de substitution dans une classe dérivée, recherche la propriété spécifiée dont les paramètres correspondent aux types d’arguments et modificateurs spécifiés, en utilisant les contraintes de liaison indiquées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2241">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2242">Objet représentant la propriété qui correspond aux critères spécifiés, si elle est trouvée ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2242">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2243">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> (le `modifiers` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2243">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="c5b52-2244">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2244">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-2245">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les propriétés à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2245">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-2246">Vous devez spécifier soit `BindingFlags.Instance` ou `BindingFlags.Static` afin d’obtenir un retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2246">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="c5b52-2247">Spécifiez `BindingFlags.Public` pour inclure les propriétés publiques dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2247">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-2248">Spécifiez `BindingFlags.NonPublic` pour inclure les propriétés non publiques (autrement dit, les propriétés privées, internes et protégées) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2248">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-2249">Spécifiez `BindingFlags.FlattenHierarchy` à inclure `public` et `protected` des membres statiques dans la hiérarchie ; `private` membres statiques dans les classes héritées ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2249">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="c5b52-2250">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2250">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-2251">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2251">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-2252">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les propriétés déclarées sur le <xref:System.Type>, pas les propriétés qui ont été simplement héritées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2252">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-2253">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2253">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-2254">Au moins deux propriétés portent le nom spécifié et correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2254">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2255">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2255">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-2256">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2256">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2257">
            <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2257">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-2258">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2258">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2259">Un des éléments de <paramref name="types" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2259">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2260">
            <paramref name="types" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2260">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-2261">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2261">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2262">
            <paramref name="modifiers" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2262">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c5b52-2263">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2263">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2264">
            <paramref name="types" /> et <paramref name="modifiers" /> n’ont pas la même longueur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2264">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-2265">Le type actuel est un <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" /> ou <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2265">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-2266">Obtient un objet <see cref="T:System.Type" /> qui représente le type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2266">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="type.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-2267">Obtient le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2267">Gets the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2268">
            <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2268">The current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-2269">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2269">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.TypeLoadException" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="c5b52-2270">Spécification des noms de types qualifiés complets</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2270">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member GetType : string -&gt; Type" Usage="System.Type.GetType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="c5b52-2271">Nom qualifié d'assembly du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2271">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="c5b52-2272">Consultez <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2272">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="c5b52-2273">Si le type se trouve dans Mscorlib.dll ou l'assembly en cours d'exécution, il suffit de fournir le nom du type qualifié par son espace de noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2273">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2274">Obtient le <see cref="T:System.Type" /> avec le nom spécifié, effectuant une recherche qui respecte la casse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2274">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2275">Type présentant le nom spécifié, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2275">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2276">Vous pouvez utiliser la <xref:System.Type.GetType%2A> méthode pour obtenir un <xref:System.Type> de l’objet pour un type dans un autre assembly, si vous connaissez son nom qualifié d’assembly qui peut être obtenu à partir de <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2276">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="c5b52-2277"><xref:System.Type.GetType%2A> provoque le chargement de l’assembly spécifié dans `typeName`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2277"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="c5b52-2278">Vous pouvez également charger un assembly à l’aide de la <xref:System.Reflection.Assembly.Load%2A> (méthode), puis utiliser le <xref:System.Type.GetType%2A> ou <xref:System.Reflection.Assembly.GetTypes%2A> méthodes de la <xref:System.Reflection.Assembly> classe pour obtenir <xref:System.Type> objets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2278">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="c5b52-2279">Si un type est dans un assembly connu de votre programme au moment de la compilation, il est plus efficace d’utiliser en c#, <xref:System.Type.GetType%2A> en Visual Basic, ou en C++.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2279">If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2280">Si `typeName` est introuvable, l’appel à la <xref:System.Type.GetType%28System.String%29> retourne de la méthode `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2280">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`.</span></span> <span data-ttu-id="c5b52-2281">Il ne lève pas d’exception.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2281">It does not throw an exception.</span></span> <span data-ttu-id="c5b52-2282">Pour contrôler si une exception est levée, appelez une surcharge de la <xref:System.Type.GetType%2A> méthode qui a un `throwOnError` paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2282">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="c5b52-2283"><xref:System.Type.GetType%2A> fonctionne uniquement sur les assemblys chargés à partir du disque.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2283"><xref:System.Type.GetType%2A> only works on assemblies loaded from disk.</span></span> <span data-ttu-id="c5b52-2284">Si vous appelez <xref:System.Type.GetType%2A> pour rechercher un type défini dans un assembly dynamique défini à l’aide de la <xref:System.Reflection.Emit> services, vous pouvez obtenir un comportement incohérent.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2284">If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="c5b52-2285">Le comportement varie selon que l’assembly dynamique est persistant, autrement dit, créé à l’aide de la `RunAndSave` ou `Save` accéder aux modes de le <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> énumération.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2285">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="c5b52-2286">Si l’assembly dynamique est persistant et a été écrite sur le disque avant `GetType` est appelé, le chargeur recherche l’assembly enregistré sur le disque, charge l’assembly et récupère le type de cet assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2286">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="c5b52-2287">Si l’assembly n’a pas été enregistré pour le disque lorsque `GetType` est appelée, la méthode retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2287">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="c5b52-2288">`GetType` ne comprend pas les assemblys dynamiques transitoires ; Par conséquent, l’appel `GetType` pour récupérer un type dans un temporaire assembly dynamique retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2288">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="c5b52-2289">Pour utiliser `GetType` sur un module dynamique, vous abonner à la <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> événements et les appels `GetType` avant l’enregistrement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2289">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="c5b52-2290">Sinon, vous obtiendrez deux copies de l’assembly en mémoire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2290">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="c5b52-2291">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2291">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-2292">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-2292">Member Type</span></span>|<span data-ttu-id="c5b52-2293">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-2293">Static</span></span>|<span data-ttu-id="c5b52-2294">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-2294">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-2295">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-2295">Constructor</span></span>|<span data-ttu-id="c5b52-2296">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2296">No</span></span>|<span data-ttu-id="c5b52-2297">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2297">No</span></span>|  
|<span data-ttu-id="c5b52-2298">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-2298">Field</span></span>|<span data-ttu-id="c5b52-2299">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2299">No</span></span>|<span data-ttu-id="c5b52-2300">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2300">Yes.</span></span> <span data-ttu-id="c5b52-2301">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2301">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-2302">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-2302">Event</span></span>|<span data-ttu-id="c5b52-2303">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-2303">Not applicable</span></span>|<span data-ttu-id="c5b52-2304">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2304">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-2305">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2305">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2306">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2306">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-2307">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-2307">Method</span></span>|<span data-ttu-id="c5b52-2308">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2308">No</span></span>|<span data-ttu-id="c5b52-2309">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2309">Yes.</span></span> <span data-ttu-id="c5b52-2310">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2310">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-2311">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-2311">Nested Type</span></span>|<span data-ttu-id="c5b52-2312">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2312">No</span></span>|<span data-ttu-id="c5b52-2313">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2313">No</span></span>|  
|<span data-ttu-id="c5b52-2314">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-2314">Property</span></span>|<span data-ttu-id="c5b52-2315">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-2315">Not applicable</span></span>|<span data-ttu-id="c5b52-2316">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2316">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-2317">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2317">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2318">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2318">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-2319">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2319">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-2320">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2320">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-2321">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2321">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2322">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2322">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-2323">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2323">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-2324">Tableaux ou des types COM ne sont pas recherchés, sauf si elles ont déjà été chargés dans la table des classes disponibles.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2324">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="c5b52-2325">`typeName` le nom de type qualifié par son espace de noms ou un nom qualifié d’assembly qui inclut une spécification de nom d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2325">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="c5b52-2326">Consultez <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2326">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="c5b52-2327">Si `typeName` inclut l’espace de noms mais pas le nom de l’assembly, cette méthode recherche uniquement les assembly de l’objet appelant et dans Mscorlib.dll, dans cet ordre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2327">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="c5b52-2328">Si typeName est qualifié avec le nom d’assembly partiel ou complet, cette méthode recherche dans l’assembly spécifié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2328">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="c5b52-2329">Si l’assembly a un nom fort, un nom d’assembly complet est requis.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2329">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="c5b52-2330">Le <xref:System.Type.AssemblyQualifiedName%2A> propriété retourne un nom de type qualifié complet, y compris les types imbriqués, le nom de l’assembly et les arguments de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2330">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments.</span></span> <span data-ttu-id="c5b52-2331">Tous les compilateurs qui prennent en charge le common language runtime émettra le nom simple d’une classe imbriquée et la réflexion construit un nom tronqué interrogées, conformément aux conventions suivantes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2331">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2332">Dans le .NET Framework version 2.0, architecture de processeur est ajoutée à l’identité de l’assembly et peut être spécifié en tant que partie de chaînes de nom d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2332">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="c5b52-2333">Par exemple, « ProcessorArchitecture = msil ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2333">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="c5b52-2334">Toutefois, il n’est pas inclus dans la chaîne retournée par la <xref:System.Type.AssemblyQualifiedName%2A> propriété, pour des raisons de compatibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2334">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="c5b52-2335">Vous pouvez également charger des types en créant un <xref:System.Reflection.AssemblyName> objet et en le passant à la surcharge appropriée de la <xref:System.Reflection.Assembly.Load%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2335">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="c5b52-2336">Vous pouvez ensuite utiliser le <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> méthode pour charger des types à partir de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2336">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="c5b52-2337">Voir aussi <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2337">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="c5b52-2338">Délimiteur</span><span class="sxs-lookup"><span data-stu-id="c5b52-2338">Delimiter</span></span>|<span data-ttu-id="c5b52-2339">Signification</span><span class="sxs-lookup"><span data-stu-id="c5b52-2339">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="c5b52-2340">Barre oblique inverse (\\)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2340">Backslash (\\)</span></span>|<span data-ttu-id="c5b52-2341">Caractère d’échappement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2341">Escape character.</span></span>|  
|<span data-ttu-id="c5b52-2342">Accent grave (')</span><span class="sxs-lookup"><span data-stu-id="c5b52-2342">Backtick (\`)</span></span>|<span data-ttu-id="c5b52-2343">Précède un ou plusieurs chiffres représentant le nombre de paramètres de type, située à la fin du nom d’un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2343">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="c5b52-2344">Crochets ([])</span><span class="sxs-lookup"><span data-stu-id="c5b52-2344">Brackets ([])</span></span>|<span data-ttu-id="c5b52-2345">Placez une liste d’arguments de type générique, pour un type générique construit ; dans une liste d’arguments de type, placez un type qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2345">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="c5b52-2346">Virgule ()</span><span class="sxs-lookup"><span data-stu-id="c5b52-2346">Comma (,)</span></span>|<span data-ttu-id="c5b52-2347">Précède le nom de l’Assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2347">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="c5b52-2348">Point (.)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2348">Period (.)</span></span>|<span data-ttu-id="c5b52-2349">Indique les identificateurs d’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2349">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="c5b52-2350">Signe plus (+)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2350">Plus sign (+)</span></span>|<span data-ttu-id="c5b52-2351">Précède une classe imbriquée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2351">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="c5b52-2352">Par exemple, le nom qualifié complet pour une classe peut ressembler à ceci :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2352">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="c5b52-2353">Si l’espace de noms ont été TopNamespace, la chaîne devrait faire précéder le signe plus (+) avec un caractère d’échappement (\\) pour éviter qu’il soit interprété comme un séparateur d’imbrication.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2353">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="c5b52-2354">La réflexion génère cette chaîne comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2354">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="c5b52-2355">Un « ++ » devient «\\+\\+ » et un «\\« devient »\\\\».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2355">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="c5b52-2356">Ce nom qualifié peut être persistant et utilisé ultérieurement pour charger le <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2356">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="c5b52-2357">Pour rechercher et charger un <xref:System.Type>, utilisez <xref:System.Type.GetType%2A> avec le type de nom uniquement ou avec le nom de type qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2357">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="c5b52-2358"><xref:System.Type.GetType%2A> avec le type de nom uniquement recherchera le <xref:System.Type> dans l’assembly de l’appelant, puis dans l’assembly système.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2358"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="c5b52-2359"><xref:System.Type.GetType%2A> avec l’assembly de nom de type qualifié recherchera le <xref:System.Type> dans n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2359"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="c5b52-2360">Les noms de type peuvent inclure des caractères de fin qui indiquent des informations supplémentaires sur le type, par exemple si le type est un type référence, un type pointeur ou un type tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2360">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="c5b52-2361">Pour récupérer le nom de type sans ces caractères de fin, utilisez `t.GetElementType().ToString()`, où `t` est le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2361">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="c5b52-2362">Les espaces sont pertinents dans tous les composants de nom de type autre que le nom de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2362">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="c5b52-2363">Nom de l’assembly, espaces avant le séparateur ',', mais les espaces après le séparateur ',' sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2363">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="c5b52-2364">Le nom d’un type générique se termine avec un accent grave (\`) suivi de chiffres représentant le nombre d’arguments de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2364">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="c5b52-2365">L’objectif de cette altération des noms est de permettre aux compilateurs prendre en charge des types génériques avec le même nom mais avec différents nombres de paramètres de type, qui se produisent dans la même portée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2365">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="c5b52-2366">Par exemple, la réflexion retourne les noms tronqués `Tuple`1` and `Tuple`2` parmi les méthodes génériques `Tuple(Of T)` et `Tuple(Of T0, T1)` en Visual Basic, ou `Tuple<T>` et Tuple`\<T0, T1>` en Visual c#.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2366">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="c5b52-2367">Pour les types génériques, la liste d’arguments de type est placée entre crochets et les arguments de type sont séparés par des virgules.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2367">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="c5b52-2368">Par exemple, un générique <xref:System.Collections.Generic.Dictionary%602> a deux paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2368">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="c5b52-2369">Un <xref:System.Collections.Generic.Dictionary%602> de `MyType` avec des clés de type <xref:System.String> peut être représenté comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2369">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="c5b52-2370">Pour spécifier un type qualifié d’assembly dans une liste d’arguments de type, mettez le type qualifié d’assembly entre crochets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2370">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="c5b52-2371">Sinon, les virgules qui séparent les parties du nom qualifié d’assembly sont interprétées comme délimitant les arguments de type supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2371">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="c5b52-2372">Par exemple, un <xref:System.Collections.Generic.Dictionary%602> de `MyType` fromMyAssembly.dll, avec des clés de type <xref:System.String>, peut être spécifiée comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2372">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2373">Un type qualifié d’assembly peut être placé entre crochets uniquement lorsqu’il apparaît dans une liste de paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2373">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="c5b52-2374">Les règles de recherche d’assemblys pour les types qualifiés et non qualifiés dans les listes de paramètres de type sont les mêmes que les règles pour les types non génériques qualifiés et non qualifiés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2374">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="c5b52-2375">Types Nullable sont un cas spécial de types génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2375">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="c5b52-2376">Par exemple, un nullable <xref:System.Int32> est représentée par la chaîne « System.Nullable'1[System.Int32] ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2376">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2377">En c#, C++ et Visual Basic, vous pouvez également obtenir les types nullable à l’aide des opérateurs de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2377">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="c5b52-2378">Par exemple, autorisant <xref:System.Boolean> type renvoyé par `typeof(Nullable<bool>)` en c#, par `Nullable<Boolean>::typeid` en C++ et par `GetType(Nullable(Of Boolean))` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2378">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="c5b52-2379">Le tableau suivant présente la syntaxe à utiliser avec `GetType` pour différents types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2379">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="c5b52-2380">Pour obtenir</span><span class="sxs-lookup"><span data-stu-id="c5b52-2380">To Get</span></span>|<span data-ttu-id="c5b52-2381">Utilisez</span><span class="sxs-lookup"><span data-stu-id="c5b52-2381">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="c5b52-2382">Un nullable <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="c5b52-2382">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="c5b52-2383">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2383">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="c5b52-2384">Un pointeur non managé vers `MyType`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2384">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="c5b52-2385">Un pointeur non managé vers un pointeur vers `MyType`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2385">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="c5b52-2386">Un pointeur managé ou la référence à `MyType`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2386">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="c5b52-2387">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2387">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="c5b52-2388">Notez que contrairement aux pointeurs, les références sont limitées à un niveau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2388">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="c5b52-2389">Une classe parente et une classe imbriquée</span><span class="sxs-lookup"><span data-stu-id="c5b52-2389">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="c5b52-2390">Un tableau unidimensionnel avec une limite inférieure de 0</span><span class="sxs-lookup"><span data-stu-id="c5b52-2390">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyType[]")`|  
|<span data-ttu-id="c5b52-2391">Un tableau unidimensionnel avec une limite inférieure est inconnue</span><span class="sxs-lookup"><span data-stu-id="c5b52-2391">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyType[*]")`|  
|<span data-ttu-id="c5b52-2392">Un tableau à n dimensions</span><span class="sxs-lookup"><span data-stu-id="c5b52-2392">An n-dimensional array</span></span>|<span data-ttu-id="c5b52-2393">Une virgule (,) entre les crochets total de n-1 fois.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2393">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="c5b52-2394">Par exemple, `System.Object[,,]` représente un à trois dimensions `Object` tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2394">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="c5b52-2395">Un tableau de tableaux unidimensionnels</span><span class="sxs-lookup"><span data-stu-id="c5b52-2395">An array of one-dimensional arrays</span></span>|`Type.GetType("MyType[][]")`|  
|<span data-ttu-id="c5b52-2396">Un tableau rectangulaire à deux dimensions avec des limites inférieures sont inconnues</span><span class="sxs-lookup"><span data-stu-id="c5b52-2396">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyType[,]")`|  
|<span data-ttu-id="c5b52-2397">Un type générique avec un argument de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2397">A generic type with one type argument</span></span>|<span data-ttu-id="c5b52-2398">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2398">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="c5b52-2399">Un type générique avec deux arguments de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2399">A generic type with two type arguments</span></span>|<span data-ttu-id="c5b52-2400">`Type.GetType("MyGenericType`2[MyType,AnotherType]")'</span><span class="sxs-lookup"><span data-stu-id="c5b52-2400">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="c5b52-2401">Un type générique avec deux arguments de type qualifié d’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2401">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="c5b52-2402">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")'</span><span class="sxs-lookup"><span data-stu-id="c5b52-2402">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="c5b52-2403">Un type générique qualifié d’assembly avec un argument de type qualifié d’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2403">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="c5b52-2404">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")'</span><span class="sxs-lookup"><span data-stu-id="c5b52-2404">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="c5b52-2405">Un type générique dont l’argument de type est un type générique avec deux arguments de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2405">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="c5b52-2406">`Type.GetType("MyGenericType`1 [AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2406">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-2407">L’exemple suivant récupère le type de `System.Int32` et utilise cet objet de type pour afficher le <xref:System.Type.FullName%2A> propriété du `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2407">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2408">
            <paramref name="typeName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2408">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-2409">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2409">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2410">
            <paramref name="typeName" /> représente un type générique qui a un type pointeur, un type <see langword="ByRef" /> ou <see cref="T:System.Void" /> comme l’un de ses arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2410">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2411">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2411">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2412">
            <paramref name="typeName" /> représente un type générique qui a un nombre incorrect d’arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2412">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2413">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2413">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2414">
            <paramref name="typeName" /> représente un type générique, et un de ses arguments de type ne satisfait pas aux contraintes pour le paramètre de type correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2414">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-2415">
            <paramref name="typeName" /> représente un tableau de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2415">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="c5b52-2416">Dans <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET pour les applications du Windows Store</see> ou la <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Bibliothèque de classes portable</see>, interceptez l’exception de la classe de base, <see cref="T:System.IO.IOException" />, à la place.</span>
              <span class="sxs-lookup">
                <span data-stu-id="c5b52-2416">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="c5b52-2417">L’assembly ou une de ses dépendances a été trouvé, mais n’a pas pu être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2417">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="c5b52-2418">L’assembly ou une de ses dépendances n’est pas valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2418">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="c5b52-2419">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2419">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2420">La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée, et l’assembly a été compilé avec une version ultérieure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2420">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="c5b52-2421">Spécification des noms de types qualifiés complets</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2421">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="c5b52-2422">Nom qualifié d'assembly du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2422">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="c5b52-2423">Consultez <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2423">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="c5b52-2424">Si le type se trouve dans Mscorlib.dll ou l'assembly en cours d'exécution, il suffit de fournir le nom du type qualifié par son espace de noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2424">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="c5b52-2425">
            <see langword="true" /> pour lever une exception si le type est introuvable ; <see langword="false" /> pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2425">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-2426">
            <see langword="false" /> supprime également d'autres conditions d'exception, mais pas toutes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2426">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="c5b52-2427">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2427">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2428">Obtient le <see cref="T:System.Type" /> portant le nom spécifié, en effectuant une recherche respectant la casse et en spécifiant s'il faut lever une exception si le type est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2428">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2429">Type portant le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2429">The type with the specified name.</span>
          </span>
          <span data-ttu-id="c5b52-2430">Si le type est introuvable, le paramètre <paramref name="throwOnError" /> spécifie si <see langword="null" /> est retourné ou bien une exception est levée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2430">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="c5b52-2431">Dans certains cas, une exception est levée indépendamment de la valeur de <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2431">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="c5b52-2432">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2432">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2433">Vous pouvez utiliser la <xref:System.Type.GetType%2A> méthode pour obtenir un <xref:System.Type> de l’objet pour un type dans un autre assembly, si vous connaissez son nom qualifié d’assembly qui peut être obtenu à partir de <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2433">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="c5b52-2434"><xref:System.Type.GetType%2A> provoque le chargement de l’assembly spécifié dans `typeName`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2434"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="c5b52-2435">Vous pouvez également charger un assembly à l’aide de la <xref:System.Reflection.Assembly.Load%2A> (méthode), puis utiliser le <xref:System.Type.GetType%2A> ou <xref:System.Reflection.Assembly.GetTypes%2A> méthodes de la <xref:System.Reflection.Assembly> classe pour obtenir <xref:System.Type> objets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2435">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="c5b52-2436">Si un type est dans un assembly connu de votre programme au moment de la compilation, il est plus efficace d’utiliser `typeof` en c#, <xref:System.Type.GetType%2A> en Visual Basic, ou `typeid` en C++.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2436">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="c5b52-2437">`GetType` fonctionne uniquement sur les assemblys chargés à partir du disque.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2437">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="c5b52-2438">Si vous appelez `GetType` pour rechercher un type défini dans un assembly dynamique défini à l’aide de la <xref:System.Reflection.Emit> services, vous pouvez obtenir un comportement incohérent.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2438">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="c5b52-2439">Le comportement varie selon que l’assembly dynamique est persistant, autrement dit, créé à l’aide de la `RunAndSave` ou `Save` accéder aux modes de le <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> énumération.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2439">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="c5b52-2440">Si l’assembly dynamique est persistant et a été écrite sur le disque avant `GetType` est appelé, le chargeur recherche l’assembly enregistré sur le disque, charge l’assembly et récupère le type de cet assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2440">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="c5b52-2441">Si l’assembly n’a pas été enregistré pour le disque lorsque `GetType` est appelée, la méthode retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2441">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="c5b52-2442">`GetType` ne comprend pas les assemblys dynamiques transitoires ; Par conséquent, l’appel `GetType` pour récupérer un type dans un temporaire assembly dynamique retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2442">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="c5b52-2443">Pour utiliser `GetType` sur un module dynamique, vous abonner à la <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> événements et les appels `GetType` avant l’enregistrement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2443">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="c5b52-2444">Sinon, vous obtiendrez deux copies de l’assembly en mémoire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2444">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="c5b52-2445">Le `throwOnError` paramètre spécifie que se passe-t-il lorsque le type est introuvable et supprime également certaines autres conditions d’exception, comme décrit dans la section Exceptions.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2445">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="c5b52-2446">Certaines exceptions sont levées indépendamment de la valeur de `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2446">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="c5b52-2447">Par exemple, si le type est trouvé mais ne peut pas être chargé, un <xref:System.TypeLoadException> est levée même si `throwOnError` est `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2447">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="c5b52-2448">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2448">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-2449">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-2449">Member Type</span></span>|<span data-ttu-id="c5b52-2450">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-2450">Static</span></span>|<span data-ttu-id="c5b52-2451">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-2451">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-2452">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-2452">Constructor</span></span>|<span data-ttu-id="c5b52-2453">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2453">No</span></span>|<span data-ttu-id="c5b52-2454">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2454">No</span></span>|  
|<span data-ttu-id="c5b52-2455">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-2455">Field</span></span>|<span data-ttu-id="c5b52-2456">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2456">No</span></span>|<span data-ttu-id="c5b52-2457">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2457">Yes.</span></span> <span data-ttu-id="c5b52-2458">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2458">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-2459">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-2459">Event</span></span>|<span data-ttu-id="c5b52-2460">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-2460">Not applicable</span></span>|<span data-ttu-id="c5b52-2461">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2461">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-2462">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2462">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2463">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2463">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-2464">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-2464">Method</span></span>|<span data-ttu-id="c5b52-2465">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2465">No</span></span>|<span data-ttu-id="c5b52-2466">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2466">Yes.</span></span> <span data-ttu-id="c5b52-2467">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2467">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-2468">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-2468">Nested Type</span></span>|<span data-ttu-id="c5b52-2469">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2469">No</span></span>|<span data-ttu-id="c5b52-2470">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2470">No</span></span>|  
|<span data-ttu-id="c5b52-2471">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-2471">Property</span></span>|<span data-ttu-id="c5b52-2472">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-2472">Not applicable</span></span>|<span data-ttu-id="c5b52-2473">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2473">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-2474">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2474">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2475">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2475">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-2476">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2476">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-2477">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2477">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-2478">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2478">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2479">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2479">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-2480">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2480">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-2481">Tableaux ou des types COM ne sont pas recherchés, sauf si elles ont déjà été chargés dans la table des classes disponibles.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2481">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="c5b52-2482">`typeName` le nom de type qualifié par son espace de noms ou un nom qualifié d’assembly qui inclut une spécification de nom d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2482">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="c5b52-2483">Consultez <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2483">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="c5b52-2484">Si `typeName` inclut l’espace de noms mais pas le nom de l’assembly, cette méthode recherche uniquement les assembly de l’objet appelant et dans Mscorlib.dll, dans cet ordre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2484">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="c5b52-2485">Si typeName est qualifié avec le nom d’assembly partiel ou complet, cette méthode recherche dans l’assembly spécifié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2485">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="c5b52-2486">Si l’assembly a un nom fort, un nom d’assembly complet est requis.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2486">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="c5b52-2487">Le <xref:System.Type.AssemblyQualifiedName%2A> propriété retourne un nom de type qualifié complet, y compris les types imbriqués, le nom de l’assembly et les arguments génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2487">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments.</span></span> <span data-ttu-id="c5b52-2488">Tous les compilateurs qui prennent en charge le common language runtime émettra le nom simple d’une classe imbriquée et la réflexion construit un nom tronqué interrogées, conformément aux conventions suivantes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2488">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2489">Dans le .NET Framework version 2.0, architecture de processeur est ajoutée à l’identité de l’assembly et peut être spécifié en tant que partie de chaînes de nom d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2489">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="c5b52-2490">Par exemple, « ProcessorArchitecture = msil ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2490">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="c5b52-2491">Toutefois, il n’est pas inclus dans la chaîne retournée par la <xref:System.Type.AssemblyQualifiedName%2A> propriété, pour des raisons de compatibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2491">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="c5b52-2492">Vous pouvez également charger des types en créant un <xref:System.Reflection.AssemblyName> objet et en le passant à la surcharge appropriée de la <xref:System.Reflection.Assembly.Load%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2492">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="c5b52-2493">Vous pouvez ensuite utiliser le <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> méthode pour charger des types à partir de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2493">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="c5b52-2494">Voir aussi <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2494">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="c5b52-2495">Délimiteur</span><span class="sxs-lookup"><span data-stu-id="c5b52-2495">Delimiter</span></span>|<span data-ttu-id="c5b52-2496">Signification</span><span class="sxs-lookup"><span data-stu-id="c5b52-2496">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="c5b52-2497">Barre oblique inverse (\\)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2497">Backslash (\\)</span></span>|<span data-ttu-id="c5b52-2498">Caractère d’échappement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2498">Escape character.</span></span>|  
|<span data-ttu-id="c5b52-2499">Accent grave (')</span><span class="sxs-lookup"><span data-stu-id="c5b52-2499">Backtick (\`)</span></span>|<span data-ttu-id="c5b52-2500">Précède un ou plusieurs chiffres représentant le nombre de paramètres de type, située à la fin du nom d’un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2500">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="c5b52-2501">Crochets ([])</span><span class="sxs-lookup"><span data-stu-id="c5b52-2501">Brackets ([])</span></span>|<span data-ttu-id="c5b52-2502">Placez une liste d’arguments de type générique, pour un type générique construit ; dans une liste d’arguments de type, placez un type qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2502">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="c5b52-2503">Virgule ()</span><span class="sxs-lookup"><span data-stu-id="c5b52-2503">Comma (,)</span></span>|<span data-ttu-id="c5b52-2504">Précède le nom de l’Assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2504">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="c5b52-2505">Point (.)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2505">Period (.)</span></span>|<span data-ttu-id="c5b52-2506">Indique les identificateurs d’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2506">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="c5b52-2507">Signe plus (+)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2507">Plus sign (+)</span></span>|<span data-ttu-id="c5b52-2508">Précède une classe imbriquée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2508">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="c5b52-2509">Par exemple, le nom qualifié complet pour une classe peut ressembler à ceci :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2509">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="c5b52-2510">Si l’espace de noms ont été TopNamespace, la chaîne devrait faire précéder le signe plus (+) avec un caractère d’échappement (\\) pour éviter qu’il soit interprété comme un séparateur d’imbrication.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2510">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="c5b52-2511">La réflexion génère cette chaîne comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2511">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="c5b52-2512">Un « ++ » devient «\\+\\+ » et un «\\« devient »\\\\».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2512">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="c5b52-2513">Ce nom qualifié peut être persistant et utilisé ultérieurement pour charger le <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2513">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="c5b52-2514">Pour rechercher et charger un <xref:System.Type>, utilisez <xref:System.Type.GetType%2A> avec le type de nom uniquement ou avec le nom de type qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2514">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="c5b52-2515"><xref:System.Type.GetType%2A> avec le type de nom uniquement recherchera le <xref:System.Type> dans l’assembly de l’appelant, puis dans l’assembly système.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2515"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="c5b52-2516"><xref:System.Type.GetType%2A> avec l’assembly de nom de type qualifié recherchera le <xref:System.Type> dans n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2516"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="c5b52-2517">Les noms de type peuvent inclure des caractères de fin qui indiquent des informations supplémentaires sur le type, par exemple si le type est un type référence, un type pointeur ou un type tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2517">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="c5b52-2518">Pour récupérer le nom de type sans ces caractères de fin, utilisez `t.GetElementType().ToString()`, où `t` est le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2518">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="c5b52-2519">Les espaces sont pertinents dans tous les composants de nom de type autre que le nom de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2519">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="c5b52-2520">Nom de l’assembly, espaces avant le séparateur ',', mais les espaces après le séparateur ',' sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2520">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="c5b52-2521">Le nom d’un type générique se termine avec un accent grave (\`) suivi de chiffres représentant le nombre d’arguments de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2521">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="c5b52-2522">L’objectif de cette altération des noms est de permettre aux compilateurs prendre en charge des types génériques avec le même nom mais avec différents nombres de paramètres de type, qui se produisent dans la même portée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2522">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="c5b52-2523">Par exemple, la réflexion retourne les noms tronqués `Tuple`1` and `Tuple`2` parmi les méthodes génériques `Tuple(Of T)` et `Tuple(Of T0, T1)` en Visual Basic, ou `Tuple<T>` et Tuple`\<T0, T1>` en Visual c#.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2523">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="c5b52-2524">Pour les types génériques, la liste d’arguments de type est placée entre crochets et les arguments de type sont séparés par des virgules.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2524">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="c5b52-2525">Par exemple, un générique <xref:System.Collections.Generic.Dictionary%602> a deux paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2525">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="c5b52-2526">Un <xref:System.Collections.Generic.Dictionary%602> de `MyType` avec des clés de type <xref:System.String> peut être représenté comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2526">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="c5b52-2527">Pour spécifier un type qualifié d’assembly dans une liste d’arguments de type, mettez le type qualifié d’assembly entre crochets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2527">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="c5b52-2528">Sinon, les virgules qui séparent les parties du nom qualifié d’assembly sont interprétées comme délimitant les arguments de type supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2528">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="c5b52-2529">Par exemple, un <xref:System.Collections.Generic.Dictionary%602> de `MyType` issu de MyAssembly.dll, avec des clés de type <xref:System.String>, peut être spécifiée comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2529">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2530">Un type qualifié d’assembly peut être placé entre crochets uniquement lorsqu’il apparaît dans une liste de paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2530">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="c5b52-2531">Les règles de recherche d’assemblys pour les types qualifiés et non qualifiés dans les listes de paramètres de type sont les mêmes que les règles pour les types non génériques qualifiés et non qualifiés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2531">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="c5b52-2532">Types Nullable sont un cas spécial de types génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2532">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="c5b52-2533">Par exemple, un nullable <xref:System.Int32> est représentée par la chaîne « System.Nullable'1[System.Int32] ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2533">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2534">En c#, C++ et Visual Basic, vous pouvez également obtenir les types nullable à l’aide des opérateurs de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2534">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="c5b52-2535">Par exemple, autorisant <xref:System.Boolean> type renvoyé par `typeof(Nullable<bool>)` en c#, par `Nullable<Boolean>::typeid` en C++ et par `GetType(Nullable(Of Boolean))` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2535">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="c5b52-2536">Le tableau suivant présente la syntaxe à utiliser avec `GetType` pour différents types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2536">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="c5b52-2537">Pour obtenir</span><span class="sxs-lookup"><span data-stu-id="c5b52-2537">To Get</span></span>|<span data-ttu-id="c5b52-2538">Utilisez</span><span class="sxs-lookup"><span data-stu-id="c5b52-2538">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="c5b52-2539">Un nullable <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="c5b52-2539">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="c5b52-2540">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2540">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="c5b52-2541">Un pointeur non managé vers `MyType`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2541">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="c5b52-2542">Un pointeur non managé vers un pointeur vers `MyType`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2542">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="c5b52-2543">Un pointeur managé ou la référence à `MyType`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2543">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="c5b52-2544">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2544">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="c5b52-2545">Notez que contrairement aux pointeurs, les références sont limitées à un niveau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2545">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="c5b52-2546">Une classe parente et une classe imbriquée</span><span class="sxs-lookup"><span data-stu-id="c5b52-2546">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="c5b52-2547">Un tableau unidimensionnel avec une limite inférieure de 0</span><span class="sxs-lookup"><span data-stu-id="c5b52-2547">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="c5b52-2548">Un tableau unidimensionnel avec une limite inférieure est inconnue</span><span class="sxs-lookup"><span data-stu-id="c5b52-2548">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="c5b52-2549">Un tableau à n dimensions</span><span class="sxs-lookup"><span data-stu-id="c5b52-2549">An n-dimensional array</span></span>|<span data-ttu-id="c5b52-2550">Une virgule (,) entre les crochets total de n-1 fois.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2550">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="c5b52-2551">Par exemple, `System.Object[,,]` représente un à trois dimensions `Object` tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2551">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="c5b52-2552">Un à deux dimensions un tableau</span><span class="sxs-lookup"><span data-stu-id="c5b52-2552">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="c5b52-2553">Un tableau rectangulaire à deux dimensions avec des limites inférieures sont inconnues</span><span class="sxs-lookup"><span data-stu-id="c5b52-2553">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="c5b52-2554">Un type générique avec un argument de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2554">A generic type with one type argument</span></span>|<span data-ttu-id="c5b52-2555">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2555">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="c5b52-2556">Un type générique avec deux arguments de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2556">A generic type with two type arguments</span></span>|<span data-ttu-id="c5b52-2557">`Type.GetType("MyGenericType`2[MyType,AnotherType]")'</span><span class="sxs-lookup"><span data-stu-id="c5b52-2557">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="c5b52-2558">Un type générique avec deux arguments de type qualifié d’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2558">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="c5b52-2559">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")'</span><span class="sxs-lookup"><span data-stu-id="c5b52-2559">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="c5b52-2560">Un type générique qualifié d’assembly avec un argument de type qualifié d’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2560">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="c5b52-2561">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")'</span><span class="sxs-lookup"><span data-stu-id="c5b52-2561">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="c5b52-2562">Un type générique dont l’argument de type est un type générique avec deux arguments de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2562">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="c5b52-2563">`Type.GetType("MyGenericType`1 [AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2563">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-2564">L’exemple suivant récupère le type de `System.Int32` et utilise cet objet de type pour afficher le <xref:System.Type.FullName%2A> propriété du `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2564">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span> <span data-ttu-id="c5b52-2565">Si un objet de type fait référence à un assembly qui n’existe pas, cet exemple lève une exception.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2565">If a type object refers to an assembly that does not exist, this example throws an exception.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2566">
            <paramref name="typeName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2566">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-2567">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2567">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-2568">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et le type est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2568">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="c5b52-2569">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2569">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2570">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient des caractères non valides, tels qu’une tabulation incorporée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2570">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="c5b52-2571">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2571">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2572">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> est une chaîne vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2572">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="c5b52-2573">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2573">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2574">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> représente un type de tableau avec une taille non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2574">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="c5b52-2575">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2575">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2576">
            <paramref name="typeName" /> représente un tableau de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2576">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2577">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient une syntaxe non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2577">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="c5b52-2578">Par exemple, « MyType [, \*,] ».</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2578">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="c5b52-2579">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2579">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2580">
            <paramref name="typeName" /> représente un type générique qui a un type pointeur, un type <see langword="ByRef" /> ou <see cref="T:System.Void" /> comme l’un de ses arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2580">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2581">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2581">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2582">
            <paramref name="typeName" /> représente un type générique qui a un nombre incorrect d’arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2582">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2583">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2583">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2584">
            <paramref name="typeName" /> représente un type générique, et un de ses arguments de type ne satisfait pas aux contraintes pour le paramètre de type correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2584">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c5b52-2585">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et l’assembly ou l’une de ses dépendances est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2585">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="c5b52-2586">Dans <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET pour les applications du Windows Store</see> ou la <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Bibliothèque de classes portable</see>, interceptez l’exception de la classe de base, <see cref="T:System.IO.IOException" />, à la place.</span>
              <span class="sxs-lookup">
                <span data-stu-id="c5b52-2586">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="c5b52-2587">L’assembly ou une de ses dépendances a été trouvé, mais n’a pas pu être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2587">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="c5b52-2588">L’assembly ou une de ses dépendances n’est pas valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2588">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="c5b52-2589">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2589">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2590">La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée, et l’assembly a été compilé avec une version ultérieure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2590">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="c5b52-2591">Spécification des noms de types qualifiés complets</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2591">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="c5b52-2592">Nom qualifié d'assembly du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2592">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="c5b52-2593">Consultez <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2593">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="c5b52-2594">Si le type se trouve dans Mscorlib.dll ou l'assembly en cours d'exécution, il suffit de fournir le nom du type qualifié par son espace de noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2594">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="c5b52-2595">
            <see langword="true" /> pour lever une exception si le type est introuvable ; <see langword="false" /> pour retourner <see langword="null" />. La spécification de <see langword="false" /> supprime également d'autres conditions d'exception, mais pas toutes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2595">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="c5b52-2596">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2596">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="c5b52-2597">
            <see langword="true" /> pour effectuer une recherche qui ne respecte pas la casse de <c>typeName</c> ; <see langword="false" /> pour effectuer une recherche qui respecte la casse de <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2597">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2598">Obtient le <see cref="T:System.Type" /> portant le nom spécifié, indiquant s'il faut lever une exception si le type est introuvable et s'il faut effectuer une recherche respectant la casse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2598">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2599">Type portant le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2599">The type with the specified name.</span>
          </span>
          <span data-ttu-id="c5b52-2600">Si le type est introuvable, le paramètre <paramref name="throwOnError" /> spécifie si <see langword="null" /> est retourné ou bien une exception est levée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2600">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="c5b52-2601">Dans certains cas, une exception est levée indépendamment de la valeur de <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2601">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="c5b52-2602">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2602">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2603">Vous pouvez utiliser la <xref:System.Type.GetType%2A> méthode pour obtenir un <xref:System.Type> de l’objet pour un type dans un autre assembly, si vous connaissez son nom qualifié d’assembly qui peut être obtenu à partir de <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2603">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="c5b52-2604"><xref:System.Type.GetType%2A> provoque le chargement de l’assembly spécifié dans `typeName`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2604"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="c5b52-2605">Vous pouvez également charger un assembly à l’aide de la <xref:System.Reflection.Assembly.Load%2A> (méthode), puis utiliser le <xref:System.Type.GetType%2A> ou <xref:System.Reflection.Assembly.GetTypes%2A> méthodes de la <xref:System.Reflection.Assembly> classe pour obtenir <xref:System.Type> objets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2605">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="c5b52-2606">Si un type est dans un assembly connu de votre programme au moment de la compilation, il est plus efficace d’utiliser `typeof` en c#, <xref:System.Type.GetType%2A> en Visual Basic, ou `typeid` en C++.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2606">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="c5b52-2607">`GetType` fonctionne uniquement sur les assemblys chargés à partir du disque.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2607">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="c5b52-2608">Si vous appelez `GetType` pour rechercher un type défini dans un assembly dynamique défini à l’aide de la <xref:System.Reflection.Emit> services, vous pouvez obtenir un comportement incohérent.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2608">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="c5b52-2609">Le comportement varie selon que l’assembly dynamique est persistant, autrement dit, créé à l’aide de la `RunAndSave` ou `Save` accéder aux modes de le <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> énumération.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2609">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="c5b52-2610">Si l’assembly dynamique est persistant et a été écrite sur le disque avant `GetType` est appelé, le chargeur recherche l’assembly enregistré sur le disque, charge l’assembly et récupère le type de cet assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2610">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="c5b52-2611">Si l’assembly n’a pas été enregistré pour le disque lorsque `GetType` est appelée, la méthode retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2611">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="c5b52-2612">`GetType` ne comprend pas les assemblys dynamiques transitoires ; Par conséquent, l’appel `GetType` pour récupérer un type dans un temporaire assembly dynamique retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2612">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="c5b52-2613">Pour utiliser `GetType` sur un module dynamique, vous abonner à la <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> événements et les appels `GetType` avant l’enregistrement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2613">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="c5b52-2614">Sinon, vous obtiendrez deux copies de l’assembly en mémoire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2614">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="c5b52-2615">Le `throwOnError` paramètre spécifie que se passe-t-il lorsque le type est introuvable et supprime également certaines autres conditions d’exception, comme décrit dans la section Exceptions.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2615">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="c5b52-2616">Certaines exceptions sont levées indépendamment de la valeur de `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2616">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="c5b52-2617">Par exemple, si le type est trouvé mais ne peut pas être chargé, un <xref:System.TypeLoadException> est levée même si `throwOnError` est `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2617">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="c5b52-2618">Le tableau suivant présente les membres d’une classe de base sont retournés par la `Get` méthodes lors de la réflexion sur un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2618">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="c5b52-2619">Type de membre</span><span class="sxs-lookup"><span data-stu-id="c5b52-2619">Member Type</span></span>|<span data-ttu-id="c5b52-2620">Statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-2620">Static</span></span>|<span data-ttu-id="c5b52-2621">Non statique</span><span class="sxs-lookup"><span data-stu-id="c5b52-2621">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="c5b52-2622">Constructeur</span><span class="sxs-lookup"><span data-stu-id="c5b52-2622">Constructor</span></span>|<span data-ttu-id="c5b52-2623">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2623">No</span></span>|<span data-ttu-id="c5b52-2624">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2624">No</span></span>|  
|<span data-ttu-id="c5b52-2625">Champ</span><span class="sxs-lookup"><span data-stu-id="c5b52-2625">Field</span></span>|<span data-ttu-id="c5b52-2626">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2626">No</span></span>|<span data-ttu-id="c5b52-2627">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2627">Yes.</span></span> <span data-ttu-id="c5b52-2628">Un champ est toujours hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2628">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-2629">événement</span><span class="sxs-lookup"><span data-stu-id="c5b52-2629">Event</span></span>|<span data-ttu-id="c5b52-2630">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-2630">Not applicable</span></span>|<span data-ttu-id="c5b52-2631">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2631">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-2632">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2632">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2633">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2633">See note 2 below.</span></span>|  
|<span data-ttu-id="c5b52-2634">Méthode</span><span class="sxs-lookup"><span data-stu-id="c5b52-2634">Method</span></span>|<span data-ttu-id="c5b52-2635">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2635">No</span></span>|<span data-ttu-id="c5b52-2636">Oui.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2636">Yes.</span></span> <span data-ttu-id="c5b52-2637">Une méthode (virtuelle et non virtuel) peut être masquée par nom ou masquer-par-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2637">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="c5b52-2638">Type imbriqué</span><span class="sxs-lookup"><span data-stu-id="c5b52-2638">Nested Type</span></span>|<span data-ttu-id="c5b52-2639">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2639">No</span></span>|<span data-ttu-id="c5b52-2640">Non</span><span class="sxs-lookup"><span data-stu-id="c5b52-2640">No</span></span>|  
|<span data-ttu-id="c5b52-2641">Property</span><span class="sxs-lookup"><span data-stu-id="c5b52-2641">Property</span></span>|<span data-ttu-id="c5b52-2642">Non applicable</span><span class="sxs-lookup"><span data-stu-id="c5b52-2642">Not applicable</span></span>|<span data-ttu-id="c5b52-2643">La règle de système de type commun est que l’héritage est identique à celle des méthodes qui implémentent la propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2643">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="c5b52-2644">Réflexion traite les propriétés comme hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2644">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2645">Voir la Remarque 2 ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2645">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="c5b52-2646">Masquer-par-nom-et-signature prend en compte toutes les parties de la signature, y compris les modificateurs personnalisés, des conventions d’appel non managées, les types de paramètres, les sentinelles et les types de retour.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2646">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="c5b52-2647">Il s’agit d’une comparaison binaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2647">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="c5b52-2648">Pour la réflexion, les propriétés et événements sont hide-by-nom-et-signature.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2648">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="c5b52-2649">Si vous avez une propriété avec une opération get et un accesseur set dans la classe de base, mais la classe dérivée possède uniquement un accesseur get, la propriété de la classe dérivée masque la propriété de classe de base, et vous ne serez pas en mesure d’accéder à l’accesseur Set sur la classe de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2649">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="c5b52-2650">Attributs personnalisés ne font pas partie du système de type commun.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2650">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="c5b52-2651">Tableaux ou des types COM ne sont pas recherchés, sauf si elles ont déjà été chargés dans la table des classes disponibles.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2651">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="c5b52-2652">`typeName` le nom de type qualifié par son espace de noms ou un nom qualifié d’assembly qui inclut une spécification de nom d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2652">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="c5b52-2653">Consultez <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2653">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="c5b52-2654">Si `typeName` inclut l’espace de noms mais pas le nom de l’assembly, cette méthode recherche uniquement les assembly de l’objet appelant et dans Mscorlib.dll, dans cet ordre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2654">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="c5b52-2655">Si typeName est qualifié avec le nom d’assembly partiel ou complet, cette méthode recherche dans l’assembly spécifié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2655">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="c5b52-2656">Si l’assembly a un nom fort, un nom d’assembly complet est requis.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2656">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="c5b52-2657">Le <xref:System.Type.AssemblyQualifiedName%2A> propriété retourne un nom de type qualifié complet, y compris les types imbriqués, le nom de l’assembly et les arguments de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2657">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments.</span></span> <span data-ttu-id="c5b52-2658">Tous les compilateurs qui prennent en charge le common language runtime émettra le nom simple d’une classe imbriquée et la réflexion construit un nom tronqué interrogées, conformément aux conventions suivantes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2658">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2659">Dans le .NET Framework version 2.0, architecture de processeur est ajoutée à l’identité de l’assembly et peut être spécifié en tant que partie de chaînes de nom d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2659">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="c5b52-2660">Par exemple, « ProcessorArchitecture = msil ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2660">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="c5b52-2661">Toutefois, il n’est pas inclus dans la chaîne retournée par la <xref:System.Type.AssemblyQualifiedName%2A> propriété, pour des raisons de compatibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2661">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="c5b52-2662">Vous pouvez également charger des types en créant un <xref:System.Reflection.AssemblyName> objet et en le passant à la surcharge appropriée de la <xref:System.Reflection.Assembly.Load%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2662">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="c5b52-2663">Vous pouvez ensuite utiliser le <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> méthode pour charger des types à partir de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2663">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="c5b52-2664">Voir aussi <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2664">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="c5b52-2665">Délimiteur</span><span class="sxs-lookup"><span data-stu-id="c5b52-2665">Delimiter</span></span>|<span data-ttu-id="c5b52-2666">Signification</span><span class="sxs-lookup"><span data-stu-id="c5b52-2666">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="c5b52-2667">Barre oblique inverse (\\)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2667">Backslash (\\)</span></span>|<span data-ttu-id="c5b52-2668">Caractère d’échappement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2668">Escape character.</span></span>|  
|<span data-ttu-id="c5b52-2669">Accent grave (')</span><span class="sxs-lookup"><span data-stu-id="c5b52-2669">Backtick (\`)</span></span>|<span data-ttu-id="c5b52-2670">Précède un ou plusieurs chiffres représentant le nombre de paramètres de type, située à la fin du nom d’un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2670">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="c5b52-2671">Crochets ([])</span><span class="sxs-lookup"><span data-stu-id="c5b52-2671">Brackets ([])</span></span>|<span data-ttu-id="c5b52-2672">Placez une liste d’arguments de type générique, pour un type générique construit ; dans une liste d’arguments de type, placez un type qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2672">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="c5b52-2673">Virgule ()</span><span class="sxs-lookup"><span data-stu-id="c5b52-2673">Comma (,)</span></span>|<span data-ttu-id="c5b52-2674">Précède le nom de l’Assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2674">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="c5b52-2675">Point (.)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2675">Period (.)</span></span>|<span data-ttu-id="c5b52-2676">Indique les identificateurs d’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2676">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="c5b52-2677">Signe plus (+)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2677">Plus sign (+)</span></span>|<span data-ttu-id="c5b52-2678">Précède une classe imbriquée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2678">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="c5b52-2679">Par exemple, le nom qualifié complet pour une classe peut ressembler à ceci :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2679">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="c5b52-2680">Si l’espace de noms ont été TopNamespace, la chaîne devrait faire précéder le signe plus (+) avec un caractère d’échappement (\\) pour éviter qu’il soit interprété comme un séparateur d’imbrication.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2680">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="c5b52-2681">La réflexion génère cette chaîne comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2681">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="c5b52-2682">Un « ++ » devient «\\+\\+ » et un «\\« devient »\\\\».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2682">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="c5b52-2683">Ce nom qualifié peut être persistant et utilisé ultérieurement pour charger le <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2683">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="c5b52-2684">Pour rechercher et charger un <xref:System.Type>, utilisez <xref:System.Type.GetType%2A> avec le type de nom uniquement ou avec le nom de type qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2684">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="c5b52-2685"><xref:System.Type.GetType%2A> avec le type de nom uniquement recherchera le <xref:System.Type> dans l’assembly de l’appelant, puis dans l’assembly système.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2685"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="c5b52-2686"><xref:System.Type.GetType%2A> avec l’assembly de nom de type qualifié recherchera le <xref:System.Type> dans n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2686"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="c5b52-2687">Les noms de type peuvent inclure des caractères de fin qui indiquent des informations supplémentaires sur le type, par exemple si le type est un type référence, un type pointeur ou un type tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2687">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="c5b52-2688">Pour récupérer le nom de type sans ces caractères de fin, utilisez `t.GetElementType().ToString()`, où `t` est le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2688">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="c5b52-2689">Les espaces sont pertinents dans tous les composants de nom de type autre que le nom de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2689">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="c5b52-2690">Nom de l’assembly, espaces avant le séparateur ',', mais les espaces après le séparateur ',' sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2690">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="c5b52-2691">Le nom d’un type générique se termine avec un accent grave (\`) suivi de chiffres représentant le nombre d’arguments de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2691">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="c5b52-2692">L’objectif de cette altération des noms est de permettre aux compilateurs prendre en charge des types génériques avec le même nom mais avec différents nombres de paramètres de type, qui se produisent dans la même portée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2692">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="c5b52-2693">Par exemple, la réflexion retourne les noms tronqués `Tuple`1` and `Tuple`2` parmi les méthodes génériques `Tuple(Of T)` et `Tuple(Of T0, T1)` en Visual Basic, ou `Tuple<T>` et Tuple`\<T0, T1>` en Visual c#.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2693">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="c5b52-2694">Pour les types génériques, la liste d’arguments de type est placée entre crochets et les arguments de type sont séparés par des virgules.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2694">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="c5b52-2695">Par exemple, un générique <xref:System.Collections.Generic.Dictionary%602> a deux paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2695">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="c5b52-2696">Un <xref:System.Collections.Generic.Dictionary%602> de `MyType` avec des clés de type <xref:System.String> peut être représenté comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2696">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="c5b52-2697">Pour spécifier un type qualifié d’assembly dans une liste d’arguments de type, mettez le type qualifié d’assembly entre crochets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2697">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="c5b52-2698">Sinon, les virgules qui séparent les parties du nom qualifié d’assembly sont interprétées comme délimitant les arguments de type supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2698">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="c5b52-2699">Par exemple, un <xref:System.Collections.Generic.Dictionary%602> de `MyType` issu de MyAssembly.dll, avec des clés de type <xref:System.String>, peut être spécifiée comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2699">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2700">Un type qualifié d’assembly peut être placé entre crochets uniquement lorsqu’il apparaît dans une liste de paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2700">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="c5b52-2701">Les règles de recherche d’assemblys pour les types qualifiés et non qualifiés dans les listes de paramètres de type sont les mêmes que les règles pour les types non génériques qualifiés et non qualifiés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2701">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="c5b52-2702">Types Nullable sont un cas spécial de types génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2702">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="c5b52-2703">Par exemple, un nullable <xref:System.Int32> est représentée par la chaîne « System.Nullable'1[System.Int32] ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-2703">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2704">En c#, C++ et Visual Basic, vous pouvez également obtenir les types nullable à l’aide des opérateurs de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2704">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="c5b52-2705">Par exemple, autorisant <xref:System.Boolean> type renvoyé par `typeof(Nullable<bool>)` en c#, par `Nullable<Boolean>::typeid` en C++ et par `GetType(Nullable(Of Boolean))` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2705">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="c5b52-2706">Le tableau suivant présente la syntaxe à utiliser avec `GetType` pour différents types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2706">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="c5b52-2707">Pour obtenir</span><span class="sxs-lookup"><span data-stu-id="c5b52-2707">To Get</span></span>|<span data-ttu-id="c5b52-2708">Utilisez</span><span class="sxs-lookup"><span data-stu-id="c5b52-2708">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="c5b52-2709">Un nullable <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="c5b52-2709">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="c5b52-2710">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2710">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="c5b52-2711">Un pointeur non managé vers `MyType`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2711">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="c5b52-2712">Un pointeur non managé vers un pointeur vers `MyType`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2712">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="c5b52-2713">Un pointeur managé ou la référence à `MyType`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2713">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="c5b52-2714">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2714">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="c5b52-2715">Notez que contrairement aux pointeurs, les références sont limitées à un niveau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2715">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="c5b52-2716">Une classe parente et une classe imbriquée</span><span class="sxs-lookup"><span data-stu-id="c5b52-2716">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="c5b52-2717">Un tableau unidimensionnel avec une limite inférieure de 0</span><span class="sxs-lookup"><span data-stu-id="c5b52-2717">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="c5b52-2718">Un tableau unidimensionnel avec une limite inférieure est inconnue</span><span class="sxs-lookup"><span data-stu-id="c5b52-2718">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="c5b52-2719">Un tableau à n dimensions</span><span class="sxs-lookup"><span data-stu-id="c5b52-2719">An n-dimensional array</span></span>|<span data-ttu-id="c5b52-2720">Une virgule (,) entre les crochets total de n-1 fois.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2720">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="c5b52-2721">Par exemple, `System.Object[,,]` représente un à trois dimensions `Object` tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2721">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="c5b52-2722">Un à deux dimensions un tableau</span><span class="sxs-lookup"><span data-stu-id="c5b52-2722">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="c5b52-2723">Un tableau rectangulaire à deux dimensions avec des limites inférieures sont inconnues</span><span class="sxs-lookup"><span data-stu-id="c5b52-2723">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="c5b52-2724">Un type générique avec un argument de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2724">A generic type with one type argument</span></span>|<span data-ttu-id="c5b52-2725">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2725">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="c5b52-2726">Un type générique avec deux arguments de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2726">A generic type with two type arguments</span></span>|<span data-ttu-id="c5b52-2727">`Type.GetType("MyGenericType`2[MyType,AnotherType]")'</span><span class="sxs-lookup"><span data-stu-id="c5b52-2727">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="c5b52-2728">Un type générique avec deux arguments de type qualifié d’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2728">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="c5b52-2729">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")'</span><span class="sxs-lookup"><span data-stu-id="c5b52-2729">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="c5b52-2730">Un type générique qualifié d’assembly avec un argument de type qualifié d’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2730">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="c5b52-2731">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")'</span><span class="sxs-lookup"><span data-stu-id="c5b52-2731">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="c5b52-2732">Un type générique dont l’argument de type est un type générique avec deux arguments de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2732">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="c5b52-2733">`Type.GetType("MyGenericType`1 [AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="c5b52-2733">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2734">
            <paramref name="typeName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2734">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-2735">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2735">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-2736">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et le type est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2736">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="c5b52-2737">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2737">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2738">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient des caractères non valides, tels qu’une tabulation incorporée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2738">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="c5b52-2739">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2739">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2740">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> est une chaîne vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2740">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="c5b52-2741">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2741">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2742">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> représente un type de tableau avec une taille non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2742">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="c5b52-2743">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2743">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2744">
            <paramref name="typeName" /> représente un tableau de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2744">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2745">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient une syntaxe non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2745">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="c5b52-2746">Par exemple, « MyType [, \*,] ».</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2746">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="c5b52-2747">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2747">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2748">
            <paramref name="typeName" /> représente un type générique qui a un type pointeur, un type <see langword="ByRef" /> ou <see cref="T:System.Void" /> comme l’un de ses arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2748">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2749">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2749">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2750">
            <paramref name="typeName" /> représente un type générique qui a un nombre incorrect d’arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2750">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2751">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2751">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2752">
            <paramref name="typeName" /> représente un type générique, et un de ses arguments de type ne satisfait pas aux contraintes pour le paramètre de type correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2752">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c5b52-2753">
            <paramref name="throwOnError" /> a la valeur <see langword="true" />, et l’assembly ou l’une de ses dépendances est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2753">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="c5b52-2754">L’assembly ou une de ses dépendances a été trouvé, mais n’a pas pu être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2754">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="c5b52-2755">L’assembly ou une de ses dépendances n’est pas valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2755">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="c5b52-2756">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2756">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2757">La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée, et l’assembly a été compilé avec une version ultérieure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2757">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="c5b52-2758">Spécification des noms de types qualifiés complets</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2758">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type)) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="c5b52-2759">Nom du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2759">The name of the type to get.</span>
          </span>
          <span data-ttu-id="c5b52-2760">Si le paramètre <c>typeResolver</c> est fourni, le nom de type peut être n’importe quelle chaîne pouvant être résolue par <c>typeResolver</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2760">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="c5b52-2761">Si le paramètre <c>assemblyResolver</c> est fourni ou si la résolution de type standard est utilisée, <c>typeName</c> doit être un nom d’assembly complet (voir <see cref="P:System.Type.AssemblyQualifiedName" />), à moins que le type ne se trouve dans l’assembly en cours d’exécution ou dans Mscorlib.dll, cas dans lequel il suffit de fournir le nom de type qualifié par son espace de noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2761">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="c5b52-2762">Méthode qui trouve et retourne l’assembly spécifié dans <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2762">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="c5b52-2763">Le nom de l’assembly est passé à <c>assemblyResolver</c> en tant qu’objet <see cref="T:System.Reflection.AssemblyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2763">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="c5b52-2764">Si <c>typeName</c> ne contient pas le nom d’un assembly, <c>assemblyResolver</c> n’est pas appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2764">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="c5b52-2765">Si <c>assemblyResolver</c> n’est pas fourni, une résolution d’assembly standard est effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2765">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="c5b52-2766">Attention   Ne passez pas de méthodes provenant d’appelants inconnus ou non fiables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2766">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="c5b52-2767">Vous risqueriez d'élever les privilèges du code malveillant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2767">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="c5b52-2768">Utilisez uniquement les méthodes que vous fournissez ou avec lesquelles vous êtes familiarisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2768">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="c5b52-2769">Méthode qui trouve et retourne le type spécifié par <c>typeName</c> à partir de l’assembly retourné par <c>assemblyResolver</c> ou par la résolution d’assembly standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2769">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="c5b52-2770">Si aucun assembly n’est fourni, la méthode <c>typeResolver</c> peut en fournir un.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2770">If no assembly is provided, the <c>typeResolver</c> method can provide one.</span>
          </span>
          <span data-ttu-id="c5b52-2771">La méthode prend également un paramètre qui spécifie s'il faut exécuter une recherche non sensible à la casse ; <see langword="false" /> est passé à ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2771">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="c5b52-2772">Attention   Ne passez pas de méthodes provenant d’appelants inconnus ou non fiables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2772">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2773">Obtient le type avec le nom spécifié et éventuellement des méthodes personnalisées permettant de résoudre l'assembly et le type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2773">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2774">Type portant le nom spécifié, ou <see langword="null" /> si le type est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2774">The type with the specified name, or <see langword="null" /> if the type is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2775">Scénarios d’utilisation pour cette méthode et les détails sur la `assemblyResolver` et `typeResolver` paramètres se trouvent dans le <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2775">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2776">Si `typeName` est introuvable, l’appel à la <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> retourne de la méthode `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2776">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`.</span></span> <span data-ttu-id="c5b52-2777">Il ne lève pas d’exception.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2777">It does not throw an exception.</span></span> <span data-ttu-id="c5b52-2778">Pour contrôler si une exception est levée, appelez une surcharge de la <xref:System.Type.GetType%2A> méthode qui a un `throwOnError` paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2778">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="c5b52-2779">Appel de cette surcharge de méthode est le même que si vous appelez le <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> surcharge de méthode et en spécifiant `false` pour le `throwOnError` et `ignoreCase` paramètres.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2779">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2780">
            <paramref name="typeName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2780">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-2781">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2781">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2782">Une erreur se produit lorsque <paramref name="typeName" /> est analysé dans un nom de type et un nom d'assembly (par exemple, lorsque le nom de type simple inclut un caractère spécial sans séquence d'échappement).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2782">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="c5b52-2783">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2783">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2784">
            <paramref name="typeName" /> représente un type générique qui a un type pointeur, un type <see langword="ByRef" /> ou <see cref="T:System.Void" /> comme l’un de ses arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2784">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2785">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2785">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2786">
            <paramref name="typeName" /> représente un type générique qui a un nombre incorrect d’arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2786">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2787">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2787">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2788">
            <paramref name="typeName" /> représente un type générique, et un de ses arguments de type ne satisfait pas aux contraintes pour le paramètre de type correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2788">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-2789">
            <paramref name="typeName" /> représente un tableau de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2789">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="c5b52-2790">L’assembly ou une de ses dépendances a été trouvé, mais n’a pas pu être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2790">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="c5b52-2791">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2791">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2792">
            <paramref name="typeName" /> contient un nom d'assembly non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2792">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="c5b52-2793">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2793">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2794">
            <paramref name="typeName" /> est un nom d'assembly valide sans nom de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2794">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="c5b52-2795">L’assembly ou une de ses dépendances n’est pas valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2795">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="c5b52-2796">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2796">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2797">L’assembly a été compilé avec une version du Common Language Runtime postérieure à la version actuellement chargée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2797">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="c5b52-2798">Nom du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2798">The name of the type to get.</span>
          </span>
          <span data-ttu-id="c5b52-2799">Si le paramètre <c>typeResolver</c> est fourni, le nom de type peut être n’importe quelle chaîne pouvant être résolue par <c>typeResolver</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2799">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="c5b52-2800">Si le paramètre <c>assemblyResolver</c> est fourni ou si la résolution de type standard est utilisée, <c>typeName</c> doit être un nom d’assembly complet (voir <see cref="P:System.Type.AssemblyQualifiedName" />), à moins que le type ne se trouve dans l’assembly en cours d’exécution ou dans Mscorlib.dll, cas dans lequel il suffit de fournir le nom de type qualifié par son espace de noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2800">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="c5b52-2801">Méthode qui trouve et retourne l’assembly spécifié dans <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2801">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="c5b52-2802">Le nom de l’assembly est passé à <c>assemblyResolver</c> en tant qu’objet <see cref="T:System.Reflection.AssemblyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2802">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="c5b52-2803">Si <c>typeName</c> ne contient pas le nom d’un assembly, <c>assemblyResolver</c> n’est pas appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2803">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="c5b52-2804">Si <c>assemblyResolver</c> n’est pas fourni, une résolution d’assembly standard est effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2804">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="c5b52-2805">Attention   Ne passez pas de méthodes provenant d’appelants inconnus ou non fiables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2805">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="c5b52-2806">Vous risqueriez d'élever les privilèges du code malveillant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2806">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="c5b52-2807">Utilisez uniquement les méthodes que vous fournissez ou avec lesquelles vous êtes familiarisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2807">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="c5b52-2808">Méthode qui trouve et retourne le type spécifié par <c>typeName</c> à partir de l’assembly retourné par <c>assemblyResolver</c> ou par la résolution d’assembly standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2808">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="c5b52-2809">Si aucun assembly n'est fourni, la méthode peut en fournir un.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2809">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="c5b52-2810">La méthode prend également un paramètre qui spécifie s'il faut exécuter une recherche non sensible à la casse ; <see langword="false" /> est passé à ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2810">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="c5b52-2811">Attention   Ne passez pas de méthodes provenant d’appelants inconnus ou non fiables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2811">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="c5b52-2812">
            <see langword="true" /> pour lever une exception si le type est introuvable ; <see langword="false" /> pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2812">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-2813">
            <see langword="false" /> supprime également d'autres conditions d'exception, mais pas toutes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2813">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="c5b52-2814">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2814">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2815">Obtient le type portant le nom spécifié, en indiquant s'il faut lever une exception si le type est introuvable et, éventuellement, en fournissant des méthodes personnalisées qui permettent de résoudre l'assembly et le type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2815">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2816">Type portant le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2816">The type with the specified name.</span>
          </span>
          <span data-ttu-id="c5b52-2817">Si le type est introuvable, le paramètre <paramref name="throwOnError" /> spécifie si <see langword="null" /> est retourné ou bien une exception est levée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2817">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="c5b52-2818">Dans certains cas, une exception est levée indépendamment de la valeur de <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2818">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="c5b52-2819">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2819">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2820">Scénarios d’utilisation pour cette méthode et les détails sur la `assemblyResolver` et `typeResolver` paramètres se trouvent dans le <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2820">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="c5b52-2821">Appel de cette surcharge de méthode est le même que si vous appelez le <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> surcharge de méthode et en spécifiant `false` pour le `ignoreCase` paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2821">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-2822">
            <paramref name="typeName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2822">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-2823">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2823">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-2824">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et le type est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2824">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="c5b52-2825">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2825">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2826">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient des caractères non valides, tels qu’une tabulation incorporée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2826">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="c5b52-2827">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2827">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2828">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> est une chaîne vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2828">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="c5b52-2829">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2829">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2830">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> représente un type de tableau avec une taille non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2830">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="c5b52-2831">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2831">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2832">
            <paramref name="typeName" /> représente un tableau de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2832">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-2833">Une erreur se produit lorsque <paramref name="typeName" /> est analysé dans un nom de type et un nom d'assembly (par exemple, lorsque le nom de type simple inclut un caractère spécial sans séquence d'échappement).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2833">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="c5b52-2834">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2834">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2835">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient une syntaxe non valide (par exemple, "MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2835">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="c5b52-2836">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2836">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2837">
            <paramref name="typeName" /> représente un type générique qui a un type pointeur, un type <see langword="ByRef" /> ou <see cref="T:System.Void" /> comme l’un de ses arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2837">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2838">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2838">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2839">
            <paramref name="typeName" /> représente un type générique qui a un nombre incorrect d’arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2839">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-2840">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2840">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2841">
            <paramref name="typeName" /> représente un type générique, et un de ses arguments de type ne satisfait pas aux contraintes pour le paramètre de type correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2841">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c5b52-2842">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et l’assembly ou l’une de ses dépendances est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2842">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
          <span data-ttu-id="c5b52-2843">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2843">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2844">
            <paramref name="typeName" /> contient un nom d'assembly non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2844">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="c5b52-2845">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2845">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2846">
            <paramref name="typeName" /> est un nom d'assembly valide sans nom de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2846">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="c5b52-2847">L’assembly ou une de ses dépendances a été trouvé, mais n’a pas pu être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2847">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="c5b52-2848">L’assembly ou une de ses dépendances n’est pas valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2848">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="c5b52-2849">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2849">-or-</span>
          </span>
          <span data-ttu-id="c5b52-2850">L’assembly a été compilé avec une version du Common Language Runtime postérieure à la version actuellement chargée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2850">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="c5b52-2851">Nom du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2851">The name of the type to get.</span>
          </span>
          <span data-ttu-id="c5b52-2852">Si le paramètre <c>typeResolver</c> est fourni, le nom de type peut être n’importe quelle chaîne pouvant être résolue par <c>typeResolver</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2852">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="c5b52-2853">Si le paramètre <c>assemblyResolver</c> est fourni ou si la résolution de type standard est utilisée, <c>typeName</c> doit être un nom d’assembly complet (voir <see cref="P:System.Type.AssemblyQualifiedName" />), à moins que le type ne se trouve dans l’assembly en cours d’exécution ou dans Mscorlib.dll, cas dans lequel il suffit de fournir le nom de type qualifié par son espace de noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2853">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="c5b52-2854">Méthode qui trouve et retourne l’assembly spécifié dans <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2854">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="c5b52-2855">Le nom de l’assembly est passé à <c>assemblyResolver</c> en tant qu’objet <see cref="T:System.Reflection.AssemblyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2855">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="c5b52-2856">Si <c>typeName</c> ne contient pas le nom d’un assembly, <c>assemblyResolver</c> n’est pas appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2856">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="c5b52-2857">Si <c>assemblyResolver</c> n’est pas fourni, une résolution d’assembly standard est effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2857">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="c5b52-2858">Attention   Ne passez pas de méthodes provenant d’appelants inconnus ou non fiables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2858">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="c5b52-2859">Vous risqueriez d'élever les privilèges du code malveillant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2859">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="c5b52-2860">Utilisez uniquement les méthodes que vous fournissez ou avec lesquelles vous êtes familiarisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2860">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="c5b52-2861">Méthode qui trouve et retourne le type spécifié par <c>typeName</c> à partir de l’assembly retourné par <c>assemblyResolver</c> ou par la résolution d’assembly standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2861">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="c5b52-2862">Si aucun assembly n'est fourni, la méthode peut en fournir un.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2862">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="c5b52-2863">La méthode prend également un paramètre qui spécifie s’il faut exécuter une recherche non sensible à la casse ; la valeur de <c>ignoreCase</c> est passée à ce paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2863">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <c>ignoreCase</c> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="c5b52-2864">Attention   Ne passez pas de méthodes provenant d’appelants inconnus ou non fiables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2864">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="c5b52-2865">
            <see langword="true" /> pour lever une exception si le type est introuvable ; <see langword="false" /> pour retourner <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2865">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-2866">
            <see langword="false" /> supprime également d'autres conditions d'exception, mais pas toutes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2866">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="c5b52-2867">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2867">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="c5b52-2868">
            <see langword="true" /> pour effectuer une recherche qui ne respecte pas la casse de <c>typeName</c> ; <see langword="false" /> pour effectuer une recherche qui respecte la casse de <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2868">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-2869">Obtient le type portant le nom spécifié, en indiquant s'il faut effectuer une recherche qui respecte la casse et si une exception doit être levée si le type est introuvable, et éventuellement, en fournissant des méthodes personnalisées qui permettent de résoudre l'assembly et le type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2869">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-2870">Type portant le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2870">The type with the specified name.</span>
          </span>
          <span data-ttu-id="c5b52-2871">Si le type est introuvable, le paramètre <paramref name="throwOnError" /> spécifie si <see langword="null" /> est retourné ou bien une exception est levée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2871">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="c5b52-2872">Dans certains cas, une exception est levée indépendamment de la valeur de <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2872">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="c5b52-2873">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-2873">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-2874">Utilisez cette surcharge de méthode et ses surcharges associées (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> et <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) pour remplacer l’implémentation par défaut de la <xref:System.Type.GetType%2A> méthode avec des implémentations plus flexibles.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2874">Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations.</span></span> <span data-ttu-id="c5b52-2875">En fournissant vos propres méthodes pour résoudre les noms de type et les noms des assemblys qui contiennent les, vous pouvez procédez comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2875">By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:</span></span>  
  
-   <span data-ttu-id="c5b52-2876">Contrôler la version d’un assembly d’un type est chargé à partir de.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2876">Control which version of an assembly a type is loaded from.</span></span>  
  
-   <span data-ttu-id="c5b52-2877">Fournir un autre emplacement pour rechercher un nom de type qui n’inclut pas un nom d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2877">Provide another place to look for a type name that does not include an assembly name.</span></span>  
  
-   <span data-ttu-id="c5b52-2878">Charger des assemblys à l’aide de noms d’assemblys partiels.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2878">Load assemblies using partial assembly names.</span></span>  
  
-   <span data-ttu-id="c5b52-2879">Retournez les sous-classes de <xref:System.Type?displayProperty=nameWithType> qui ne sont pas créés par le common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2879">Return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the common language runtime (CLR).</span></span>  
  
 <span data-ttu-id="c5b52-2880">Par exemple, sérialisation avec tolérance de version de cette méthode afin de pouvoir rechercher un assembly « best fit » à l’aide d’un nom partiel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2880">For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name.</span></span> <span data-ttu-id="c5b52-2881">Autres surcharges de la <xref:System.Type.GetType%2A> méthode requièrent un nom de type qualifié d’assembly, qui inclut le numéro de version.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2881">Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.</span></span>  
  
 <span data-ttu-id="c5b52-2882">Autres mises en œuvre du système de type devra peut-être retourner des sous-classes de <xref:System.Type?displayProperty=nameWithType> qui ne sont pas créés par le CLR ; tous les types qui sont retournées par les autres surcharges de la <xref:System.Type.GetType%2A> méthode sont des types de runtime.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2882">Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.</span></span>  
  
<a name="usage_notes"></a>   
## <a name="usage-notes"></a><span data-ttu-id="c5b52-2883">Notes d’utilisation</span><span class="sxs-lookup"><span data-stu-id="c5b52-2883">Usage Notes</span></span>  
 <span data-ttu-id="c5b52-2884">Cette surcharge de méthode et ses surcharges associées analysent `typeName` dans le nom d’un type et le nom d’un assembly, puis de résoudre les noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2884">This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names.</span></span> <span data-ttu-id="c5b52-2885">Résolution du nom de l’assembly se produit avant la résolution du nom de type, car un nom de type doit être résolu dans le contexte d’un assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2885">Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2886">Si vous n’êtes pas familiarisé avec le concept de noms de type qualifié d’assembly, consultez le <xref:System.Type.AssemblyQualifiedName%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2886">If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.</span></span>  
  
 <span data-ttu-id="c5b52-2887">Si `typeName` n’est pas un nom qualifié d’assembly, résolution d’assembly est ignorée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2887">If `typeName` is not an assembly-qualified name, assembly resolution is skipped.</span></span> <span data-ttu-id="c5b52-2888">Les noms de type non qualifiés peuvent être résolus dans le contexte de Mscorlib.dll ou l’assembly en cours d’exécution, ou vous pouvez éventuellement fournir un assembly dans le `typeResolver` paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2888">Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter.</span></span> <span data-ttu-id="c5b52-2889">Les effets d’inclure ou omettre le nom de l’assembly pour différents types de résolution de noms sont affichés sous la forme d’une table dans le [résolution des noms mixtes](#mixed_name_resolution) section.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2889">The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.</span></span>  
  
 <span data-ttu-id="c5b52-2890">Notes générales d’utilisation :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2890">General usage notes:</span></span>  
  
-   <span data-ttu-id="c5b52-2891">Ne passez pas de méthodes à `assemblyResolver` ou `typeResolver` si elles proviennent d’appelants inconnus ou non approuvés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2891">Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers.</span></span> <span data-ttu-id="c5b52-2892">Utilisez uniquement les méthodes que vous fournissez ou avec lesquelles vous êtes familiarisé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2892">Use only methods that you provide or that you are familiar with.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="c5b52-2893">À l’aide de méthodes provenant d’appelants inconnus ou non fiables peut entraîner une élévation de privilèges pour le code malveillant.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2893">Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.</span></span>  
  
-   <span data-ttu-id="c5b52-2894">Si vous omettez le `assemblyResolver` et/ou `typeResolver` paramètres, la valeur de la `throwOnError` paramètre est passé aux méthodes qui effectuent la résolution par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2894">If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.</span></span>  
  
-   <span data-ttu-id="c5b52-2895">Si `throwOnError` est `true`, cette méthode lève un <xref:System.TypeLoadException> lorsque `typeResolver` retourne `null`et un <xref:System.IO.FileNotFoundException> lorsque `assemblyResolver` retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2895">If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.</span></span>  
  
-   <span data-ttu-id="c5b52-2896">Cette méthode n’intercepte pas les exceptions levées par `assemblyResolver` et `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2896">This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`.</span></span> <span data-ttu-id="c5b52-2897">Vous êtes responsable de toutes les exceptions levées par les méthodes de résolution.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2897">You are responsible for any exceptions that are thrown by the resolver methods.</span></span>  
  
<a name="resolving_assemblies"></a>   
### <a name="resolving-assemblies"></a><span data-ttu-id="c5b52-2898">Résolution d’assemblys</span><span class="sxs-lookup"><span data-stu-id="c5b52-2898">Resolving Assemblies</span></span>  
 <span data-ttu-id="c5b52-2899">Le `assemblyResolver` méthode reçoit un <xref:System.Reflection.AssemblyName> objet, qui est généré en analysant le nom d’assembly de chaîne qui est inclus dans `typeName`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2899">The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`.</span></span> <span data-ttu-id="c5b52-2900">Si `typeName` ne contient pas de nom d’assembly, `assemblyResolver` n’est pas appelée et `null` est passé à `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2900">If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.</span></span>  
  
 <span data-ttu-id="c5b52-2901">Si `assemblyResolver` n’est pas fourni, standard assembly détection permet de localiser l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2901">If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly.</span></span> <span data-ttu-id="c5b52-2902">Si `assemblyResolver` est fourni, le <xref:System.Type.GetType%2A> méthode n’effectue pas la détection standard ; dans ce cas vous devez vous assurer que votre `assemblyResolver` peut gérer tous les assemblys que vous lui transmettez.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2902">If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.</span></span>  
  
 <span data-ttu-id="c5b52-2903">Le `assemblyResolver` méthode doit retourner `null` si l’assembly ne peut pas être résolu.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2903">The `assemblyResolver` method should return `null` if the assembly cannot be resolved.</span></span> <span data-ttu-id="c5b52-2904">Si `assemblyResolver` retourne `null`, `typeResolver` n’est pas appelée et qu’aucun traitement supplémentaire se produit ; en outre, si `throwOnError` est `true`, un <xref:System.IO.FileNotFoundException> est levée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2904">If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="c5b52-2905">Si le <xref:System.Reflection.AssemblyName> qui est passé à `assemblyResolver` est un partiel nom, un ou plusieurs de ses parties sont `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2905">If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`.</span></span> <span data-ttu-id="c5b52-2906">Par exemple, si elle ne dispose d’aucune version, la <xref:System.Reflection.AssemblyName.Version%2A> propriété est `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2906">For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`.</span></span> <span data-ttu-id="c5b52-2907">Si le <xref:System.Reflection.AssemblyName.Version%2A> propriété, le <xref:System.Reflection.AssemblyName.CultureInfo%2A> propriété et le <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> tout retour de la méthode `null`, puis uniquement le nom simple de l’assembly a été fourni.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2907">If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied.</span></span> <span data-ttu-id="c5b52-2908">Le `assemblyResolver` méthode peut utiliser ou ignorer toutes les parties du nom de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2908">The `assemblyResolver` method can use or ignore all parts of the assembly name.</span></span>  
  
 <span data-ttu-id="c5b52-2909">Les effets des options de résolution d’assembly différentes sont affichés sous la forme d’une table dans le [résolution des noms mixtes](#mixed_name_resolution) section, pour les noms de types simples et qualifiés d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2909">The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
<a name="resolving_types"></a>   
### <a name="resolving-types"></a><span data-ttu-id="c5b52-2910">Résolution des Types</span><span class="sxs-lookup"><span data-stu-id="c5b52-2910">Resolving Types</span></span>  
 <span data-ttu-id="c5b52-2911">Si `typeName` ne spécifie pas un nom d’assembly, `typeResolver` est toujours appelé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2911">If `typeName` does not specify an assembly name, `typeResolver` is always called.</span></span> <span data-ttu-id="c5b52-2912">Si `typeName` spécifie un nom d’assembly, `typeResolver` est appelé uniquement lorsque le nom de l’assembly est résolu avec succès.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2912">If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved.</span></span> <span data-ttu-id="c5b52-2913">Si `assemblyResolver` ou détection retourne d’assembly standard `null`, `typeResolver` n’est pas appelée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2913">If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.</span></span>  
  
 <span data-ttu-id="c5b52-2914">Le `typeResolver` méthode reçoit trois arguments :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2914">The `typeResolver` method receives three arguments:</span></span>  
  
-   <span data-ttu-id="c5b52-2915">L’assembly à rechercher ou `null` si `typeName` ne contient pas un nom d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2915">The assembly to search or `null` if `typeName` does not contain an assembly name.</span></span>  
  
-   <span data-ttu-id="c5b52-2916">Le nom simple du type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2916">The simple name of the type.</span></span> <span data-ttu-id="c5b52-2917">Dans le cas d’un type imbriqué, il s’agit du type de conteneur extérieur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2917">In the case of a nested type, this is the outermost containing type.</span></span> <span data-ttu-id="c5b52-2918">Dans le cas d’un type générique, il est le nom simple du type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2918">In the case of a generic type, this is the simple name of the generic type.</span></span>  
  
-   <span data-ttu-id="c5b52-2919">Valeur booléenne qui est `true` si la casse des noms de type doit être ignorée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2919">A Boolean value that is `true` if the case of type names is to be ignored.</span></span>  
  
 <span data-ttu-id="c5b52-2920">L’implémentation détermine la façon dont ces arguments sont utilisées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2920">The implementation determines the way these arguments are used.</span></span> <span data-ttu-id="c5b52-2921">Le `typeResolver` méthode doit retourner `null` si elle ne peut pas résoudre le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2921">The `typeResolver` method should return `null` if it cannot resolve the type.</span></span> <span data-ttu-id="c5b52-2922">Si `typeResolver` retourne `null` et `throwOnError` est `true`, cette surcharge de <xref:System.Type.GetType%2A> lève un <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2922">If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.</span></span>  
  
 <span data-ttu-id="c5b52-2923">Les effets des options de résolution de type différent sont affichés sous la forme d’une table dans le [résolution des noms mixtes](#mixed_name_resolution) section, pour les noms de types simples et qualifiés d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2923">The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
#### <a name="resolving-nested-types"></a><span data-ttu-id="c5b52-2924">Résolution des Types imbriqués</span><span class="sxs-lookup"><span data-stu-id="c5b52-2924">Resolving Nested Types</span></span>  
 <span data-ttu-id="c5b52-2925">Si `typeName` est un type imbriqué, seul le nom de l’extérieur qui contient le type est passé à `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2925">If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`.</span></span> <span data-ttu-id="c5b52-2926">Lorsque `typeResolver` retourne ce type, le <xref:System.Type.GetNestedType%2A> méthode est appelée de manière récursive jusqu'à ce que le type imbriqué plus profond a été résolu.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2926">When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.</span></span>  
  
#### <a name="resolving-generic-types"></a><span data-ttu-id="c5b52-2927">Résolution des Types génériques</span><span class="sxs-lookup"><span data-stu-id="c5b52-2927">Resolving Generic Types</span></span>  
 <span data-ttu-id="c5b52-2928">Le <xref:System.Type.GetType%2A> est appelée de manière récursive pour résoudre les types génériques : tout d’abord pour résoudre le type générique proprement dit, puis pour résoudre ses arguments de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2928">The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments.</span></span> <span data-ttu-id="c5b52-2929">Si un argument de type est générique, <xref:System.Type.GetType%2A> est appelée de manière récursive pour résoudre ses arguments de type et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2929">If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.</span></span>  
  
 <span data-ttu-id="c5b52-2930">La combinaison de `assemblyResolver` et `typeResolver` que vous fournissez doit être capable de résoudre tous les niveaux de cette récursivité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2930">The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion.</span></span> <span data-ttu-id="c5b52-2931">Par exemple, supposez que vous fournissez un `assemblyResolver` qui contrôle le chargement de `MyAssembly`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2931">For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`.</span></span> <span data-ttu-id="c5b52-2932">Supposons que vous souhaitez résoudre le type générique `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2932">Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span></span> <span data-ttu-id="c5b52-2933">Vous pouvez passer le nom de type générique suivant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2933">You might pass the following generic type name:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="c5b52-2934">Notez que `MyType` est l’argument de type qualifié d’assembly uniquement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2934">Notice that `MyType` is the only assembly-qualified type argument.</span></span> <span data-ttu-id="c5b52-2935">Les noms de la <xref:System.Collections.Generic.Dictionary%602> et <xref:System.String> classes ne sont pas qualifiés d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2935">The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified.</span></span> <span data-ttu-id="c5b52-2936">Votre `typeResolver` doit être en mesure de gérer un assembly ou `null`, car il recevra `null` pour <xref:System.Collections.Generic.Dictionary%602> et <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2936">Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>.</span></span> <span data-ttu-id="c5b52-2937">Il peut gérer ce cas en appelant une surcharge de la <xref:System.Type.GetType%2A> méthode qui prend une chaîne, car les deux noms de type non qualifiés sont dans Mscorlib.dll :</span><span class="sxs-lookup"><span data-stu-id="c5b52-2937">It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  
  
 <span data-ttu-id="c5b52-2938">Le `assemblyResolver` (méthode) n’est pas appelée pour le type de dictionnaire et le type de chaîne, car ces noms de types ne sont pas qualifiés d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2938">The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.</span></span>  
  
 <span data-ttu-id="c5b52-2939">Supposons maintenant qu’au lieu de `System.String`, le premier type d’argument générique est `YourType`, à partir de `YourAssembly`:</span><span class="sxs-lookup"><span data-stu-id="c5b52-2939">Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="c5b52-2940">Étant donné que cet assembly n’est ni Mscorlib.dll, ni l’assembly en cours d’exécution, vous ne pouvez pas résoudre `YourType` sans un nom qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2940">Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name.</span></span> <span data-ttu-id="c5b52-2941">Étant donné que votre `assemblyResolve` sera appelée de manière récursive, il doit être en mesure de gérer ce cas.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2941">Because your `assemblyResolve` will be called recursively, it must be able to handle this case.</span></span> <span data-ttu-id="c5b52-2942">Au lieu de retourner `null` pour les assemblys autres que `MyAssembly`, il exécute maintenant un chargement d’assembly à l’aide de fourni <xref:System.Reflection.AssemblyName> objet.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2942">Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  
  
 <span data-ttu-id="c5b52-2943">Au [Notes d’utilisation](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2943">Back to [Usage Notes](#usage_notes).</span></span>  
  
#### <a name="resolving-type-names-with-special-characters"></a><span data-ttu-id="c5b52-2944">Résolution de noms de Type avec des caractères spéciaux</span><span class="sxs-lookup"><span data-stu-id="c5b52-2944">Resolving Type Names with Special Characters</span></span>  
 <span data-ttu-id="c5b52-2945">Certains caractères ont des significations spéciales dans les noms qualifiés d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2945">Certain characters have special meanings in assembly-qualified names.</span></span> <span data-ttu-id="c5b52-2946">Si un nom de type simple contient ces caractères, les caractères provoquent des erreurs d’analyse lorsque le nom simple fait partie d’un nom qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2946">If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name.</span></span> <span data-ttu-id="c5b52-2947">Pour éviter les erreurs d’analyse, vous devez échapper les caractères spéciaux par une barre oblique inverse avant de pouvoir passer le nom qualifié d’assembly pour le <xref:System.Type.GetType%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2947">To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="c5b52-2948">Par exemple, si un type est nommé `Strange]Type`, le caractère d’échappement doit être ajouté avant les crochets comme suit : `Strange\]Type`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2948">For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-2949">Les noms de ces caractères spéciaux ne peut pas être créés en Visual Basic ou c#, mais peuvent être créées à l’aide du langage intermédiaire Microsoft (MSIL) ou par l’émission d’assemblys dynamiques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2949">Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.</span></span>  
  
 <span data-ttu-id="c5b52-2950">Le tableau suivant présente les caractères spéciaux pour les noms de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2950">The following table shows the special characters for type names.</span></span>  
  
|<span data-ttu-id="c5b52-2951">Caractère</span><span class="sxs-lookup"><span data-stu-id="c5b52-2951">Character</span></span>|<span data-ttu-id="c5b52-2952">Signification</span><span class="sxs-lookup"><span data-stu-id="c5b52-2952">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="c5b52-2953">`,` (virgule)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2953">`,` (comma)</span></span>|<span data-ttu-id="c5b52-2954">Délimiteur pour les noms qualifiés d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2954">Delimiter for assembly-qualified names.</span></span>|  
|<span data-ttu-id="c5b52-2955">`[]` (les crochets)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2955">`[]` (square brackets)</span></span>|<span data-ttu-id="c5b52-2956">Comme une paire de suffixe, indique un type de tableau ; comme une paire de séparateurs, englobe les listes d’arguments génériques et les noms qualifiés d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2956">As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.</span></span>|  
|<span data-ttu-id="c5b52-2957">`&` (esperluette)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2957">`&` (ampersand)</span></span>|<span data-ttu-id="c5b52-2958">En guise de suffixe, indique qu’un type est un type référence.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2958">As a suffix, indicates that a type is a reference type.</span></span>|  
|<span data-ttu-id="c5b52-2959">`*` (astérisque)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2959">`*` (asterisk)</span></span>|<span data-ttu-id="c5b52-2960">En guise de suffixe, indique qu’un type est un type pointeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2960">As a suffix, indicates that a type is a pointer type.</span></span>|  
|<span data-ttu-id="c5b52-2961">`+` (plus)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2961">`+` (plus)</span></span>|<span data-ttu-id="c5b52-2962">Délimiteur pour les types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2962">Delimiter for nested types.</span></span>|  
|<span data-ttu-id="c5b52-2963">`\` barre oblique inverse)</span><span class="sxs-lookup"><span data-stu-id="c5b52-2963">`\` (backslash)</span></span>|<span data-ttu-id="c5b52-2964">Caractère d’échappement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2964">Escape character.</span></span>|  
  
 <span data-ttu-id="c5b52-2965">Propriétés, telles que <xref:System.Type.AssemblyQualifiedName%2A> retour correctement les chaînes d’échappement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2965">Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings.</span></span> <span data-ttu-id="c5b52-2966">Vous devez passer des chaînes correctement avec la séquence d’échappement pour le <xref:System.Type.GetType%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2966">You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="c5b52-2967">À son tour, le <xref:System.Type.GetType%2A> méthode passe les noms correctement avec la séquence d’échappement à `typeResolver` et pour les méthodes de résolution de type par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2967">In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods.</span></span> <span data-ttu-id="c5b52-2968">Si vous devez comparer un nom à un nom sans séquence d’échappement dans `typeResolver`, vous devez supprimer les caractères d’échappement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2968">If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.</span></span>  
  
 <span data-ttu-id="c5b52-2969">Au [Notes d’utilisation](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="c5b52-2969">Back to [Usage Notes](#usage_notes).</span></span>  
  
<a name="mixed_name_resolution"></a>   
## <a name="mixed-name-resolution"></a><span data-ttu-id="c5b52-2970">Résolution de noms mixte</span><span class="sxs-lookup"><span data-stu-id="c5b52-2970">Mixed Name Resolution</span></span>  
 <span data-ttu-id="c5b52-2971">Le tableau suivant résume les interactions entre `assemblyResolver`, `typeResolver`et la résolution de noms par défaut, pour toutes les combinaisons de nom de type et nom de l’assembly dans `typeName`:</span><span class="sxs-lookup"><span data-stu-id="c5b52-2971">The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:</span></span>  
  
|<span data-ttu-id="c5b52-2972">Contenu du nom de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2972">Contents of type name</span></span>|<span data-ttu-id="c5b52-2973">Méthode de programme de résolution d’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2973">Assembly resolver method</span></span>|<span data-ttu-id="c5b52-2974">Méthode de programme de résolution de type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2974">Type resolver method</span></span>|<span data-ttu-id="c5b52-2975">Résultat</span><span class="sxs-lookup"><span data-stu-id="c5b52-2975">Result</span></span>|  
|---------------------------|------------------------------|--------------------------|------------|  
|<span data-ttu-id="c5b52-2976">type, l’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2976">type, assembly</span></span>|<span data-ttu-id="c5b52-2977">null</span><span class="sxs-lookup"><span data-stu-id="c5b52-2977">null</span></span>|<span data-ttu-id="c5b52-2978">null</span><span class="sxs-lookup"><span data-stu-id="c5b52-2978">null</span></span>|<span data-ttu-id="c5b52-2979">Équivalent à l’appel le <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2979">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span>|  
|<span data-ttu-id="c5b52-2980">type, l’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2980">type, assembly</span></span>|<span data-ttu-id="c5b52-2981">fourni</span><span class="sxs-lookup"><span data-stu-id="c5b52-2981">provided</span></span>|<span data-ttu-id="c5b52-2982">null</span><span class="sxs-lookup"><span data-stu-id="c5b52-2982">null</span></span>|<span data-ttu-id="c5b52-2983">`assemblyResolver` Retourne l’assembly ou `null` si elle ne peut pas résoudre l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2983">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="c5b52-2984">Si l’assembly est résolu, le <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> surcharge de méthode est utilisée pour charger le type à partir de l’assembly ; sinon, il n’existe aucune tentative de résoudre le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2984">If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.</span></span>|  
|<span data-ttu-id="c5b52-2985">type, l’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2985">type, assembly</span></span>|<span data-ttu-id="c5b52-2986">null</span><span class="sxs-lookup"><span data-stu-id="c5b52-2986">null</span></span>|<span data-ttu-id="c5b52-2987">fourni</span><span class="sxs-lookup"><span data-stu-id="c5b52-2987">provided</span></span>|<span data-ttu-id="c5b52-2988">Équivalent à la conversion du nom de l’assembly à un <xref:System.Reflection.AssemblyName> objet et en appelant le <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> surcharge de méthode pour obtenir de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2988">Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> method overload to get the assembly.</span></span> <span data-ttu-id="c5b52-2989">Si l’assembly est résolu, il est passé à `typeResolver`; sinon, `typeResolver` n’est pas appelée et il n’existe aucune autre tentative de résoudre le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2989">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="c5b52-2990">type, l’assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-2990">type, assembly</span></span>|<span data-ttu-id="c5b52-2991">fourni</span><span class="sxs-lookup"><span data-stu-id="c5b52-2991">provided</span></span>|<span data-ttu-id="c5b52-2992">fourni</span><span class="sxs-lookup"><span data-stu-id="c5b52-2992">provided</span></span>|<span data-ttu-id="c5b52-2993">`assemblyResolver` Retourne l’assembly ou `null` si elle ne peut pas résoudre l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2993">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="c5b52-2994">Si l’assembly est résolu, il est passé à `typeResolver`; sinon, `typeResolver` n’est pas appelée et il n’existe aucune autre tentative de résoudre le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2994">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="c5b52-2995">type</span><span class="sxs-lookup"><span data-stu-id="c5b52-2995">type</span></span>|<span data-ttu-id="c5b52-2996">NULL, fourni</span><span class="sxs-lookup"><span data-stu-id="c5b52-2996">null, provided</span></span>|<span data-ttu-id="c5b52-2997">null</span><span class="sxs-lookup"><span data-stu-id="c5b52-2997">null</span></span>|<span data-ttu-id="c5b52-2998">Équivalent à l’appel le <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2998">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="c5b52-2999">Étant donné que le nom de l’assembly n’est pas fourni, Mscorlib.dll et l’assembly en cours d’exécution sont recherchés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-2999">Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched.</span></span> <span data-ttu-id="c5b52-3000">Si `assemblyResolver` est fourni, il est ignoré.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3000">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="c5b52-3001">type</span><span class="sxs-lookup"><span data-stu-id="c5b52-3001">type</span></span>|<span data-ttu-id="c5b52-3002">NULL, fourni</span><span class="sxs-lookup"><span data-stu-id="c5b52-3002">null, provided</span></span>|<span data-ttu-id="c5b52-3003">fourni</span><span class="sxs-lookup"><span data-stu-id="c5b52-3003">provided</span></span>|<span data-ttu-id="c5b52-3004">`typeResolver` est appelée, et `null` est passé pour l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3004">`typeResolver` is called, and `null` is passed for the assembly.</span></span> <span data-ttu-id="c5b52-3005">`typeResolver` peut fournir un type à partir de n’importe quel assembly, y compris les assemblys qu'il charge à cette fin.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3005">`typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose.</span></span> <span data-ttu-id="c5b52-3006">Si `assemblyResolver` est fourni, il est ignoré.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3006">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="c5b52-3007">assembly</span><span class="sxs-lookup"><span data-stu-id="c5b52-3007">assembly</span></span>|<span data-ttu-id="c5b52-3008">NULL, fourni</span><span class="sxs-lookup"><span data-stu-id="c5b52-3008">null, provided</span></span>|<span data-ttu-id="c5b52-3009">NULL, fourni</span><span class="sxs-lookup"><span data-stu-id="c5b52-3009">null, provided</span></span>|<span data-ttu-id="c5b52-3010">Un <xref:System.IO.FileLoadException> est levée, car le nom de l’assembly est analysé comme s’il s’agissait d’un nom de type qualifié d’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3010">A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name.</span></span> <span data-ttu-id="c5b52-3011">Cela entraîne un nom d’assembly non valide.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3011">This results in an invalid assembly name.</span></span>|  
  
 <span data-ttu-id="c5b52-3012">À : [Notes d’utilisation](#usage_notes), [résolution d’assemblys](#resolving_assemblies), [résolution des Types](#resolving_types).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3012">Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-3013">
            <paramref name="typeName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3013">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-3014">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3014">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-3015">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et le type est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3015">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="c5b52-3016">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3016">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3017">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient des caractères non valides, tels qu’une tabulation incorporée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3017">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="c5b52-3018">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3018">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3019">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> est une chaîne vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3019">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="c5b52-3020">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3020">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3021">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> représente un type de tableau avec une taille non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3021">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="c5b52-3022">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3022">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3023">
            <paramref name="typeName" /> représente un tableau de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3023">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-3024">Une erreur se produit lorsque <paramref name="typeName" /> est analysé dans un nom de type et un nom d'assembly (par exemple, lorsque le nom de type simple inclut un caractère spécial sans séquence d'échappement).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3024">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="c5b52-3025">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3025">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3026">
            <paramref name="throwOnError" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient une syntaxe non valide (par exemple, "MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3026">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="c5b52-3027">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3027">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3028">
            <paramref name="typeName" /> représente un type générique qui a un type pointeur, un type <see langword="ByRef" /> ou <see cref="T:System.Void" /> comme l’un de ses arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3028">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-3029">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3029">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3030">
            <paramref name="typeName" /> représente un type générique qui a un nombre incorrect d’arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3030">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-3031">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3031">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3032">
            <paramref name="typeName" /> représente un type générique, et un de ses arguments de type ne satisfait pas aux contraintes pour le paramètre de type correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3032">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c5b52-3033">
            <paramref name="throwOnError" /> a la valeur <see langword="true" />, et l’assembly ou l’une de ses dépendances est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3033">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="c5b52-3034">L’assembly ou l’une de ses dépendances a été trouvé, mais n’a pas pu être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3034">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="c5b52-3035">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3035">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3036">
            <paramref name="typeName" /> contient un nom d'assembly non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3036">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="c5b52-3037">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3037">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3038">
            <paramref name="typeName" /> est un nom d'assembly valide sans nom de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3038">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="c5b52-3039">L’assembly ou une de ses dépendances n’est pas valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3039">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="c5b52-3040">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3040">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3041">L’assembly a été compilé avec une version du Common Language Runtime postérieure à la version actuellement chargée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3041">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeArray(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeArray (args As Object()) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Type ^&gt; ^ GetTypeArray(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member GetTypeArray : obj[] -&gt; Type[]" Usage="System.Type.GetTypeArray args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="c5b52-3042">Tableau d'objets dont les types sont à déterminer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3042">An array of objects whose types to determine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3043">Obtient les types des objets dans le tableau spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3043">Gets the types of the objects in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3044">Tableau d'objets <see cref="T:System.Type" /> représentant les types des éléments correspondants dans <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3044">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c5b52-3045">L’exemple de code suivant montre comment utiliser le <xref:System.Type.GetTypeArray%2A> méthode pour répertorier les types des éléments d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3045">The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]
 [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]
 [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-3046">
            <paramref name="args" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3046">
              <paramref name="args" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-3047">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3047">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3048">Au moins un des éléments de <paramref name="args" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3048">One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-3049">Les initialiseurs de classe sont appelés et au moins l’un d’eux lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3049">The class initializers are invoked and at least one throws an exception.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCode(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetTypeCode : Type -&gt; TypeCode" Usage="System.Type.GetTypeCode type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="c5b52-3050">Type dont le code de type sous-jacent doit être obtenu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3050">The type whose underlying type code to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3051">Obtient le code du type sous-jacent du <see cref="T:System.Type" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3051">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3052">Code du type sous-jacent ou <see cref="F:System.TypeCode.Empty" /> si <paramref name="type" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3052">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3053">Lorsque vous héritez de <xref:System.Type>, vous pouvez modifier le comportement de cette méthode en substituant le <xref:System.Type.GetTypeCodeImpl%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3053">When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3054">L’exemple de code suivant montre comment la <xref:System.TypeCode> énumération peut être utilisée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3054">The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used.</span></span> <span data-ttu-id="c5b52-3055">Dans un bloc de décision le `WriteObjectInfo` (méthode), le <xref:System.TypeCode> d’un <xref:System.Object> paramètre est examiné, et un message approprié est écrite dans la console.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3055">In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.</span></span>  
  
 [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]
 [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]
 [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCodeImpl" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCodeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTypeCodeImpl () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TypeCode GetTypeCodeImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCodeImpl : unit -&gt; TypeCode&#xA;override this.GetTypeCodeImpl : unit -&gt; TypeCode" Usage="type.GetTypeCodeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3056">Retourne le code du type sous-jacent de cette instance <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3056">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3057">Code du type sous-jacent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3057">The type code of the underlying type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3058">Cette méthode fournit l’implémentation pour le `static` (en c#) ou `Shared` (en Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3058">This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method.</span></span> <span data-ttu-id="c5b52-3059">Lorsque vous héritez de <xref:System.Type>, vous pouvez substituer cette méthode pour fournir votre propre implémentation de <xref:System.Type.GetTypeCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3059">When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCode(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromCLSID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3060">Obtient le type associé à l'identificateur de classe (CLSID) spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3060">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid -&gt; Type" Usage="System.Type.GetTypeFromCLSID clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="c5b52-3061">CLSID du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3061">The CLSID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3062">Obtient le type associé à l'identificateur de classe (CLSID) spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3062">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3063">
            <see langword="System.__ComObject" /> que le CLSID soit valide ou non.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3063">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3064">Le <xref:System.Type.GetTypeFromCLSID%2A> méthode prend en charge l’accès à liaison tardive aux objets COM non managés à partir d’applications .NET Framework lorsque vous connaissez l’identificateur de classe de l’objet COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3064">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="c5b52-3065">L’identificateur de classe pour les classes COM est défini dans la clé HKEY_CLASSES_ROOT\CLSID du Registre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3065">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="c5b52-3066">Vous pouvez récupérer la valeur de la <xref:System.Type.IsCOMObject%2A> propriété afin de déterminer si le type retourné par cette méthode est un objet COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3066">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="c5b52-3067">Vous pouvez appeler la <xref:System.Type.GetTypeFromProgID%2A> méthode pour l’accès à liaison tardive à COM objets dont identificateur programmatique (ProgID) que vous connaissez.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3067">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="c5b52-3068">Instanciation d’un objet COM non managé à partir de son CLSID est un processus en deux étapes :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3068">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="c5b52-3069">Obtenir un <xref:System.Type> objet qui représente le`__ComObject` qui correspond au CLSID en appelant le <xref:System.Type.GetTypeFromCLSID%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3069">Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="c5b52-3070">Appelez le <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> pour instancier l’objet COM (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3070">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="c5b52-3071">Consultez l’exemple pour obtenir une illustration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3071">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="c5b52-3072">Le <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> surcharge ignore toute exception qui peut se produire lorsque vous instanciez un <xref:System.Type> objet basé sur le `clsid` argument.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3072">The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument.</span></span> <span data-ttu-id="c5b52-3073">Notez qu’aucune exception n’est levée si `clsid` est introuvable dans le Registre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3073">Note that no exception is thrown if `clsid` is not found in the registry.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3074">L’exemple suivant utilise le CLSID de Microsoft Word [objet Application](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) pour récupérer un type COM qui représente l’application Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3074">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="c5b52-3075">Il instancie ensuite le type en appelant le <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> (méthode) et se ferme en appelant le [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3075">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]
 [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="c5b52-3076">Cette méthode est destinée à utiliser lorsque vous travaillez avec des objets COM, pas avec les objets .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3076">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="c5b52-3077">Tous les objets, y compris ceux qui sont visibles par COM gérés par (autrement dit, leur <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribut est <see langword="true" />) ont un GUID qui est retourné par la <see cref="P:System.Type.GUID" /> propriété.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3077">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="c5b52-3078">Bien que la méthode retourne un <see cref="T:System.Type" /> objet qui correspond au GUID de .NET Framework des objets, vous ne pouvez pas utiliser qui <see cref="T:System.Type" /> objet pour créer une instance de type en appelant le <see cref="M:System.Activator.CreateInstance(System.Type)" /> méthode, comme le montre l’exemple suivant.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3078">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="c5b52-3079">[ ! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [ ! code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3079">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="c5b52-3080">Au lieu de cela, le <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> doit uniquement être utilisé pour récupérer le GUID d’un objet COM non managé et résultant <see cref="T:System.Type" /> objet qui est passé à la <see cref="M:System.Activator.CreateInstance(System.Type)" /> méthode doit représenter un objet COM non managé.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3080">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="c5b52-3081">CLSID du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3081">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="c5b52-3082">
            <see langword="true" /> pour lever toute exception qui se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3082">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="c5b52-3083">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3083">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3084">
            <see langword="false" /> pour ignorer toute exception qui se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3084">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3085">Obtient le type associé à l'identificateur de classe (CLSID) spécifié, indiquant s'il faut lever une exception en cas d'erreur pendant le chargement du type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3085">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3086">
            <see langword="System.__ComObject" /> que le CLSID soit valide ou non.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3086">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3087">Le <xref:System.Type.GetTypeFromCLSID%2A> méthode prend en charge l’accès à liaison tardive aux objets COM non managés à partir d’applications .NET Framework lorsque vous connaissez l’identificateur de classe de l’objet COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3087">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="c5b52-3088">L’identificateur de classe pour les classes COM est défini dans la clé HKEY_CLASSES_ROOT\CLSID du Registre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3088">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="c5b52-3089">Vous pouvez récupérer la valeur de la <xref:System.Type.IsCOMObject%2A> propriété afin de déterminer si le type retourné par cette méthode est un objet COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3089">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="c5b52-3090">Vous pouvez appeler la <xref:System.Type.GetTypeFromProgID%2A> méthode pour l’accès à liaison tardive à COM objets dont identificateur programmatique (ProgID) que vous connaissez.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3090">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="c5b52-3091">Instanciation d’un objet COM non managé à partir de son CLSID est un processus en deux étapes :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3091">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="c5b52-3092">Obtenir un <xref:System.Type> objet qui représente le `__ComObject` qui correspond au CLSID en appelant le <xref:System.Type.GetTypeFromCLSID%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3092">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="c5b52-3093">Appelez le <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> pour instancier l’objet COM (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3093">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="c5b52-3094">Consultez l’exemple pour obtenir une illustration.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3094">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="c5b52-3095">Exceptions telles que <xref:System.OutOfMemoryException> sera levée lors de la spécification `true` pour `throwOnError`, mais n’échouera pas du CLSID non inscrit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3095">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3096">L’exemple suivant utilise le CLSID de Microsoft Word [objet Application](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) pour récupérer un type COM qui représente l’application Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3096">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="c5b52-3097">Il instancie ensuite le type en appelant le <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> (méthode) et se ferme en appelant le [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3097">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="c5b52-3098">Une exception est levée si une erreur se produit pendant le chargement du type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3098">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]
 [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="c5b52-3099">Cette méthode est destinée à utiliser lorsque vous travaillez avec des objets COM, pas avec les objets .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3099">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="c5b52-3100">Tous les objets, y compris ceux qui sont visibles par COM gérés par (autrement dit, leur <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribut est <see langword="true" />) ont un GUID qui est retourné par la <see cref="P:System.Type.GUID" /> propriété.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3100">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="c5b52-3101">Bien que la méthode retourne un <see cref="T:System.Type" /> objet qui correspond au GUID de .NET Framework des objets, vous ne pouvez pas utiliser qui <see cref="T:System.Type" /> objet pour créer une instance de type en appelant le <see cref="M:System.Activator.CreateInstance(System.Type)" /> méthode, comme le montre l’exemple suivant.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3101">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="c5b52-3102">[ ! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [ ! code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3102">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="c5b52-3103">Au lieu de cela, le <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> doit uniquement être utilisé pour récupérer le GUID d’un objet COM non managé et résultant <see cref="T:System.Type" /> objet qui est passé à la <see cref="M:System.Activator.CreateInstance(System.Type)" /> méthode doit représenter un objet COM non managé.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3103">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="c5b52-3104">CLSID du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3104">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="c5b52-3105">Serveur à partir duquel le type doit être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3105">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="c5b52-3106">Si le nom de serveur est <see langword="null" />, cette méthode revient automatiquement à la machine locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3106">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3107">Obtient le type associé à l'identificateur de classe (CLSID) spécifié à partir du serveur défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3107">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3108">
            <see langword="System.__ComObject" /> que le CLSID soit valide ou non.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3108">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3109">Le <xref:System.Type.GetTypeFromCLSID%2A> méthode prend en charge l’accès à liaison tardive aux objets COM non managés à partir d’applications .NET Framework lorsque vous connaissez l’identificateur de classe de l’objet COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3109">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="c5b52-3110">L’identificateur de classe pour les classes COM est défini dans la clé HKEY_CLASSES_ROOT\CLSID du Registre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3110">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="c5b52-3111">Vous pouvez récupérer la valeur de la <xref:System.Type.IsCOMObject%2A> propriété afin de déterminer si le type retourné par cette méthode est un objet COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3111">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="c5b52-3112">Vous pouvez appeler la <xref:System.Type.GetTypeFromProgID%2A> méthode pour l’accès à liaison tardive à COM objets dont identificateur programmatique (ProgID) que vous connaissez.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3112">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="c5b52-3113">Instanciation d’un objet COM non managé à partir de son CLSID est un processus en deux étapes :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3113">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="c5b52-3114">Obtenir un <xref:System.Type> objet qui représente le `__ComObject` qui correspond au CLSID en appelant le <xref:System.Type.GetTypeFromCLSID%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3114">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="c5b52-3115">Appelez le <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> pour instancier l’objet COM (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3115">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3116">L’exemple suivant utilise le CLSID de Microsoft Word [objet Application](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) pour récupérer un type COM qui représente l’application Microsoft Word à partir d’un serveur nommé computer17.central.contoso.com.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3116">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="c5b52-3117">Il instancie ensuite le type en appelant le <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> (méthode) et se ferme en appelant le [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3117">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]
 [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="c5b52-3118">Cette méthode est destinée à utiliser lorsque vous travaillez avec des objets COM, pas avec les objets .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3118">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="c5b52-3119">Tous les objets, y compris ceux qui sont visibles par COM gérés par (autrement dit, leur <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribut est <see langword="true" />) ont un GUID qui est retourné par la <see cref="P:System.Type.GUID" /> propriété.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3119">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="c5b52-3120">Bien que la méthode retourne un <see cref="T:System.Type" /> objet qui correspond au GUID de .NET Framework des objets, vous ne pouvez pas utiliser qui <see cref="T:System.Type" /> objet pour créer une instance de type en appelant le <see cref="M:System.Activator.CreateInstance(System.Type)" /> méthode, comme le montre l’exemple suivant.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3120">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="c5b52-3121">[ ! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [ ! code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3121">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="c5b52-3122">Au lieu de cela, le <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> doit uniquement être utilisé pour récupérer le GUID d’un objet COM non managé et résultant <see cref="T:System.Type" /> objet qui est passé à la <see cref="M:System.Activator.CreateInstance(System.Type)" /> méthode doit représenter un objet COM non managé.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3122">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="c5b52-3123">CLSID du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3123">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="c5b52-3124">Serveur à partir duquel le type doit être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3124">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="c5b52-3125">Si le nom de serveur est <see langword="null" />, cette méthode revient automatiquement à la machine locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3125">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="c5b52-3126">
            <see langword="true" /> pour lever toute exception qui se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3126">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="c5b52-3127">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3127">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3128">
            <see langword="false" /> pour ignorer toute exception qui se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3128">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3129">Obtient le type associé à l'identificateur de classe (CLSID) spécifié à partir du serveur défini, indiquant s'il faut lever une exception en cas d'erreur pendant le chargement du type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3129">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3130">
            <see langword="System.__ComObject" /> que le CLSID soit valide ou non.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3130">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3131">Le <xref:System.Type.GetTypeFromCLSID%2A> méthode prend en charge l’accès à liaison tardive aux objets COM non managés à partir d’applications .NET Framework lorsque vous connaissez l’identificateur de classe de l’objet COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3131">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="c5b52-3132">L’identificateur de classe pour les classes COM est défini dans la clé HKEY_CLASSES_ROOT\CLSID du Registre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3132">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="c5b52-3133">Vous pouvez récupérer la valeur de la <xref:System.Type.IsCOMObject%2A> propriété afin de déterminer si le type retourné par cette méthode est un objet COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3133">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="c5b52-3134">Vous pouvez appeler la <xref:System.Type.GetTypeFromProgID%2A> méthode pour l’accès à liaison tardive à COM objets dont identificateur programmatique (ProgID) que vous connaissez.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3134">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="c5b52-3135">Instanciation d’un objet COM non managé à partir de son CLSID est un processus en deux étapes :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3135">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="c5b52-3136">Obtenir un <xref:System.Type> objet qui représente le `__ComObject` qui correspond au CLSID en appelant le <xref:System.Type.GetTypeFromCLSID%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3136">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="c5b52-3137">Appelez le <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> pour instancier l’objet COM (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3137">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="c5b52-3138">Exceptions telles que <xref:System.OutOfMemoryException> sera levée lors de la spécification `true` pour `throwOnError`, mais n’échouera pas du CLSID non inscrit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3138">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3139">L’exemple suivant utilise le CLSID de Microsoft Word [objet Application](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) pour récupérer un type COM qui représente l’application Microsoft Word à partir d’un serveur nommé computer17.central.contoso.com.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3139">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="c5b52-3140">Il instancie ensuite le type en appelant le <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> (méthode) et se ferme en appelant le [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3140">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="c5b52-3141">Une exception est levée si une erreur se produit pendant le chargement du type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3141">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]
 [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="c5b52-3142">Cette méthode est destinée à utiliser lorsque vous travaillez avec des objets COM, pas avec les objets .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3142">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="c5b52-3143">Tous les objets, y compris ceux qui sont visibles par COM gérés par (autrement dit, leur <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribut est <see langword="true" />) ont un GUID qui est retourné par la <see cref="P:System.Type.GUID" /> propriété.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3143">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="c5b52-3144">Bien que le <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> méthode retourne un <see cref="T:System.Type" /> objet qui correspond au GUID d’un objet managé particulier, vous ne pouvez pas utiliser qui <see cref="T:System.Type" /> objet pour créer une instance de type en appelant le <see cref="M:System.Activator.CreateInstance(System.Type)" /> méthode, comme dans l’exemple suivant montre.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3144">Although the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for a particular managed object, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="c5b52-3145">[ ! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [ ! code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3145">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="c5b52-3146">Au lieu de cela, le <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> doit uniquement être utilisé pour récupérer le GUID d’un objet COM non managé et résultant <see cref="T:System.Type" /> objet qui est passé à la <see cref="M:System.Activator.CreateInstance(System.Type)" /> méthode doit représenter un objet COM non managé.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c5b52-3146">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromHandle (handle As RuntimeTypeHandle) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromHandle(RuntimeTypeHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromHandle : RuntimeTypeHandle -&gt; Type" Usage="System.Type.GetTypeFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="c5b52-3147">Objet qui fait référence au type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3147">The object that refers to the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3148">Obtient le type référencé par le handle de type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3148">Gets the type referenced by the specified type handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3149">Le type référencé par le <see cref="T:System.RuntimeTypeHandle" /> spécifié, ou <see langword="null" /> si la propriété <see cref="P:System.RuntimeTypeHandle.Value" /> de <paramref name="handle" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3149">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3150">Les handles sont valides uniquement dans le domaine d’application dans lequel ils ont été obtenus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3150">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3151">L’exemple suivant utilise le <xref:System.Type.GetTypeFromHandle%2A> méthode pour obtenir un <xref:System.Type> de l’objet à partir d’un <xref:System.RuntimeTypeHandle> fournies par le <xref:System.Type.GetTypeHandle%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3151">The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.</span></span>  
  
 [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]
 [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]
 [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-3152">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3152">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromProgID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3153">Obtient le type associé à l'identificateur de programme (ProgID) spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3153">Gets the type associated with the specified program identifier (ProgID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string -&gt; Type" Usage="System.Type.GetTypeFromProgID progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="c5b52-3154">Identificateur de programme (ProgID) du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3154">The ProgID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3155">Obtient le type associé à l'identificateur de programme (ProgID) spécifié, retournant null en cas d'erreur pendant le chargement de <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3155">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3156">Type associé à l'identificateur de programme (ProgID) spécifié si <paramref name="progID" /> est une entrée valide dans le Registre et qu'un type lui est associé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3156">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3157">Cette méthode est fournie pour la prise en charge COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3157">This method is provided for COM support.</span></span> <span data-ttu-id="c5b52-3158">ProgID ne sont pas utilisés dans le Microsoft .NET Framework, car ils ont été remplacés par le concept d’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3158">ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-3159">
            <paramref name="progID" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3159">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c5b52-3160">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3160">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c5b52-3161">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3161">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="c5b52-3162">Identificateur de programme (ProgID) du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3162">The ProgID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="c5b52-3163">
            <see langword="true" /> pour lever toute exception qui se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3163">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="c5b52-3164">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3164">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3165">
            <see langword="false" /> pour ignorer toute exception qui se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3165">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3166">Obtient le type associé à l'identificateur de programme (ProgID) spécifié, indiquant s'il faut lever une exception en cas d'erreur pendant le chargement du type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3166">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3167">Type associé à l'identificateur de programme (ProgID) spécifié si <paramref name="progID" /> est une entrée valide dans le Registre et qu'un type lui est associé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3167">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3168">Cette méthode est fournie pour la prise en charge COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3168">This method is provided for COM support.</span></span> <span data-ttu-id="c5b52-3169">ID de programme ne sont pas utilisés dans Microsoft .NET Framework, car ils ont été remplacés par le concept d’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3169">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3170">L’exemple suivant récupère un type en passant un ProgID, indiquant s’il faut lever une exception si le ProgID n’est pas valide.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3170">The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid.</span></span> <span data-ttu-id="c5b52-3171">L’exemple affiche ensuite le ClassID associé au ProgID, ainsi que n’importe quel message d’exception approprié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3171">The example then displays the ClassID related to the ProgID, along with any applicable exception message.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]
 [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-3172">
            <paramref name="progID" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3172">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="c5b52-3173">Le progID spécifié n’est pas inscrit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3173">The specified ProgID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c5b52-3174">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3174">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c5b52-3175">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3175">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="c5b52-3176">Identificateur de programme (ProgID) du type à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3176">The progID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="c5b52-3177">Serveur à partir duquel le type doit être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3177">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="c5b52-3178">Si le nom de serveur est <see langword="null" />, cette méthode revient automatiquement à la machine locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3178">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3179">Obtient le type associé à l'identificateur de programme (ProgID) spécifié à partir du serveur défini, retournant null en cas d'erreur pendant le chargement du type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3179">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3180">Type associé à l'identificateur de programme (ProgID) spécifié si <paramref name="progID" /> est une entrée valide dans le Registre et qu'un type lui est associé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3180">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3181">Cette méthode est fournie pour la prise en charge COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3181">This method is provided for COM support.</span></span> <span data-ttu-id="c5b52-3182">ID de programme ne sont pas utilisés dans Microsoft .NET Framework, car ils ont été remplacés par le concept d’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3182">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3183">L’exemple suivant récupère un type en passant un ProgID et nom de serveur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3183">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="c5b52-3184">L’exemple puis affiche le ClassID associé au ProgID, ou lève une exception si le ProgID ou le nom du serveur n’est pas valide.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3184">The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]
 [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-3185">
            <paramref name="prodID" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3185">
              <paramref name="prodID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c5b52-3186">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3186">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c5b52-3187">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3187">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="c5b52-3188">Identificateur de programme (ProgID) du <see cref="T:System.Type" /> à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3188">The progID of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="c5b52-3189">Serveur à partir duquel le type doit être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3189">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="c5b52-3190">Si le nom de serveur est <see langword="null" />, cette méthode revient automatiquement à la machine locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3190">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="c5b52-3191">
            <see langword="true" /> pour lever toute exception qui se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3191">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="c5b52-3192">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3192">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3193">
            <see langword="false" /> pour ignorer toute exception qui se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3193">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3194">Obtient le type associé à l'identificateur de programme (ProgID) spécifié à partir du serveur défini, indiquant s'il faut lever une exception en cas d'erreur pendant le chargement du type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3194">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3195">Type associé à l'identificateur de programme (ProgID) spécifié si <paramref name="progID" /> est une entrée valide dans le Registre et qu'un type lui est associé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3195">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3196">Cette méthode est fournie pour la prise en charge COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3196">This method is provided for COM support.</span></span> <span data-ttu-id="c5b52-3197">ID de programme ne sont pas utilisés dans Microsoft .NET Framework, car ils ont été remplacés par le concept d’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3197">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3198">L’exemple suivant récupère un type en passant un ProgID et nom de serveur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3198">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="c5b52-3199">L’exemple affiche ensuite le ClassID associé au ProgID, en spécifiant s’il faut lever une exception si le ProgID ou le nom du serveur n’est pas valide.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3199">The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]
 [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-3200">
            <paramref name="progID" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3200">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="c5b52-3201">Le progID spécifié n’est pas inscrit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3201">The specified progID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c5b52-3202">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3202">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c5b52-3203">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3203">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeHandle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeHandle (o As Object) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static RuntimeTypeHandle GetTypeHandle(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetTypeHandle : obj -&gt; RuntimeTypeHandle" Usage="System.Type.GetTypeHandle o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="c5b52-3204">Objet dont il faut obtenir le handle de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3204">The object for which to get the type handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3205">Obtient le handle pour le <see cref="T:System.Type" /> d'un objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3205">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3206">Handle pour le <see cref="T:System.Type" /> de l'objet <see cref="T:System.Object" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3206">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3207">Les handles sont valides uniquement dans le domaine d’application dans lequel ils ont été obtenus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3207">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3208">L’exemple suivant définit la classe `MyClass1`, obtient une instance de celui-ci et récupère le handle de runtime de l’objet.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3208">The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.</span></span>  
  
 [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]
 [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]
 [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-3209">
            <paramref name="o" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3209">
              <paramref name="o" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Type.GUID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.GUID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3210">Obtient le GUID associé à <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3210">Gets the GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3211">GUID associé à <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3211">The GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3212">Un GUID est associé à un type en utilisant la <xref:System.Runtime.InteropServices.GuidAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3212">A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3213">L’exemple suivant crée la classe `MyClass1` avec une méthode publique, crée un `Type` objet correspondant à `MyClass1`et obtient le <xref:System.Guid> structure à l’aide de la `GUID` propriété de la `Type` classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3213">The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.</span></span>  
  
 [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]
 [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]
 [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Type.HasElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.HasElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3214">Obtient une valeur indiquant si le <see cref="T:System.Type" /> actuel englobe ou se réfère à un autre type, c'est-à-dire si le <see cref="T:System.Type" /> actuel est un tableau ou un pointeur ou encore s'il est passé par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3214">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3215">
            <see langword="true" /> si <see cref="T:System.Type" /> est un tableau ou un pointeur ou encore s'il est passé par référence ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3215">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3216">Par exemple, Type.GetType("Int32[]"). HasElementType retourne `true`, mais Type.GetType("Int32"). HasElementType retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3216">For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`.</span></span> <span data-ttu-id="c5b52-3217">HasElementType retourne également `true` pour « Int32 \* » et « Int32 & ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3217">HasElementType also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
 <span data-ttu-id="c5b52-3218">Si actuel <xref:System.Type> représente un type générique ou un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3218">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3219">L’exemple suivant retourne `true` ou `false` selon ou non l’objet est un tableau, un type référence ou un pointeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3219">The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.</span></span>  
  
 [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]
 [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]
 [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.HasElementTypeImpl" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member HasElementTypeImpl : unit -&gt; bool" Usage="type.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3220">En cas de substitution dans une classe dérivée, implémente la propriété <see cref="P:System.Type.HasElementType" /> et détermine si le <see cref="T:System.Type" /> actuel englobe ou se réfère à un autre type ; c'est-à-dire si le <see cref="T:System.Type" /> actuel est un tableau ou un pointeur ou encore s'il est passé par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3220">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3221">
            <see langword="true" /> si <see cref="T:System.Type" /> est un tableau ou un pointeur ou encore s'il est passé par référence ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3221">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3222">Par exemple, Type.GetType("Int32[]"). HasElementTypeImpl retourne `true`, mais Type.GetType("Int32"). HasElementTypeImpl retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3222">For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`.</span></span> <span data-ttu-id="c5b52-3223">HasElementTypeImpl retourne également `true` pour « Int32 \* » et « Int32 & ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3223">HasElementTypeImpl also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3224">L’exemple suivant définit la classe `MyTypeDelegator`, qui remplace le `HasElementTypeImpl` (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3224">The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="c5b52-3225">La classe principale vérifie la `HasElementType` propriété et affiche le type d’élément.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3225">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3226">Appelle un membre spécifique du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3226">Invokes a specific member of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-3227">Chaîne contenant le nom du membre de constructeur, de méthode, de propriété ou de champ à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3227">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="c5b52-3228">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3228">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3229">Une chaîne vide ("") pour appeler le membre par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3229">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="c5b52-3230">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3230">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3231">Pour les membres <see langword="IDispatch" />, chaîne représentant le DispID, par exemple "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3231">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="c5b52-3232">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3232">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-3233">L'accès peut être fourni par l'un des <see langword="BindingFlags" />, par exemple <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3233">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="c5b52-3234">Il n'est pas nécessaire de spécifier le type de recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3234">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="c5b52-3235">Si le type de recherche est omis, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> sont utilisés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3235">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-3236">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3236">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-3237">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3237">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3238">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3238">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="c5b52-3239">Notez que la définition explicite d'un objet <see cref="T:System.Reflection.Binder" /> peut être nécessaire pour appeler correctement des surcharges de méthode avec des arguments variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3239">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="c5b52-3240">Objet sur lequel appeler le membre spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3240">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="c5b52-3241">Tableau contenant les arguments à passer au membre à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3241">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3242">Appelle le membre défini, à l’aide des contraintes de liaison spécifiées et correspondant à la liste d’arguments spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3242">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3243">Objet représentant la valeur de retour du membre appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3243">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3244">Vous ne pouvez pas utiliser <xref:System.Type.InvokeMember%2A> pour appeler une méthode générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3244">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="c5b52-3245">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les membres à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3245">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-3246">Spécifiez `BindingFlags.Public` pour inclure les membres publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3246">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-3247">Spécifiez `BindingFlags.NonPublic` pour inclure les membres non publics (autrement dit, les membres privés et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3247">Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-3248">Spécifiez `BindingFlags.FlattenHierarchy` pour inclure les membres statiques dans la hiérarchie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3248">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="c5b52-3249">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3249">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-3250">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3250">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-3251">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les membres déclarés sur le <xref:System.Type>, pas les membres qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3251">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-3252">Ce qui suit <xref:System.Reflection.BindingFlags> indicateurs d’appel peuvent être utilisés pour désigner l’action à effectuer sur le membre :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3252">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="c5b52-3253">`CreateInstance` pour appeler un constructeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3253">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="c5b52-3254">`name` est ignoré.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3254">`name` is ignored.</span></span> <span data-ttu-id="c5b52-3255">Non valide avec d’autres indicateurs d’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3255">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="c5b52-3256">`InvokeMethod` pour appeler une méthode, mais pas un constructeur ou un initialiseur de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3256">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="c5b52-3257">Non valide avec `SetField` ou `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3257">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="c5b52-3258">Si `InvokeMethod` est spécifié par lui-même, `BindingFlags.Public`, `BindingFlags.Instance`, et `BindingFlags.Static` sont automatiquement inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3258">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="c5b52-3259">`GetField` Pour obtenir la valeur d’un champ.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3259">`GetField` to get the value of a field.</span></span> <span data-ttu-id="c5b52-3260">Non valide avec `SetField`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3260">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="c5b52-3261">`SetField` Pour définir la valeur d’un champ.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3261">`SetField` to set the value of a field.</span></span> <span data-ttu-id="c5b52-3262">Non valide avec `GetField`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3262">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="c5b52-3263">`GetProperty` Pour obtenir une propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3263">`GetProperty` to get a property.</span></span> <span data-ttu-id="c5b52-3264">Non valide avec `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3264">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="c5b52-3265">`SetProperty` Pour définir une propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3265">`SetProperty` to set a property.</span></span> <span data-ttu-id="c5b52-3266">Non valide avec `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3266">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="c5b52-3267">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3267">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-3268">Une méthode est appelée si les deux conditions suivantes sont remplies :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3268">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="c5b52-3269">Le nombre de paramètres dans la déclaration de méthode est égal au nombre d’arguments dans le `args` tableau (à moins que les arguments par défaut sont définis sur le membre et `BindingFlags.OptionalParamBinding` est spécifié).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3269">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="c5b52-3270">Le type de chaque argument peut être converti par le classeur vers le type du paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3270">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="c5b52-3271">Le binder va trouver toutes les méthodes correspondantes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3271">The binder will find all of the matching methods.</span></span> <span data-ttu-id="c5b52-3272">Ces méthodes sont disponibles en fonction du type de liaison demandé (<xref:System.Reflection.BindingFlags> valeurs `InvokeMethod`, `GetProperty`, et ainsi de suite).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3272">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="c5b52-3273">L’ensemble de méthodes est filtré par le nom, nombre d’arguments et un jeu de modificateurs de recherche définis dans le classeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3273">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="c5b52-3274">Une fois la méthode est sélectionnée, elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3274">After the method is selected, it is invoked.</span></span> <span data-ttu-id="c5b52-3275">Accessibilité est vérifiée à ce stade.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3275">Accessibility is checked at that point.</span></span> <span data-ttu-id="c5b52-3276">La recherche peut contrôler quel ensemble de méthodes sont recherchés en fonction de l’attribut d’accessibilité associé à la méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3276">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="c5b52-3277">Le <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> méthode de la <xref:System.Reflection.Binder> classe est responsable de la sélection de la méthode à appeler.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3277">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="c5b52-3278">Le binder par défaut sélectionne la correspondance la plus spécifique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3278">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="c5b52-3279">Restrictions d’accès sont ignorées pour le code totalement approuvé ; Autrement dit, propriétés, méthodes, champs et constructeurs privés peuvent être accessibles et appelées par le biais <xref:System.Reflection> chaque fois que le code est entièrement fiable.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3279">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="c5b52-3280">Vous pouvez utiliser `Type.InvokeMember` pour définir un champ à une valeur particulière en spécifiant <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3280">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c5b52-3281">Par exemple, si vous souhaitez définir un champ d’instance public nommé F sur la classe C et F est un `String`, vous pouvez utiliser le code :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3281">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 <span data-ttu-id="c5b52-3282">Si F est un `String[]`, vous pouvez utiliser le code :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3282">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 <span data-ttu-id="c5b52-3283">ce qui initialisera le champ F à ce nouveau tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3283">which will initialize the field F to this new array.</span></span> <span data-ttu-id="c5b52-3284">Vous pouvez également utiliser `Type.InvokeMember` pour définir une position dans un tableau en fournissant l’index de la valeur, puis la valeur suivante à l’aide de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3284">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 <span data-ttu-id="c5b52-3285">Cela modifie la chaîne « z » dans le tableau F conserve à la chaîne « b ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3285">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="c5b52-3286">Lorsque vous appelez un `IDispatch` membre, vous pouvez spécifier le DispID au lieu du nom de membre, en utilisant le format de chaîne « [DispID = ##] ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3286">When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="c5b52-3287">Par exemple, si le DispID de MyComMethod est 3, vous pouvez spécifier la chaîne « [DispID = 3] » au lieu de « MyComMethod ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3287">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="c5b52-3288">L’appel d’un membre par DispID est plus rapide que Rechercher par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3288">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="c5b52-3289">Dans les scénarios d’agrégation complexes, le DispID est parfois la seule façon d’appeler le membre souhaité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3289">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3290">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder aux membres non publics si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des membres non publics est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3290">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="c5b52-3291">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="c5b52-3291">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="c5b52-3292">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3292">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3293">L’exemple suivant utilise `InvokeMember` pour accéder aux membres d’un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3293">The following example uses `InvokeMember` to access members of a type.</span></span>  
  
 [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]
 [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]
 [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-3294">
            <paramref name="invokeAttr" /> ne contient pas <see langword="CreateInstance" /> et <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3294">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-3295">
            <paramref name="invokeAttr" /> n’est pas un attribut <see cref="T:System.Reflection.BindingFlags" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3295">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="c5b52-3296">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3296">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3297">
            <paramref name="invokeAttr" /> ne contient pas l’un des indicateurs de liaison suivants : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3297">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3298">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3298">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3299">
            <paramref name="invokeAttr" /> contient <see langword="CreateInstance" /> combiné avec <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3299">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3300">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3300">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3301">
            <paramref name="invokeAttr" /> contient à la fois <see langword="GetField" /> et <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3301">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="c5b52-3302">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3302">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3303">
            <paramref name="invokeAttr" /> contient à la fois <see langword="GetProperty" /> et <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3303">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3304">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3304">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3305">
            <paramref name="invokeAttr" /> contient <see langword="InvokeMethod" /> combiné avec <see langword="SetField" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3305">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3306">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3306">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3307">
            <paramref name="invokeAttr" /> contient <see langword="SetField" /> et <paramref name="args" /> a plusieurs éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3307">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="c5b52-3308">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3308">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3309">Cette méthode est appelée sur un objet COM et l’un des indicateurs de liaisons suivants n’a pas été passé : <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> ou <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3309">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3310">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3310">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3311">L’un des tableaux de paramètres nommés contient une chaîne qui est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3311">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="c5b52-3312">Le membre spécifié est un initialiseur de classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3312">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="c5b52-3313">Le champ ou la propriété est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3313">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="c5b52-3314">Aucune méthode ne peut être trouvée qui correspond aux arguments de <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3314">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="c5b52-3315">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3315">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3316">L’objet <see cref="T:System.Type" /> actuel représente un type qui contient les paramètres de type ouverts, à savoir, <see cref="P:System.Type.ContainsGenericParameters" /> retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3316">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="c5b52-3317">Le membre spécifié ne peut pas être appelé sur <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3317">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-3318">Plusieurs méthodes correspondent aux critères de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3318">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-3319">Le .NET Compact Framework ne prend pas en charge cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3319">The .NET Compact Framework does not currently support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-3320">La méthode représentée par <paramref name="name" /> a un ou plusieurs paramètres de type générique non spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3320">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="c5b52-3321">Autrement dit, la propriété <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> de la méthode retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3321">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c5b52-3322">Pour accéder aux membres non publics, quel que soit leur allocation définie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3322">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="c5b52-3323">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3323">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="c5b52-3324">pour appeler du code non managé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3324">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="c5b52-3325">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3325">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-3326">Chaîne contenant le nom du membre de constructeur, de méthode, de propriété ou de champ à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3326">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="c5b52-3327">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3327">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3328">Une chaîne vide ("") pour appeler le membre par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3328">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="c5b52-3329">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3329">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3330">Pour les membres <see langword="IDispatch" />, chaîne représentant le DispID, par exemple "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3330">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="c5b52-3331">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3331">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-3332">L'accès peut être fourni par l'un des <see langword="BindingFlags" />, par exemple <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3332">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="c5b52-3333">Il n'est pas nécessaire de spécifier le type de recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3333">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="c5b52-3334">Si le type de recherche est omis, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> sont utilisés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3334">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-3335">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3335">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-3336">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3336">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3337">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3337">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="c5b52-3338">Notez que la définition explicite d'un objet <see cref="T:System.Reflection.Binder" /> peut être nécessaire pour appeler correctement des surcharges de méthode avec des arguments variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3338">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="c5b52-3339">Objet sur lequel appeler le membre spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3339">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="c5b52-3340">Tableau contenant les arguments à passer au membre à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3340">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="c5b52-3341">Objet représentant le paramètre régional de globalisation à utiliser si nécessaire, notamment pour les conversions spécifiques aux paramètres régionaux telles que la conversion d'un type numérique <see cref="T:System.String" /> en type <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3341">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span>
          </span>
          <span data-ttu-id="c5b52-3342">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3342">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3343">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3343">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3344">Appelle le membre spécifié, à l'aide des contraintes de liaison spécifiées et correspondant à la liste d'arguments et à la culture spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3344">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3345">Objet représentant la valeur de retour du membre appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3345">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3346">Bien que le binder par défaut ne traite pas <xref:System.Globalization.CultureInfo> (le `culture` paramètre), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `culture`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3346">Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `culture`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3347">Vous ne pouvez pas utiliser <xref:System.Type.InvokeMember%2A> pour appeler une méthode générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3347">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="c5b52-3348">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les membres à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3348">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-3349">Spécifiez `BindingFlags.Public` pour inclure les membres publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3349">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-3350">Spécifiez `BindingFlags.NonPublic` pour inclure les membres non publics (autrement dit, les membres privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3350">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-3351">Spécifiez `BindingFlags.FlattenHierarchy` pour inclure les membres statiques dans la hiérarchie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3351">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="c5b52-3352">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3352">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-3353">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3353">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-3354">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les membres déclarés sur le <xref:System.Type>, pas les membres qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3354">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-3355">Ce qui suit <xref:System.Reflection.BindingFlags> indicateurs d’appel peuvent être utilisés pour désigner l’action à effectuer sur le membre :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3355">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="c5b52-3356">`CreateInstance` pour appeler un constructeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3356">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="c5b52-3357">`name` est ignoré.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3357">`name` is ignored.</span></span> <span data-ttu-id="c5b52-3358">Non valide avec d’autres indicateurs d’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3358">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="c5b52-3359">`InvokeMethod` pour appeler une méthode, mais pas un constructeur ou un initialiseur de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3359">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="c5b52-3360">Non valide avec `SetField` ou `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3360">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="c5b52-3361">Si `InvokeMethod` est spécifié par lui-même, `BindingFlags.Public`, `BindingFlags.Instance`, et `BindingFlags.Static` sont automatiquement inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3361">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="c5b52-3362">`GetField` Pour obtenir la valeur d’un champ.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3362">`GetField` to get the value of a field.</span></span> <span data-ttu-id="c5b52-3363">Non valide avec `SetField`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3363">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="c5b52-3364">`SetField` Pour définir la valeur d’un champ.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3364">`SetField` to set the value of a field.</span></span> <span data-ttu-id="c5b52-3365">Non valide avec `GetField`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3365">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="c5b52-3366">`GetProperty` Pour obtenir une propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3366">`GetProperty` to get a property.</span></span> <span data-ttu-id="c5b52-3367">Non valide avec `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3367">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="c5b52-3368">`SetProperty` Pour définir une propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3368">`SetProperty` to set a property.</span></span> <span data-ttu-id="c5b52-3369">Non valide avec `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3369">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="c5b52-3370">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3370">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-3371">Une méthode est appelée si les deux conditions suivantes sont remplies :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3371">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="c5b52-3372">Le nombre de paramètres dans la déclaration de méthode est égal au nombre d’arguments dans le `args` tableau (à moins que les arguments par défaut sont définis sur le membre et `BindingFlags.OptionalParamBinding` est spécifié).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3372">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="c5b52-3373">Le type de chaque argument peut être converti par le classeur vers le type du paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3373">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="c5b52-3374">Le binder va trouver toutes les méthodes correspondantes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3374">The binder will find all of the matching methods.</span></span> <span data-ttu-id="c5b52-3375">Ces méthodes sont disponibles en fonction du type de liaison demandé (<xref:System.Reflection.BindingFlags> valeurs `InvokeMethod`, `GetProperty`, et ainsi de suite).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3375">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="c5b52-3376">L’ensemble de méthodes est filtré par le nom, nombre d’arguments et un jeu de modificateurs de recherche définis dans le classeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3376">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="c5b52-3377">Une fois la méthode est sélectionnée, elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3377">After the method is selected, it is invoked.</span></span> <span data-ttu-id="c5b52-3378">Accessibilité est vérifiée à ce stade.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3378">Accessibility is checked at that point.</span></span> <span data-ttu-id="c5b52-3379">La recherche peut contrôler quel ensemble de méthodes sont recherchés en fonction de l’attribut d’accessibilité associé à la méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3379">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="c5b52-3380">Le <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> méthode de la <xref:System.Reflection.Binder> classe est responsable de la sélection de la méthode à appeler.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3380">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="c5b52-3381">Le binder par défaut sélectionne la correspondance la plus spécifique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3381">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="c5b52-3382">Restrictions d’accès sont ignorées pour le code totalement approuvé ; Autrement dit, les propriétés, méthodes, champs et constructeurs privés sont accessibles et peuvent être appelées via la réflexion chaque fois que le code est entièrement fiable.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3382">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="c5b52-3383">Vous pouvez utiliser `Type.InvokeMember` pour définir un champ à une valeur particulière en spécifiant <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3383">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c5b52-3384">Par exemple, si vous souhaitez définir un champ d’instance public nommé F sur la classe C et F est un `String` vous pouvez utiliser le code :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3384">For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 <span data-ttu-id="c5b52-3385">Si F est un `String[]`, vous pouvez utiliser le code :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3385">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 <span data-ttu-id="c5b52-3386">ce qui initialisera le champ F à ce nouveau tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3386">which will initialize the field F to this new array.</span></span> <span data-ttu-id="c5b52-3387">Vous pouvez également utiliser `Type.InvokeMember` pour définir une position dans un tableau en fournissant l’index de la valeur, puis la valeur suivante à l’aide de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3387">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 <span data-ttu-id="c5b52-3388">Cela modifie la chaîne « z » dans le tableau F conserve à la chaîne « b ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3388">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="c5b52-3389">Lorsque vous appelez un `IDispatch` membre que vous pouvez spécifier le DispID au lieu du nom de membre, en utilisant le format de chaîne « [DispID = ##] ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3389">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="c5b52-3390">Par exemple, si le DispID de MyComMethod est 3, vous pouvez spécifier la chaîne « [DispID = 3] » au lieu de « MyComMethod ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3390">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="c5b52-3391">L’appel d’un membre par DispID est plus rapide que Rechercher par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3391">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="c5b52-3392">Dans les scénarios d’agrégation complexes, le DispID est parfois la seule façon d’appeler le membre souhaité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3392">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3393">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder aux membres non publics si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des membres non publics est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3393">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="c5b52-3394">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="c5b52-3394">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="c5b52-3395">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3395">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-3396">
            <paramref name="invokeAttr" /> ne contient pas <see langword="CreateInstance" /> et <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3396">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-3397">
            <paramref name="invokeAttr" /> n’est pas un attribut <see cref="T:System.Reflection.BindingFlags" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3397">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="c5b52-3398">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3398">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3399">
            <paramref name="invokeAttr" /> ne contient pas l’un des indicateurs de liaison suivants : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3399">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3400">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3400">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3401">
            <paramref name="invokeAttr" /> contient <see langword="CreateInstance" /> combiné avec <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3401">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3402">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3402">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3403">
            <paramref name="invokeAttr" /> contient à la fois <see langword="GetField" /> et <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3403">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="c5b52-3404">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3404">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3405">
            <paramref name="invokeAttr" /> contient à la fois <see langword="GetProperty" /> et <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3405">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3406">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3406">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3407">
            <paramref name="invokeAttr" /> contient <see langword="InvokeMethod" /> combiné avec <see langword="SetField" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3407">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3408">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3408">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3409">
            <paramref name="invokeAttr" /> contient <see langword="SetField" /> et <paramref name="args" /> a plusieurs éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3409">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="c5b52-3410">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3410">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3411">Cette méthode est appelée sur un objet COM et l’un des indicateurs de liaisons suivants n’a pas été passé : <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> ou <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3411">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3412">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3412">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3413">L’un des tableaux de paramètres nommés contient une chaîne qui est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3413">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="c5b52-3414">Le membre spécifié est un initialiseur de classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3414">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="c5b52-3415">Le champ ou la propriété est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3415">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="c5b52-3416">Aucune méthode ne peut être trouvée qui correspond aux arguments de <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3416">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="c5b52-3417">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3417">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3418">L’objet <see cref="T:System.Type" /> actuel représente un type qui contient les paramètres de type ouverts, à savoir, <see cref="P:System.Type.ContainsGenericParameters" /> retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3418">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="c5b52-3419">Le membre spécifié ne peut pas être appelé sur <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3419">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-3420">Plusieurs méthodes correspondent aux critères de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3420">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-3421">La méthode représentée par <paramref name="name" /> a un ou plusieurs paramètres de type générique non spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3421">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="c5b52-3422">Autrement dit, la propriété <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> de la méthode retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3422">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c5b52-3423">Pour accéder aux membres non publics, quel que soit leur allocation définie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3423">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="c5b52-3424">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3424">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="c5b52-3425">pour appeler du code non managé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3425">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="c5b52-3426">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3426">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c5b52-3427">Chaîne contenant le nom du membre de constructeur, de méthode, de propriété ou de champ à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3427">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="c5b52-3428">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3428">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3429">Une chaîne vide ("") pour appeler le membre par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3429">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="c5b52-3430">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3430">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3431">Pour les membres <see langword="IDispatch" />, chaîne représentant le DispID, par exemple "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3431">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="c5b52-3432">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3432">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="c5b52-3433">L'accès peut être fourni par l'un des <see langword="BindingFlags" />, par exemple <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3433">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="c5b52-3434">Il n'est pas nécessaire de spécifier le type de recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3434">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="c5b52-3435">Si le type de recherche est omis, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> sont utilisés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3435">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="c5b52-3436">Objet qui définit un ensemble de propriétés et permet la liaison, ce qui peut impliquer la sélection d'une méthode surchargée, la contrainte de types d'arguments et l'appel d'un membre par la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3436">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="c5b52-3437">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3437">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3438">Référence null (Nothing en Visual Basic) pour utiliser <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3438">A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="c5b52-3439">Notez que la définition explicite d'un objet <see cref="T:System.Reflection.Binder" /> peut être nécessaire pour appeler correctement des surcharges de méthode avec des arguments variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3439">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="c5b52-3440">Objet sur lequel appeler le membre spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3440">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="c5b52-3441">Tableau contenant les arguments à passer au membre à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3441">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="c5b52-3442">Tableau d’objets <see cref="T:System.Reflection.ParameterModifier" /> représentant les attributs associés à l’élément correspondant dans le tableau <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3442">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="c5b52-3443">Les attributs associés d'un paramètre sont stockés dans la signature du membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3443">A parameter's associated attributes are stored in the member's signature.</span>
          </span>
          <span data-ttu-id="c5b52-3444">Le binder par défaut traite ce paramètre uniquement au moment de l'appel d'un composant COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3444">The default binder processes this parameter only when calling a COM component.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="c5b52-3445">Objet <see cref="T:System.Globalization.CultureInfo" /> représentant le paramètre régional de globalisation à utiliser si nécessaire, notamment pour les conversions spécifiques aux paramètres régionaux comme la conversion d'un type numérique String en type Double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3445">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="c5b52-3446">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3446">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3447">Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3447">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="c5b52-3448">Tableau contenant les noms des paramètres auxquels les valeurs du tableau <c>args</c> sont passées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3448">An array containing the names of the parameters to which the values in the <c>args</c> array are passed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3449">En cas de substitution dans une classe dérivée, appelle le membre défini, à l'aide des contraintes de liaison spécifiées et correspondant à la liste d'arguments, aux modificateurs et à la culture spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3449">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3450">Objet représentant la valeur de retour du membre appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3450">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3451">`InvokeMember` appelle un membre de constructeur ou un membre de méthode, obtient ou définit un membre de propriété, obtient ou définit un membre de champ de données, ou obtient ou définit un élément d’un membre du groupe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3451">`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3452">Vous ne pouvez pas utiliser <xref:System.Type.InvokeMember%2A> pour appeler une méthode générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3452">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="c5b52-3453">Lorsque vous appelez un `IDispatch` membre que vous pouvez spécifier le DispID au lieu du nom de membre, en utilisant le format de chaîne « [DispID = ##] ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3453">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="c5b52-3454">Par exemple, si le DispID de MyComMethod est 3, vous pouvez spécifier la chaîne « [DispID = 3] » au lieu de « MyComMethod ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3454">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="c5b52-3455">L’appel d’un membre par DispID est plus rapide que Rechercher par nom.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3455">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="c5b52-3456">Dans les scénarios d’agrégation complexes, le DispID est parfois la seule façon d’appeler le membre souhaité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3456">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
 <span data-ttu-id="c5b52-3457">Bien que le binder par défaut ne traite pas <xref:System.Reflection.ParameterModifier> ou <xref:System.Globalization.CultureInfo> (le `modifiers` et `culture` paramètres), vous pouvez utiliser l’abstraite <xref:System.Reflection.Binder?displayProperty=nameWithType> classe permettant d’écrire un binder personnalisé qui traite `modifiers` et `culture`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3457">Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers` and `culture`.</span></span> <span data-ttu-id="c5b52-3458">`ParameterModifier` est utilisé uniquement lors de l’appel via COM interop, et seuls les paramètres qui sont passés par référence sont gérées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3458">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="c5b52-3459">Chaque paramètre du tableau `namedParameters` obtient la valeur indiquée dans l'élément correspondant du tableau `args`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3459">Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array.</span></span> <span data-ttu-id="c5b52-3460">Si la longueur de `args` est supérieure à la longueur de `namedParameters`, les valeurs d'arguments restantes sont passées dans l'ordre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3460">If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.</span></span>  
  
 <span data-ttu-id="c5b52-3461">Le `namedParameters` tableau peut être utilisé pour modifier l’ordre des arguments dans un tableau d’entrée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3461">The `namedParameters` array can be used to change the order of arguments in an input array.</span></span> <span data-ttu-id="c5b52-3462">Par exemple, étant donné la méthode `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` en Visual Basic) et le tableau d’entrée `{ 42, "x" }`, le tableau d’entrée peut être passé sans modification vers `args` si le tableau `{ "b", "a" }` est fourni pour `namedParameters`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3462">For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to `args` if the array `{ "b", "a" }` is supplied for `namedParameters`.</span></span>  
  
 <span data-ttu-id="c5b52-3463">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de filtre peuvent être utilisés pour définir les membres à inclure dans la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3463">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="c5b52-3464">Spécifiez `BindingFlags.Public` pour inclure les membres publics dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3464">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-3465">Spécifiez `BindingFlags.NonPublic` pour inclure les membres non publics (autrement dit, les membres privés, internes et protégés) dans la recherche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3465">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="c5b52-3466">Spécifiez `BindingFlags.FlattenHierarchy` pour inclure les membres statiques dans la hiérarchie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3466">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="c5b52-3467">Les éléments suivants <xref:System.Reflection.BindingFlags> les indicateurs de modificateur peuvent être utilisés pour modifier le fonctionnement de la recherche :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3467">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="c5b52-3468">`BindingFlags.IgnoreCase` pour ignorer la casse de `name`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3468">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="c5b52-3469">`BindingFlags.DeclaredOnly` Pour rechercher uniquement les membres déclarés sur le <xref:System.Type>, pas les membres qui ont été simplement hérités.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3469">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="c5b52-3470">Ce qui suit <xref:System.Reflection.BindingFlags> indicateurs d’appel peuvent être utilisés pour désigner l’action à effectuer sur le membre :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3470">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="c5b52-3471">`CreateInstance` pour appeler un constructeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3471">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="c5b52-3472">`name` est ignoré.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3472">`name` is ignored.</span></span> <span data-ttu-id="c5b52-3473">Non valide avec d’autres indicateurs d’appel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3473">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="c5b52-3474">`InvokeMethod` pour appeler une méthode, mais pas un constructeur ou un initialiseur de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3474">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="c5b52-3475">Non valide avec `SetField` ou `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3475">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="c5b52-3476">Si `InvokeMethod` est spécifié par lui-même, `BindingFlags.Public`, `BindingFlags.Instance`, et `BindingFlags.Static` sont automatiquement inclus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3476">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="c5b52-3477">`GetField` Pour obtenir la valeur d’un champ.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3477">`GetField` to get the value of a field.</span></span> <span data-ttu-id="c5b52-3478">Non valide avec `SetField`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3478">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="c5b52-3479">`SetField` Pour définir la valeur d’un champ.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3479">`SetField` to set the value of a field.</span></span> <span data-ttu-id="c5b52-3480">Non valide avec `GetField`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3480">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="c5b52-3481">`GetProperty` Pour obtenir une propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3481">`GetProperty` to get a property.</span></span> <span data-ttu-id="c5b52-3482">Non valide avec `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3482">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="c5b52-3483">`SetProperty` Pour définir une propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3483">`SetProperty` to set a property.</span></span> <span data-ttu-id="c5b52-3484">Non valide avec `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3484">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="c5b52-3485">Pour plus d'informations, voir <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3485">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="c5b52-3486">Une méthode est appelée si les deux conditions suivantes sont remplies :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3486">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="c5b52-3487">Le nombre de paramètres dans la déclaration de méthode est égal au nombre d’arguments dans le `args` tableau (à moins que les arguments par défaut sont définis sur le membre et `BindingFlags.OptionalParamBinding` est spécifié).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3487">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="c5b52-3488">Le type de chaque argument peut être converti par le classeur vers le type du paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3488">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="c5b52-3489">Le binder va trouver toutes les méthodes correspondantes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3489">The binder will find all of the matching methods.</span></span> <span data-ttu-id="c5b52-3490">Ces méthodes sont disponibles en fonction du type de liaison demandé (<xref:System.Reflection.BindingFlags> valeurs `InvokeMethod`, `GetProperty`, et ainsi de suite).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3490">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="c5b52-3491">L’ensemble de méthodes est filtré par le nom, nombre d’arguments et un jeu de modificateurs de recherche définis dans le classeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3491">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="c5b52-3492">Une fois la méthode est sélectionnée, elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3492">After the method is selected, it is invoked.</span></span> <span data-ttu-id="c5b52-3493">Accessibilité est vérifiée à ce stade.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3493">Accessibility is checked at that point.</span></span> <span data-ttu-id="c5b52-3494">La recherche peut contrôler quel ensemble de méthodes sont recherchés en fonction de l’attribut d’accessibilité associé à la méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3494">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="c5b52-3495">Le <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> méthode de la <xref:System.Reflection.Binder> classe est responsable de la sélection de la méthode à appeler.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3495">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="c5b52-3496">Le binder par défaut sélectionne la correspondance la plus spécifique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3496">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="c5b52-3497">`InvokeMember` peut être utilisé pour appeler des méthodes avec des paramètres qui ont des valeurs par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3497">`InvokeMember` can be used to invoke methods with parameters that have default values.</span></span> <span data-ttu-id="c5b52-3498">Pour lier ces méthodes, la réflexion requiert <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> être spécifié.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3498">To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> to be specified.</span></span> <span data-ttu-id="c5b52-3499">Pour un paramètre qui a comme valeur par défaut, vous pouvez fournir une valeur différente, ou fournir <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> à utiliser la valeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3499">For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> to use the default value.</span></span>  
  
 <span data-ttu-id="c5b52-3500">Par exemple, considérez une méthode telle que MyMethod (int x, float y = 2.0).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3500">For example, consider a method such as MyMethod(int x, float y = 2.0).</span></span> <span data-ttu-id="c5b52-3501">Pour appeler cette méthode avec uniquement le premier argument en tant que MyMethod (4), passez un des indicateurs de liaison ci-dessus et passez deux arguments, à savoir 4 pour le premier argument et `Missing.Value` pour le deuxième argument.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3501">To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument.</span></span> <span data-ttu-id="c5b52-3502">Sauf si vous utilisez `Missing.Value`, vous ne pouvez pas omettre les paramètres facultatifs avec le `Invoke` (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3502">Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method.</span></span> <span data-ttu-id="c5b52-3503">Si vous devez le faire, utilisez `InvokeMember` à la place.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3503">If you must do so, use `InvokeMember` instead.</span></span>  
  
 <span data-ttu-id="c5b52-3504">Restrictions d’accès sont ignorées pour le code totalement approuvé ; Autrement dit, propriétés, méthodes, champs et constructeurs privés peuvent être accessibles et appelées par le biais <xref:System.Reflection> chaque fois que le code est entièrement fiable.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3504">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="c5b52-3505">Vous pouvez utiliser `Type.InvokeMember` pour définir un champ à une valeur particulière en spécifiant <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3505">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c5b52-3506">Par exemple, si vous souhaitez définir un champ d’instance public nommé F sur la classe C et F est un `String`, vous pouvez utiliser le code :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3506">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 <span data-ttu-id="c5b52-3507">Si F est un `String[]`, vous pouvez utiliser le code :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3507">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 <span data-ttu-id="c5b52-3508">ce qui initialisera le champ F à ce nouveau tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3508">which will initialize the field F to this new array.</span></span> <span data-ttu-id="c5b52-3509">Vous pouvez également utiliser `Type.InvokeMember` pour définir une position dans un tableau en fournissant l’index de la valeur, puis la valeur suivante à l’aide de code semblable au suivant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3509">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 <span data-ttu-id="c5b52-3510">Cela modifie la chaîne « z » dans le tableau F conserve à la chaîne « b ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3510">This will change string "z" in the array that F holds to string "b".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3511">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder aux membres non publics si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des membres non publics est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3511">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="c5b52-3512">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="c5b52-3512">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="c5b52-3513">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3513">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-3514">
            <paramref name="invokeAttr" /> ne contient pas <see langword="CreateInstance" /> et <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3514">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-3515">
            <paramref name="args" /> et <paramref name="modifiers" /> n’ont pas la même longueur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3515">
              <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
          <span data-ttu-id="c5b52-3516">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3516">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3517">
            <paramref name="invokeAttr" /> n’est pas un attribut <see cref="T:System.Reflection.BindingFlags" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3517">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="c5b52-3518">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3518">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3519">
            <paramref name="invokeAttr" /> ne contient pas l’un des indicateurs de liaison suivants : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3519">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3520">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3520">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3521">
            <paramref name="invokeAttr" /> contient <see langword="CreateInstance" /> combiné avec <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3521">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3522">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3522">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3523">
            <paramref name="invokeAttr" /> contient à la fois <see langword="GetField" /> et <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3523">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="c5b52-3524">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3524">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3525">
            <paramref name="invokeAttr" /> contient à la fois <see langword="GetProperty" /> et <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3525">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3526">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3526">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3527">
            <paramref name="invokeAttr" /> contient <see langword="InvokeMethod" /> combiné avec <see langword="SetField" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3527">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3528">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3528">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3529">
            <paramref name="invokeAttr" /> contient <see langword="SetField" /> et <paramref name="args" /> a plusieurs éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3529">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="c5b52-3530">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3530">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3531">Le tableau de paramètres nommé est supérieur à un tableau d’arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3531">The named parameter array is larger than the argument array.</span>
          </span>
          <span data-ttu-id="c5b52-3532">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3532">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3533">Cette méthode est appelée sur un objet COM et l’un des indicateurs de liaisons suivants n’a pas été passé : <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> ou <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3533">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="c5b52-3534">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3534">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3535">L’un des tableaux de paramètres nommés contient une chaîne qui est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3535">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="c5b52-3536">Le membre spécifié est un initialiseur de classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3536">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="c5b52-3537">Le champ ou la propriété est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3537">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="c5b52-3538">Aucune méthode ne peut être trouvée qui correspond aux arguments de <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3538">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="c5b52-3539">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3539">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3540">Aucun membre ne peut être trouvé avec les noms des arguments fournis dans <paramref name="namedParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3540">No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span>
          </span>
          <span data-ttu-id="c5b52-3541">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3541">-or-</span>
          </span>
          <span data-ttu-id="c5b52-3542">L’objet <see cref="T:System.Type" /> actuel représente un type qui contient les paramètres de type ouverts, à savoir, <see cref="P:System.Type.ContainsGenericParameters" /> retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3542">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="c5b52-3543">Le membre spécifié ne peut pas être appelé sur <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3543">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="c5b52-3544">Plusieurs méthodes correspondent aux critères de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3544">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-3545">La méthode représentée par <paramref name="name" /> a un ou plusieurs paramètres de type générique non spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3545">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="c5b52-3546">Autrement dit, la propriété <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> de la méthode retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3546">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c5b52-3547">Pour accéder aux membres non publics, quel que soit leur allocation définie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3547">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="c5b52-3548">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3548">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="c5b52-3549">pour appeler du code non managé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3549">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="c5b52-3550">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3550">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3551">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est abstrait et doit être substitué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3551">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3552">
            <see langword="true" /> si le <see cref="T:System.Type" /> est abstrait ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3552">
              <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3553">Le <xref:System.Type.IsAbstract%2A> retourne de la propriété `true` dans les cas suivants :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3553">The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:</span></span>  
  
-   <span data-ttu-id="c5b52-3554">Le type actuel est abstrait ; Autrement dit, il ne peut pas être instanciée, mais peut servir uniquement à la classe de base pour les classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3554">The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes.</span></span> <span data-ttu-id="c5b52-3555">En c#, les classes abstraites sont marquées avec le [abstraite](~/docs/csharp/language-reference/keywords/abstract.md) mot-clé ; en Visual Basic, elles sont marquées avec le [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) mot clé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3555">In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.</span></span>  
  
-   <span data-ttu-id="c5b52-3556">Le type actuel est une interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3556">The current type is an interface.</span></span>  
  
 <span data-ttu-id="c5b52-3557">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3557">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3558">L’exemple suivant crée un tableau de <xref:System.Type> objets qui représentent les types suivants : contient des retours de type `true` si l’objet spécifié est `abstract`; sinon, elle retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3558">The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.</span></span>  
  
-   <span data-ttu-id="c5b52-3559">`AbstractClass`, une classe abstraite (une classe marquée en tant que `abstract` en c# et `MustInherit` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3559">`AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="c5b52-3560">`DerivedClass`, une classe qui hérite de `AbstractClass`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3560">`DerivedClass`, a class that inherits from `AbstractClass`.</span></span>  
  
-   <span data-ttu-id="c5b52-3561">`SingleClass`, une classe non héritable.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3561">`SingleClass`, a non-inheritable class.</span></span> <span data-ttu-id="c5b52-3562">Il est défini comme `sealed` en c# et `NotInheritable` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3562">It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.</span></span>  
  
-   <span data-ttu-id="c5b52-3563">`ITypeInfo`, une interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3563">`ITypeInfo`, an interface.</span></span>  
  
-   <span data-ttu-id="c5b52-3564">`ImplementingClass`, une classe qui implémente le `ITypeInfo` interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3564">`ImplementingClass`, a class that implements the `ITypeInfo` interface.</span></span>  
  
 <span data-ttu-id="c5b52-3565">La méthode retourne `true` uniquement pour `AbstractClass`, la classe abstraite, et `ITypeInfo`, l’interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3565">The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.</span></span>  
  
 [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]
 [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAnsiClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3566">Obtient une valeur indiquant si l'attribut de format de chaîne <see langword="AnsiClass" /> est sélectionné pour <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3566">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3567">
            <see langword="true" /> si l'attribut de format de chaîne <see langword="AnsiClass" /> est sélectionné pour le <see cref="T:System.Type" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3567">
              <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3568">Le <xref:System.Reflection.TypeAttributes.StringFormatMask> sélectionne les attributs de format de chaîne.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3568">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="c5b52-3569">Les attributs de format de chaîne améliorent l’interopérabilité en définissant la façon dont les chaînes doivent être interprétées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3569">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="c5b52-3570">Si actuel <xref:System.Type> représente un type générique, cette propriété se rapporte à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3570">If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-3571">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3571">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-3572">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3572">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3573">L’exemple suivant obtient les informations de champ et vérifie le `AnsiClass` attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3573">The following example gets the field information and checks for the `AnsiClass` attribute.</span></span>  
  
 [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]
 [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]
 [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Type.IsArray" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3574">Obtient une valeur qui indique si le type est un tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3574">Gets a value that indicates whether the type is an array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3575">
            <see langword="true" /> si le type actuel est un tableau ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3575">
              <see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3576">Le <xref:System.Type.IsArray%2A> retourne de la propriété `false` pour la <xref:System.Array> classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3576">The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class.</span></span> <span data-ttu-id="c5b52-3577">Elle retourne également `false` si l’instance actuelle est un <xref:System.Type> objet qui représente un type de collection ou une interface conçue pour fonctionner avec les collections, telles que <xref:System.Collections.IEnumerable> ou <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3577">It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="c5b52-3578">Pour vérifier un tableau, utilisez le code tel que :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3578">To check for an array, use code such as:</span></span>  
  
```csharp  
typeof(Array).IsAssignableFrom(type)  
```  
  
```vb  
GetType(Array).IsAssignableFrom(type)  
```  
  
 <span data-ttu-id="c5b52-3579">Si le type actuel représente un type générique ou un paramètre de type dans la définition d’un type générique ou de méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3579">If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3580">Cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3580">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3581">L’exemple suivant montre comment utiliser le <xref:System.Type.IsArray%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3581">The following example demonstrates using the <xref:System.Type.IsArray%2A> property.</span></span>  
  
 [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]
 [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsArrayImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsArrayImpl : unit -&gt; bool" Usage="type.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3582">En cas de substitution dans une classe dérivée, implémente la propriété <see cref="P:System.Type.IsArray" /> et détermine si <see cref="T:System.Type" /> est un tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3582">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3583">
            <see langword="true" /> si <see cref="T:System.Type" /> est un tableau ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3583">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3584">Une instance de la <xref:System.Array> classe doit retourner `false` s’agissant d’un objet, pas un tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3584">An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3585">L’exemple suivant remplace le `IsArrayImpl` méthode dans la `MyTypeDelegator` classe, vérifie si une variable est un tableau et affiche le résultat.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3585">The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]
 [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]
 [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsArray" />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool&#xA;override this.IsAssignableFrom : Type -&gt; bool" Usage="type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="c5b52-3586">Type à comparer avec le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3586">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3587">Détermine si une instance d’un type spécifié peut être affectée à une instance du type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3587">Determines whether an instance of a specified type can be assigned to an instance of the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3588">
            <see langword="true" /> si l'une ou plusieurs des conditions suivantes sont remplies :</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3588">
              <see langword="true" /> if any of the following conditions is true:</span>
          </span>
          <span data-ttu-id="c5b52-3589">
-   <paramref name="c" /> et l’instance actuelle représentent le même type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3589">
-   <paramref name="c" /> and the current instance represent the same type.</span>
          </span>
          <span data-ttu-id="c5b52-3590">
-   <paramref name="c" /> est dérivé directement ou indirectement de l’instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3590">
-   <paramref name="c" /> is derived either directly or indirectly from the current instance.</span>
          </span>
          <span data-ttu-id="c5b52-3591">
            <paramref name="c" /> est dérivé directement de l’instance actuelle s’il hérite de l’instance actuelle ; <paramref name="c" /> est dérivé indirectement de l’instance actuelle s’il hérite d’une succession d’une ou plusieurs classes qui héritent de l’instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3591">
              <paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span>
          </span>
          <span data-ttu-id="c5b52-3592">L’instance actuelle est une interface implémentée par <paramref name="c" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3592">-   The current instance is an interface that <paramref name="c" /> implements.</span>
          </span>
          <span data-ttu-id="c5b52-3593">
-   <paramref name="c" /> est un paramètre de type générique et l’instance actuelle représente l’une des contraintes de <paramref name="c" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3593">
-   <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span>
          </span>
          <span data-ttu-id="c5b52-3594">Dans l’exemple suivant, l’instance actuelle est un objet <see cref="T:System.Type" /> qui représente la classe <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3594">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span>
          </span>
          <span data-ttu-id="c5b52-3595">
            <c>GenericWithConstraint</c> est un type générique dont le paramètre de type générique doit être de type <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3595">
              <c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="c5b52-3596">Le fait de passer son paramètre de type générique à <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indique qu’une instance du paramètre de type générique peut être affectée à un objet <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3596">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span>
          </span>
          <span data-ttu-id="c5b52-3597">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3597">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span>
          </span>
          <span data-ttu-id="c5b52-3598">
-   <paramref name="c" /> représente un type valeur et l’instance actuelle représente <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3598">
-   <paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span>
          </span>
          <span data-ttu-id="c5b52-3599">
            <see langword="false" /> si aucune de ces conditions n'a la valeur true, ou si <paramref name="c" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3599">
              <see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3600">Le <xref:System.Type.IsAssignableFrom%2A> méthode peut être utilisée pour déterminer si une instance de `c` peut être affectée à une instance du type actuel, la méthode est particulièrement utile lorsque vous gérez les objets dont les types ne sont pas connus au moment du design et permet de conditional assignation, comme dans l’exemple suivant montre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3600">The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]
 [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  
  
 <span data-ttu-id="c5b52-3601">Cette méthode qui garantit ainsi une ligne de code comme celui-ci s’exécute lors de l’exécution sans lever une <xref:System.InvalidCastException> exception ou une exception semblable :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3601">This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]
 [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  
  
 <span data-ttu-id="c5b52-3602">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3602">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3603">Une définition de type générique n’est pas attribuable à partir d’un type construit fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3603">A generic type definition is not assignable from a closed constructed type.</span></span> <span data-ttu-id="c5b52-3604">Autrement dit, vous ne pouvez pas affecter le type construit fermé `MyGenericList<int>` (`MyGenericList(Of Integer)` en Visual Basic) à une variable de type `MyGenericList<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3604">That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-3605">Si le `c` paramètre est de type <xref:System.Reflection.Emit.TypeBuilder>, le résultat est basé sur le type doit être créé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3605">If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built.</span></span> <span data-ttu-id="c5b52-3606">L’exemple de code suivant illustre cela : à l’aide d’un type construit nommé `B`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3606">The following code example demonstrates this using a built type named `B`.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]
 [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3607">L’exemple suivant montre le `IsAssignableFrom` à l’aide de la méthode définie par les classes, des tableaux d’entiers et des génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3607">The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.</span></span>  
  
 [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]
 [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]
 [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3608">Obtient une valeur indiquant si l'attribut de format de chaîne <see langword="AutoClass" /> est sélectionné pour <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3608">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3609">
            <see langword="true" /> si l'attribut de format de chaîne <see langword="AutoClass" /> est sélectionné pour le <see cref="T:System.Type" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3609">
              <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3610">Le <xref:System.Reflection.TypeAttributes.StringFormatMask> sélectionne les attributs de format de chaîne.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3610">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="c5b52-3611">Les attributs de format de chaîne améliorent l’interopérabilité en définissant la façon dont les chaînes doivent être interprétées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3611">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="c5b52-3612">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3612">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-3613">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3613">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-3614">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3614">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3615">Obtient une valeur qui indique si les champs du type actuel sont placés automatiquement par le Common Language Runtime.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3615">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3616">
            <see langword="true" /> si la propriété <see cref="P:System.Type.Attributes" /> du type actuel comprend <see cref="F:System.Reflection.TypeAttributes.AutoLayout" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3616">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3617">Cette propriété est fournie pour des raisons pratiques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3617">This property is provided as a convenience.</span></span> <span data-ttu-id="c5b52-3618">Vous pouvez également utiliser le <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> valeur d’énumération pour sélectionner les attributs de disposition de type et puis effectuer des tests si <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> est défini.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3618">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="c5b52-3619">Le <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, et <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> valeurs d’énumération indiquent la façon des champs du type sont disposés en mémoire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3619">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="c5b52-3620">Pour les types dynamiques, vous pouvez spécifier <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> lorsque vous créez le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3620">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="c5b52-3621">Dans le code, vous devez appliquer le <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribut avec le <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> valeur d’énumération pour le type, pour permettre l’exécution de déterminer la méthode appropriée pour disposer de la classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3621">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3622">Vous ne pouvez pas utiliser le <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> méthode pour déterminer si le <xref:System.Runtime.InteropServices.StructLayoutAttribute> a été appliqué à un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3622">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="c5b52-3623">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3623">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-3624">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="c5b52-3624">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="c5b52-3625">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3625">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3626">L’exemple suivant crée une instance du type et affiche le <xref:System.Type.IsAutoLayout%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3626">The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.</span></span>  
  
 [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]
 [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]
 [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md">
          <span data-ttu-id="c5b52-3627">Métadonnées et composants autodescriptifs</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3627">Metadata and Self-Describing Components</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Type.IsByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3628">Obtient une valeur indiquant si <see cref="T:System.Type" /> est passé par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3628">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3629">
            <see langword="true" /> si <see cref="T:System.Type" /> est passé par référence ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3629">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3630">Pour obtenir le type réel, déréférencer le type qui a été passé par référence, puis appelez <xref:System.Type.GetElementType%2A> sur ce type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3630">To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3631">L’exemple suivant montre une utilisation de la `IsByRef` propriété pour vérifier si un type spécifié est passé par référence.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3631">The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference.</span></span> <span data-ttu-id="c5b52-3632">L’exemple définit la classe `MyTypeDelegator`, qui remplace le `HasElementTypeImpl` (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3632">The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="c5b52-3633">La classe principale vérifie la `HasElementType` propriété et affiche le type d’élément.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3633">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsByRefImpl : unit -&gt; bool" Usage="type.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3634">En cas de substitution dans une classe dérivée, implémente la propriété <see cref="P:System.Type.IsByRef" /> et détermine si le <see cref="T:System.Type" /> est passé par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3634">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3635">
            <see langword="true" /> si <see cref="T:System.Type" /> est passé par référence ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3635">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public virtual bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Type.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Type.IsClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3636">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est une classe ou un délégué, c'est-à-dire ni un type valeur ni une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3636">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3637">
            <see langword="true" /> si <see cref="T:System.Type" /> est une classe ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3637">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3638">Cette propriété retourne `true` pour les classes, ainsi que des délégués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3638">This property returns `true` for classes as well as delegates.</span></span> <span data-ttu-id="c5b52-3639">Elle retourne `false` pour les types valeur (pour les structures et énumérations) même si elles sont boxed.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3639">It returns `false` for value types (for structures and enumerations) even if they are boxed.</span></span>  
  
 <span data-ttu-id="c5b52-3640">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `true`. Si actuel <xref:System.Type> représente un type générique construit, cette propriété retourne `true` si la définition de type générique est une définition de classe ; autrement dit, il ne définit pas une interface ou un type valeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3640">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3641">Cette propriété retourne `true` pour `Type` instances qui représentent le <xref:System.Enum> et <xref:System.ValueType> classes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3641">This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes.</span></span> <span data-ttu-id="c5b52-3642">Ces deux classes sont les types de base pour les énumérations et les types de valeur, respectivement, mais ils ne sont pas des énumérations ou des types de valeur eux-mêmes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3642">These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves.</span></span> <span data-ttu-id="c5b52-3643">Pour plus d’informations, consultez le <xref:System.Type.IsValueType%2A> et <xref:System.Type.IsEnum%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3643">For more information, see the <xref:System.Type.IsValueType%2A> and <xref:System.Type.IsEnum%2A> properties.</span></span>  
  
 <span data-ttu-id="c5b52-3644">Le <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> valeur d’énumération distingue une déclaration de type en tant que classe ou interface. Toutefois, les classes et types valeur sont marqués avec le <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3644">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="c5b52-3645">Si vous récupérez la valeur de propriété des attributs et l’utilisation d’un type la <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> valeur pour déterminer si un type est une classe au lieu d’un type valeur, vous devez également appeler le <xref:System.Type.IsValueType%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3645">If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property.</span></span> <span data-ttu-id="c5b52-3646">L’exemple pour la <xref:System.Reflection.TypeAttributes> énumération contient des informations supplémentaires, ainsi qu’Unexemple.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3646">The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.</span></span>  
  
 <span data-ttu-id="c5b52-3647">Cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3647">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3648">L’exemple suivant crée une instance d’un type et indique si le type est une classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3648">The following example creates an instance of a type and indicates whether the type is a class.</span></span>  
  
 [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]
 [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]
 [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="P:System.Type.IsValueType" />
        <altmember cref="F:System.Reflection.TypeAttributes.ClassSemanticsMask" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsCOMObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3649">Obtient une valeur indiquant si <see cref="T:System.Type" /> est un objet COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3649">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3650">
            <see langword="true" /> si <see cref="T:System.Type" /> est un objet COM ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3650">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3651">Cette méthode retourne `false` pour les interfaces COM, car ils ne sont pas des objets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3651">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="c5b52-3652">Interfaces COM peuvent être implémentées par des objets Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3652">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 <span data-ttu-id="c5b52-3653">Vous pouvez également charger une classe COM et obtenir un `Type` objet pour cette classe COM à l’aide de la [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) outil.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3653">You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span>  
  
 <span data-ttu-id="c5b52-3654">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3654">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-3655">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int`> (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3655">For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-3656">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3656">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsCOMObjectImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsCOMObjectImpl : unit -&gt; bool" Usage="type.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3657">En cas de substitution dans une classe dérivée, implémente la propriété <see cref="P:System.Type.IsCOMObject" /> et détermine si le <see cref="T:System.Type" /> est un objet COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3657">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3658">
            <see langword="true" /> si <see cref="T:System.Type" /> est un objet COM ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3658">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3659">Cette méthode retourne `false` pour les interfaces COM, car ils ne sont pas des objets.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3659">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="c5b52-3660">Interfaces COM peuvent être implémentées par des objets Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3660">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsCOMObject" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Type.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3661">Obtient une valeur qui indique si cet objet représente un type générique construit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3661">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
          <span data-ttu-id="c5b52-3662">Vous pouvez créer des instances d'un type générique construit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3662">You can create instances of a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3663">
            <see langword="true" /> si cet objet représente un type générique construit ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3663">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3664">Un type générique construit a été fournies pour tous ses paramètres de type générique des types explicites.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3664">A constructed generic type has had explicit types supplied for all of its generic type parameters.</span></span> <span data-ttu-id="c5b52-3665">Il est également appelé un type générique fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3665">It is also referred to as a closed generic type.</span></span>  
  
 <span data-ttu-id="c5b52-3666">Lorsque cette propriété a `true`, vous pouvez créer des instances du type actuel ; lorsqu’il est `false`, vous ne pouvez pas.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3666">When this property is `true`, you can create instances of the current type; when it is `false`, you can't.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Type.IsContextful" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsContextful</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3667">Obtient une valeur indiquant si <see cref="T:System.Type" /> peut être hébergé dans un contexte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3667">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3668">
            <see langword="true" /> si <see cref="T:System.Type" /> peut être hébergé dans un contexte ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3668">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3669">Un contexte intercepte les appels aux membres de classe et applique les stratégies sont appliquées à la classe, telles que la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3669">A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization.</span></span> <span data-ttu-id="c5b52-3670">Pour plus d’informations sur les contextes de communication à distance, consultez <xref:System.Runtime.Remoting.Contexts.Context>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3670">For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.</span></span>  
  
 <span data-ttu-id="c5b52-3671">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3671">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3672">L’exemple suivant montre le `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, et <xref:System.Type.IsPrimitive%2A> propriétés de la <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3672">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="c5b52-3673">Il vérifie si le type donné peut être hébergé dans le contexte, si elle peut être marshalée par référence, et si le type est un type de données primitif.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3673">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsContextfulImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsContextfulImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsContextfulImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsContextfulImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsContextfulImpl : unit -&gt; bool&#xA;override this.IsContextfulImpl : unit -&gt; bool" Usage="type.IsContextfulImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3674">Implémente la propriété <see cref="P:System.Type.IsContextful" /> et détermine si <see cref="T:System.Type" /> peut être hébergé dans un contexte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3674">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3675">
            <see langword="true" /> si <see cref="T:System.Type" /> peut être hébergé dans un contexte ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3675">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3676">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3676">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="c5b52-3677">Un contexte intercepte les appels aux membres de classe et appliquer des stratégies qui sont appliquées à la classe, telles que la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3677">A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3678">L’exemple suivant montre une utilisation de la `IsContextfulImpl` (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3678">The following example demonstrates a use of the `IsContextfulImpl` method.</span></span>  
  
 [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]
 [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]
 [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsContextful" />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Type.IsEnum" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsEnum</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3679">Obtient une valeur indiquant si le <see cref="T:System.Type" /> actuel représente une énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3679">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3680">
            <see langword="true" /> si le <see cref="T:System.Type" /> actuel représente une énumération ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3680">
              <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3681">Cette propriété retourne `true` pour une énumération, mais pas pour le <xref:System.Enum> type lui-même.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3681">This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.</span></span>  
  
 <span data-ttu-id="c5b52-3682">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3682">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-3683">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3683">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-3684">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3684">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3685">Cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3685">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3686">L’exemple suivant montre comment utiliser le `IsEnum` propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3686">The following example demonstrates how to use the `IsEnum` property.</span></span>  
  
 [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]
 [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]
 [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEnumDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnumDefined (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnumDefined(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsEnumDefined : obj -&gt; bool&#xA;override this.IsEnumDefined : obj -&gt; bool" Usage="type.IsEnumDefined value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="c5b52-3687">Valeur à tester.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3687">The value to be tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3688">Retourne une valeur qui indique si la valeur spécifiée existe dans le type énumération actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3688">Returns a value that indicates whether the specified value exists in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3689">
            <see langword="true" /> si la valeur spécifiée est un membre du type énumération actuel ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3689">
              <see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-3690">Le type actuel n’est pas une énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3690">The current type is not an enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-3691">
            <paramref name="value" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3691">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-3692">
            <paramref name="value" /> est d'un type qui ne peut pas être le type sous-jacent d'une énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3692">
              <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEquivalentTo(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEquivalentTo (other As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEquivalentTo(Type ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsEquivalentTo : Type -&gt; bool&#xA;override this.IsEquivalentTo : Type -&gt; bool" Usage="type.IsEquivalentTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="c5b52-3693">Type COM testé pour l'équivalence avec le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3693">The COM type that is tested for equivalence with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3694">Détermine si deux types COM ont la même identité et prennent en charge l'équivalence de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3694">Determines whether two COM types have the same identity and are eligible for type equivalence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3695">
            <see langword="true" /> si les types COM sont équivalents ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3695">
              <see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c5b52-3696">Cette méthode retourne également la valeur <see langword="false" /> si un type est dans un assembly chargé pour l'exécution et que l'autre est dans un assembly chargé dans le contexte de réflexion uniquement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3696">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3697">Compter les [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], le common language runtime prend en charge l’incorporation des informations de type pour les types COM directement dans des assemblys managés, au lieu de demander les assemblys managés obtenir des informations de type pour les types COM interop assemblys.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3697">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</span></span> <span data-ttu-id="c5b52-3698">Étant donné que les informations de type incorporées incluent uniquement les types et les membres qui sont réellement utilisés par un assembly managé, deux assemblys managés peuvent présenter des affichages très différents du même type COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3698">Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</span></span> <span data-ttu-id="c5b52-3699">Chaque assembly managé a un objet <xref:System.Type> différent pour représenter son affichage du type COM.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3699">Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type.</span></span> <span data-ttu-id="c5b52-3700">Le Common Language Runtime prend en charge l’équivalence des types entre ces différents affichages pour les interfaces, les structures, les énumérations et les délégués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3700">The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</span></span>  
  
 <span data-ttu-id="c5b52-3701">Avec l’équivalence des types, un objet COM qui est passé d’un assembly managé à un autre peut être casté en type managé approprié dans l’assembly de réception.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3701">Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</span></span> <span data-ttu-id="c5b52-3702">Le <xref:System.Type.IsEquivalentTo%2A> méthode permet à un assembly de déterminer qu’un objet COM obtenu à partir d’un autre assembly a la même identité COM en tant qu’un des types interop du premier assembly incorporé et peut donc être casté en ce type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3702">The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.</span></span>  
  
 <span data-ttu-id="c5b52-3703">Pour plus d’informations, consultez [équivalence des types et Types Interop incorporés](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3703">For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsExplicitLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3704">Obtient une valeur qui indique si les champs du type actuel sont placés aux offsets explicitement spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3704">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3705">
            <see langword="true" /> si la propriété <see cref="P:System.Type.Attributes" /> du type actuel comprend <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3705">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3706">Cette propriété est fournie pour des raisons pratiques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3706">This property is provided as a convenience.</span></span> <span data-ttu-id="c5b52-3707">Vous pouvez également utiliser le <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> valeur d’énumération pour sélectionner les attributs de disposition de type et puis effectuer des tests si <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> est défini.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3707">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="c5b52-3708">Le <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, et <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> valeurs d’énumération indiquent la façon des champs du type sont disposés en mémoire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3708">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="c5b52-3709">Pour les types dynamiques, vous pouvez spécifier <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> lorsque vous créez le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3709">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="c5b52-3710">Dans le code, vous devez appliquer le <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribut avec le <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> valeur d’énumération pour le type, pour spécifier que les décalages de début en les champs sont explicitement spécifiés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3710">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3711">Vous ne pouvez pas utiliser le <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> méthode pour déterminer si le <xref:System.Runtime.InteropServices.StructLayoutAttribute> a été appliqué à un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3711">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="c5b52-3712">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3712">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-3713">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3713">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-3714">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3714">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3715">L’exemple suivant crée une instance d’un type et affiche la valeur de son <xref:System.Type.IsExplicitLayout%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3715">The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property.</span></span> <span data-ttu-id="c5b52-3716">Il utilise le `MySystemTime` (classe), qui se trouve également dans l’exemple de code pour <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3716">It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span></span>  
  
 [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]
 [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md">
          <span data-ttu-id="c5b52-3717">Métadonnées et composants autodescriptifs</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3717">Metadata and Self-Describing Components</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodParameter : bool" Usage="System.Type.IsGenericMethodParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericParameter : bool" Usage="System.Type.IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3718">Obtient une valeur indiquant si le <see cref="T:System.Type" /> actuel représente un paramètre de type d'une définition de type ou de méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3718">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3719">
            <see langword="true" /> si l'objet <see cref="T:System.Type" /> représente un paramètre de type d'une définition de type générique ou de méthode générique ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3719">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3720"><xref:System.Type> objets qui représentent les paramètres de type générique peuvent être obtenus en appelant le <xref:System.Type.GetGenericArguments%2A> méthode d’un <xref:System.Type> objet qui représente une définition de type générique, ou la <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> méthode d’un <xref:System.Reflection.MethodInfo> objet qui représente une méthode générique définition.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3720"><xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
-   <span data-ttu-id="c5b52-3721">Pour un type générique ou la définition de méthode, le <xref:System.Type.IsGenericParameter%2A> retourne de la propriété `true` pour chaque élément du tableau résultant.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3721">For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.</span></span>  
  
-   <span data-ttu-id="c5b52-3722">Pour un type construit fermé ou une méthode, le <xref:System.Type.IsGenericParameter%2A> retourne de la propriété `false` pour chaque élément du tableau retourné par la <xref:System.Type.GetGenericArguments%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3722">For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.</span></span>  
  
-   <span data-ttu-id="c5b52-3723">Pour une méthode ou un type construit ouvert, certains éléments du tableau peuvent être des types spécifiques et d’autres peuvent être des paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3723">For an open constructed type or method, some elements of the array might be specific types and others might be type parameters.</span></span> <span data-ttu-id="c5b52-3724"><xref:System.Type.IsGenericParameter%2A> Retourne `false` pour les types et `true` pour les paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3724"><xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters.</span></span> <span data-ttu-id="c5b52-3725">L’exemple de code pour le <xref:System.Type.ContainsGenericParameters%2A> propriété montre une classe générique avec un mélange de types et les paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3725">The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.</span></span>  
  
 <span data-ttu-id="c5b52-3726">Pour obtenir la liste des conditions indifférentes pour les termes utilisés dans la réflexion générique, consultez les notes sur la propriété <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3726">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3727">L’exemple suivant utilise le <xref:System.Type.IsGenericParameter%2A> propriété pour tester les paramètres de type générique dans un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3727">The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.GenericParameterPosition" />
        <altmember cref="M:System.Type.GetGenericArguments" />
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-3728">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3728">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-3729">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3729">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericType : bool" Usage="System.Type.IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3730">Obtient une valeur indiquant si le type actuel est un type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3730">Gets a value indicating whether the current type is a generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3731">
            <see langword="true" /> Si le type actuel est un type générique ; Sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3731">
              <see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3732">Utilisez le <xref:System.Type.IsGenericType%2A> propriété afin de déterminer si un <xref:System.Type> objet représente un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3732">Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type.</span></span> <span data-ttu-id="c5b52-3733">Utilisez le <xref:System.Type.ContainsGenericParameters%2A> propriété afin de déterminer si un <xref:System.Type> objet représente un type construit ouvert ou un type construit fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3733">Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3734">Le <xref:System.Type.IsGenericType%2A> retourne de la propriété `false` si le type immédiat n’est pas générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3734">The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic.</span></span> <span data-ttu-id="c5b52-3735">Par exemple, un tableau dont les éléments sont de type `A<int>` (`A(Of Integer)` en Visual Basic) n’est pas lui-même un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3735">For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.</span></span>  
  
 <span data-ttu-id="c5b52-3736">Le tableau suivant résume les conditions invariables des termes courants utilisés dans la réflexion générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3736">The following table summarizes the invariant conditions for common terms used in generic reflection.</span></span>  
  
|<span data-ttu-id="c5b52-3737">Terme</span><span class="sxs-lookup"><span data-stu-id="c5b52-3737">Term</span></span>|<span data-ttu-id="c5b52-3738">Invariant</span><span class="sxs-lookup"><span data-stu-id="c5b52-3738">Invariant</span></span>|  
|----------|---------------|  
|<span data-ttu-id="c5b52-3739">définition de type générique</span><span class="sxs-lookup"><span data-stu-id="c5b52-3739">generic type definition</span></span>|<span data-ttu-id="c5b52-3740">La propriété <xref:System.Type.IsGenericTypeDefinition%2A> a la valeur `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3740">The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3741">Définit un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3741">Defines a generic type.</span></span> <span data-ttu-id="c5b52-3742">Un type construit est créé en appelant le <xref:System.Type.MakeGenericType%2A> méthode sur un <xref:System.Type> de l’objet qui représente une définition de type générique et en spécifiant un tableau d’arguments de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3742">A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.</span></span><br /><br /> <span data-ttu-id="c5b52-3743"><xref:System.Type.MakeGenericType%2A> peut être appelée uniquement sur les définitions de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3743"><xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.</span></span><br /><br /> <span data-ttu-id="c5b52-3744">Toute définition de type générique est un type générique (la <xref:System.Type.IsGenericType%2A> propriété est `true`), mais l’inverse n’est pas vrai.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3744">Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.</span></span>|  
|<span data-ttu-id="c5b52-3745">type générique</span><span class="sxs-lookup"><span data-stu-id="c5b52-3745">generic type</span></span>|<span data-ttu-id="c5b52-3746">La propriété <xref:System.Type.IsGenericType%2A> a la valeur `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3746">The <xref:System.Type.IsGenericType%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3747">Peut être une définition de type générique, un type construit ouvert ou un type construit fermé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3747">Can be a generic type definition, an open constructed type, or a closed constructed type.</span></span><br /><br /> <span data-ttu-id="c5b52-3748">Notez qu’un type tableau dont le type élément est générique n’est pas lui-même un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3748">Note that an array type whose element type is generic is not itself a generic type.</span></span> <span data-ttu-id="c5b52-3749">Vaut également d’un <xref:System.Type> objet représentant un pointeur vers un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3749">The same is true of a <xref:System.Type> object representing a pointer to a generic type.</span></span>|  
|<span data-ttu-id="c5b52-3750">type construit ouvert</span><span class="sxs-lookup"><span data-stu-id="c5b52-3750">open constructed type</span></span>|<span data-ttu-id="c5b52-3751">La propriété <xref:System.Type.ContainsGenericParameters%2A> a la valeur `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3751">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3752">Les exemples sont un type générique qui a des paramètres de type non assignés, un type qui est imbriqué dans une définition de type générique ou dans un type construit ouvert ou un type générique qui a un argument de type pour lequel le <xref:System.Type.ContainsGenericParameters%2A> propriété est `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3752">Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3753">Il n’est pas possible de créer une instance d’un type construit ouvert.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3753">It is not possible to create an instance of an open constructed type.</span></span><br /><br /> <span data-ttu-id="c5b52-3754">Notez que les types construits ouverts pas sont génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3754">Note that not all open constructed types are generic.</span></span> <span data-ttu-id="c5b52-3755">Par exemple, un tableau dont le type élément est une définition de type générique n’est pas générique, et un pointeur vers un type construit ouvert n’est pas générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3755">For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.</span></span>|  
|<span data-ttu-id="c5b52-3756">type construit fermé</span><span class="sxs-lookup"><span data-stu-id="c5b52-3756">closed constructed type</span></span>|<span data-ttu-id="c5b52-3757">La propriété <xref:System.Type.ContainsGenericParameters%2A> a la valeur `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3757">The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.</span></span><br /><br /> <span data-ttu-id="c5b52-3758">Lorsque examinées de manière récursive, le type n’a aucun paramètre de générique non assignés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3758">When examined recursively, the type has no unassigned generic parameters.</span></span>|  
|<span data-ttu-id="c5b52-3759">paramètre de type générique</span><span class="sxs-lookup"><span data-stu-id="c5b52-3759">generic type parameter</span></span>|<span data-ttu-id="c5b52-3760">La propriété <xref:System.Type.IsGenericParameter%2A> a la valeur `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3760">The <xref:System.Type.IsGenericParameter%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3761">La propriété <xref:System.Type.ContainsGenericParameters%2A> a la valeur `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3761">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3762">Dans une définition de type générique, un espace réservé pour un type qui sera affecté ultérieurement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3762">In a generic type definition, a placeholder for a type that will be assigned later.</span></span>|  
|<span data-ttu-id="c5b52-3763">argument de type générique</span><span class="sxs-lookup"><span data-stu-id="c5b52-3763">generic type argument</span></span>|<span data-ttu-id="c5b52-3764">Peut être n’importe quel type, y compris un paramètre de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3764">Can be any type, including a generic type parameter.</span></span><br /><br /> <span data-ttu-id="c5b52-3765">Arguments de type sont spécifiés sous forme de tableau de <xref:System.Type> objets passés à la <xref:System.Type.MakeGenericType%2A> méthode lors de la création d’un type générique construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3765">Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type.</span></span> <span data-ttu-id="c5b52-3766">Si les instances du type résultant doivent être créés, le <xref:System.Type.ContainsGenericParameters%2A> propriété doit être `false` pour tous les arguments de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3766">If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.</span></span>|  
  
 <span data-ttu-id="c5b52-3767">L’exemple de code et le tableau suivants illustrent certains de ces termes et les invariants.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3767">The following code example and table illustrate some of these terms and invariants.</span></span> <span data-ttu-id="c5b52-3768">Le `Derived` classe présente un intérêt particulier, car son type de base est un type construit qui possède un mélange de types et les paramètres de type dans sa liste d’arguments de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3768">The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]
 [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  
  
 <span data-ttu-id="c5b52-3769">Le tableau suivant montre des exemples qui utilisent et générer les classes `Base`, `Derived`, et `G`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3769">The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`.</span></span> <span data-ttu-id="c5b52-3770">Lorsque le code C++ et c# est le même, qu’une seule entrée est indiquée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3770">When the C++ and C# code is the same, only one entry is shown.</span></span>  
  
|<span data-ttu-id="c5b52-3771">Exemple</span><span class="sxs-lookup"><span data-stu-id="c5b52-3771">Example</span></span>|<span data-ttu-id="c5b52-3772">Invariants</span><span class="sxs-lookup"><span data-stu-id="c5b52-3772">Invariants</span></span>|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|<span data-ttu-id="c5b52-3773">Pour ce type :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3773">For this type:</span></span><br /><br /> <span data-ttu-id="c5b52-3774"><xref:System.Type.IsGenericType%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3774"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3775"><xref:System.Type.IsGenericTypeDefinition%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3775"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3776"><xref:System.Type.ContainsGenericParameters%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3776"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|<span data-ttu-id="c5b52-3777">Pour ce type :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3777">For this type:</span></span><br /><br /> <span data-ttu-id="c5b52-3778"><xref:System.Type.IsGenericType%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3778"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3779"><xref:System.Type.IsGenericTypeDefinition%2A> est `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3779"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="c5b52-3780"><xref:System.Type.ContainsGenericParameters%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3780"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|<span data-ttu-id="c5b52-3781">Pour le type de variable `d`:</span><span class="sxs-lookup"><span data-stu-id="c5b52-3781">For the type of variable `d`:</span></span><br /><br /> <span data-ttu-id="c5b52-3782"><xref:System.Type.IsGenericType%2A> est `false` car `d` est un tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3782"><xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.</span></span><br /><br /> <span data-ttu-id="c5b52-3783"><xref:System.Type.IsGenericTypeDefinition%2A> est `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3783"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="c5b52-3784"><xref:System.Type.ContainsGenericParameters%2A> est `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3784"><xref:System.Type.ContainsGenericParameters%2A> is `false`.</span></span>|  
|<span data-ttu-id="c5b52-3785">`T`, `U`, et `V` (partout où ils apparaissent)</span><span class="sxs-lookup"><span data-stu-id="c5b52-3785">`T`, `U`, and `V` (everywhere they appear)</span></span>|<span data-ttu-id="c5b52-3786"><xref:System.Type.IsGenericParameter%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3786"><xref:System.Type.IsGenericParameter%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3787"><xref:System.Type.IsGenericType%2A> est `false` , car il n’existe aucun moyen de contraindre un paramètre de type aux types génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3787"><xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.</span></span><br /><br /> <span data-ttu-id="c5b52-3788"><xref:System.Type.IsGenericTypeDefinition%2A> est `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3788"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="c5b52-3789"><xref:System.Type.ContainsGenericParameters%2A> est `true` car `T`, `U`, et `V` sont eux-mêmes des paramètres de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3789"><xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters.</span></span> <span data-ttu-id="c5b52-3790">Cela n’indique rien sur les arguments de type qui leur sont attribuées ultérieurement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3790">This does not imply anything about type arguments that are assigned to them later.</span></span>|  
|<span data-ttu-id="c5b52-3791">Le type de champ `F`</span><span class="sxs-lookup"><span data-stu-id="c5b52-3791">The type of field `F`</span></span>|<span data-ttu-id="c5b52-3792"><xref:System.Type.IsGenericType%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3792"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="c5b52-3793"><xref:System.Type.IsGenericTypeDefinition%2A> est `false` , car un type a été affecté au paramètre de type de `G`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3793"><xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to the type parameter of `G`.</span></span> <span data-ttu-id="c5b52-3794">Notez que cela équivaut à appeler le <xref:System.Type.MakeGenericType%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3794">Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.</span></span><br /><br /> <span data-ttu-id="c5b52-3795"><xref:System.Type.ContainsGenericParameters%2A> est `true` , car le type de champ `F` a un argument de type est un type construit ouvert.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3795"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type.</span></span> <span data-ttu-id="c5b52-3796">Le type construit est ouvert, car son argument de type (autrement dit, `Base`) est une définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3796">The constructed type is open because its type argument (that is, `Base`) is a generic type definition.</span></span> <span data-ttu-id="c5b52-3797">Cela illustre la nature récursive de la <xref:System.Type.IsGenericType%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3797">This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.</span></span>|  
|<span data-ttu-id="c5b52-3798">La classe imbriquée `Nested`</span><span class="sxs-lookup"><span data-stu-id="c5b52-3798">The nested class `Nested`</span></span>|<span data-ttu-id="c5b52-3799"><xref:System.Type.IsGenericType%2A> est `true`, même si le `Nested` classe n’a aucun paramètre de type générique de son propre, car elle est imbriquée dans un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3799"><xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.</span></span><br /><br /> <span data-ttu-id="c5b52-3800"><xref:System.Type.IsGenericTypeDefinition%2A> est `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3800"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span> <span data-ttu-id="c5b52-3801">Autrement dit, vous pouvez appeler la <xref:System.Type.MakeGenericType%2A> méthode et fournir le paramètre de type du type englobant, `Derived`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3801">That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.</span></span><br /><br /> <span data-ttu-id="c5b52-3802"><xref:System.Type.ContainsGenericParameters%2A> est `true` , car le type englobant, `Derived`, a des paramètres de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3802"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters.</span></span> <span data-ttu-id="c5b52-3803">Cela illustre la nature récursive de la <xref:System.Type.ContainsGenericParameters%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3803">This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3804">L’exemple de code suivant affiche la valeur de la <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, et <xref:System.Type.ContainsGenericParameters%2A> propriétés pour les types décrits dans la section Notes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3804">The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section.</span></span> <span data-ttu-id="c5b52-3805">Pour obtenir des explications sur les valeurs de propriété, consultez le tableau qui accompagne cet article dans la section Notes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3805">For explanations of the property values, see the accompanying table in Remarks.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]
 [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-3806">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3806">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-3807">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3807">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeDefinition : bool" Usage="System.Type.IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3808">Obtient une valeur qui indique si le <see cref="T:System.Type" /> actuel représente une définition de type générique, à partir de laquelle d'autres types génériques peuvent être construits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3808">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3809">
            <see langword="true" /> si l'objet <see cref="T:System.Type" /> représente une définition de type générique ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3809">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3810">Une définition de type générique est un modèle à partir de laquelle d’autres types peuvent être construits.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3810">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="c5b52-3811">Par exemple, à partir de la définition de type générique `G<T>` (exprimée en syntaxe c# ; `G(Of T)` en Visual Basic ou `generic <typename T> ref class G` en C++) vous pouvez construire et instancier le type `G<int>` (`G(Of Integer)` en Visual Basic), en appelant le <xref:System.Type.MakeGenericType%2A> méthode avec une liste d’argument générique contenant le <xref:System.Int32> type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3811">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type.</span></span> <span data-ttu-id="c5b52-3812">Étant donné un <xref:System.Type> objet représentant ce type construit, le <xref:System.Type.GetGenericTypeDefinition%2A> méthode récupère la définition de type générique à nouveau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3812">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.</span></span>  
  
 <span data-ttu-id="c5b52-3813">Utilisez le <xref:System.Type.IsGenericTypeDefinition%2A> propriété afin de déterminer si vous pouvez créer de nouveaux types à partir du type actuel.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3813">Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type.</span></span> <span data-ttu-id="c5b52-3814">Si le <xref:System.Type.IsGenericTypeDefinition%2A> retourne de la propriété `true`, vous pouvez appeler la <xref:System.Type.MakeGenericType%2A> méthode pour créer des types génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3814">If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.</span></span>  
  
 <span data-ttu-id="c5b52-3815">Pour obtenir la liste des conditions indifférentes pour les termes utilisés dans la réflexion générique, consultez les notes sur la propriété <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3815">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3816">L’exemple suivant affiche des informations sur un type, y compris si elle est une définition de type générique ou non.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3816">The following example displays information about a type, including whether or not it is a generic type definition.</span></span> <span data-ttu-id="c5b52-3817">Informations s’affichent pour un type construit, pour sa définition de type générique et un type ordinaire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3817">Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-3818">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3818">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-3819">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3819">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeParameter : bool" Usage="System.Type.IsGenericTypeParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Type.IsImport" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsImport</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3820">Obtient une valeur qui indique si le <see cref="T:System.Type" /> a un attribut appliqué <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />, indiquant qu'il a été importé d'une bibliothèque de types COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3820">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3821">
            <see langword="true" /> si le <see cref="T:System.Type" /> a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3821">
              <see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3822">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3822">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-3823">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="c5b52-3823">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="c5b52-3824">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3824">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool&#xA;override this.IsInstanceOfType : obj -&gt; bool" Usage="type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="c5b52-3825">Objet à comparer au type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3825">The object to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-3826">Détermine si l'objet spécifié est une instance du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3826">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3827">
            <see langword="true" /> si le <see langword="Type" /> actuel se trouve dans la hiérarchie d'héritage de l'objet représenté par <paramref name="o" /> ou si le <see langword="Type" /> actuel est une interface que <paramref name="o" /> implémente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3827">
              <see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span>
          </span>
          <span data-ttu-id="c5b52-3828">
            <see langword="false" /> si aucune de ces conditions n'est respectée, si <paramref name="o" /> est <see langword="null" /> ou si le <see langword="Type" /> actuel est un type générique ouvert (autrement dit, <see cref="P:System.Type.ContainsGenericParameters" /> retourne <see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3828">
              <see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3829">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3829">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3830">Un type construit n’est pas une instance de sa définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3830">A constructed type is not an instance of its generic type definition.</span></span> <span data-ttu-id="c5b52-3831">Autrement dit, `MyGenericList<int>` (`MyGenericList(Of Integer)` en Visual Basic) n’est pas une instance de `MyGenericList<T>` (`MyGenericList(Of T)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3831">That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3832">L'exemple suivant illustre l'utilisation de la méthode `IsInstanceOfType`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3832">The following example demonstrates the use of the `IsInstanceOfType` method.</span></span>  
  
 [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]
 [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]
 [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Type.IsInterface" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsInterface</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3833">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est une interface, c'est-à-dire ni une classe ni un type valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3833">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3834">
            <see langword="true" /> si <see cref="T:System.Type" /> est une interface ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3834">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3835">Le <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distingue une déclaration de type en tant que classe, interface ou un type valeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3835">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.</span></span>  
  
 <span data-ttu-id="c5b52-3836">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3836">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3837">Cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3837">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3838">L’exemple suivant crée une interface, vérifie le type d’interface et indique si une classe a le `IsInterface` jeu de propriétés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3838">The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.</span></span>  
  
 [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]
 [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]
 [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsLayoutSequential</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3839">Obtient une valeur qui indique si les champs du type actuel sont placés séquentiellement, en respectant l'ordre dans lequel ils ont été définis ou émis aux métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3839">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3840">
            <see langword="true" /> si la propriété <see cref="P:System.Type.Attributes" /> du type actuel comprend <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3840">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3841">Cette propriété est fournie pour des raisons pratiques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3841">This property is provided as a convenience.</span></span> <span data-ttu-id="c5b52-3842">Vous pouvez également utiliser le <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> valeur d’énumération pour sélectionner les attributs de disposition de type et puis effectuer des tests si <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> est défini.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3842">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="c5b52-3843">Le <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, et <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> valeurs d’énumération indiquent la façon des champs du type sont disposés en mémoire.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3843">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="c5b52-3844">Pour les types dynamiques, vous pouvez spécifier <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> lorsque vous créez le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3844">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="c5b52-3845">Dans le code, vous devez appliquer le <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribut avec le <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> valeur d’énumération pour le type, pour spécifier que la disposition est séquentielle.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3845">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value to the type, to specify that layout is sequential.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3846">Vous ne pouvez pas utiliser le <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> méthode pour déterminer si le <xref:System.Runtime.InteropServices.StructLayoutAttribute> a été appliqué à un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3846">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="c5b52-3847">Pour plus d’informations, consultez la section 9.1.2 de la spécification pour la documentation du Common Language Infrastructure (CLI), « Partition II : Metadata Definition and Semantics ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-3847">For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="c5b52-3848">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3848">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="c5b52-3849">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3849">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-3850">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3850">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-3851">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3851">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3852">L’exemple suivant crée une instance d’une classe pour laquelle le <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> valeur d’énumération dans le <xref:System.Runtime.InteropServices.StructLayoutAttribute> classe a été défini, les contrôles pour le <xref:System.Type.IsLayoutSequential%2A> propriété et affiche le résultat.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3852">The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]
 [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]
 [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md">
          <span data-ttu-id="c5b52-3853">Métadonnées et composants autodescriptifs</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3853">Metadata and Self-Describing Components</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsMarshalByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3854">Obtient une valeur indiquant si <see cref="T:System.Type" /> est marshalé par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3854">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3855">
            <see langword="true" /> si <see cref="T:System.Type" /> est marshalé par référence ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3855">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c5b52-3856">L’exemple suivant montre le `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, et <xref:System.Type.IsPrimitive%2A> propriétés de la <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3856">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="c5b52-3857">Il vérifie si le type donné peut être hébergé dans le contexte, si elle peut être marshalée par référence, et si le type est un type de données primitif.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3857">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsMarshalByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsMarshalByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsMarshalByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsMarshalByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsMarshalByRefImpl : unit -&gt; bool&#xA;override this.IsMarshalByRefImpl : unit -&gt; bool" Usage="type.IsMarshalByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3858">Implémente la propriété <see cref="P:System.Type.IsMarshalByRef" /> et détermine si le <see cref="T:System.Type" /> est marshalé par référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3858">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3859">
            <see langword="true" /> si <see cref="T:System.Type" /> est marshalé par référence ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3859">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3860">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3860">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3861">L’exemple suivant détermine si le type donné est marshalé par référence et affiche le résultat.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3861">The following example determines whether the given type is marshaled by reference and displays the result.</span></span>  
  
 [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]
 [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]
 [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsMarshalByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNested : bool" Usage="System.Type.IsNested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3862">Obtient une valeur indiquant si l'objet <see cref="T:System.Type" /> actuel représente un type dont la définition est imbriquée dans la définition d'un autre type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3862">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3863">
            <see langword="true" /> si le <see cref="T:System.Type" /> est imbriqué dans un autre type ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3863">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3864">Le <xref:System.Type.IsNested%2A> retourne de la propriété `true` pour tous les types imbriqués, quelle que soit la visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3864">The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility.</span></span> <span data-ttu-id="c5b52-3865">Pour tester l’imbrication et la visibilité en même temps, utilisez les propriétés connexes <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, ou <xref:System.Type.IsNestedPublic%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3865">To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3866">Le <xref:System.Reflection.TypeAttributes.VisibilityMask> membre d’énumération sélectionne les attributs de visibilité pour un type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3866">The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3867">L’exemple suivant crée une classe externe avec un nombre de classes imbriquées qui ont différents types de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3867">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="c5b52-3868">Il récupère ensuite la valeur d’un nombre de liés à la visibilité <xref:System.Type> propriétés pour le type de parent et chacun de ses types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3868">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsNestedAssembly" />
        <altmember cref="P:System.Type.IsNestedFamily" />
        <altmember cref="P:System.Type.IsNestedFamANDAssem" />
        <altmember cref="P:System.Type.IsNestedFamORAssem" />
        <altmember cref="P:System.Type.IsNestedPrivate" />
        <altmember cref="P:System.Type.IsNestedPublic" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3869">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est imbriqué et visible uniquement dans son propre assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3869">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3870">
            <see langword="true" /> si le <see cref="T:System.Type" /> est imbriqué et visible uniquement dans son propre assembly ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3870">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3871">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3871">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3872"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Sélectionne les attributs de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3872"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3873">L’exemple suivant crée une classe externe avec un nombre de classes imbriquées qui ont différents types de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3873">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="c5b52-3874">Il récupère ensuite la valeur d’un nombre de liés à la visibilité <xref:System.Type> propriétés pour le type de parent et chacun de ses types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3874">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3875">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est imbriqué et visible uniquement par rapport aux classes qui appartiennent à la fois à sa propre famille et à son propre assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3875">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3876">
            <see langword="true" /> si le <see cref="T:System.Type" /> est imbriqué et visible uniquement par rapport aux classes qui appartiennent à la fois à sa propre famille et à son propre assembly ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3876">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3877">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3877">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3878"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Sélectionne les attributs de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3878"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-3879">Les langages c# et Visual Basic n’incluent pas de sémantique qui vous permettent de définir un type imbriqué qui est uniquement visible pour les types protégés dans son propre assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3879">The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly.</span></span> <span data-ttu-id="c5b52-3880">`protected internal` visibilité en c# et `Protected Friend` visibilité dans Visual Basic définissent un type imbriqué qui est visible pour les types protégés et pour les types dans le même assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3880">`protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.</span></span>  
  
 <span data-ttu-id="c5b52-3881">Un <xref:System.Type> famille de l’objet est défini en tant que tous les objets du même <xref:System.Type> et de ses sous-types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3881">A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3882">L’exemple suivant crée une classe externe avec un nombre de classes imbriquées qui ont différents types de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3882">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="c5b52-3883">Il récupère ensuite la valeur d’un nombre de liés à la visibilité <xref:System.Type> propriétés pour le type de parent et chacun de ses types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3883">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3884">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est imbriqué et visible uniquement dans sa propre famille.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3884">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3885">
            <see langword="true" /> si le <see cref="T:System.Type" /> est imbriqué et visible uniquement dans sa propre famille ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3885">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3886">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3886">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3887"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Sélectionne les attributs de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3887"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="c5b52-3888">Un <xref:System.Type> famille de l’objet est défini en tant que tous les objets d’exactement le même <xref:System.Type> et de ses sous-types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3888">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3889">L’exemple suivant crée une classe externe avec un nombre de classes imbriquées qui ont différents types de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3889">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="c5b52-3890">Il récupère ensuite la valeur d’un nombre de liés à la visibilité <xref:System.Type> propriétés pour le type de parent et chacun de ses types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3890">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamORAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3891">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est imbriqué et visible uniquement par rapport aux classes qui appartiennent à sa propre famille ou à son propre assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3891">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3892">
            <see langword="true" /> si le <see cref="T:System.Type" /> est imbriqué et visible uniquement par rapport aux classes qui appartiennent à sa propre famille ou à son propre assembly ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3892">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3893">Si la visibilité d’un type est `protected internal` en c# ou `Protected Friend` en Visual Basic, le <xref:System.Type.IsNestedFamORAssem%2A> retourne de la propriété `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3893">If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.</span></span>  
  
 <span data-ttu-id="c5b52-3894">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3894">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3895"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Sélectionne les attributs de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3895"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="c5b52-3896">Un <xref:System.Type> famille de l’objet est défini en tant que tous les objets d’exactement le même <xref:System.Type> et de ses sous-types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3896">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3897">L’exemple suivant crée une classe externe avec un nombre de classes imbriquées qui ont différents types de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3897">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="c5b52-3898">Il récupère ensuite la valeur d’un nombre de liés à la visibilité <xref:System.Type> propriétés pour le type de parent et chacun de ses types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3898">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3899">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est imbriqué et déclaré privé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3899">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3900">
            <see langword="true" /> si le <see cref="T:System.Type" /> est imbriqué et déclaré privé ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3900">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3901">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3901">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3902"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Sélectionne les attributs de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3902"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3903">L’exemple suivant crée une classe externe avec un nombre de classes imbriquées qui ont différents types de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3903">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="c5b52-3904">Il récupère ensuite la valeur d’un nombre de liés à la visibilité <xref:System.Type> propriétés pour le type de parent et chacun de ses types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3904">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3905">Obtient une valeur indiquant si une classe est imbriquée et déclarée publique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3905">Gets a value indicating whether a class is nested and declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3906">
            <see langword="true" /> si la classe est imbriquée et déclarée publique ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3906">
              <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3907">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3907">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3908"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Sélectionne les attributs de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3908"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3909">L’exemple suivant crée une classe externe avec un nombre de classes imbriquées qui ont différents types de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3909">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="c5b52-3910">Il récupère ensuite la valeur d’un nombre de liés à la visibilité <xref:System.Type> propriétés pour le type de parent et chacun de ses types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3910">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNotPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3911">Obtient une valeur indiquant si <see cref="T:System.Type" /> n'est pas déclaré public.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3911">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3912">
            <see langword="true" /> si <see cref="T:System.Type" /> n'est pas déclaré public et n'est pas un type imbriqué ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3912">
              <see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3913">N’utilisez pas cette propriété avec les types imbriqués ; utiliser le <xref:System.Type.IsNestedPublic%2A> propriété à la place.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3913">Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.</span></span>  
  
 <span data-ttu-id="c5b52-3914">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3914">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3915">Cet exemple montre comment l’option `IsNotPublic` propriété à obtenir la visibilité du type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3915">This example usesthe `IsNotPublic` property to get the visibility of the type.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="c5b52-3916">L’exemple de code suivant montre pourquoi vous ne pouvez pas utiliser `IsPublic` et `IsNotPublic` pour les classes imbriquées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3916">The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]
 [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  
  
 <span data-ttu-id="c5b52-3917">Pour les classes imbriquées, ignorez les résultats de `IsPublic` et `IsNotPublic` et uniquement avec les résultats d’une attention `IsNestedPublic` et `IsNestedPrivate`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3917">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`.</span></span> <span data-ttu-id="c5b52-3918">La sortie de la réflexion pour ce fragment de code se présente comme suit :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3918">The reflection output for this code fragment would be as follows:</span></span>  
  
|<span data-ttu-id="c5b52-3919">Classe</span><span class="sxs-lookup"><span data-stu-id="c5b52-3919">Class</span></span>|<span data-ttu-id="c5b52-3920">IsNotPublic</span><span class="sxs-lookup"><span data-stu-id="c5b52-3920">IsNotPublic</span></span>|<span data-ttu-id="c5b52-3921">IsPublic</span><span class="sxs-lookup"><span data-stu-id="c5b52-3921">IsPublic</span></span>|<span data-ttu-id="c5b52-3922">IsNestedPublic</span><span class="sxs-lookup"><span data-stu-id="c5b52-3922">IsNestedPublic</span></span>|<span data-ttu-id="c5b52-3923">IsNestedPrivate</span><span class="sxs-lookup"><span data-stu-id="c5b52-3923">IsNestedPrivate</span></span>|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|<span data-ttu-id="c5b52-3924">A</span><span class="sxs-lookup"><span data-stu-id="c5b52-3924">A</span></span>|<span data-ttu-id="c5b52-3925">false</span><span class="sxs-lookup"><span data-stu-id="c5b52-3925">FALSE</span></span>|<span data-ttu-id="c5b52-3926">true</span><span class="sxs-lookup"><span data-stu-id="c5b52-3926">TRUE</span></span>|<span data-ttu-id="c5b52-3927">false</span><span class="sxs-lookup"><span data-stu-id="c5b52-3927">FALSE</span></span>|<span data-ttu-id="c5b52-3928">false</span><span class="sxs-lookup"><span data-stu-id="c5b52-3928">FALSE</span></span>|  
|<span data-ttu-id="c5b52-3929">B</span><span class="sxs-lookup"><span data-stu-id="c5b52-3929">B</span></span>|<span data-ttu-id="c5b52-3930">false</span><span class="sxs-lookup"><span data-stu-id="c5b52-3930">FALSE</span></span>|<span data-ttu-id="c5b52-3931">false</span><span class="sxs-lookup"><span data-stu-id="c5b52-3931">FALSE</span></span>|<span data-ttu-id="c5b52-3932">true</span><span class="sxs-lookup"><span data-stu-id="c5b52-3932">TRUE</span></span>|<span data-ttu-id="c5b52-3933">false</span><span class="sxs-lookup"><span data-stu-id="c5b52-3933">FALSE</span></span>|  
|<span data-ttu-id="c5b52-3934">C</span><span class="sxs-lookup"><span data-stu-id="c5b52-3934">C</span></span>|<span data-ttu-id="c5b52-3935">false</span><span class="sxs-lookup"><span data-stu-id="c5b52-3935">FALSE</span></span>|<span data-ttu-id="c5b52-3936">false</span><span class="sxs-lookup"><span data-stu-id="c5b52-3936">FALSE</span></span>|<span data-ttu-id="c5b52-3937">false</span><span class="sxs-lookup"><span data-stu-id="c5b52-3937">FALSE</span></span>|<span data-ttu-id="c5b52-3938">true</span><span class="sxs-lookup"><span data-stu-id="c5b52-3938">TRUE</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Type.IsPointer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPointer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3939">Obtient une valeur indiquant si <see cref="T:System.Type" /> est un pointeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3939">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3940">
            <see langword="true" /> si <see cref="T:System.Type" /> est un pointeur ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3940">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3941">Si actuel <xref:System.Type> représente un type générique ou un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3941">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="c5b52-3942">Cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3942">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3943">L’exemple suivant montre une utilisation de la `IsPointer` propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3943">The following example shows a use of the `IsPointer` property.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsPointerImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPointerImpl : unit -&gt; bool" Usage="type.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3944">En cas de substitution dans une classe dérivée, implémente la propriété <see cref="P:System.Type.IsPointer" /> et détermine si le <see cref="T:System.Type" /> est un pointeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3944">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3945">
            <see langword="true" /> si <see cref="T:System.Type" /> est un pointeur ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3945">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsPointer" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPrimitive</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3946">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est l'un des types primitifs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3946">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3947">
            <see langword="true" /> si <see cref="T:System.Type" /> est l'un des types primitifs ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3947">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3948">Les types primitifs sont <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, et <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3948">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="c5b52-3949">Si actuel <xref:System.Type> représente un type générique ou un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3949">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3950">L’exemple suivant montre le `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, et <xref:System.Type.IsPrimitive%2A> propriétés de la <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3950">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="c5b52-3951">Il vérifie si le type donné peut être hébergé dans le contexte, si elle peut être marshalée par référence, et si le type est un type de données primitif.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3951">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="M:System.Type.IsPrimitiveImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPrimitiveImpl : unit -&gt; bool" Usage="type.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3952">En cas de substitution dans une classe dérivée, implémente la propriété <see cref="P:System.Type.IsPrimitive" /> et détermine si <see cref="T:System.Type" /> est l'un des types primitifs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3952">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-3953">
            <see langword="true" /> si <see cref="T:System.Type" /> est l'un des types primitifs ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3953">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3954">Les types primitifs sont <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, et <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3954">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3955">L’exemple suivant détermine si le type donné est un type primitif et affiche le résultat.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3955">The following example determines whether the given type is a primitive type and displays the result.</span></span>  
  
 [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]
 [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]
 [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="P:System.Type.IsPrimitive" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Type.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3956">Obtient une valeur indiquant si <see cref="T:System.Type" /> est déclaré public.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3956">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3957">
            <see langword="true" /> si <see cref="T:System.Type" /> est déclaré public et n'est pas un type imbriqué ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3957">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3958">N’utilisez pas avec les types imbriqués ; Utilisez <xref:System.Type.IsNestedPublic%2A> à la place.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3958">Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.</span></span>  
  
 <span data-ttu-id="c5b52-3959">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3959">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.</span></span>  
  
 <span data-ttu-id="c5b52-3960"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Sélectionne les attributs de visibilité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3960"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3961">L’exemple suivant crée une instance de `MyTestClass`, vérifie le `IsPublic` propriété et affiche le résultat.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3961">The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.</span></span>  
  
 [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]
 [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]
 [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  
  
 <span data-ttu-id="c5b52-3962">Pour les classes imbriquées, ignorez les résultats de `IsPublic` et `IsNotPublic` et uniquement avec les résultats d’une attention <xref:System.Type.IsNestedPublic%2A> et <xref:System.Type.IsNestedPrivate%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3962">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Type.IsSealed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3963">Obtient une valeur indiquant si <see cref="T:System.Type" /> est déclaré sealed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3963">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3964">
            <see langword="true" /> si le <see cref="T:System.Type" /> est déclaré sealed ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3964">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3965">Si actuel <xref:System.Type> représente un paramètre de type d’un type générique, cette propriété retourne toujours `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3965">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-3966">L’exemple suivant crée une instance d’un `sealed` classe, vérifie le `IsSealed` propriété et affiche le résultat.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3966">The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]
 [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]
 [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Type.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3967">Obtient une valeur qui indique si le type actuel est critique de sécurité (security-critical) ou critique sécurisé (security-safe-critical) au niveau de confiance actuel et peut donc exécuter des opérations critiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3967">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3968">
            <see langword="true" /> si le type actuel est critique de sécurité ou critique sécurisé au niveau de confiance actuel ; <see langword="false" /> s'il est transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3968">
              <see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3969">Le <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, et <xref:System.Type.IsSecurityTransparent%2A> propriétés signalent le niveau de transparence du type à son niveau de confiance actuel, tel que déterminé par le common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3969">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="c5b52-3970">Les combinaisons de ces propriétés sont affichées dans le tableau suivant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3970">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="c5b52-3971">Niveau de sécurité</span><span class="sxs-lookup"><span data-stu-id="c5b52-3971">Security level</span></span>|<span data-ttu-id="c5b52-3972">EstCritiqueDeSécurité</span><span class="sxs-lookup"><span data-stu-id="c5b52-3972">IsSecurityCritical</span></span>|<span data-ttu-id="c5b52-3973">EstCritiqueSécurisé</span><span class="sxs-lookup"><span data-stu-id="c5b52-3973">IsSecuritySafeCritical</span></span>|<span data-ttu-id="c5b52-3974">EstTransparentDeSécurité</span><span class="sxs-lookup"><span data-stu-id="c5b52-3974">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="c5b52-3975">Critique</span><span class="sxs-lookup"><span data-stu-id="c5b52-3975">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="c5b52-3976">Critique de sécurité</span><span class="sxs-lookup"><span data-stu-id="c5b52-3976">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="c5b52-3977">Transparent</span><span class="sxs-lookup"><span data-stu-id="c5b52-3977">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="c5b52-3978">L'utilisation de ces propriétés est beaucoup plus simple que d'examiner les annotations de sécurité d'un assembly et ses types, de vérifier le niveau de confiance actuel et de tenter de dupliquer les règles du runtime.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3978">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c5b52-3979">Pour les assemblys de confiance partielle, la valeur de cette propriété varie selon le niveau de confiance actuel de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3979">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="c5b52-3980">Si l’assembly est chargé dans un domaine d’application partiellement fiable (par exemple, dans un domaine d’application sandbox), le runtime ignore les annotations de sécurité de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3980">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="c5b52-3981">L’assembly et tous ses types sont traités comme étant transparent.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3981">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="c5b52-3982">Le runtime tient compte des annotations de sécurité d’un assembly de confiance partielle uniquement lorsque cet assembly est chargé dans un domaine d’application de confiance totale (par exemple, dans le domaine d’application par défaut d’une application de bureau).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3982">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="c5b52-3983">En revanche, un assembly de confiance (autrement dit, un assembly avec nom fort qui est installé dans le global assembly cache) est toujours chargé avec une confiance totale, quel que soit le niveau de confiance du domaine d’application, son niveau de confiance actuel est toujours entièrement fiable.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3983">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="c5b52-3984">Vous pouvez déterminer les niveaux de confiance actuel de domaines d’application et des assemblys à l’aide de la <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> et <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> propriétés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-3984">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="c5b52-3985">Pour plus d’informations sur la réflexion et la transparence, consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3985">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="c5b52-3986">Pour plus d’informations sur la transparence, consultez [modifications de sécurité](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3986">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="c5b52-3987">Considérations sur la sécurité de la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3987">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="c5b52-3988">Modifications de sécurité dans le .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3988">Security Changes in the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Type.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-3989">Obtient une valeur qui indique si le type actuel est critique sécurisé au niveau de confiance actuel, autrement dit s'il peut exécuter des opérations critiques et être accessible par du code transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3989">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-3990">
            <see langword="true" /> si le type actuel est critique sécurisé au niveau de confiance actuel ; <see langword="false" /> s'il est critique de sécurité ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-3990">
              <see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-3991">Le <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, et <xref:System.Type.IsSecurityTransparent%2A> propriétés signalent le niveau de transparence du type à son niveau de confiance actuel, tel que déterminé par le common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="c5b52-3991">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="c5b52-3992">Les combinaisons de ces propriétés sont affichées dans le tableau suivant :</span><span class="sxs-lookup"><span data-stu-id="c5b52-3992">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="c5b52-3993">Niveau de sécurité</span><span class="sxs-lookup"><span data-stu-id="c5b52-3993">Security level</span></span>|<span data-ttu-id="c5b52-3994">EstCritiqueDeSécurité</span><span class="sxs-lookup"><span data-stu-id="c5b52-3994">IsSecurityCritical</span></span>|<span data-ttu-id="c5b52-3995">EstCritiqueSécurisé</span><span class="sxs-lookup"><span data-stu-id="c5b52-3995">IsSecuritySafeCritical</span></span>|<span data-ttu-id="c5b52-3996">EstTransparentDeSécurité</span><span class="sxs-lookup"><span data-stu-id="c5b52-3996">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="c5b52-3997">Critique</span><span class="sxs-lookup"><span data-stu-id="c5b52-3997">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="c5b52-3998">Critique de sécurité</span><span class="sxs-lookup"><span data-stu-id="c5b52-3998">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="c5b52-3999">Transparent</span><span class="sxs-lookup"><span data-stu-id="c5b52-3999">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="c5b52-4000">L'utilisation de ces propriétés est beaucoup plus simple que d'examiner les annotations de sécurité d'un assembly et ses types, de vérifier le niveau de confiance actuel et de tenter de dupliquer les règles du runtime.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4000">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c5b52-4001">Pour les assemblys de confiance partielle, la valeur de cette propriété varie selon le niveau de confiance actuel de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4001">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="c5b52-4002">Si l’assembly est chargé dans un domaine d’application partiellement fiable (par exemple, dans un domaine d’application sandbox), le runtime ignore les annotations de sécurité de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4002">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="c5b52-4003">L’assembly et tous ses types sont traités comme étant transparent.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4003">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="c5b52-4004">Le runtime tient compte des annotations de sécurité d’un assembly de confiance partielle uniquement lorsque cet assembly est chargé dans un domaine d’application de confiance totale (par exemple, dans le domaine d’application par défaut d’une application de bureau).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4004">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="c5b52-4005">En revanche, un assembly de confiance (autrement dit, un assembly avec nom fort qui est installé dans le global assembly cache) est toujours chargé avec une confiance totale, quel que soit le niveau de confiance du domaine d’application, son niveau de confiance actuel est toujours entièrement fiable.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4005">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="c5b52-4006">Vous pouvez déterminer les niveaux de confiance actuel de domaines d’application et des assemblys à l’aide de la <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> et <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> propriétés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4006">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="c5b52-4007">Pour plus d’informations sur la réflexion et la transparence, consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4007">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="c5b52-4008">Pour plus d’informations sur la transparence, consultez [modifications de sécurité](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4008">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="c5b52-4009">Considérations sur la sécurité de la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4009">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="c5b52-4010">Modifications de sécurité dans le .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4010">Security Changes in the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Type.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4011">Obtient une valeur qui indique si le type actuel est transparent au niveau de confiance actuel et ne peut donc pas exécuter d'opérations critiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4011">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4012">
            <see langword="true" /> si le type est transparent de sécurité au niveau de confiance actuel ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4012">
              <see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4013">Si cette propriété retourne `true`, le <xref:System.Type.IsSecurityCritical%2A> et <xref:System.Type.IsSecuritySafeCritical%2A> propriétés retour `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4013">If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="c5b52-4014">Le <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, et <xref:System.Type.IsSecurityTransparent%2A> propriétés signalent le niveau de transparence du type à son niveau de confiance actuel, tel que déterminé par le common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4014">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="c5b52-4015">L'utilisation de ces propriétés est beaucoup plus simple que d'examiner les annotations de sécurité d'un assembly et ses types, de vérifier le niveau de confiance actuel et de tenter de dupliquer les règles du runtime.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4015">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c5b52-4016">Pour les assemblys de confiance partielle, la valeur de cette propriété varie selon le niveau de confiance actuel de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4016">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="c5b52-4017">Si l’assembly est chargé dans un domaine d’application partiellement fiable (par exemple, dans un domaine d’application sandbox), le runtime ignore les annotations de sécurité de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4017">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="c5b52-4018">L’assembly et tous ses types sont traités comme étant transparent.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4018">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="c5b52-4019">Le runtime tient compte des annotations de sécurité d’un assembly de confiance partielle uniquement lorsque cet assembly est chargé dans un domaine d’application de confiance totale (par exemple, dans le domaine d’application par défaut d’une application de bureau).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4019">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="c5b52-4020">En revanche, un assembly de confiance (autrement dit, un assembly avec nom fort qui est installé dans le global assembly cache) est toujours chargé avec une confiance totale, quel que soit le niveau de confiance du domaine d’application, son niveau de confiance actuel est toujours entièrement fiable.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4020">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="c5b52-4021">Vous pouvez déterminer les niveaux de confiance actuel de domaines d’application et des assemblys à l’aide de la <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> et <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> propriétés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4021">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="c5b52-4022">Pour plus d’informations sur la réflexion et la transparence, consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4022">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="c5b52-4023">Pour plus d’informations sur la transparence, consultez [modifications de sécurité](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4023">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="c5b52-4024">Considérations sur la sécurité de la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4024">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="c5b52-4025">Modifications de sécurité dans le .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4025">Security Changes in the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSerializable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4026">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est sérialisable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4026">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4027">
            <see langword="true" /> si le <see cref="T:System.Type" /> est sérialisable ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4027">
              <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="c5b52-4028">Types qui sont définis dans .NET Standard ne sont pas marqués avec <xref:System.SerializableAttribute>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4028">Types that are defined in the .NET Standard are not marked with <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="c5b52-4029">Au lieu de cela, chaque implémentation .NET détermine si un type est sérialisable.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4029">Instead, each .NET implementation determines whether a type is serializable.</span></span> <span data-ttu-id="c5b52-4030">Au moment de l’exécution, vous pouvez utiliser le <xref:System.Type.IsSerializable%2A> propriété afin de déterminer si cette implémentation prend en charge la sérialisation d’une instance du type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4030">At run time, you can use the <xref:System.Type.IsSerializable%2A> property to determine whether that implementation supports serialization of an instance of the type.</span></span> <span data-ttu-id="c5b52-4031">Pour plus d’informations et un exemple, consultez [comment déterminer si un objet .NET Standard est sérialisable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4031">For more information and an example, see [How to determine if a .NET Standard object is serializable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span></span>
  
 <span data-ttu-id="c5b52-4032">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4032">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-4033">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4033">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-4034">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4034">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4035">L’exemple suivant crée une instance de `MyTestClass` classe, définit l’attribut [Serializable] et vérifie le `IsSerializable` propriété pour `true` ou `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4035">The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.</span></span>  
  
 [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]
 [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]
 [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
      </Docs>
    </Member>
    <Member MemberName="IsSignatureType">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSignatureType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSignatureType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSignatureType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSignatureType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSignatureType : bool" Usage="System.Type.IsSignatureType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4036">Obtient une valeur indiquant si le type a un nom qui nécessite un traitement spécial.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4036">Gets a value indicating whether the type has a name that requires special handling.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4037">
            <see langword="true" /> si le type a un nom qui nécessite un traitement spécial ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4037">
              <see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4038">Les noms commencent par ou un caractère de soulignement (_), les accesseurs de propriété et les méthodes de surcharge d’opérateur sont des exemples de types pouvant nécessiter un traitement spécial par certains compilateurs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4038">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.</span></span>  
  
 <span data-ttu-id="c5b52-4039">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4039">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-4040">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4040">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-4041">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4041">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool&#xA;override this.IsSubclassOf : Type -&gt; bool" Usage="type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="c5b52-4042">Type à comparer avec le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4042">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4043">Détermine si le <see cref="T:System.Type" /> actuel dérive du <see cref="T:System.Type" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4043">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4044">
            <see langword="true" /> si le <see langword="Type" /> actuel dérive de <paramref name="c" /> ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4044">
              <see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c5b52-4045">Cette méthode retourne également <see langword="false" /> si <paramref name="c" /> et le <see langword="Type" /> actuel sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4045">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4046">Vous pouvez appeler la <xref:System.Type.IsSubclassOf%2A> méthode pour déterminer les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="c5b52-4046">You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:</span></span>  
  
-   <span data-ttu-id="c5b52-4047">Si une classe dérive d’un autre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4047">Whether one class derives from another.</span></span>  
  
-   <span data-ttu-id="c5b52-4048">Si un type dérive de <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4048">Whether a type derives from <xref:System.ValueType>.</span></span> <span data-ttu-id="c5b52-4049">Toutefois, le <xref:System.Type.IsValueType%2A> est un moyen plus efficace pour déterminer si un type est un type valeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4049">However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.</span></span>  
  
-   <span data-ttu-id="c5b52-4050">Si un type dérive de <xref:System.Enum>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4050">Whether a type derives from <xref:System.Enum>.</span></span> <span data-ttu-id="c5b52-4051">Toutefois, le <xref:System.Type.IsEnum%2A> méthode est un moyen plus efficace pour déterminer si un type est une énumération.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4051">However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.</span></span>  
  
-   <span data-ttu-id="c5b52-4052">Si un type est un délégué, autrement dit, si elle dérive <xref:System.Delegate> ou <xref:System.MulticastDelegate>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4052">Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.</span></span>  
  
 <span data-ttu-id="c5b52-4053">Le <xref:System.Type.IsSubclassOf%2A> méthode ne peut pas être utilisée pour déterminer si une interface dérive d’une autre interface ou si une classe implémente une interface.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4053">The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface.</span></span> <span data-ttu-id="c5b52-4054">Utilisez le <xref:System.Type.IsAssignableFrom%2A> méthode pour ce faire, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4054">Use the <xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]
 [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  
  
 <span data-ttu-id="c5b52-4055">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, il dérive de sa contrainte de classe ou de <xref:System.Object?displayProperty=nameWithType> si elle n’a aucune contrainte de classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4055">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=nameWithType> if it has no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-4056">Sauf lorsqu’il est utilisé avec les interfaces, <xref:System.Type.IsSubclassOf%2A> est l’inverse de <xref:System.Type.IsAssignableFrom%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4056">Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="c5b52-4057">Autrement dit, si `t1.IsSubclassOf(t2)` est `true`, puis `t2.IsAssignableFrom(t1)` est également `true`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4057">That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.</span></span>  
  
 <span data-ttu-id="c5b52-4058">Cette méthode peut être substituée par une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4058">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4059">L’exemple suivant crée une classe nommée `Class1` et une classe dérivée nommée `DerivedC1`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4059">The following example creates a class named `Class1` and a derived class named `DerivedC1`.</span></span> <span data-ttu-id="c5b52-4060">Il appelle le <xref:System.Type.IsSubclassOf%2A> méthode pour indiquer que `DerivedC1` est une sous-classe de `Class1`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4060">It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.</span></span>  
  
 [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]
 [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-4061">
            <paramref name="c" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4061">
              <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public virtual bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Type.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Type.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsUnicodeClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4062">Obtient une valeur indiquant si l'attribut de format de chaîne <see langword="UnicodeClass" /> est sélectionné pour <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4062">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4063">
            <see langword="true" /> si l'attribut de format de chaîne <see langword="UnicodeClass" /> est sélectionné pour le <see cref="T:System.Type" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4063">
              <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4064">Le <xref:System.Reflection.TypeAttributes.StringFormatMask> est utilisé pour sélectionner les attributs de format de chaîne.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4064">The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes.</span></span> <span data-ttu-id="c5b52-4065">Les attributs de format de chaîne améliorent l’interopérabilité en définissant la façon dont les chaînes doivent être interprétées.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4065">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="c5b52-4066">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4066">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-4067">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4067">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-4068">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4068">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Type.IsValueType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4069">Obtient une valeur indiquant si le <see cref="T:System.Type" /> est un type valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4069">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4070">
            <see langword="true" /> si <see cref="T:System.Type" /> est un type valeur ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4070">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4071">Les types valeur sont des types qui sont représentés comme des séquences de bits ; types valeur ne sont pas des classes ou interfaces.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4071">Value types are types that are represented as sequences of bits; value types are not classes or interfaces.</span></span> <span data-ttu-id="c5b52-4072">Les types valeur sont appelées « structs » dans certains langages de programmation.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4072">Value types are referred to as "structs" in some programming languages.</span></span> <span data-ttu-id="c5b52-4073">Les enums sont un cas spécial de types valeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4073">Enums are a special case of value types.</span></span>  
  
 <span data-ttu-id="c5b52-4074">Cette propriété retourne `false` pour le <xref:System.ValueType> classe, car <xref:System.ValueType> n’est pas un type valeur lui-même.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4074">This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself.</span></span> <span data-ttu-id="c5b52-4075">Il est la classe de base pour tous les types de valeur, et par conséquent n’importe quel type de valeur peut être affectée à ce dernier.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4075">It is the base class for all value types, and therefore any value type can be assigned to it.</span></span> <span data-ttu-id="c5b52-4076">Cela ne serait pas possible si <xref:System.ValueType> lui-même a un type valeur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4076">This would not be possible if <xref:System.ValueType> itself was a value type.</span></span> <span data-ttu-id="c5b52-4077">Types valeur sont boxed lorsqu’ils sont attribués à un champ de type <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4077">Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="c5b52-4078">Cette propriété retourne `true` pour les énumérations, mais pas pour le <xref:System.Enum> type lui-même.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4078">This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself.</span></span> <span data-ttu-id="c5b52-4079">Pour obtenir un exemple qui illustre ce comportement, consultez <xref:System.Type.IsEnum%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4079">For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.</span></span>  
  
 <span data-ttu-id="c5b52-4080">Cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4080">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4081">L’exemple suivant crée une variable de type `MyEnum`, vérifie le `IsValueType` propriété et affiche le résultat.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4081">The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]
 [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]
 [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="M:System.Type.IsValueTypeImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsValueTypeImpl : unit -&gt; bool&#xA;override this.IsValueTypeImpl : unit -&gt; bool" Usage="type.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4082">Implémente la propriété <see cref="P:System.Type.IsValueType" /> et détermine si le <see cref="T:System.Type" /> est un type valeur, c'est-à-dire ni une classe ni une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4082">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4083">
            <see langword="true" /> si <see cref="T:System.Type" /> est un type valeur ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4083">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4084">Cette méthode est fournie pour activer l’implémentation d’autres systèmes de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4084">This method is provided to enable the implementation of alternate type systems.</span></span> <span data-ttu-id="c5b52-4085">En règle générale, il n’est pas utilisé dans le code d’application.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4085">It is not generally used in application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public virtual bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Type.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Type.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4086">Obtient une valeur qui indique si <see cref="T:System.Type" /> est accessible par code à l'extérieur de l'assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4086">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4087">
            <see langword="true" /> si le <see cref="T:System.Type" /> actuel est un type public ou un type imbriqué public rendant publics tous les types englobants ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4087">
              <see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4088">Utilisez cette propriété pour déterminer si un type fait partie de l’interface publique d’un assembly de composant.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4088">Use this property to determine whether a type is part of the public interface of a component assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4089">L’exemple de code suivant teste deux classes, qu’un seul d'entre eux est visible en dehors de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4089">The following code example tests two classes, only one of which is visible outside the assembly.</span></span>  
  
 [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]
 [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4090">Retourne un objet <see cref="T:System.Type" /> qui représente un tableau du type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4090">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType();" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : unit -&gt; Type&#xA;override this.MakeArrayType : unit -&gt; Type" Usage="type.MakeArrayType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4091">Retourne un objet <see cref="T:System.Type" /> qui représente un tableau unidimensionnel du type actuel, avec une limite inférieure de zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4091">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4092">Objet <see cref="T:System.Type" /> qui représente un tableau unidimensionnel du type actuel, avec une limite inférieure de zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4092">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4093">Le <xref:System.Type.MakeArrayType%2A> méthode fournit un moyen pour générer des types tableau dont les types d’élément sont calculés au moment de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4093">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
 <span data-ttu-id="c5b52-4094">**Remarque** le common language runtime établit une distinction entre les vecteurs (autrement dit, les tableaux unidimensionnels qui sont toujours de base zéro) et les tableaux multidimensionnels.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4094">**Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="c5b52-4095">Un vecteur, qui a toujours qu’une seule dimension, n’est pas identique à un tableau multidimensionnel qui n’a qu’une seule dimension.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4095">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="c5b52-4096">Cette surcharge de méthode peut uniquement être utilisée pour créer des types de vecteurs, et c’est le seul moyen pour créer un type de vecteur.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4096">This method overload can only be used to create vector types, and it is the only way to create a vector type.</span></span> <span data-ttu-id="c5b52-4097">Utilisez le <xref:System.Type.MakeArrayType%28System.Int32%29> surcharge de méthode pour créer des types de tableaux multidimensionnels.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4097">Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4098">L’exemple de code suivant crée le tableau, `ref` (`ByRef` en Visual Basic) et les types de pointeur pour le `Test` classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4098">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-4099">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4099">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="c5b52-4100">Les classes dérivées doivent fournir une implémentation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4100">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-4101">Le type actuel est <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4101">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="c5b52-4102">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4102">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4103">Le type actuel est un type <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4103">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="c5b52-4104">Autrement dit, <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4104">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType(int rank);" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : int -&gt; Type&#xA;override this.MakeArrayType : int -&gt; Type" Usage="type.MakeArrayType rank" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">
          <span data-ttu-id="c5b52-4105">Nombre de dimensions pour le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4105">The number of dimensions for the array.</span>
          </span>
          <span data-ttu-id="c5b52-4106">Ce nombre doit être inférieur ou égal à 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4106">This number must be less than or equal to 32.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4107">Retourne un objet <see cref="T:System.Type" /> qui représente un tableau du type actuel, avec le nombre spécifié de dimensions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4107">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4108">Objet qui représente un tableau du type actuel, avec le nombre spécifié de dimensions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4108">An object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4109">Le <xref:System.Type.MakeArrayType%2A> méthode fournit un moyen pour générer des types tableau dont les types d’élément sont calculés au moment de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4109">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-4110">Le common language runtime établit une distinction entre les vecteurs (autrement dit, les tableaux unidimensionnels qui sont toujours de base zéro) et les tableaux multidimensionnels.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4110">The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="c5b52-4111">Un vecteur, qui a toujours qu’une seule dimension, n’est pas identique à un tableau multidimensionnel qui n’a qu’une seule dimension.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4111">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="c5b52-4112">Vous ne pouvez pas utiliser cette surcharge de méthode pour créer un type vectoriel ; Si `rank` est 1, cette surcharge de méthode retourne un type de tableau multidimensionnel qui possède une seule dimension.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4112">You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension.</span></span> <span data-ttu-id="c5b52-4113">Utilisez le <xref:System.Type.MakeArrayType> surcharge de méthode pour créer des types de vecteurs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4113">Use the <xref:System.Type.MakeArrayType> method overload to create vector types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4114">L’exemple de code suivant crée le tableau, `ref` (`ByRef` en Visual Basic) et les types de pointeur pour le `Test` classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4114">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="c5b52-4115">
            <paramref name="rank" /> n'est pas valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4115">
              <paramref name="rank" /> is invalid.</span>
          </span>
          <span data-ttu-id="c5b52-4116">Par exemple, 0 ou un nombre négatif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4116">For example, 0 or negative.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-4117">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4117">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-4118">Le type actuel est <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4118">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="c5b52-4119">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4119">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4120">Le type actuel est un type <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4120">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="c5b52-4121">Autrement dit, <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4121">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
          <span data-ttu-id="c5b52-4122">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4122">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4123">
            <paramref name="rank" /> est supérieur à 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4123">
              <paramref name="rank" /> is greater than 32.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeByRefType();" />
      <MemberSignature Language="F#" Value="abstract member MakeByRefType : unit -&gt; Type&#xA;override this.MakeByRefType : unit -&gt; Type" Usage="type.MakeByRefType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4124">Retourne un objet <see cref="T:System.Type" /> qui représente le type actuel quand il est passé en tant que paramètre <see langword="ref" /> (paramètre <see langword="ByRef" /> en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4124">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4125">Objet <see cref="T:System.Type" /> qui représente le type actuel quand il est passé en tant que paramètre <see langword="ref" /> (paramètre <see langword="ByRef" /> en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4125">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4126">Le <xref:System.Type.MakeByRefType%2A> méthode fournit un moyen de générer `ref` types (`ByRef` en Visual Basic) pour le paramètre répertorie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4126">The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
 <span data-ttu-id="c5b52-4127">À l’aide de la syntaxe de langage intermédiaire Microsoft (MSIL), si actuel <xref:System.Type> représente l’objet <xref:System.Int32>, cette méthode retourne un <xref:System.Type> objet représentant `Int32&`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4127">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4128">L’exemple de code suivant crée le tableau, `ref` (`ByRef` en Visual Basic) et les types de pointeur pour le `Test` classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4128">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-4129">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4129">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-4130">Le type actuel est <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4130">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="c5b52-4131">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4131">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4132">Le type actuel est un type <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4132">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="c5b52-4133">Autrement dit, <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4133">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeArrayType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethodParameter">
      <MemberSignature Language="C#" Value="public static Type MakeGenericMethodParameter (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericMethodParameter(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericMethodParameter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericMethodParameter (position As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericMethodParameter(int position);" />
      <MemberSignature Language="F#" Value="static member MakeGenericMethodParameter : int -&gt; Type" Usage="System.Type.MakeGenericMethodParameter position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="abstract member MakeGenericType : Type[] -&gt; Type&#xA;override this.MakeGenericType : Type[] -&gt; Type" Usage="type.MakeGenericType typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="c5b52-4134">Tableau de types à remplacer pour les paramètres de type du type générique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4134">An array of types to be substituted for the type parameters of the current generic type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4135">Substitue les éléments d'un tableau de types aux paramètres de type de la définition du type générique actuel et retourne un objet <see cref="T:System.Type" /> qui représente le type construit résultant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4135">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4136">
            <see cref="T:System.Type" /> représentant le type construit formé en substituant les éléments de <paramref name="typeArguments" /> pour les paramètres de type du type générique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4136">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4137">Le <xref:System.Type.MakeGenericType%2A> méthode vous permet d’écrire du code qui assigne des types spécifiques aux paramètres de type d’une définition de type générique, créant ainsi un <xref:System.Type> objet qui représente un type construit particulier.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4137">The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type.</span></span> <span data-ttu-id="c5b52-4138">Vous pouvez utiliser cette <xref:System.Type> objet à créer des instances d’exécution du type construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4138">You can use this <xref:System.Type> object to create run-time instances of the constructed type.</span></span>  
  
 <span data-ttu-id="c5b52-4139">Types construits avec <xref:System.Type.MakeGenericType%2A> peut être ouvert, autrement dit, certaines de leurs arguments de type peuvent être des paramètres de type caractères entourant les méthodes génériques ou les types.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4139">Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types.</span></span> <span data-ttu-id="c5b52-4140">Vous pouvez utiliser ces types construits ouverts lorsque vous émettez des assemblys dynamiques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4140">You might use such open constructed types when you emit dynamic assemblies.</span></span> <span data-ttu-id="c5b52-4141">Par exemple, considérez les classes `Base` et `Derived` dans le code suivant.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4141">For example, consider the classes `Base` and `Derived` in the following code.</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="c5b52-4142">Pour générer `Derived` dans un assembly dynamique, il est nécessaire de construire son type de base.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4142">To generate `Derived` in a dynamic assembly, it is necessary to construct its base type.</span></span> <span data-ttu-id="c5b52-4143">Pour ce faire, appelez le <xref:System.Type.MakeGenericType%2A> méthode sur un <xref:System.Type> objet représentant la classe `Base`, en utilisant les arguments de type générique <xref:System.Int32> et le paramètre de type `V` de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4143">To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`.</span></span> <span data-ttu-id="c5b52-4144">Étant donné que les types et les paramètres de type générique sont représentés par <xref:System.Type> objets, un tableau contenant les deux peut être passé à la <xref:System.Type.MakeGenericType%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4144">Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-4145">Un type construit, tel que `Base<int, V>` est utile lorsque émission de code, mais vous ne pouvez pas appeler la <xref:System.Type.MakeGenericType%2A> méthode sur ce type, car il n’est pas une définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4145">A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition.</span></span> <span data-ttu-id="c5b52-4146">Pour créer un type construit fermé qui peut être instancié, appelez d’abord la <xref:System.Type.GetGenericTypeDefinition%2A> méthode pour obtenir un <xref:System.Type> de l’objet qui représente la définition de type générique, puis appelez <xref:System.Type.MakeGenericType%2A> avec les arguments de type souhaité.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4146">To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.</span></span>  
  
 <span data-ttu-id="c5b52-4147">Le <xref:System.Type> objet retourné par <xref:System.Type.MakeGenericType%2A> est identique à la <xref:System.Type> obtenu en appelant le <xref:System.Object.GetType%2A> méthode des résultats de type construit, ou le <xref:System.Object.GetType%2A> méthode de n’importe quel type qui a été créé à partir de la même générique de construit définition de type à l’aide des mêmes arguments de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4147">The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A> method of any constructed type that was created from the same generic type definition using the same type arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5b52-4148">Un tableau de types génériques n’est pas lui-même un type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4148">An array of generic types is not itself a generic type.</span></span> <span data-ttu-id="c5b52-4149">Vous ne pouvez pas appeler <xref:System.Type.MakeGenericType%2A> sur un type tableau tel que `C<T>[]` (`Dim ac() As C(Of T)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4149">You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span></span> <span data-ttu-id="c5b52-4150">Pour construire un type générique fermé de `C<T>[]`, appelez <xref:System.Type.GetElementType%2A> pour obtenir la définition de type générique `C<T>`; appelez <xref:System.Type.MakeGenericType%2A> sur la définition de type générique pour créer le type construit ; et enfin appeler la <xref:System.Type.MakeArrayType%2A> méthode sur le type construit pour créer le type de tableau.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4150">To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type.</span></span> <span data-ttu-id="c5b52-4151">Cela vaut de types pointeur et `ref` types (`ByRef` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4151">The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).</span></span>  
  
 <span data-ttu-id="c5b52-4152">Pour obtenir la liste des conditions indifférentes pour les termes utilisés dans la réflexion générique, consultez les notes sur la propriété <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4152">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
## <a name="nested-types"></a><span data-ttu-id="c5b52-4153">Types imbriqués</span><span class="sxs-lookup"><span data-stu-id="c5b52-4153">Nested Types</span></span>  
 <span data-ttu-id="c5b52-4154">Si un type générique est défini à l’aide de c#, C++ ou Visual Basic, ses types imbriqués sont tous génériques.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4154">If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic.</span></span> <span data-ttu-id="c5b52-4155">Cela est vrai même si les types imbriqués n’ont aucun paramètre de type propre, car les trois langages incluent les paramètres de type de types englobants dans les listes de paramètres de type des types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4155">This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types.</span></span> <span data-ttu-id="c5b52-4156">Prenez en compte les classes suivantes :</span><span class="sxs-lookup"><span data-stu-id="c5b52-4156">Consider the following classes:</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]
 [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  
  
 <span data-ttu-id="c5b52-4157">La liste de paramètres de type de la classe imbriquée `Inner` a deux paramètres de type, `T` et `U`, le premier d'entre eux est le paramètre de type de sa classe englobante.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4157">The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class.</span></span> <span data-ttu-id="c5b52-4158">De même, la liste de paramètres de type de la classe imbriquée `Innermost1` a trois paramètres de type, `T`, `U`, et `V`, avec `T` et `U` provenant de ses classes englobantes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4158">Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes.</span></span> <span data-ttu-id="c5b52-4159">La classe imbriquée `Innermost2` a deux paramètres de type, `T` et `U`, qui proviennent de ses classes englobantes.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4159">The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.</span></span>  
  
 <span data-ttu-id="c5b52-4160">Si la liste des paramètres du type englobant comporte plus d’un paramètre de type, tous les paramètres de type dans l’ordre sont inclus dans la liste de paramètres de type du type imbriqué.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4160">If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.</span></span>  
  
 <span data-ttu-id="c5b52-4161">Pour construire un type générique à partir de la définition de type générique pour un type imbriqué, appelez le <xref:System.Type.MakeGenericType%2A> méthode avec le tableau formé en concaténant les tableaux d’argument de type des tous les types englobants, à compter de type générique à l’extérieur et se terminant par le type de tableau d’arguments du type imbriqué lui-même, s’il a des paramètres de type de son propre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4161">To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own.</span></span> <span data-ttu-id="c5b52-4162">Pour créer une instance de `Innermost1`, appelez le <xref:System.Type.MakeGenericType%2A> méthode avec un tableau contenant trois types à assigner à T, U et V. Pour créer une instance de `Innermost2`, appelez le <xref:System.Type.MakeGenericType%2A> méthode avec un tableau contenant les deux types, à assigner à T et U.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4162">To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.</span></span>  
  
 <span data-ttu-id="c5b52-4163">Les langages de propagent les paramètres de type de types englobants de cette façon afin de pouvoir utiliser les paramètres de type d’un type englobant pour définir les champs des types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4163">The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types.</span></span> <span data-ttu-id="c5b52-4164">Sinon, les paramètres de type ne serait pas dans la portée au sein des instances des types imbriqués.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4164">Otherwise, the type parameters would not be in scope within the bodies of the nested types.</span></span> <span data-ttu-id="c5b52-4165">Il est possible de définir des types imbriqués sans propager les paramètres de type de types englobants, en émettant le code dans des assemblys dynamiques ou en utilisant le [Ilasm.exe (assembleur IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4165">It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span> <span data-ttu-id="c5b52-4166">Prenons le code suivant pour l’assembleur MSIL :</span><span class="sxs-lookup"><span data-stu-id="c5b52-4166">Consider the following code for the MSIL assembler:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="c5b52-4167">Dans cet exemple, il n’est pas possible de définir un champ de type `T` ou `U` dans la classe `Innermost`, car ces paramètres de type ne sont pas dans la portée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4167">In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope.</span></span> <span data-ttu-id="c5b52-4168">Le code assembleur suivant définit les classes imbriquées qui se comportent comme si elles étaient définies en C++, Visual Basic et c# :</span><span class="sxs-lookup"><span data-stu-id="c5b52-4168">The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="c5b52-4169">Vous pouvez utiliser la [Ildasm.exe (désassembleur IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) pour examiner les classes imbriquées définies dans les langages de haut niveau et observer ce schéma d’affectation de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4169">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4170">L’exemple suivant utilise le <xref:System.Type.MakeGenericType%2A> méthode pour créer un type construit à partir de la définition de type générique pour le <xref:System.Collections.Generic.Dictionary%602> type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4170">The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type.</span></span> <span data-ttu-id="c5b52-4171">Représente le type construit un <xref:System.Collections.Generic.Dictionary%602> de `Test` objets avec des clés de chaîne.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4171">The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c5b52-4172">Le type actuel ne représente pas une définition de type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4172">The current type does not represent a generic type definition.</span>
          </span>
          <span data-ttu-id="c5b52-4173">Autrement dit, <see cref="P:System.Type.IsGenericTypeDefinition" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4173">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-4174">
            <paramref name="typeArguments" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4174">
              <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-4175">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4175">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4176">Tout élément de <paramref name="typeArguments" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4176">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-4177">Le nombre d'éléments dans <paramref name="typeArguments" /> n'est pas le même que le nombre de paramètres de type dans la définition du type générique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4177">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span>
          </span>
          <span data-ttu-id="c5b52-4178">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4178">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4179">Tout élément de <paramref name="typeArguments" /> ne satisfait pas les contraintes spécifiées pour le paramètre de type correspondant du type générique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4179">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span>
          </span>
          <span data-ttu-id="c5b52-4180">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4180">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4181">
            <paramref name="typeArguments" /> contient un élément qui est un type pointeur (<see cref="P:System.Type.IsPointer" /> retourne <see langword="true" />), un type par référence (<see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />) ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4181">
              <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-4182">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4182">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="c5b52-4183">Les classes dérivées doivent fournir une implémentation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4183">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="c5b52-4184">Réflexion et types génériques</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4184">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="c5b52-4185">Guide pratique pour examiner et instancier des types génériques avec la réflexion</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4185">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakePointerType();" />
      <MemberSignature Language="F#" Value="abstract member MakePointerType : unit -&gt; Type&#xA;override this.MakePointerType : unit -&gt; Type" Usage="type.MakePointerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4186">Retourne un objet <see cref="T:System.Type" /> qui représente un pointeur vers le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4186">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4187">Objet <see cref="T:System.Type" /> qui représente un pointeur vers le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4187">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4188">Le <xref:System.Type.MakePointerType%2A> méthode fournit un moyen pour générer des types pointeur pour les listes de paramètres.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4188">The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
 <span data-ttu-id="c5b52-4189">À l’aide de la syntaxe de langage intermédiaire Microsoft (MSIL), si actuel <xref:System.Type> représente l’objet <xref:System.Int32>, cette méthode retourne un <xref:System.Type> objet représentant `Int32*`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4189">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4190">L’exemple de code suivant crée le tableau, `ref` (`ByRef` en Visual Basic) et les types de pointeur pour le `Test` classe.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4190">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-4191">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4191">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-4192">Le type actuel est <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4192">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="c5b52-4193">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4193">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4194">Le type actuel est un type <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4194">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="c5b52-4195">Autrement dit, <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4195">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Type.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4196">Obtient une valeur <see cref="T:System.Reflection.MemberTypes" /> qui indique que ce membre est un type ou un type imbriqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4196">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4197">Valeur <see cref="T:System.Reflection.MemberTypes" /> qui indique que ce membre est un type ou un type imbriqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4197">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4198">Cette propriété remplace <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4198">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c5b52-4199">Par conséquent, lorsque vous examinez un ensemble de <xref:System.Reflection.MemberInfo> objets — par exemple, le tableau retourné par <xref:System.Type.GetMembers%2A>— le <xref:System.Reflection.MemberInfo.MemberType%2A> propriété retourne <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> quand un membre donné est un type imbriqué.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4199">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects—for example, the array returned by <xref:System.Type.GetMembers%2A>—the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> when a given member is a nested type.</span></span>  
  
 <span data-ttu-id="c5b52-4200">Si actuel <xref:System.Type> représente un type générique construit, cette propriété s’applique à la définition de type générique à partir de laquelle le type a été construit.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4200">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="c5b52-4201">Par exemple, si actuel <xref:System.Type> représente `MyGenericType<int>` (`MyGenericType(Of Integer)` en Visual Basic), la valeur de cette propriété est déterminée par `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4201">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="c5b52-4202">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne toujours <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4202">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4203">Le code suivant montre l’exemple le `MemberType` champ en tant que paramètre à la `GetMember` méthode :</span><span class="sxs-lookup"><span data-stu-id="c5b52-4203">The following code example shows the `MemberType` field as a parameter to the `GetMember` method:</span></span>  
  
 [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberSignature Language="DocId" Value="F:System.Type.Missing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Missing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Missing;" />
      <MemberSignature Language="F#" Value=" staticval mutable Missing : obj" Usage="System.Type.Missing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4204">Représente une valeur manquante dans les informations <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4204">Represents a missing value in the <see cref="T:System.Type" /> information.</span>
          </span>
          <span data-ttu-id="c5b52-4205">Ce champ est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4205">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4206">Utilisez le `Missing` field pour un appel par la réflexion pour obtenir la valeur par défaut d’un paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4206">Use the `Missing` field for invocation through reflection to obtain the default value of a parameter.</span></span> <span data-ttu-id="c5b52-4207">Si le `Missing` champ est passé pour une valeur de paramètre et il n’existe aucune valeur par défaut pour ce paramètre, un <xref:System.ArgumentException> est levée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4207">If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4208">L’exemple de code suivant illustre l’utilisation de la `Missing` champ à appeler une méthode avec ses arguments par défaut.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4208">The following code example shows the use of the `Missing` field to invoke a method with its default arguments.</span></span>  
  
 [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]
 [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]
 [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  
  
 <span data-ttu-id="c5b52-4209">Ce code génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c5b52-4209">This code produces the following output:</span></span>  
  
 <span data-ttu-id="c5b52-4210">un = 10 b = 55.3 c = 12</span><span class="sxs-lookup"><span data-stu-id="c5b52-4210">a = 10 b = 55.3 c = 12</span></span>  
  
 <span data-ttu-id="c5b52-4211">un = 10 b = 1.3 c = 1</span><span class="sxs-lookup"><span data-stu-id="c5b52-4211">a = 10 b = 1.3 c = 1</span></span>  
  
 <span data-ttu-id="c5b52-4212">un = 10 b = 1.2 c = 1</span><span class="sxs-lookup"><span data-stu-id="c5b52-4212">a = 10 b = 1.2 c = 1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Missing" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Type.Module" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Module</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4213">Obtient le module (la DLL) dans lequel le <see cref="T:System.Type" /> actuel est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4213">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4214">Module dans lequel le <see cref="T:System.Type" /> actuel est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4214">The module in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4215">Si actuel <xref:System.Type> représente un type générique construit, cette propriété retourne le module dans lequel la définition de type générique a été définie.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4215">If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined.</span></span> <span data-ttu-id="c5b52-4216">Par exemple, si vous créez une instance de `MyGenericStack<int>`, le <xref:System.Type.Module%2A> propriété pour le type construit retourne le module dans lequel `MyGenericStack<T>` est défini.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4216">For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.</span></span>  
  
 <span data-ttu-id="c5b52-4217">De même, si actuel <xref:System.Type> représente un paramètre générique `T`, cette propriété retourne l’assembly qui contient le type générique qui définit `T`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4217">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4218">L’exemple suivant montre une utilisation de la <xref:System.Type.Namespace%2A> et `Module` propriétés et le <xref:System.Type.ToString%2A> méthode de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4218">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Type.Namespace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Namespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4219">Obtient l'espace de noms de l'objet <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4219">Gets the namespace of the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4220">Espace de noms du <see cref="T:System.Type" /> ; <see langword="null" /> si l'instance actuelle n'a pas d'espace de noms ou représente un paramètre générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4220">The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4221">Un espace de noms est une logique au moment du design d’affectation de noms plus de commodité, principalement utilisé pour définir l’étendue dans une application et organiser des classes et autres types dans une structure hiérarchique unique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4221">A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure.</span></span> <span data-ttu-id="c5b52-4222">Du point de vue du runtime, il n’existe aucun espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4222">From the viewpoint of the runtime, there are no namespaces.</span></span>  
  
 <span data-ttu-id="c5b52-4223">Si actuel <xref:System.Type> représente un type générique construit, cette propriété retourne l’espace de noms qui contient la définition de type générique.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4223">If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition.</span></span> <span data-ttu-id="c5b52-4224">De même, si actuel <xref:System.Type> représente un paramètre générique `T`, cette propriété retourne l’espace de noms qui contient la définition de type générique qui définit `T`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4224">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.</span></span>  
  
 <span data-ttu-id="c5b52-4225">Si actuel <xref:System.Type> objet représente un paramètre générique, cette propriété retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4225">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4226">L’exemple suivant montre une utilisation de la `Namespace` et <xref:System.Type.Module%2A> propriétés et le <xref:System.Type.ToString%2A> méthode de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4226">This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="c5b52-4227">Spécification des noms de types qualifiés complets</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4227">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Equality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Type * Type -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c5b52-4228">Premier objet à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4228">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c5b52-4229">Deuxième objet à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4229">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4230">Indique si deux objets <see cref="T:System.Type" /> sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4230">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4231">
            <see langword="true" /> si <paramref name="left" /> est égal à <paramref name="right" /> ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4231">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Inequality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Type * Type -&gt; bool" Usage="System.Type.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c5b52-4232">Premier objet à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4232">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c5b52-4233">Deuxième objet à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4233">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4234">Indique si deux objets <see cref="T:System.Type" /> ne sont pas égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4234">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4235">
            <see langword="true" /> si <paramref name="left" /> n'est pas égal à <paramref name="right" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4235">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4236">Obtient l'objet de la classe qui a été utilisé pour obtenir ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4236">Gets the class object that was used to obtain this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4237">Objet <see langword="Type" /> via lequel cet objet <see cref="T:System.Type" /> a été obtenu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4237">The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4238">Pour <xref:System.Type> objets, la valeur de cette propriété est toujours identique à la valeur de la <xref:System.Type.DeclaringType%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4238">For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4239">Cet exemple affiche le type réfléchi d’une classe imbriquée.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4239">This example displays the reflected type of a nested class.</span></span>  
  
 [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.DeclaringType" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyGetType (typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ ReflectionOnlyGetType(System::String ^ typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyGetType : string * bool * bool -&gt; Type" Usage="System.Type.ReflectionOnlyGetType (typeName, throwIfNotFound, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="c5b52-4240">Nom complet de l'assembly du <see cref="T:System.Type" /> à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4240">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="throwIfNotFound">
          <span data-ttu-id="c5b52-4241">
            <see langword="true" /> pour lever une <see cref="T:System.TypeLoadException" /> si le type est introuvable ; <see langword="false" /> pour retourner <see langword="null" /> si le type est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4241">
              <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span>
          </span>
          <span data-ttu-id="c5b52-4242">
            <see langword="false" /> supprime également d'autres conditions d'exception, mais pas toutes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4242">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="c5b52-4243">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4243">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="c5b52-4244">
            <see langword="true" /> pour effectuer une recherche qui ne respecte pas la casse de <c>typeName</c> ; <see langword="false" /> pour effectuer une recherche qui respecte la casse de <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4244">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>; <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4245">Obtient le <see cref="T:System.Type" /> portant le nom spécifié, indiquant s'il faut effectuer une recherche respectant la casse et lever une exception si le type est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4245">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span>
          </span>
          <span data-ttu-id="c5b52-4246">Le type est chargé dans un contexte de réflexion, et non d'exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4246">The type is loaded for reflection only, not for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4247">Type présentant le nom spécifié, s'il est trouvé ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4247">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c5b52-4248">Si le type est introuvable, le paramètre <paramref name="throwIfNotFound" /> spécifie si <see langword="null" /> est retourné ou bien une exception est levée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4248">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="c5b52-4249">Dans certains cas, une exception est levée indépendamment de la valeur de <paramref name="throwIfNotFound" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4249">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span>
          </span>
          <span data-ttu-id="c5b52-4250">Consultez la section Exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4250">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4251">Si l’assembly contenant le type n’est pas déjà chargé dans le contexte de réflexion uniquement, à l’aide du <xref:System.Type.ReflectionOnlyGetType%2A> méthode est équivalent au premier chargement de l’assembly pour la réflexion uniquement, à l’aide de la <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> (méthode), puis le chargement du type en appelant le l’assembly <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4251">If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c5b52-4252">Pour plus d’informations sur les noms qualifiés d’assembly, consultez le <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4252">For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c5b52-4253">Pour plus d’informations sur la spécification des noms de types, consultez le <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4253">For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="c5b52-4254">Si l’assembly est déjà chargé pour l’exécution, une autre copie est chargée dans le contexte de réflexion uniquement.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4254">If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="c5b52-4255">Le `throwIfNotFound` paramètre spécifie que se passe-t-il lorsque le type est introuvable et supprime également certaines autres conditions d’exception, comme décrit dans la section Exceptions.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4255">The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="c5b52-4256">Certaines exceptions sont levées indépendamment de la valeur de `throwIfNotFound`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4256">Some exceptions are thrown regardless of the value of `throwIfNotFound`.</span></span> <span data-ttu-id="c5b52-4257">Par exemple, si l’assembly n’est pas valide, un <xref:System.BadImageFormatException> est levée même si `throwIfNotFound` est `false`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4257">For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.</span></span>  
  
 <span data-ttu-id="c5b52-4258">Pour plus d’informations sur le contexte de réflexion uniquement, consultez [Comment : charger des assemblys dans le contexte de réflexion uniquement](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4258">For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c5b52-4259">
            <paramref name="typeName" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4259">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="c5b52-4260">Un initialiseur de classe est appelé et lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4260">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c5b52-4261">
            <paramref name="throwIfNotFound" /> a la valeur <see langword="true" /> et le type est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4261">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="c5b52-4262">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4262">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4263">
            <paramref name="throwIfNotFound" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient des caractères non valides, tels qu’une tabulation incorporée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4263">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="c5b52-4264">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4264">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4265">
            <paramref name="throwIfNotFound" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> est une chaîne vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4265">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="c5b52-4266">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4266">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4267">
            <paramref name="throwIfNotFound" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> représente un type de tableau avec une taille non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4267">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="c5b52-4268">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4268">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4269">
            <paramref name="typeName" /> représente un tableau d’objets <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4269">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c5b52-4270">
            <paramref name="typeName" /> n’inclut pas le nom de l’assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4270">
              <paramref name="typeName" /> does not include the assembly name.</span>
          </span>
          <span data-ttu-id="c5b52-4271">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4271">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4272">
            <paramref name="throwIfNotFound" /> a la valeur <see langword="true" /> et <paramref name="typeName" /> contient une syntaxe non valide ; par exemple, « MyType[,\*,] ».</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4272">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="c5b52-4273">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4273">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4274">
            <paramref name="typeName" /> représente un type générique qui a un type pointeur, un type <see langword="ByRef" /> ou <see cref="T:System.Void" /> comme l’un de ses arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4274">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-4275">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4275">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4276">
            <paramref name="typeName" /> représente un type générique qui a un nombre incorrect d’arguments de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4276">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="c5b52-4277">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4277">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4278">
            <paramref name="typeName" /> représente un type générique, et un de ses arguments de type ne satisfait pas aux contraintes pour le paramètre de type correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4278">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c5b52-4279">
            <paramref name="throwIfNotFound" /> a la valeur <see langword="true" />, et l’assembly ou l’une de ses dépendances est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4279">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="c5b52-4280">L’assembly ou une de ses dépendances a été trouvé, mais n’a pas pu être chargé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4280">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="c5b52-4281">L’assembly ou une de ses dépendances n’est pas valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4281">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="c5b52-4282">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4282">-or-</span>
          </span>
          <span data-ttu-id="c5b52-4283">L’assembly a été compilé avec une version du Common Language Runtime postérieure à la version actuellement chargée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4283">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="c5b52-4284">Spécification des noms de types qualifiés complets</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4284">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md">
          <span data-ttu-id="c5b52-4285">Guide pratique pour charger des assemblys dans le contexte de réflexion uniquement</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4285">How to: Load Assemblies into the Reflection-Only Context</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Type.StructLayoutAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::InteropServices::StructLayoutAttribute ^ StructLayoutAttribute { System::Runtime::InteropServices::StructLayoutAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StructLayoutAttribute : System.Runtime.InteropServices.StructLayoutAttribute" Usage="System.Type.StructLayoutAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4286">Obtient un <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> qui décrit la disposition du type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4286">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4287">Obtient un <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> qui décrit les fonctions de disposition brutes du type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4287">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4288"><xref:System.Runtime.InteropServices.StructLayoutAttribute> n’est pas retournée par le <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4288"><xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span> <span data-ttu-id="c5b52-4289">Au lieu de cela, utilisez cette propriété pour l’obtenir.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4289">Instead, use this property to get it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4290">L’exemple de code suivant définit tout d’abord une classe, une structure et une structure avec des attributs de disposition spécial (les structures sont imbriquées dans la classe).</span><span class="sxs-lookup"><span data-stu-id="c5b52-4290">The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class).</span></span> <span data-ttu-id="c5b52-4291">L’exemple utilise ensuite la <xref:System.Type.StructLayoutAttribute%2A> propriété pour obtenir un <xref:System.Runtime.InteropServices.StructLayoutAttribute> pour chaque type et affiche les propriétés des attributs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4291">The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.</span></span>  
  
 [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]
 [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]
 [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-4292">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4292">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Type.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Type::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="c5b52-4293">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4293">Reserved for future use.</span>
          </span>
          <span data-ttu-id="c5b52-4294">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4294">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="c5b52-4295">Tableau passé des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4295">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="c5b52-4296">Compte des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4296">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="c5b52-4297">Contexte des paramètres régionaux dans lequel interpréter les noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4297">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="c5b52-4298">Tableau alloué par l'appelant et recevant les ID qui correspondent aux noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4298">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4299">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4299">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4300">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4300">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c5b52-4301">Pour plus d’informations sur `IDispatch::GetIDsOfNames`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4301">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c5b52-4302">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4302">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Type.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="c5b52-4303">Informations de type à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4303">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="c5b52-4304">Identificateur des paramètres régionaux pour les informations de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4304">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="c5b52-4305">Pointeur vers l'objet d'informations de type demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4305">A pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4306">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4306">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4307">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4307">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c5b52-4308">Pour plus d’informations sur `IDispatch::GetTypeInfo`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4308">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c5b52-4309">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4309">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Type.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="c5b52-4310">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4310">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4311">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4311">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4312">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4312">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c5b52-4313">Pour plus d’informations sur `IDispatch::GetTypeInfoCount`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4313">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c5b52-4314">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4314">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Type.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Type::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="c5b52-4315">Identifie le membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4315">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="c5b52-4316">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4316">Reserved for future use.</span>
          </span>
          <span data-ttu-id="c5b52-4317">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4317">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="c5b52-4318">Contexte des paramètres régionaux dans lequel interpréter les arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4318">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="c5b52-4319">Indicateurs décrivant le contexte de l'appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4319">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="c5b52-4320">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4320">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="c5b52-4321">Pointeur vers l'emplacement où le résultat doit être stocké.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4321">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="c5b52-4322">Pointeur vers une structure qui contient les informations sur les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4322">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="c5b52-4323">Index du premier argument comportant une erreur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4323">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5b52-4324">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4324">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4325">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4325">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c5b52-4326">Pour plus d’informations sur `IDispatch::Invoke`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4326">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c5b52-4327">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4327">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="type.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4328">Retourne <see langword="String" /> représentant le nom du <see langword="Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4328">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5b52-4329">
            <see cref="T:System.String" /> représentant le nom du <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4329">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4330">Cette méthode retourne le common language runtime espace de noms complet et le nom de tous les types primitifs.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4330">This method returns the fully qualified common language runtime namespace and name for all primitive types.</span></span> <span data-ttu-id="c5b52-4331">Par exemple, l’instruction c# `(long)0.Type().ToString()` retourne « System.Int64 » au lieu de simplement « Int64 ».</span><span class="sxs-lookup"><span data-stu-id="c5b52-4331">For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".</span></span>  
  
 <span data-ttu-id="c5b52-4332">Si actuel <xref:System.Type> représente un type générique, le type et ses arguments de type sont qualifiés par espace de noms et par un type imbriqué, mais pas par un assembly.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4332">If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly.</span></span> <span data-ttu-id="c5b52-4333">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou de méthode générique, cette méthode retourne le nom non qualifié du paramètre de type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4333">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4334">L’exemple suivant montre une utilisation de la <xref:System.Type.Namespace%2A> et <xref:System.Type.Module%2A> propriétés et le `ToString` méthode de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4334">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 <span data-ttu-id="c5b52-4335">L’exemple suivant compare les chaînes retournées par la <xref:System.Type.ToString%2A> (méthode) et le `Name`, <xref:System.Type.FullName%2A>, et <xref:System.Type.AssemblyQualifiedName%2A> propriétés.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4335">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4336">Obtient le handle pour le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4336">Gets the handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4337">Handle pour le <see cref="T:System.Type" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4337">The handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4338">`TypeHandle` encapsule un pointeur vers une structure de données interne qui représente le type.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4338">`TypeHandle` encapsulates a pointer to an internal data structure that represents the type.</span></span> <span data-ttu-id="c5b52-4339">Ce handle est unique pendant la durée de vie du processus.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4339">This handle is unique during the process lifetime.</span></span> <span data-ttu-id="c5b52-4340">Le handle est valide uniquement dans le domaine d’application dans lequel elles ont été obtenues.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4340">The handle is valid only in the application domain in which it was obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5b52-4341">L’exemple suivant retourne le handle du type correspondant et passe le handle à une méthode qui obtient le type à partir du handle et l’affiche.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4341">The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</span></span>  
  
 [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]
 [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]
 [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c5b52-4342">Le .NET Compact Framework ne prend pas en charge cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4342">The .NET Compact Framework does not currently support this property.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeInitializer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4343">Obtient l'initialiseur du type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4343">Gets the initializer for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4344">Objet contenant le nom du constructeur de classe pour <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4344">An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5b52-4345">Initialiseurs de classe sont également disponibles via le <xref:System.Type.FindMembers%2A> (méthode), ou via les surcharges de la <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, et <xref:System.Type.GetConstructors%2A> méthodes qui prennent <xref:System.Reflection.BindingFlags> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4345">Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.</span></span>  
  
 <span data-ttu-id="c5b52-4346">Si actuel <xref:System.Type> représente un paramètre de type dans la définition d’un type générique ou une méthode générique, cette propriété retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c5b52-4346">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.UnderlyingSystemType</InterfaceMember>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c5b52-4347">Indique le type fourni par le Common Language Runtime qui représente ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4347">Indicates the type provided by the common language runtime that represents this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c5b52-4348">Type de système sous-jacent pour <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5b52-4348">The underlying system type for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
  </Members>
</Type>