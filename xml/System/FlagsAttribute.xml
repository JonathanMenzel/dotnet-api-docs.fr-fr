<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6eda6723e0638b63748075272f8d52d69775038" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56390393" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indique qu'une énumération peut être traitée comme un champ de bits, c'est-à-dire un ensemble d'indicateurs.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Champs de bits sont généralement utilisés pour les listes d’éléments qui peuvent être combinées, tandis que les constantes d’énumération sont généralement utilisés pour les listes d’éléments qui s’excluent mutuellement. Par conséquent, les champs de bits sont conçus pour être combinés avec une opération OR au niveau du bit pour générer des valeurs sans nom, tandis que les constantes énumérées ne sont pas. Les langages varient dans leur utilisation des champs de bits par rapport aux constantes d’énumération.  
  
## <a name="attributes-of-the-flagsattribute"></a>Attributs de FlagsAttribute  
 <xref:System.AttributeUsageAttribute> est appliqué à cette classe et sa <xref:System.AttributeUsageAttribute.Inherited%2A> propriété spécifie `false`. Cet attribut peut uniquement être appliqué aux énumérations.  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>Indications concernant FlagsAttribute et Enum  
  
-   Utilisez le <xref:System.FlagsAttribute> attribut personnalisé pour une énumération uniquement si une opération au niveau du bit (AND, OR exclusif ou) doit être effectuée sur une valeur numérique.  
  
-   Définir des constantes d’énumération à la puissance de deux, autrement dit, 1, 2, 4, 8 et ainsi de suite. Cela signifie que les indicateurs individuels dans les constantes d’énumération combinées ne se chevauchent pas.  
  
-   Envisagez de créer une constante énumérée pour des combinaisons d’indicateurs couramment utilisées. Par exemple, si vous avez une énumération utilisée pour les opérations d’e/s de fichier qui contient les constantes énumérées `Read = 1` et `Write = 2`, envisagez de créer la constante énumérée `ReadWrite = Read OR Write`, qui associe le `Read` et `Write` indicateurs. En outre, l’opération OR au niveau du bit utilisée pour combiner les indicateurs peut-être être considérées comme un concept avancé dans certains cas ne doit pas être requis pour des tâches simples.  
  
-   Soyez prudent si vous définissez un nombre négatif comme constante énumérée d’indicateur, car le nombre de positions indicateur peut être défini sur 1, ce qui peut rendre votre code source de confusion et erreurs de codage.  
  
-   Un moyen pratique pour tester si un indicateur est défini dans une valeur numérique consiste à effectuer une opération AND au niveau du bit entre la valeur numérique et la constante énumérée d’indicateur qui définit tous les bits dans la valeur numérique à zéro, qui ne correspondent pas à l’indicateur , puis vérifiez si le résultat de cette opération est égal à la constante énumérée d’indicateur.  
  
-   Utilisez `None` comme le nom de l’indicateur constante énumérée dont la valeur est zéro. Vous ne pouvez pas utiliser le `None` constante énumérée dans une opération AND au niveau du bit pour tester un indicateur, car le résultat est toujours zéro. Toutefois, vous pouvez effectuer un opérateur logique, pas au niveau du bit, comparez la valeur numérique et le `None` constante énumérée pour déterminer si des bits de la valeur numérique sont définis.  
  
     Si vous créez une énumération de valeurs au lieu d’une énumération d’indicateurs, il peut être utile pour créer un `None` constante énumérée. La raison est que, par défaut, la mémoire utilisée pour l’énumération est initialisée à zéro par le common language runtime. Par conséquent, si vous ne définissez pas une constante dont la valeur est égale à zéro, l’énumération contiendra une valeur non conforme lorsqu’il est créé.  
  
     S’il existe un cas par défaut évident que votre application a besoin pour représenter, envisagez d’utiliser une constante énumérée dont la valeur est égale à zéro pour représenter la valeur par défaut. S’il n’existe aucun cas par défaut, envisagez l’utilisation d’une constante énumérée dont la valeur est zéro qui signifie le cas qui n’est pas représenté par une des autres constantes énumérées.  
  
-   Ne définissez pas une valeur d’énumération uniquement pour refléter l’état de l’énumération elle-même. Par exemple, ne définissez pas une constante énumérée qui marque simplement la fin de l’énumération. Si vous avez besoin déterminer la dernière valeur de l’énumération, recherchez cette valeur explicitement. En outre, vous pouvez effectuer une vérification de plage pour la première et dernière constante énumérée si toutes les valeurs dans la plage sont valides.  
  
-   Ne spécifiez pas de constantes énumérées qui sont réservés pour une utilisation ultérieure.  
  
-   Lorsque vous définissez une méthode ou propriété qui prend une constante énumérée en tant que valeur, songez à valider la valeur. La raison est que vous pouvez convertir une valeur numérique pour le type d’énumération même si cette valeur numérique n’est pas définie dans l’énumération.  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de la `FlagsAttribute` d’attribut et montre l’effet sur le <xref:System.Enum.ToString%2A> méthode d’utilisation `FlagsAttribute` sur un <xref:System.Enum> déclaration.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 L’exemple suivant définit deux énumérations liées à la couleur, `SingleHue` et `MultiHue`. Ce dernier a le `FlagsAttribute` attribut ; n’est pas le premier. L’exemple montre la différence de comportement lorsqu’une plage d’entiers, y compris des entiers qui ne représentent pas les valeurs sous-jacentes du type énumération, sont convertis dans le type d’énumération et leurs représentations sous forme de chaîne affichée.   Par exemple, notez que 3 ne peut pas être représentée en tant qu’un `SingleHue` valeur, car 3 n’est pas la valeur sous-jacente de n’importe quel `SingleHue` membre, tandis que le `FlagsAttribute` attribut rend possible représenter 3 comme un `MultiHue` valeur de `Black, Red`.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.FlagsAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant définit un `PhoneService` énumération qui représente les formes de communication fournie par une société de téléphone. Il initialise les trois variables représentant le service fourni aux trois ménages différents et puis indique quels ménages n’ont aucun service, les ménages ont uniquement un service téléphonique de la cellule, et les ménages ont téléphone portable et se retrouver service de ligne. Enfin, elle appelle implicitement la <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> méthode pour afficher les types de service fourni pour chaque famille.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 L’exemple suivant illustre l’utilisation de la `FlagsAttribute` d’attribut et montre l’effet sur le <xref:System.Enum.ToString%2A> méthode d’utilisation `FlagsAttribute` sur un <xref:System.Enum> déclaration.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>