<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e559c8a77a543cccb4abebe829b68a7911fd75eb" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37727886" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ee6d4-101">Indique qu'une énumération peut être traitée comme un champ de bits, c'est-à-dire un ensemble d'indicateurs.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ee6d4-101">Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee6d4-102">Champs de bits sont généralement utilisés pour les listes d’éléments qui peuvent être combinées, tandis que les constantes d’énumération sont généralement utilisés pour les listes d’éléments qui s’excluent mutuellement.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-102">Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements.</span></span> <span data-ttu-id="ee6d4-103">Par conséquent, les champs de bits sont conçus pour être combinés avec une opération OR au niveau du bit pour générer des valeurs sans nom, tandis que les constantes énumérées ne sont pas.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-103">Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not.</span></span> <span data-ttu-id="ee6d4-104">Les langages varient dans leur utilisation des champs de bits par rapport aux constantes d’énumération.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-104">Languages vary in their use of bit fields compared to enumeration constants.</span></span>  
  
## <a name="attributes-of-the-flagsattribute"></a><span data-ttu-id="ee6d4-105">Attributs de FlagsAttribute</span><span class="sxs-lookup"><span data-stu-id="ee6d4-105">Attributes of the FlagsAttribute</span></span>  
 <span data-ttu-id="ee6d4-106"><xref:System.AttributeUsageAttribute> est appliqué à cette classe et sa <xref:System.AttributeUsageAttribute.Inherited%2A> propriété spécifie `false`.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-106"><xref:System.AttributeUsageAttribute> is applied to this class, and its <xref:System.AttributeUsageAttribute.Inherited%2A> property specifies `false`.</span></span> <span data-ttu-id="ee6d4-107">Cet attribut peut uniquement être appliqué aux énumérations.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-107">This attribute can only be applied to enumerations.</span></span>  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a><span data-ttu-id="ee6d4-108">Indications concernant FlagsAttribute et Enum</span><span class="sxs-lookup"><span data-stu-id="ee6d4-108">Guidelines for FlagsAttribute and Enum</span></span>  
  
-   <span data-ttu-id="ee6d4-109">Utilisez le <xref:System.FlagsAttribute> attribut personnalisé pour une énumération uniquement si une opération au niveau du bit (AND, OR exclusif ou) doit être effectuée sur une valeur numérique.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-109">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="ee6d4-110">Définir des constantes d’énumération à la puissance de deux, autrement dit, 1, 2, 4, 8 et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-110">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="ee6d4-111">Cela signifie que les indicateurs individuels dans les constantes d’énumération combinées ne se chevauchent pas.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-111">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="ee6d4-112">Envisagez de créer une constante énumérée pour des combinaisons d’indicateurs couramment utilisées.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-112">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="ee6d4-113">Par exemple, si vous avez une énumération utilisée pour les opérations d’e/s de fichier qui contient les constantes énumérées `Read = 1` et `Write = 2`, envisagez de créer la constante énumérée `ReadWrite = Read OR Write`, qui associe le `Read` et `Write` indicateurs.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-113">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="ee6d4-114">En outre, l’opération OR au niveau du bit utilisée pour combiner les indicateurs peut-être être considérées comme un concept avancé dans certains cas ne doit pas être requis pour des tâches simples.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-114">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="ee6d4-115">Soyez prudent si vous définissez un nombre négatif comme constante énumérée d’indicateur, car le nombre de positions indicateur peut être défini sur 1, ce qui peut rendre votre code source de confusion et erreurs de codage.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-115">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="ee6d4-116">Un moyen pratique pour tester si un indicateur est défini dans une valeur numérique consiste à effectuer une opération AND au niveau du bit entre la valeur numérique et la constante énumérée d’indicateur qui définit tous les bits dans la valeur numérique à zéro, qui ne correspondent pas à l’indicateur , puis vérifiez si le résultat de cette opération est égal à la constante énumérée d’indicateur.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-116">A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.</span></span>  
  
-   <span data-ttu-id="ee6d4-117">Utilisez `None` comme le nom de l’indicateur constante énumérée dont la valeur est zéro.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-117">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="ee6d4-118">Vous ne pouvez pas utiliser le `None` constante énumérée dans une opération AND au niveau du bit pour tester un indicateur, car le résultat est toujours zéro.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-118">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="ee6d4-119">Toutefois, vous pouvez effectuer un opérateur logique, pas au niveau du bit, comparez la valeur numérique et le `None` constante énumérée pour déterminer si des bits de la valeur numérique sont définis.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-119">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span>  
  
     <span data-ttu-id="ee6d4-120">Si vous créez une énumération de valeurs au lieu d’une énumération d’indicateurs, il peut être utile pour créer un `None` constante énumérée.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-120">If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a `None` enumerated constant.</span></span> <span data-ttu-id="ee6d4-121">La raison est que, par défaut, la mémoire utilisée pour l’énumération est initialisée à zéro par le common language runtime.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-121">The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="ee6d4-122">Par conséquent, si vous ne définissez pas une constante dont la valeur est égale à zéro, l’énumération contiendra une valeur non conforme lorsqu’il est créé.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-122">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
     <span data-ttu-id="ee6d4-123">S’il existe un cas par défaut évident que votre application a besoin pour représenter, envisagez d’utiliser une constante énumérée dont la valeur est égale à zéro pour représenter la valeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-123">If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default.</span></span> <span data-ttu-id="ee6d4-124">S’il n’existe aucun cas par défaut, envisagez l’utilisation d’une constante énumérée dont la valeur est zéro qui signifie le cas qui n’est pas représenté par une des autres constantes énumérées.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-124">If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="ee6d4-125">Ne définissez pas une valeur d’énumération uniquement pour refléter l’état de l’énumération elle-même.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-125">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="ee6d4-126">Par exemple, ne définissez pas une constante énumérée qui marque simplement la fin de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-126">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="ee6d4-127">Si vous avez besoin déterminer la dernière valeur de l’énumération, recherchez cette valeur explicitement.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-127">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="ee6d4-128">En outre, vous pouvez effectuer une vérification de plage pour la première et dernière constante énumérée si toutes les valeurs dans la plage sont valides.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-128">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
-   <span data-ttu-id="ee6d4-129">Ne spécifiez pas de constantes énumérées qui sont réservés pour une utilisation ultérieure.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-129">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="ee6d4-130">Lorsque vous définissez une méthode ou propriété qui prend une constante énumérée en tant que valeur, songez à valider la valeur.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-130">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="ee6d4-131">La raison est que vous pouvez convertir une valeur numérique pour le type d’énumération même si cette valeur numérique n’est pas définie dans l’énumération.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-131">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ee6d4-132">L’exemple suivant illustre l’utilisation de la `FlagsAttribute` d’attribut et montre l’effet sur le <xref:System.Enum.ToString%2A> méthode d’utilisation `FlagsAttribute` sur un <xref:System.Enum> déclaration.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-132">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 <span data-ttu-id="ee6d4-133">L’exemple suivant définit deux énumérations liées à la couleur, `SingleHue` et `MultiHue`.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-133">The following example defines two color-related enumerations, `SingleHue` and `MultiHue`.</span></span> <span data-ttu-id="ee6d4-134">Ce dernier a le `FlagsAttribute` attribut ; n’est pas le premier.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-134">The latter has the `FlagsAttribute` attribute; the former does not.</span></span> <span data-ttu-id="ee6d4-135">L’exemple montre la différence de comportement lorsqu’une plage d’entiers, y compris des entiers qui ne représentent pas les valeurs sous-jacentes du type énumération, sont convertis dans le type d’énumération et leurs représentations sous forme de chaîne affichée.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-135">The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.</span></span>   <span data-ttu-id="ee6d4-136">Par exemple, notez que 3 ne peut pas être représentée en tant qu’un `SingleHue` valeur, car 3 n’est pas la valeur sous-jacente de n’importe quel `SingleHue` membre, tandis que le `FlagsAttribute` attribut rend possible représenter 3 comme un `MultiHue` valeur de `Black, Red`.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-136">For example, note that 3 cannot be represented as a `SingleHue` value because 3 is not the underlying value of any `SingleHue` member, whereas the `FlagsAttribute` attribute makes it possible to represent 3 as a `MultiHue` value of `Black, Red`.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ee6d4-137">Initialise une nouvelle instance de la classe <see cref="T:System.FlagsAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ee6d4-137">Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ee6d4-138">L’exemple suivant définit un `PhoneService` énumération qui représente les formes de communication fournie par une société de téléphone.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-138">The following example defines a `PhoneService` enumeration that represents forms of communication provided by a telephone company.</span></span> <span data-ttu-id="ee6d4-139">Il initialise les trois variables représentant le service fourni aux trois ménages différents et puis indique quels ménages n’ont aucun service, les ménages ont uniquement un service téléphonique de la cellule, et les ménages ont téléphone portable et se retrouver service de ligne.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-139">It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service.</span></span> <span data-ttu-id="ee6d4-140">Enfin, elle appelle implicitement la <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> méthode pour afficher les types de service fourni pour chaque famille.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-140">Finally, it implicitly calls the <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> method to display the types of service provided to each household.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 <span data-ttu-id="ee6d4-141">L’exemple suivant illustre l’utilisation de la `FlagsAttribute` d’attribut et montre l’effet sur le <xref:System.Enum.ToString%2A> méthode d’utilisation `FlagsAttribute` sur un <xref:System.Enum> déclaration.</span><span class="sxs-lookup"><span data-stu-id="ee6d4-141">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>