<Type Name="TimeSpan" FullName="System.TimeSpan">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd45e0fd66c3a1f49a33f33625506b1cfb8e78da" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30730943" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.TimeSpan" />
  <TypeSignature Language="VB.NET" Value="Public Structure TimeSpan&#xA;Implements IComparable, IComparable(Of TimeSpan), IEquatable(Of TimeSpan), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un intervalle de temps.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> objet représente un intervalle de temps (durée de temps ou de temps écoulé) qui est mesuré sous la forme d’un nombre positif ou négatif de jours, heures, minutes, secondes et fractions de seconde. Le <xref:System.TimeSpan> structure peut également être utilisée pour représenter l’heure de la journée, mais uniquement si l’heure n’est pas lié à une date particulière. Dans le cas contraire, le <xref:System.DateTime> ou <xref:System.DateTimeOffset> structure doit être utilisée à la place. (Pour plus d’informations sur l’utilisation de la <xref:System.TimeSpan> structure pour refléter l’heure du jour, consultez [Choosing Between DateTime, DateTimeOffset, TimeSpan et TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).)  
  
> [!NOTE]
>  A <xref:System.TimeSpan> valeur représente un intervalle de temps et peut être exprimée comme un nombre donné de jours, heures, minutes, secondes et les millisecondes. Parce qu’elle représente un intervalle général sans référence à un début particulière ou d’un point de terminaison, il ne peut pas être exprimée en années et les mois, qui ont un nombre variable de jours. Il diffère d’un <xref:System.DateTime> valeur, qui représente une date et heure sans référence à un fuseau horaire particulier, ou un <xref:System.DateTimeOffset> valeur, qui représente un instant spécifique de temps.  
  
 La plus grande unité de temps que le <xref:System.TimeSpan> structure pour mesurer la durée est un jour. Intervalles de temps sont mesurés en jours pour des raisons de cohérence, étant donné que le nombre de jours dans l’unité de temps, telles que les mois et les années, varie.  
  
 La valeur d’un <xref:System.TimeSpan> objet est le nombre de graduations qui correspondent à l’intervalle de temps représenté. Une graduation est égale à 100 nanosecondes, ou un dix-millionième de seconde. La valeur d’un <xref:System.TimeSpan> objet peut être comprise entre <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> à <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
## <a name="instantiating-a-timespan-value"></a>Instanciation d’une valeur TimeSpan  
 Vous pouvez instancier un <xref:System.TimeSpan> valeur de plusieurs façons :  
  
-   En appelant son constructeur par défaut implicite. Cette opération crée un objet dont la valeur est <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, comme le montre l’exemple suivant.  
  
     [!code-csharp[System.TimeSpan.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#2)]
     [!code-vb[System.TimeSpan.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#2)]  
  
-   En appelant une de ses constructeurs explicites. L’exemple suivant initialise un <xref:System.TimeSpan> valeur à un nombre spécifié d’heures, minutes et secondes.  
  
     [!code-csharp[System.TimeSpan.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#3)]
     [!code-vb[System.TimeSpan.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#3)]  
  
-   En appelant une méthode ou en effectuant une opération qui retourne un <xref:System.TimeSpan> valeur. Par exemple, vous pouvez instancier un <xref:System.TimeSpan> valeur qui représente l’intervalle entre deux valeurs de date et d’heure, comme le montre l’exemple suivant.  
  
     [!code-csharp[System.TimeSpan.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#4)]
     [!code-vb[System.TimeSpan.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#4)]  
  
     Vous pouvez également initialiser un <xref:System.TimeSpan> objet à une valeur d’heure nulle de cette manière, comme le montre l’exemple suivant.  
  
     [!code-csharp[System.TimeSpan.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/zero1.cs#6)]
     [!code-vb[System.TimeSpan.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/zero1.vb#6)]  
  
     <xref:System.TimeSpan> les valeurs sont retournées par des opérateurs arithmétiques et des méthodes de la <xref:System.DateTime>, <xref:System.DateTimeOffset>, et <xref:System.TimeSpan> structures.  
  
-   En analysant la représentation sous forme de chaîne d’un <xref:System.TimeSpan> valeur. Vous pouvez utiliser la <xref:System.TimeSpan.Parse%2A> et <xref:System.TimeSpan.TryParse%2A> méthodes pour convertir des chaînes qui contiennent des intervalles de temps à <xref:System.TimeSpan> valeurs. L’exemple suivant utilise le <xref:System.TimeSpan.Parse%2A> méthode pour convertir un tableau de chaînes à <xref:System.TimeSpan> valeurs.  
  
     [!code-csharp[System.TimeSpan.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#5)]
     [!code-vb[System.TimeSpan.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#5)]  
  
     En outre, vous pouvez définir le format précis de la chaîne d’entrée pour être analysée et convertie en un <xref:System.TimeSpan> valeur en appelant le <xref:System.TimeSpan.ParseExact%2A> ou <xref:System.TimeSpan.TryParseExact%2A> (méthode).  
  
## <a name="performing-operations-on-timespan-values"></a>Exécution d’opérations sur les valeurs TimeSpan  
 Vous pouvez ajouter et soustraire des durées à l’aide de la <xref:System.TimeSpan.op_Addition%2A> et <xref:System.TimeSpan.op_Subtraction%2A> opérateurs, ou en appelant le <xref:System.TimeSpan.Add%2A> et <xref:System.TimeSpan.Subtract%2A> méthodes. Vous pouvez également comparer deux durées en appelant le <xref:System.TimeSpan.Compare%2A>, <xref:System.TimeSpan.CompareTo%2A>, et <xref:System.TimeSpan.Equals%2A> méthodes. Le <xref:System.TimeSpan> structure comprend également la <xref:System.TimeSpan.Duration%2A> et <xref:System.TimeSpan.Negate%2A> méthodes qui convertissent des intervalles de temps en valeurs positives et négatives,  
  
 La plage de <xref:System.TimeSpan> valeurs est <xref:System.TimeSpan.MinValue> à <xref:System.TimeSpan.MaxValue>.  
  
## <a name="formatting-a-timespan-value"></a>Mise en forme d’une valeur TimeSpan  
 A <xref:System.TimeSpan> valeur peut être représentée en tant que [*-*]*d*.* hh*:*mm*:*ss*.* FF*, où le signe moins facultatif indique un intervalle de temps négatif, le *d* composant est en jours, *hh* est mesuré sur une horloge de 24 heures, heures *mm* est minutes, *ss* est secondes, et *ff* fractions de seconde. Autrement dit, un intervalle de temps se compose d’un nombre positif ou négatif de jours sans heure du jour, ou un nombre de jours avec une heure, ou uniquement une heure du jour.  
  
 À partir de la [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], le <xref:System.TimeSpan> structure prend en charge la mise en forme dépendante de la culture via les surcharges de sa <xref:System.TimeSpan.ToString%2A> (méthode), qui convertit un <xref:System.TimeSpan> valeur en sa représentation de chaîne. La valeur par défaut <xref:System.TimeSpan.ToString?displayProperty=nameWithType> méthode retourne un intervalle de temps à l’aide d’un format invariant qui est identique à sa valeur de retour dans les versions précédentes du .NET Framework. Le <xref:System.TimeSpan.ToString%28System.String%29?displayProperty=nameWithType> surcharge vous permet de spécifier une chaîne de format qui définit la représentation sous forme de chaîne de l’intervalle de temps. Le <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> surcharge vous permet de spécifier une chaîne de format et la culture dont les conventions de mise en forme sont utilisées pour créer la représentation sous forme de chaîne de l’intervalle de temps. <xref:System.TimeSpan> prend en charge les chaînes de format standard et personnalisées. (Pour plus d’informations, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md).) Toutefois, seules les chaînes de format standard sont dépendantes de la culture.  
  
## <a name="restoring-legacy-timespan-formatting"></a>Restauration de mise en forme de TimeSpan hérité  
 Dans certains cas, formats de code qui a été <xref:System.TimeSpan> valeurs [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures ne fonctionne pas dans [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Cela est plus fréquent dans le code qui appelle un [< TimeSpan_LegacyFormatMode > élément](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md) méthode pour mettre en forme un <xref:System.TimeSpan> valeur avec une chaîne de format. L’exemple suivant met correctement un <xref:System.TimeSpan> valeur [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, mais lève une exception dans [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] et versions ultérieures. Notez qu’il essaie de formater un <xref:System.TimeSpan> valeur à l’aide d’un spécificateur de format non pris en charge, qui est ignoré dans [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures.  
  
 [!code-csharp[System.TimeSpan.Class.Legacy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.legacy/cs/legacycode1.cs#1)]
 [!code-vb[System.TimeSpan.Class.Legacy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.legacy/vb/legacycode1.vb#1)]  
  
 Si vous ne pouvez pas modifier le code, vous pouvez restaurer la mise en forme héritée de <xref:System.TimeSpan> les valeurs de l’une des manières suivantes :  
  
-   En créant un fichier de configuration qui contient la [< TimeSpan_LegacyFormatMode > élément](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md). Définition de cet élément `enabled` attribut `true` restaure hérité <xref:System.TimeSpan> mise en forme sur chaque application.  
  
-   En définissant la compatibilité de « NetFx40_TimeSpanLegacyFormatMode » commutateur lorsque vous créez un domaine d’application. Cela permet de hérité <xref:System.TimeSpan> mise en forme selon le domaine d’application. L’exemple suivant crée un domaine d’application qui utilise hérité <xref:System.TimeSpan> mise en forme.  
  
     [!code-csharp[System.TimeSpan.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.appdomain/cs/perappdomain1.cs#1)]
     [!code-vb[System.TimeSpan.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/perappdomain1.vb#1)]  
  
     Lorsque le code suivant s’exécute dans le nouveau domaine d’application, il rétablit hérité <xref:System.TimeSpan> comportement de mise en forme.  
  
     [!code-csharp[System.TimeSpan.Class.AppDomain#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.appdomain/cs/showtimespan.cs#2)]
     [!code-vb[System.TimeSpan.Class.AppDomain#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/showtimespan.vb#2)]  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.TimeSpan> objet qui représente la différence entre deux dates. Il affiche ensuite le <xref:System.TimeSpan> propriétés de l’objet.  
  
 [!code-csharp[System.TimeSpan.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/structure1.cs#1)]
 [!code-vb[System.TimeSpan.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/structure1.vb#1)]  
 [!code-powershell[System.TimeSpan.Class#1](~/samples/snippets/powershell/VS_Snippets_CLR_System/system.timespan.class/ps/structure1.ps1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.Globalization.Calendar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.TimeSpan" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(long ticks);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Période exprimée en unités de 100 nanosecondes.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.TimeSpan" /> avec le nombre de graduations spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une graduation représente 100 nanosecondes, ou un dix-millionième de seconde. Il existe 10 000 graduations dans une milliseconde.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la surcharge du constructeur qui initialise un <xref:System.TimeSpan> à un nombre de graduations spécifié.  
  
 [!code-cpp[System.TimeSpan.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctorl.cpp#1)]
 [!code-csharp[System.TimeSpan.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctorl.cs#1)]
 [!code-vb[System.TimeSpan.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctorl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Ticks" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hours As Integer, minutes As Integer, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int hours, int minutes, int seconds);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hours">Nombre d'heures.</param>
        <param name="minutes">Nombre de minutes.</param>
        <param name="seconds">Nombre de secondes.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.TimeSpan" /> avec un nombre d'heures, de minutes et de secondes spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spécifié `hours`, `minutes`, et `seconds` sont convertis en graduations et cette valeur initialise cette instance.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la surcharge du constructeur qui initialise un <xref:System.TimeSpan> à un nombre spécifié d’heures, minutes et secondes.  
  
 [!code-cpp[System.TimeSpan.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriii.cpp#2)]
 [!code-csharp[System.TimeSpan.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriii.cs#2)]
 [!code-vb[System.TimeSpan.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriii.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Ces paramètres spécifient une valeur <see cref="T:System.TimeSpan" /> inférieure à <see cref="F:System.TimeSpan.MinValue" /> ou supérieure à <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (days As Integer, hours As Integer, minutes As Integer, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int days, int hours, int minutes, int seconds);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Nombre de jours.</param>
        <param name="hours">Nombre d'heures.</param>
        <param name="minutes">Nombre de minutes.</param>
        <param name="seconds">Nombre de secondes.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.TimeSpan" /> avec un nombre de jours, d'heures, de minutes et de secondes spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spécifié `days`, `hours`, `minutes`, et `seconds` sont convertis en graduations et cette valeur initialise cette instance.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la surcharge du constructeur qui initialise un <xref:System.TimeSpan> à un nombre spécifié de jours, heures, minutes et secondes.  
  
 [!code-cpp[System.TimeSpan.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiii.cpp#3)]
 [!code-csharp[System.TimeSpan.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriiii.cs#3)]
 [!code-vb[System.TimeSpan.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiii.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Ces paramètres spécifient une valeur <see cref="T:System.TimeSpan" /> inférieure à <see cref="F:System.TimeSpan.MinValue" /> ou supérieure à <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds, int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (days As Integer, hours As Integer, minutes As Integer, seconds As Integer, milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Nombre de jours.</param>
        <param name="hours">Nombre d'heures.</param>
        <param name="minutes">Nombre de minutes.</param>
        <param name="seconds">Nombre de secondes.</param>
        <param name="milliseconds">Nombre de millisecondes.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.TimeSpan" /> avec un nombre de jours, d'heures, de minutes, de secondes et de millisecondes spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spécifié `days`, `hours`, `minutes`, `seconds`, et `milliseconds` sont convertis en graduations et cette valeur initialise cette instance.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la surcharge du constructeur qui initialise un <xref:System.TimeSpan> à un nombre spécifié de jours, heures, minutes, secondes et les millisecondes.  
  
 [!code-cpp[System.TimeSpan.Ctor#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiiii.cpp#4)]
 [!code-csharp[System.TimeSpan.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriiiii.cs#4)]
 [!code-vb[System.TimeSpan.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiiii.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Ces paramètres spécifient une valeur <see cref="T:System.TimeSpan" /> inférieure à <see cref="F:System.TimeSpan.MinValue" /> ou supérieure à <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TimeSpan Add (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Add(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (ts As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Add(TimeSpan ts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">Intervalle de temps à ajouter.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.TimeSpan" /> dont la valeur est la somme de l'objet <see cref="T:System.TimeSpan" /> spécifié et de cette instance.</summary>
        <returns>Nouvel objet qui représente la valeur de cette instance plus la valeur de <paramref name="ts" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour doit être comprise entre <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> et <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>; sinon, une exception est levée.  
  
 La valeur de retour est un nouveau <xref:System.TimeSpan>; la version d’origine <xref:System.TimeSpan> n’est pas modifié.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.TimeSpan.Add%2A> méthode pour ajouter chaque élément dans un tableau d’intervalles de temps à une base de <xref:System.TimeSpan> valeur.  
  
 [!code-csharp[System.TimeSpan.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.add/cs/add1.cs#1)]
 [!code-vb[System.TimeSpan.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.add/vb/add1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">L’objet <see cref="T:System.TimeSpan" /> obtenu est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As TimeSpan, t2 As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Premier intervalle de temps à comparer.</param>
        <param name="t2">Second intervalle de temps à comparer.</param>
        <summary>Compare deux valeurs <see cref="T:System.TimeSpan" /> et retourne un entier qui indique si la première valeur est plus courte, identique ou plus longue que la deuxième valeur.</summary>
        <returns>Une des valeurs suivantes.  
  
 <list type="table"><listheader><term> Valeur  
  
 </term><description> Description  
  
 </description></listheader><item><term> -1  
  
 </term><description><paramref name="t1" /> est plus court que <paramref name="t2" />.  
  
 </description></item><item><term> 0  
  
 </term><description><paramref name="t1" /> est égal à <paramref name="t2" />.  
  
 </description></item><item><term> 1  
  
 </term><description><paramref name="t1" /> est plus long que <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant utilise le <xref:System.TimeSpan.Compare%2A> méthode pour comparer plusieurs <xref:System.TimeSpan> objets avec un <xref:System.TimeSpan> objet dont la valeur est un intervalle de temps de 2 heures.  
  
 [!code-csharp[System.TimeSpan.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.compare/cs/compare1.cs#1)]
 [!code-vb[System.TimeSpan.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compare cette instance à un objet spécifié ou à un objet <see cref="T:System.TimeSpan" /> et retourne un entier qui indique si cette instance est plus courte, identique ou plus longue que l'objet spécifié ou l'objet <see cref="T:System.TimeSpan" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les deux surcharges de la <xref:System.TimeSpan.CompareTo%2A> méthode retourne un nombre signé qui indique la valeur relative de cette instance et le `value` argument, comme indiqué dans le tableau suivant.  
  
|Value|Description |  
|-----------|-----------------|  
|Inférieure à zéro|Cette instance est plus courte que `value`.|  
|Zéro|Cette instance est la même que `value`.|  
|Supérieure à zéro|Cette instance est plus longue que `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet à comparer ou <see langword="null" />.</param>
        <summary>Compare cette instance à un objet spécifié et retourne un entier qui indique si cette instance est plus courte, de même longueur ou plus longue que l'objet spécifié.</summary>
        <returns>Une des valeurs suivantes.  
  
 <list type="table"><listheader><term> Valeur  
  
 </term><description> Description  
  
 </description></listheader><item><term> -1  
  
 </term><description> Cette instance est plus courte que <paramref name="value" />.  
  
 </description></item><item><term> 0  
  
 </term><description> Cette instance est égale à <paramref name="value" />.  
  
 </description></item><item><term> 1  
  
 </term><description> Cette instance est plus longue que <paramref name="value" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 N’importe quelle instance de <xref:System.TimeSpan>, quelle que soit sa valeur, est considéré comme supérieur à `null`.  
  
 Le `value` paramètre doit être une instance de <xref:System.TimeSpan> ou `null`; sinon, une exception est levée.  
  
   
  
## Examples  
 L’exemple suivant compare plusieurs <xref:System.TimeSpan> structures et autres objets à une référence <xref:System.TimeSpan> à l’aide de la structure du <xref:System.TimeSpan.CompareTo%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp#1)]
 [!code-csharp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/cto_eq_obj.cs#1)]
 [!code-vb[System.TimeSpan.Compare_Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> n'est pas un <see cref="T:System.TimeSpan" />.</exception>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Objet à comparer à cette instance.</param>
        <summary>Compare cette instance à un objet <see cref="T:System.TimeSpan" /> spécifié et retourne un entier qui indique si cette instance est plus courte, identique ou plus longue que l'objet <see cref="T:System.TimeSpan" />.</summary>
        <returns>Nombre signé indiquant les valeurs relatives de cette instance et <paramref name="value" />.  
  
 <list type="table"><listheader><term> Valeur  
  
 </term><description> Description  
  
 </description></listheader><item><term> Entier négatif  
  
 </term><description> Cette instance est plus courte que <paramref name="value" />.  
  
 </description></item><item><term> Zéro  
  
 </term><description> Cette instance est égale à <paramref name="value" />.  
  
 </description></item><item><term> Entier positif  
  
 </term><description> Cette instance est plus longue que <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode implémente la <xref:System.IComparable%601?displayProperty=nameWithType> de l’interface et effectue légèrement meilleures que les <xref:System.TimeSpan.CompareTo%2A?displayProperty=nameWithType> (méthode), car il n’a pas à convertir le `value` paramètre à un objet.  
  
   
  
## Examples  
 L’exemple suivant montre les versions génériques et non génériques de la <xref:System.TimeSpan.CompareTo%2A> méthode pour plusieurs types valeur et référence.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public int Days { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Days" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Days" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Days As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Days { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « jours » de l'intervalle de temps représenté par la structure <see cref="T:System.TimeSpan" /> actuelle.</summary>
        <value>Composant jour de cette instance. La valeur de retour peut être positive ou négative.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> valeur peut être représentée en tant que [*-*]*d*.* hh*:*mm*:*ss*.* FF*, où le signe moins facultatif indique un intervalle de temps négatif, le *d* composant est en jours, *hh* est mesuré sur une horloge de 24 heures, heures *mm* est minutes, *ss* est secondes, et *ff* fractions de seconde. La valeur de la <xref:System.TimeSpan.Days%2A> propriété est le composant « jour », *d*.  
  
 Le <xref:System.TimeSpan.Days%2A> propriété représente jours entiers, alors que le <xref:System.TimeSpan.TotalDays%2A> propriété représente des jours entiers et partiels.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets et affiche le <xref:System.TimeSpan.Days%2A> propriété de chacun.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalDays" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public TimeSpan Divide (double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Divide(float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Divide (divisor As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Divide(double divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="divisor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="divisor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public double Divide (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Divide(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Divide (ts As TimeSpan) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Divide(TimeSpan ts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Duration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Duration" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration () As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Duration();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un nouvel objet <see cref="T:System.TimeSpan" /> dont la valeur représente la valeur absolue de l'objet <see cref="T:System.TimeSpan" /> actuel.</summary>
        <returns>Nouvel objet dont la valeur est la valeur absolue de l'objet <see cref="T:System.TimeSpan" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant applique la <xref:System.TimeSpan.Duration%2A> méthode à plusieurs <xref:System.TimeSpan> objets.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">La valeur de cette instance est <see cref="F:System.TimeSpan.MinValue" />.</exception>
        <altmember cref="P:System.TimeSpan.Ticks" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une valeur indiquant si deux instances de <see cref="T:System.TimeSpan" /> sont égales.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet à comparer à cette instance.</param>
        <summary>Retourne une valeur indiquant si cette instance équivaut à un objet spécifié.</summary>
        <returns>
          <see langword="true" /> si <paramref name="value" /> est un objet <see cref="T:System.TimeSpan" /> qui représente le même intervalle de temps que la structure <see cref="T:System.TimeSpan" /> actuelle ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant compare plusieurs <xref:System.TimeSpan> et d’autres objets à une référence <xref:System.TimeSpan> à l’aide de la <xref:System.TimeSpan.Equals%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp#1)]
 [!code-csharp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/cto_eq_obj.cs#1)]
 [!code-vb[System.TimeSpan.Compare_Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeSpan obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.TimeSpan obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeSpan obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">Objet à comparer à cette instance.</param>
        <summary>Retourne une valeur indiquant si cette instance est égale à un objet <see cref="T:System.TimeSpan" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si <paramref name="obj" /> représente le même intervalle de temps que cette instance ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode implémente la <xref:System.IEquatable%601?displayProperty=nameWithType> de l’interface et effectue légèrement meilleures que <xref:System.TimeSpan.Equals%2A> , car il n’a pas à convertir le `obj` paramètre d’objet.  
  
   
  
## Examples  
 L’exemple suivant montre les versions génériques et non génériques de la <xref:System.TimeSpan.CompareTo%2A> méthode pour plusieurs types valeur et référence.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
        <altmember cref="Overload:System.TimeSpan.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Premier intervalle de temps à comparer.</param>
        <param name="t2">Second intervalle de temps à comparer.</param>
        <summary>Retourne une valeur qui indique si deux instances spécifiées de <see cref="T:System.TimeSpan" /> sont égales.</summary>
        <returns>
          <see langword="true" /> si les valeurs de <paramref name="t1" /> et de <paramref name="t2" /> sont égales ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant compare plusieurs <xref:System.TimeSpan> objets à une référence <xref:System.TimeSpan> de l’objet à l’aide de la méthode statique <xref:System.TimeSpan.Equals%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/comp_equal.cpp#2)]
 [!code-csharp[System.TimeSpan.Compare_Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/comp_equal.cs#2)]
 [!code-vb[System.TimeSpan.Compare_Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/comp_equal.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromDays">
      <MemberSignature Language="C#" Value="public static TimeSpan FromDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromDays (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromDays(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de jours, précis à la milliseconde près.</param>
        <summary>Retourne un <see cref="T:System.TimeSpan" /> qui représente un nombre de jours spécifié, dont la spécification est précise à la milliseconde près.</summary>
        <returns>Objet qui représente <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `value` paramètre est converti en millisecondes, qui est converti en graduations, et ce nombre de graduations est utilisé pour initialiser la nouvelle <xref:System.TimeSpan>. Par conséquent, `value` sont uniquement considérées comme précises à la milliseconde. Notez que, en raison de la perte de précision de la <xref:System.Double> type de données, cette conversion peut provoquer un <xref:System.OverflowException> pour les valeurs qui sont proches mais encore dans la plage de <xref:System.TimeSpan.MinValue> ou <xref:System.TimeSpan.MaxValue>. Par exemple, cela provoque une <xref:System.OverflowException> lors de la tentative suivante d’instancier un <xref:System.TimeSpan> objet.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#2)]
 [!code-vb[System.TimeSpan.FromMinutes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#2)]  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la <xref:System.TimeSpan.FromDays%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.From#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromdays.cpp#6)]
 [!code-csharp[System.TimeSpan.From#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromdays.cs#6)]
 [!code-vb[System.TimeSpan.From#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromdays.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.PositiveInfinity" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> est égal à <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromHours">
      <MemberSignature Language="C#" Value="public static TimeSpan FromHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHours (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromHours(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre d'heures, précis à la milliseconde près.</param>
        <summary>Retourne un <see cref="T:System.TimeSpan" /> qui représente un nombre d'heures spécifié, dont la spécification est précise à la milliseconde près.</summary>
        <returns>Objet qui représente <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `value` paramètre est converti en millisecondes, qui est converti en graduations, et ce nombre de graduations est utilisé pour initialiser la nouvelle <xref:System.TimeSpan>. Par conséquent, `value` sont uniquement considérées comme précises à la milliseconde. Notez que, en raison de la perte de précision de la <xref:System.Double> type de données, cette conversion peut générer un <xref:System.OverflowException> pour les valeurs qui sont proches mais encore dans la plage de <xref:System.TimeSpan.MinValue> ou <xref:System.TimeSpan.MaxValue>. Par exemple, cela provoque une <xref:System.OverflowException> lors de la tentative suivante d’instancier un <xref:System.TimeSpan> objet.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#3)]
 [!code-vb[System.TimeSpan.FromMinutes#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#3)]  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la <xref:System.TimeSpan.FromHours%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.From#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromhours.cpp#5)]
 [!code-csharp[System.TimeSpan.From#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromhours.cs#5)]
 [!code-vb[System.TimeSpan.From#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromhours.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.PositiveInfinity" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> est égal à <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromMilliseconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMilliseconds (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromMilliseconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de millisecondes.</param>
        <summary>Retourne un <see cref="T:System.TimeSpan" /> qui représente un nombre spécifié de millisecondes.</summary>
        <returns>Objet qui représente <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `value` paramètre est converti en graduations, et ce nombre de graduations est utilisé pour initialiser la nouvelle <xref:System.TimeSpan>. Par conséquent, `value` sont uniquement considérées comme précises à la milliseconde. Notez que, en raison de la perte de précision de la <xref:System.Double> type de données, cette conversion peut générer un <xref:System.OverflowException> pour les valeurs qui sont proches mais encore dans la plage de <xref:System.TimeSpan.MinValue> ou <xref:System.TimeSpan.MaxValue>. Par exemple, cela provoque une <xref:System.OverflowException> lors de la tentative suivante d’instancier un <xref:System.TimeSpan> objet.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#4)]
 [!code-vb[System.TimeSpan.FromMinutes#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#4)]  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la <xref:System.TimeSpan.FromMilliseconds%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.From#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/frommillisec.cpp#2)]
 [!code-csharp[System.TimeSpan.From#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/frommillisec.cs#2)]
 [!code-vb[System.TimeSpan.From#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/frommillisec.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.PositiveInfinity" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> est égal à <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromMinutes">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMinutes (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromMinutes(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de minutes, précis à la milliseconde près.</param>
        <summary>Retourne un <see cref="T:System.TimeSpan" /> qui représente un nombre de minutes spécifié, dont la spécification est précise à la milliseconde près.</summary>
        <returns>Objet qui représente <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `value` paramètre est converti en millisecondes, qui est converti en graduations, et ce nombre de graduations est utilisé pour initialiser la nouvelle <xref:System.TimeSpan>. Par conséquent, `value` sont uniquement considérées comme précises à la milliseconde. Notez que, en raison de la perte de précision de la <xref:System.Double> type de données, cette conversion peut générer un <xref:System.OverflowException> pour les valeurs qui sont proches mais encore dans la plage de <xref:System.TimeSpan.MinValue> ou <xref:System.TimeSpan.MaxValue>. Par exemple, cela provoque une <xref:System.OverflowException> lors de la tentative suivante d’instancier un <xref:System.TimeSpan> objet.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#1)]
 [!code-vb[System.TimeSpan.FromMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#1)]  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la <xref:System.TimeSpan.FromMinutes%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.From#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromminutes.cpp#4)]
 [!code-csharp[System.TimeSpan.From#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromminutes.cs#4)]
 [!code-vb[System.TimeSpan.From#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromminutes.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.PositiveInfinity" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> est égal à <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromSeconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSeconds (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromSeconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de secondes, précis à la milliseconde près.</param>
        <summary>Retourne un <see cref="T:System.TimeSpan" /> qui représente un nombre de secondes spécifié, dont la spécification est précise à la milliseconde près.</summary>
        <returns>Objet qui représente <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `value` paramètre est converti en millisecondes, qui est converti en graduations, et ce nombre de graduations est utilisé pour initialiser la nouvelle <xref:System.TimeSpan>. Par conséquent, `value` sont uniquement considérées comme précises à la milliseconde. Notez que, en raison de la perte de précision de la <xref:System.Double> type de données, cela peut générer une <xref:System.OverflowException> pour les valeurs qui sont proches mais encore dans la plage de <xref:System.TimeSpan.MinValue> ou <xref:System.TimeSpan.MaxValue>, c’est la cause d’une <xref:System.OverflowException>, par exemple, dans le tentative suivante d’instancier un <xref:System.TimeSpan> objet.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#5)]
 [!code-vb[System.TimeSpan.FromMinutes#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#5)]  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la <xref:System.TimeSpan.FromSeconds%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.From#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromseconds.cpp#3)]
 [!code-csharp[System.TimeSpan.From#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromseconds.cs#3)]
 [!code-vb[System.TimeSpan.From#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromseconds.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.PositiveInfinity" />.  
  
 - ou -  
  
 <paramref name="value" /> est <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> est égal à <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromTicks">
      <MemberSignature Language="C#" Value="public static TimeSpan FromTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromTicks (value As Long) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromTicks(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de graduations qui représentent une durée.</param>
        <summary>Retourne un <see cref="T:System.TimeSpan" /> qui représente une durée spécifiée, où la spécification est en unités de graduations.</summary>
        <returns>Objet qui représente <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit d’une méthode pratique ayant le même comportement que le <xref:System.TimeSpan.%23ctor%28System.Int64%29?displayProperty=nameWithType> constructeur. Une graduation représente 100 nanosecondes, ou un dix-millionième de seconde. Il existe 10 000 graduations dans une milliseconde.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets à l’aide de la <xref:System.TimeSpan.FromTicks%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.From#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromticks.cpp#1)]
 [!code-csharp[System.TimeSpan.From#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromticks.cs#1)]
 [!code-vb[System.TimeSpan.From#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un code de hachage pour cette instance.</summary>
        <returns>Code de hachage d'un entier signé 32 bits.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deux <xref:System.TimeSpan> peuvent avoir le même code de hachage bien qu’ils représentent différentes valeurs temporelles.  
  
   
  
## Examples  
 L’exemple suivant génère les codes de hachage de plusieurs <xref:System.TimeSpan> objets à l’aide de la <xref:System.TimeSpan.GetHashCode%2A> (méthode).  
  
 [!code-cpp[System.TimeSpan.GetHashCode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/CPP/hashcode.cpp#1)]
 [!code-csharp[System.TimeSpan.GetHashCode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/CS/hashcode.cs#1)]
 [!code-vb[System.TimeSpan.GetHashCode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/VB/hashcode.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hours">
      <MemberSignature Language="C#" Value="public int Hours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Hours" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hours As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hours { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « heures » de l'intervalle de temps représenté par la structure <see cref="T:System.TimeSpan" /> actuelle.</summary>
        <value>Composant « heure » de la structure <see cref="T:System.TimeSpan" /> actuelle. La valeur de retour est comprise entre -23 et 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> valeur peut être représentée en tant que [*-*]*d*.* hh*:*mm*:*ss*.* FF*, où le signe moins facultatif indique un intervalle de temps négatif, le *d* composant est en jours, *hh* est mesuré sur une horloge de 24 heures, heures *mm* est minutes, *ss* est secondes, et *ff* fractions de seconde. La valeur de la <xref:System.TimeSpan.Hours%2A> propriété est le composant « heures », *hh*.  
  
 Le <xref:System.TimeSpan.Hours%2A> propriété représente heures entières, alors que le <xref:System.TimeSpan.TotalHours%2A> propriété représente les heures entières et partielles.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets et affiche le <xref:System.TimeSpan.Hours%2A> propriété de chacun.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan MaxValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la valeur maximale de <see cref="T:System.TimeSpan" />. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de ce champ est équivalente à <xref:System.Int64.MaxValue?displayProperty=nameWithType> graduations. La représentation sous forme de chaîne de cette valeur est positive 10675199.02:48:05.4775807 ou légèrement plus que 10,675,199 jours.  
  
   
  
## Examples  
 L’exemple suivant fait référence à et affiche la valeur de la <xref:System.TimeSpan.MaxValue> champ.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Milliseconds">
      <MemberSignature Language="C#" Value="public int Milliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Milliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Milliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Milliseconds As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Milliseconds { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « millisecondes » de l'intervalle de temps représenté par la structure <see cref="T:System.TimeSpan" /> actuelle.</summary>
        <value>Composant « milliseconde » de la structure <see cref="T:System.TimeSpan" /> actuelle. La valeur de retour est comprise entre -999 et 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> valeur peut être représentée en tant que [*-*]*d*.* hh*:*mm*:*ss*.* FF*, où le signe moins facultatif indique un intervalle de temps négatif, le *d* composant est en jours, *hh* est mesuré sur une horloge de 24 heures, heures *mm* est minutes, *ss* est secondes, et *ff* fractions de seconde. La valeur de la <xref:System.TimeSpan.Milliseconds%2A> propriété est le deuxième composant fractions de seconde, *ff*.  
  
 Le <xref:System.TimeSpan.Milliseconds%2A> propriété représente des millisecondes entières, alors que le <xref:System.TimeSpan.TotalMilliseconds%2A> propriété représente des millisecondes entières et partielles.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets et affiche le <xref:System.TimeSpan.Milliseconds%2A> propriété de chacun.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="Minutes">
      <MemberSignature Language="C#" Value="public int Minutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Minutes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minutes As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minutes { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « minutes » de l'intervalle de temps représenté par la structure <see cref="T:System.TimeSpan" /> actuelle.</summary>
        <value>Composant « minutes» de la structure <see cref="T:System.TimeSpan" /> actuelle. La valeur de retour est comprise entre -59 et 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> valeur peut être représentée en tant que [*-*]*d*.* hh*:*mm*:*ss*.* FF*, où le signe moins facultatif indique un intervalle de temps négatif, le *d* composant est en jours, *hh* est mesuré sur une horloge de 24 heures, heures *mm* est minutes, *ss* est secondes, et *ff* fractions de seconde. La valeur de la <xref:System.TimeSpan.Minutes%2A> propriété est le composant « minutes », *mm*.  
  
 Le <xref:System.TimeSpan.Minutes%2A> propriété représente des minutes entières, alors que le <xref:System.TimeSpan.TotalMinutes%2A> propriété représente des minutes entières et partielles.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets et affiche le <xref:System.TimeSpan.Minutes%2A> propriété de chacun.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MinValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan MinValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la valeur minimale de <see cref="T:System.TimeSpan" />. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de ce champ est équivalente à <xref:System.Int64.MinValue?displayProperty=nameWithType> graduations. La représentation sous forme de chaîne de cette valeur est négative 10675199.02:48:05.4775808 ou légèrement plus que 10,675,199 jours négatifs.  
  
   
  
## Examples  
 L’exemple suivant fait référence à et affiche la valeur de la <xref:System.TimeSpan.MinValue> champ.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public TimeSpan Multiply (double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Multiply(float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Multiply(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Multiply (factor As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Multiply(double factor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public TimeSpan Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Function Negate () As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Negate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un nouvel objet <see cref="T:System.TimeSpan" /> dont la valeur correspond à la valeur inversée de cette instance.</summary>
        <returns>Nouvel objet ayant la même valeur numérique que cette instance, mais avec le signe opposé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant applique la <xref:System.TimeSpan.Negate%2A> méthode à plusieurs <xref:System.TimeSpan> objets.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">La valeur négative de cette instance ne peut pas être représentée par <see cref="T:System.TimeSpan" /> ; cela signifie que la valeur de cette instance est <see cref="F:System.TimeSpan.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static TimeSpan operator + (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Addition(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (t1 As TimeSpan, t2 As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator +(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Premier intervalle de temps à ajouter.</param>
        <param name="t2">Second intervalle de temps à ajouter.</param>
        <summary>Ajoute les deux instances spécifiées de <see cref="T:System.TimeSpan" />.</summary>
        <returns>Objet dont la valeur est égale à la somme des valeurs de <paramref name="t1" /> et <paramref name="t2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.op_Addition%2A> méthode définit l’opérateur d’addition pour <xref:System.TimeSpan> valeurs. Il permet de code semblable au suivant :  
  
 [!code-csharp[System.TimeSpan.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.operators/cs/operators1.cs#1)]
 [!code-vb[System.TimeSpan.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/operators1.vb#1)]  
  
 Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.TimeSpan.Add%2A> méthode à la place.  
  
 La méthode équivalente pour cet opérateur est <xref:System.TimeSpan.Add%28System.TimeSpan%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">L’objet <see cref="T:System.TimeSpan" /> obtenu est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static TimeSpan operator / (TimeSpan timeSpan, double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Division(valuetype System.TimeSpan timeSpan, float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator /(TimeSpan timeSpan, double divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
        <Parameter Name="divisor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="timeSpan">To be added.</param>
        <param name="divisor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static double operator / (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Division(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (t1 As TimeSpan, t2 As TimeSpan) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator /(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">To be added.</param>
        <param name="t2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Premier intervalle de temps à comparer.</param>
        <param name="t2">Second intervalle de temps à comparer.</param>
        <summary>Indique si deux instances de <see cref="T:System.TimeSpan" /> sont égales.</summary>
        <returns>
          <see langword="true" /> si les valeurs de <paramref name="t1" /> et de <paramref name="t2" /> sont égales ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[La méthode équivalente pour cet opérateur est <xref:System.TimeSpan.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant compare plusieurs <xref:System.TimeSpan> objets à une référence <xref:System.TimeSpan> à l’aide de la <xref:System.TimeSpan.op_Equality%2A> opérateur.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Premier intervalle de temps à comparer.</param>
        <param name="t2">Second intervalle de temps à comparer.</param>
        <summary>Indique si un <see cref="T:System.TimeSpan" /> spécifié est supérieur à un autre <see cref="T:System.TimeSpan" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si la valeur de <paramref name="t1" /> est supérieure à celle de <paramref name="t2" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[La méthode équivalente pour cet opérateur est <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant compare plusieurs <xref:System.TimeSpan> objets à une référence <xref:System.TimeSpan> à l’aide de la <xref:System.TimeSpan.op_GreaterThan%2A> opérateur.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Premier intervalle de temps à comparer.</param>
        <param name="t2">Second intervalle de temps à comparer.</param>
        <summary>Indique si un <see cref="T:System.TimeSpan" /> spécifié est supérieur ou égal à un autre <see cref="T:System.TimeSpan" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si la valeur de <paramref name="t1" /> est supérieure ou égale à celle de <paramref name="t2" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[La méthode équivalente pour cet opérateur est <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant compare plusieurs <xref:System.TimeSpan> objets à une référence <xref:System.TimeSpan> à l’aide de la <xref:System.TimeSpan.op_GreaterThanOrEqual%2A> opérateur.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Premier intervalle de temps à comparer.</param>
        <param name="t2">Second intervalle de temps à comparer.</param>
        <summary>Indique si deux instances de <see cref="T:System.TimeSpan" /> ne sont pas égales.</summary>
        <returns>
          <see langword="true" /> si les valeurs de <paramref name="t1" /> et de <paramref name="t2" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[La méthode équivalente pour cet opérateur est <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant compare plusieurs <xref:System.TimeSpan> objets à une référence <xref:System.TimeSpan> à l’aide de la <xref:System.TimeSpan.op_Inequality%2A> opérateur.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Premier intervalle de temps à comparer.</param>
        <param name="t2">Second intervalle de temps à comparer.</param>
        <summary>Indique si un <see cref="T:System.TimeSpan" /> spécifié est inférieur à un autre <see cref="T:System.TimeSpan" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si la valeur de <paramref name="t1" /> est inférieure à celle de <paramref name="t2" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[La méthode équivalente pour cet opérateur est <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant compare plusieurs <xref:System.TimeSpan> objets à une référence <xref:System.TimeSpan> à l’aide de la <xref:System.TimeSpan.op_LessThan%2A> opérateur.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Premier intervalle de temps à comparer.</param>
        <param name="t2">Second intervalle de temps à comparer.</param>
        <summary>Indique si un <see cref="T:System.TimeSpan" /> spécifié est inférieur ou égal à un autre <see cref="T:System.TimeSpan" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si la valeur de <paramref name="t1" /> est inférieure ou égale à celle de <paramref name="t2" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[La méthode équivalente pour cet opérateur est <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant compare plusieurs <xref:System.TimeSpan> objets à une référence <xref:System.TimeSpan> à l’aide de la <xref:System.TimeSpan.op_LessThanOrEqual%2A> opérateur.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan operator * (double factor, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(float64 factor, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator *(double factor, TimeSpan timeSpan);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <param name="timeSpan">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan operator * (TimeSpan timeSpan, double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(valuetype System.TimeSpan timeSpan, float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator *(TimeSpan timeSpan, double factor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
        <Parameter Name="factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="timeSpan">To be added.</param>
        <param name="factor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (t1 As TimeSpan, t2 As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Diminuende.</param>
        <param name="t2">Diminuteur.</param>
        <summary>Soustrait un <see cref="T:System.TimeSpan" /> spécifié d'un autre <see cref="T:System.TimeSpan" /> spécifié.</summary>
        <returns>Objet dont la valeur est le résultat de la valeur de <paramref name="t1" /> moins la valeur de <paramref name="t2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[La méthode équivalente pour cet opérateur est <xref:System.TimeSpan.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant utilise le <xref:System.TimeSpan> opérateur de soustraction pour calculer la longueur totale de la journée de travail hebdomadaire. Elle utilise également le <xref:System.TimeSpan> opérateur d’addition pour calculer la durée totale des sauts quotidiennes d’avant de l’utiliser dans une opération de soustraction pour calculer le total réel quotidiennement les temps de travail.  
  
 [!code-csharp[System.TimeSpan.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.operators/cs/Subtraction1.cs#2)]
 [!code-vb[System.TimeSpan.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/Subtraction1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">La valeur de retour est inférieure à <see cref="F:System.TimeSpan.MinValue" /> ou supérieure à <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryNegation(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (t As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">Intervalle de temps à inverser.</param>
        <summary>Retourne un <see cref="T:System.TimeSpan" /> dont la valeur correspond à la valeur inversée de l'instance spécifiée.</summary>
        <returns>Objet ayant la même valeur numérique que cette instance, mais de signe contraire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[La méthode équivalente pour cet opérateur est <xref:System.TimeSpan.Negate?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant applique la <xref:System.TimeSpan.op_UnaryNegation%2A> opérateur à plusieurs <xref:System.TimeSpan> objets.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">La valeur négative de cette instance ne peut pas être représentée par <see cref="T:System.TimeSpan" /> ; cela signifie que la valeur de cette instance est <see cref="F:System.TimeSpan.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static TimeSpan operator + (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryPlus(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (t As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator +(TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">Intervalle de temps à retourner.</param>
        <summary>Retourne l'instance spécifiée de <see cref="T:System.TimeSpan" />.</summary>
        <returns>Intervalle de temps spécifié par <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant applique la <xref:System.TimeSpan.op_UnaryPlus%2A> opérateur à plusieurs <xref:System.TimeSpan> objets.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps en <see cref="T:System.TimeSpan" /> équivalent.</summary>
        <altmember cref="Overload:System.TimeSpan.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps en <see cref="T:System.TimeSpan" /> équivalent.</summary>
        <returns>Intervalle de temps qui correspond à <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `s` paramètre contient une spécification d’intervalle de temps sous la forme :  
  
 [*ws*] [-] { *d* &#124; [*d*.] *hh*:*mm*[ :*ss*[.* FF*]]} [*ws*]  
  
 Les éléments entre crochets ([ et ]) sont facultatifs. Une sélection dans la liste d’alternatives entourés accolades ({et}) et séparés par des barres verticales (&#124;) est requis. Le tableau suivant décrit chaque élément.  
  
|Élément|Description |  
|-------------|-----------------|  
|*ws*|Espace blanc facultatif.|  
|-|Un signe moins facultatif, qui indique une valeur négative <xref:System.TimeSpan>.|  
|*d*|Jours, allant de 0 à 10675199.|  
|.|Symbole dépendante de la culture qui sépare les jours des heures. Le format invariant utilise un point («. ») caractères.|  
|*hh*|Heures, allant de 0 à 23.|  
|:|Le symbole de séparateur d’heure dépendant de la culture. Le format invariant utilise un signe deux-points (« : ») caractères.|  
|*mm*|Minutes, entre 0 et 59.|  
|*ss*|Facultatif secondes, entre 0 et 59.|  
|*.*|Symbole dépendante de la culture qui sépare les secondes des fractions de seconde. Le format invariant utilise un point («. ») caractères.|  
|*ff*|Facultatif en fractions de seconde, constitué de chiffres décimaux d’un à sept.|  

Si le `s` argument n’est pas une valeur de jour uniquement, elle doit inclure un heures et un composant minutes ; les autres composants sont facultatifs. S’ils sont présents, les valeurs de chaque composant doivent être comprise dans une plage spécifiée. Par exemple, la valeur de *hh*, le composant « heures », doit être comprise entre 0 et 23. En raison de cette option, passage « 23 : 00:00 » à la <xref:System.TimeSpan.Parse%2A> méthode retourne un intervalle de temps de 23 heures. En revanche, en passant « 24 : 00:00 » retourne un intervalle de temps de 24 jours. Étant donné que « 24 » est en dehors de la plage du composant « heures », il est interprété comme le composant « jours ».

 Les composants de `s` doivent collectivement spécifier un intervalle de temps qui est supérieur ou égal à <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> et inférieure ou égale à <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Le <xref:System.TimeSpan.Parse%28System.String%29> méthode essaie d’analyser `s` à l’aide de chacun des formats spécifiques à la culture pour la culture actuelle.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.TimeSpan.Parse%2A> méthode pour convertir chaque élément dans un tableau de chaînes à un <xref:System.TimeSpan> valeur. Il modifie la culture système actuelle croate - Croatie (« hr-HR ») et anglais - États-Unis (« en-US ») pour montrer comment la culture système actuelle affecte l’opération d’analyse.  
  
 [!code-csharp[System.TimeSpan.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parse1.cs#1)]
 [!code-vb[System.TimeSpan.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> a un format non valide.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> représente un nombre qui est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 Au moins un des composants des jours, heures, minutes ou secondes est en dehors de sa plage valide.</exception>
        <block subset="none" type="usage">
          <para>Lorsqu’un composant d’intervalle de temps dans la chaîne à analyser contient plus de sept chiffres, l’opération d’analyse dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures peuvent se comporter différemment des opérations d’analyse dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Dans certains cas, opérations d’analyse qui réussissent dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures peuvent échouer et lever une <see cref="T:System.OverflowException" /> dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Dans d’autres cas, opérations d’analyse qui lèvent une <see cref="T:System.FormatException" /> dans les [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures peuvent échouer et lever une <see cref="T:System.OverflowException" /> dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. L’exemple suivant illustre les deux scénarios.  
  
 [!code-csharp[System.TimeSpan.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null) As TimeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide des informations de format spécifiques à la culture spécifiées.</summary>
        <returns>Intervalle de temps qui correspond à <paramref name="input" />, tel que spécifié par <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `input` paramètre contient une spécification d’intervalle de temps sous la forme :  
  
 [*ws*] [-] { *d* &#124; [*d*.] *hh*:*mm*[ :*ss*[.* FF*]]} [*ws*]  
  
 Éléments dans des crochets ([et]) sont facultatifs ; une sélection dans la liste d’alternatives entourés accolades ({et}) et séparés par des barres verticales (&#124;) est requis. Le tableau suivant décrit chaque élément.  
  
|Élément|Description |  
|-------------|-----------------|  
|*ws*|Espace blanc facultatif.|  
|-|Un signe moins facultatif, qui indique une valeur négative <xref:System.TimeSpan>.|  
|*d*|Jours, allant de 0 à 10675199.|  
|.|Symbole dépendante de la culture qui sépare les jours des heures. La valeur par défaut est un point («. ») caractères.|  
|*hh*|Heures, allant de 0 à 23.|  
|:|Le symbole de séparateur d’heure dépendant de la culture.|  
|*mm*|Minutes, entre 0 et 59.|  
|*ss*|Facultatif secondes, entre 0 et 59.|  
|.|Symbole dépendante de la culture qui sépare les secondes des fractions de seconde. La valeur par défaut est un point («. ») caractères.|  
|*ff*|Facultatif en fractions de seconde, constitué de chiffres décimaux d’un à sept.|  

Si le `input` argument n’est pas une valeur de jour uniquement, elle doit inclure un heures et un composant minutes ; les autres composants sont facultatifs. S’ils sont présents, les valeurs de chaque composant doivent être comprise dans une plage spécifiée. Par exemple, la valeur de *hh*, le composant « heures », doit être comprise entre 0 et 23. En raison de cette option, passage « 23 : 00:00 » à la <xref:System.TimeSpan.Parse%2A> méthode retourne un intervalle de temps de 23 heures. En revanche, en passant « 24 : 00:00 » retourne un intervalle de temps de 24 jours. Étant donné que « 24 » est en dehors de la plage du composant « heures », il est interprété comme le composant « jours ».

 Les composants de `input` doivent collectivement spécifier un intervalle de temps qui est supérieur ou égal à <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> et inférieure ou égale à <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Le <xref:System.TimeSpan.Parse%28System.String%29> méthode essaie d’analyser `input` à l’aide de chacun des formats spécifiques à la culture pour la culture spécifiée par `formatProvider`.  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant définit un tableau de <xref:System.Globalization.CultureInfo> objets et chaque objet dans les appels à la <xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29> méthode pour analyser les éléments dans un tableau de chaînes. L’exemple illustre la façon dont les conventions d’une culture spécifique influencent l’opération de mise en forme.  
  
 [!code-csharp[System.TimeSpan.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parse2.cs#2)]
 [!code-vb[System.TimeSpan.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> a un format non valide.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> représente un nombre qui est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 Au moins un des composants « jours », « heures », « minutes » ou « secondes » du paramètre <paramref name="input" /> est en dehors de sa plage valide.</exception>
        <block subset="none" type="usage">
          <para>Lorsqu’un composant d’intervalle de temps dans la chaîne à analyser contient plus de sept chiffres, l’opération d’analyse dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures peuvent se comporter différemment des opérations d’analyse dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Dans certains cas, opérations d’analyse qui réussissent dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures peuvent échouer et lever une <see cref="T:System.OverflowException" /> dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Dans d’autres cas, opérations d’analyse qui lèvent une <see cref="T:System.FormatException" /> dans les [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures peuvent échouer et lever une <see cref="T:System.OverflowException" /> dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. L’exemple suivant illustre les deux scénarios.  
  
 [!code-csharp[System.TimeSpan.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps en <see cref="T:System.TimeSpan" /> équivalent. Le format de la chaîne doit correspondre exactement à un format spécifié.</summary>
        <altmember cref="Overload:System.TimeSpan.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="format">Chaîne de format standard ou personnalisé qui définit le format requis pour <c>input</c>.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide des informations de format spécifiques à la culture spécifiées. Le format de la chaîne doit correspondre exactement au format spécifié.</summary>
        <returns>Intervalle de temps qui correspond à <paramref name="input" />, tel que spécifié par <paramref name="format" /> et <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> méthode analyse la représentation sous forme de chaîne d’un intervalle de temps, qui doit être au format défini par le `format` paramètre, à ceci près que les et les espaces blancs de fin sont ignorés. Étant donné que `input` doit être conforme au format `format` exactement, vous devez toujours utiliser la gestion des exceptions lors de la conversion d’une entrée de chaîne par l’utilisateur à un intervalle de temps. Si vous préférez ne pas utiliser la gestion des exceptions, vous pouvez appeler la <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> méthode à la place.  
  
 Le `format` paramètre est une chaîne qui contient un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisés qui définissent le format requis de `input`. Pour plus d’informations sur les chaînes de format valide, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
> [!IMPORTANT]
>  Le <xref:System.TimeSpan.ParseExact%2A> méthode utilise les conventions de la culture spécifiée par le `formatProvider` paramètre uniquement si `format` est une norme <xref:System.TimeSpan> dont la valeur est « g » ou « G » de chaîne de format. Le « c », « t » et les chaînes de format standard « T » utilisent les conventions de mise en forme de la culture dite indifférente. Chaînes de format personnalisées définissent le format précis de la chaîne d’entrée et utilisent des caractères littéraux pour séparer les composants d’un intervalle de temps.  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée si `format` est une chaîne de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> méthode pour analyser plusieurs représentations sous forme de chaîne d’intervalles de temps à l’aide de différentes chaînes de format et de cultures.  
  
 [!code-csharp[System.TimeSpan.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample1.cs#1)]
 [!code-vb[System.TimeSpan.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> a un format non valide.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> représente un nombre qui est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 Au moins un des composants « jours », « heures », « minutes » ou « secondes » du paramètre <paramref name="input" /> est en dehors de sa plage valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="formats">Tableau de chaînes de format standard ou personnalisé qui définit le format requis pour <c>input</c>.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide du tableau de chaînes de format et des informations de format spécifiques à la culture spécifiés. Le format de la représentation sous forme de chaîne doit correspondre exactement à l'un des formats spécifiés.</summary>
        <returns>Intervalle de temps qui correspond à <paramref name="input" />, tel que spécifié par <paramref name="formats" /> et <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> méthode analyse la représentation sous forme de chaîne d’un intervalle de temps, qui doit être dans un des formats définis par le `formats` paramètre, à ceci près que les et les espaces blancs de fin sont ignorés. Étant donné que `input` doit être conforme exactement à un des formats spécifiés dans `formats`, vous devez toujours utiliser la gestion des exceptions lors de la conversion d’une entrée de chaîne par l’utilisateur à un intervalle de temps. Si vous préférez ne pas utiliser la gestion des exceptions, vous pouvez appeler la <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> méthode à la place.  
  
 Le `formats` paramètre est un tableau de chaînes dont les éléments se composent d’un spécificateur de format standard unique, ou d’un ou plusieurs spécificateurs de format personnalisés qui définissent le format requis de `input`. Pour plus d’informations sur les chaînes de format valide, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md). `input` doit correspondre exactement à un membre de `formats` pour l’opération d’analyse. L’opération d’analyse tente de faire correspondre `input` à chaque élément de `formats` en commençant par le premier élément du tableau.  
  
> [!IMPORTANT]
>  Le <xref:System.TimeSpan.ParseExact%2A> méthode utilise les conventions de la culture spécifiée par le `formatProvider` paramètre uniquement si la chaîne de format utilisée pour analyser `input` est une norme <xref:System.TimeSpan> dont la valeur est « g » ou « G » de chaîne de format. Le « c », « t » et les chaînes de format standard « T » utilisent les conventions de mise en forme de la culture dite indifférente. Chaînes de format personnalisées définissent le format précis de la chaîne d’entrée et utilisent des caractères littéraux pour séparer les composants d’un intervalle de temps.  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée si la chaîne de format utilisée pour analyser `input` est une chaîne de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> méthode pour convertir chaque élément d’un tableau de chaînes à un <xref:System.TimeSpan> valeur. L’exemple interprète les chaînes selon les conventions de mise en forme du Français - culture de la France (« fr-FR »). Les chaînes peuvent représenter un intervalle de temps dans le format court général ou le format long général.  
  
 En outre, l’exemple modifie la manière dont dans lequel les méthodes d’analyse intervalle heure interprètent un chiffre unique. En règle générale, un seul chiffre est interprété comme le nombre de jours dans un intervalle de temps. Au lieu de cela, le `%h` chaîne de format personnalisée est utilisée pour interpréter un chiffre unique comme le nombre d’heures. Pour que cette modification prenne effet, notez que le `%h` chaîne de format personnalisée doit précéder les autres chaînes de format dans le `formats` tableau.  
  
 [!code-csharp[System.TimeSpan.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample3.cs#3)]
 [!code-vb[System.TimeSpan.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> a un format non valide.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> représente un nombre qui est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 Au moins un des composants « jours », « heures », « minutes » ou « secondes » du paramètre <paramref name="input" /> est en dehors de sa plage valide.</exception>
        <altmember cref="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles = System.Globalization.TimeSpanStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As TimeSpanStyles = System.Globalization.TimeSpanStyles.None) As TimeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles = System.Globalization.TimeSpanStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As TimeSpanStyles = System.Globalization.TimeSpanStyles.None) As TimeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As TimeSpanStyles) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="format">Chaîne de format standard ou personnalisé qui définit le format requis pour <c>input</c>.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <param name="styles">Combinaison au niveau du bit des valeurs d’énumération qui définit les éléments de style pouvant être présents dans <c>input</c>.</param>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide des styles et des informations de format spécifiques à la culture spécifiés. Le format de la chaîne doit correspondre exactement au format spécifié.</summary>
        <returns>Intervalle de temps qui correspond à <paramref name="input" />, tel que spécifié par <paramref name="format" />, <paramref name="formatProvider" /> et <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.ParseExact%2A> méthode analyse la représentation sous forme de chaîne d’un intervalle de temps, qui doit être au format défini par le `format` paramètre, à ceci près que les et les espaces blancs de fin sont ignorés. Étant donné que `input` doit être conforme au format `format` exactement, vous devez toujours utiliser la gestion des exceptions lors de la conversion d’une entrée de chaîne par l’utilisateur à un intervalle de temps. Si vous préférez ne pas utiliser la gestion des exceptions, vous pouvez appeler la <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> méthode à la place.  
  
 Le `format` paramètre est une chaîne qui contient un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisés qui définissent le format requis de `input`. Pour plus d’informations sur les chaînes de format valide, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
> [!IMPORTANT]
>  Le <xref:System.TimeSpan.ParseExact%2A> méthode utilise les conventions de la culture spécifiée par le `formatProvider` paramètre uniquement si `format` est une norme <xref:System.TimeSpan> dont la valeur est « g » ou « G » de chaîne de format. Le « c », « t » et les chaînes de format standard « T » utilisent les conventions de mise en forme de la culture dite indifférente. Chaînes de format personnalisées définissent le format précis de la chaîne d’entrée et utilisent des caractères littéraux pour séparer les composants d’un intervalle de temps.  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée si `format` est une chaîne de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
 Le `styles` paramètre affecte l’interprétation des chaînes qui sont analysées à l’aide de chaînes de format personnalisées. Il détermine si `input` est interprété comme un intervalle de temps négatif uniquement si un signe négatif est présent (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), ou si elle est toujours interprété comme un intervalle de temps négatif (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). Si <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> n’est pas utilisé, `format` doit inclure un symbole de signe négatif littéral (tel que «\\- ») pour analyser correctement un intervalle de temps négatif.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> méthode pour analyser plusieurs représentations sous forme de chaîne d’intervalles de temps à l’aide de différentes chaînes de format et de cultures. Elle utilise également la <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> valeur interprète chaque chaîne comme un intervalle de temps négatif. La sortie de l’exemple illustre que le <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> style affecte la valeur de retour uniquement lorsqu’il est utilisé avec les chaînes de format personnalisé.  
  
 [!code-csharp[System.TimeSpan.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample2.cs#2)]
 [!code-vb[System.TimeSpan.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> n'est pas une valeur <see cref="T:System.Globalization.TimeSpanStyles" /> valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> a un format non valide.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> représente un nombre qui est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 Au moins un des composants « jours », « heures », « minutes » ou « secondes » du paramètre <paramref name="input" /> est en dehors de sa plage valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As TimeSpanStyles) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="formats">Tableau de chaînes de format standard ou personnalisé qui définissent le format requis pour <c>input</c>.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <param name="styles">Combinaison de bits de valeurs d'énumération qui définit les éléments de style pouvant être présents dans l'entrée.</param>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide des formats, des informations de format spécifiques à la culture et des styles spécifiés. Le format de la représentation sous forme de chaîne doit correspondre exactement à l'un des formats spécifiés.</summary>
        <returns>Intervalle de temps qui correspond à <paramref name="input" />, tel que spécifié par <paramref name="formats" />, <paramref name="formatProvider" /> et <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> méthode analyse la représentation sous forme de chaîne d’un intervalle de temps, qui doit être dans un des formats définis par le `formats` paramètre, à ceci près que les et les espaces blancs de fin sont ignorés. Étant donné que `input` doit être conforme exactement à un des formats spécifiés dans `formats`, vous devez toujours utiliser la gestion des exceptions lors de la conversion d’une entrée de chaîne par l’utilisateur à un intervalle de temps. Si vous préférez ne pas utiliser la gestion des exceptions, vous pouvez appeler la <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> méthode à la place.  
  
 Le `formats` paramètre est un tableau de chaînes dont les éléments se composent d’un spécificateur de format standard unique, ou d’un ou plusieurs spécificateurs de format personnalisés qui définissent le format requis de `input`. Pour plus d’informations sur les chaînes de format valide, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md). `input` doit correspondre exactement à un membre de `formats` pour l’opération d’analyse. L’opération d’analyse tente de faire correspondre `input` à chaque élément de `formats` en commençant par le premier élément du tableau.  
  
> [!IMPORTANT]
>  Le <xref:System.TimeSpan.ParseExact%2A> méthode utilise les conventions de la culture spécifiée par le `formatProvider` paramètre uniquement si la chaîne de format utilisée pour analyser `input` est une norme <xref:System.TimeSpan> dont la valeur est « g » ou « G » de chaîne de format. Le « c », « t » et les chaînes de format standard « T » utilisent les conventions de mise en forme de la culture dite indifférente. Chaînes de format personnalisées définissent le format précis de la chaîne d’entrée et utilisent des caractères littéraux pour séparer les composants d’un intervalle de temps.  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée si la chaîne de format utilisée pour analyser `input` est une chaîne de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
 Le `styles` paramètre affecte l’interprétation des chaînes qui sont analysées à l’aide de chaînes de format personnalisées. Il détermine si `input` est interprété comme un intervalle de temps négatif uniquement si un signe négatif est présent (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), ou si elle est toujours interprété comme un intervalle de temps négatif (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). Si <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> n’est pas utilisé, `format` doit inclure un symbole de signe négatif littéral (tel que «\\- ») pour analyser correctement un intervalle de temps négatif.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> méthode pour convertir chaque élément d’un tableau de chaînes à un <xref:System.TimeSpan> valeur. Les chaînes peuvent représenter un intervalle de temps dans le format court général ou le format long général.  
  
 En outre, l’exemple modifie la manière dont dans lequel les méthodes d’analyse intervalle heure interprètent un chiffre unique. En règle générale, un seul chiffre est interprété comme le nombre de jours dans un intervalle de temps. Au lieu de cela, le `%h` chaîne de format personnalisée est utilisée pour interpréter un chiffre unique comme le nombre d’heures. Pour que cette modification prenne effet, notez que le `%h` chaîne de format personnalisée doit précéder les autres chaînes de format dans le `formats` tableau. Notez également dans la sortie qui le <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> indicateur spécifié dans l’appel de méthode est uniquement utilisée lors de l’analyse d’une chaîne de ce spécificateur de format.  
  
 [!code-csharp[System.TimeSpan.ParseExact#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample4.cs#4)]
 [!code-vb[System.TimeSpan.ParseExact#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> n'est pas une valeur <see cref="T:System.Globalization.TimeSpanStyles" /> valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> a un format non valide.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> représente un nombre qui est inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - ou -  
  
 Au moins un des composants « jours », « heures », « minutes » ou « secondes » du paramètre <paramref name="input" /> est en dehors de sa plage valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seconds">
      <MemberSignature Language="C#" Value="public int Seconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Seconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Seconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Seconds As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Seconds { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « secondes » de l'intervalle de temps représenté par la structure <see cref="T:System.TimeSpan" /> actuelle.</summary>
        <value>Composant « secondes » de la structure <see cref="T:System.TimeSpan" /> actuelle. La valeur de retour est comprise entre -59 et 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> valeur peut être représentée en tant que [*-*]*d*.* hh*:*mm*:*ss*.* FF*, où le signe moins facultatif indique un intervalle de temps négatif, le *d* composant est en jours, *hh* est mesuré sur une horloge de 24 heures, heures *mm* est minutes, *ss* est secondes, et *ff* fractions de seconde. La valeur de la <xref:System.TimeSpan.Seconds%2A> propriété est le composant « secondes », *ss*.  
  
 Le <xref:System.TimeSpan.Seconds%2A> propriété représente les secondes entières, alors que le <xref:System.TimeSpan.TotalSeconds%2A> propriété représente les secondes entières et partielles.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets et affiche le <xref:System.TimeSpan.Seconds%2A> propriété de chacun.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (ts As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(TimeSpan ts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">Intervalle de temps à soustraire.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.TimeSpan" /> dont la valeur est la différence entre l'objet <see cref="T:System.TimeSpan" /> spécifié et cette instance.</summary>
        <returns>Nouvel intervalle de temps dont la valeur est le résultat de la valeur de cette instance moins la valeur de <paramref name="ts" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour doit être comprise entre <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> et <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>; sinon, une exception est levée.  
  
 La valeur de retour est un nouveau <xref:System.TimeSpan>; la version d’origine <xref:System.TimeSpan> n’est pas modifié.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.TimeSpan.Subtract%2A> pour calculer la différence entre une seule méthode <xref:System.TimeSpan> valeur et chacun des intervalles de temps dans un tableau. Notez que, étant donné que <xref:System.TimeSpan> les chaînes de format n’incluent pas de signe dans la chaîne de résultat, l’exemple utilise une logique conditionnelle pour inclure un signe négatif des intervalles de temps négatif.  
  
 [!code-csharp[System.TimeSpan.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.subtract/cs/subtract1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">La valeur de retour est inférieure à <see cref="F:System.TimeSpan.MinValue" /> ou supérieure à <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de graduations qui représente la valeur de la structure <see cref="T:System.TimeSpan" /> actuelle.</summary>
        <value>Nombre de graduations figurant dans cette instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La plus petite unité de temps est la graduation est égale à 100 nanosecondes ou un dix-millionième de seconde. Il existe 10 000 graduations dans une milliseconde. La valeur de la <xref:System.TimeSpan.Ticks%2A> propriété peut être négatif ou positif pour représenter un intervalle de temps positif ou négatif.  
  
   
  
## Examples  
 L’exemple suivant crée plusieurs <xref:System.TimeSpan> objets et affiche le <xref:System.TimeSpan.Ticks%2A> propriété de chacun.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerDay">
      <MemberSignature Language="C#" Value="public const long TicksPerDay = 864000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerDay = (864000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerDay" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerDay As Long  = 864000000000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerDay = 864000000000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>864000000000</MemberValue>
      <Docs>
        <summary>Représente le nombre de graduations en 1 jour. Ce champ est constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette constante est 864 milliards ; Autrement dit, 864,000,000,000.  
  
   
  
## Examples  
 L’exemple suivant fait référence à et affiche la valeur de la <xref:System.TimeSpan.TicksPerDay> champ.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerHour">
      <MemberSignature Language="C#" Value="public const long TicksPerHour = 36000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerHour = (36000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerHour" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerHour As Long  = 36000000000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerHour = 36000000000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>36000000000</MemberValue>
      <Docs>
        <summary>Représente le nombre de graduations en 1 heure. Ce champ est constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette constante est 36 milliards ; Autrement dit, 36,000,000,000.  
  
   
  
## Examples  
 L’exemple suivant fait référence à et affiche la valeur de la <xref:System.TimeSpan.TicksPerHour> champ.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMillisecond">
      <MemberSignature Language="C#" Value="public const long TicksPerMillisecond = 10000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMillisecond = (10000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMillisecond" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerMillisecond As Long  = 10000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerMillisecond = 10000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000</MemberValue>
      <Docs>
        <summary>Représente le nombre de graduations en 1 milliseconde. Ce champ est constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette constante est 10 mille ; Autrement dit, 10 000.  
  
   
  
## Examples  
 L’exemple suivant fait référence à et affiche la valeur de la <xref:System.TimeSpan.TicksPerMillisecond> champ.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMinute">
      <MemberSignature Language="C#" Value="public const long TicksPerMinute = 600000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMinute = (600000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMinute" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerMinute As Long  = 600000000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerMinute = 600000000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>600000000</MemberValue>
      <Docs>
        <summary>Représente le nombre de graduations en 1 minute. Ce champ est constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette constante est 600 millions ; Autrement dit, 600,000,000.  
  
   
  
## Examples  
 L’exemple suivant fait référence à et affiche la valeur de la <xref:System.TimeSpan.TicksPerMinute> champ.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerSecond">
      <MemberSignature Language="C#" Value="public const long TicksPerSecond = 10000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerSecond = (10000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerSecond" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerSecond As Long  = 10000000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerSecond = 10000000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000000</MemberValue>
      <Docs>
        <summary>Représente le nombre de graduations en 1 seconde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette constante est 10 millions ; Autrement dit, 10 000 000.  
  
   
  
## Examples  
 L’exemple suivant fait référence à et affiche la valeur de la <xref:System.TimeSpan.TicksPerSecond> champ.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.TimeSpan" /> actuel en sa représentation équivalente sous forme de chaîne.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.TimeSpan" /> actuel en sa représentation équivalente sous forme de chaîne.</summary>
        <returns>Représentation sous forme de chaîne de la valeur actuelle de <see cref="T:System.TimeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne retournée est mise en forme avec le spécificateur de format « c » et a le format suivant :  
  
 [-][*d*.]*hh*:*mm*:*ss*[.*fffffff*]  
  
 Les éléments entre crochets ([et]) ne peut pas être inclus dans la chaîne retournée. Deux-points et points ( : et.) sont des caractères littéraux. Les éléments non littéraux sont répertoriés dans le tableau suivant. Notez que la chaîne retournée par la <xref:System.TimeSpan.ToString> méthode n’est pas sensible à la culture.  
  
|Élément|Description |  
|----------|-----------------|  
|"-"|Un signe moins, ce qui indique un intervalle de temps négatif. Aucune connexion n’est incluse pour un intervalle de temps positif.|  
|"*d*"|Le nombre de jours dans l’intervalle de temps. Cet élément est omis si l’intervalle de temps est inférieur à un jour.|  
|«*hh*»|Le nombre d’heures dans l’intervalle de temps compris entre 0 et 23.|  
|"*mm*"|Le nombre de minutes dans l’intervalle de temps compris entre 0 et 59.|  
|"*ss*"|Le nombre de secondes dans l’intervalle de temps compris entre 0 et 59.|  
|"*fffffff*"|Fractions de secondes dans l’intervalle de temps. Cet élément est omis si l’intervalle de temps n’inclut pas de fractions de seconde. S’il est présent, les fractions de seconde sont toujours exprimées à l’aide de sept chiffres décimaux.|  
  
> [!NOTE]
>  Pour plus d’informations sur la comparaison de la représentation sous forme de chaîne de <xref:System.TimeSpan> et types de données Oracle, consultez l’article de la Base de connaissances [324577 : System.TimeSpan Does Not Match Oracle 9i INTERVAL DAY TO SECOND Type de données](http://go.microsoft.com/fwlink/?LinkId=161146).  
  
   
  
## Examples  
 L’exemple suivant affiche les chaînes retournées en appelant le <xref:System.TimeSpan.ToString%2A> méthode avec un nombre de <xref:System.TimeSpan> valeurs. Notez que bien que l’exemple n’appelle pas la <xref:System.TimeSpan.ToString%2A> (méthode) directement, elle est appelée par le <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthode lorsqu’il tente de convertir un <xref:System.TimeSpan> valeur en sa représentation de chaîne.  
  
 [!code-csharp[System.TimeSpan.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.TimeSpan.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Prise en charge de la mise en forme <see cref="T:System.TimeSpan" /> valeurs a été ajoutée dans le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]. Toutefois, le <see cref="M:System.TimeSpan.ToString" /> surcharge de méthode reste indépendantes de la culture. Son comportement reste inchangé depuis des versions antérieures du .NET Framework. Pour contrôler la mise en forme d’un <see cref="T:System.TimeSpan" /> valeur, appelez le <see cref="M:System.TimeSpan.ToString(System.String)" /> ou <see cref="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" /> de surcharge.</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.TimeSpan.Parse(System.String)" />
        <altmember cref="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne de format <see cref="T:System.TimeSpan" /> standard ou personnalisé.</param>
        <summary>Convertit la valeur de l'objet <see cref="T:System.TimeSpan" /> actuel dans sa représentation sous forme de chaîne équivalente en utilisant le format spécifié.</summary>
        <returns>Représentation sous forme de chaîne de la valeur actuelle de <see cref="T:System.TimeSpan" /> au format spécifié par le paramètre <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `format` paramètre peut être n’importe quel spécificateur de format standard ou personnalisé valide pour <xref:System.TimeSpan> valeurs. Si `format` est égal à <xref:System.String.Empty?displayProperty=nameWithType> ou `null`, la valeur de retour du courant <xref:System.TimeSpan> objet est mis en forme avec le spécificateur de format commun (« c »). Si `format` une autre valeur, la méthode lève une exception un <xref:System.FormatException>.  
  
 Si `format` est une chaîne de format standard, le format de la chaîne retournée est défini par les conventions de mise en forme de la culture actuelle.  
  
> [!IMPORTANT]
>  Chaînes de format personnalisé pour <xref:System.TimeSpan> valeurs n’incluent pas un séparateur de date ou d’heure. Si vous souhaitez inclure ces éléments dans votre chaîne de format, vous devez les traiter comme des littéraux de caractère. Consultez l’exemple pour obtenir une illustration et le [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md) rubrique pour plus d’informations.  
  
 Le .NET Framework fournit une prise en charge complète de la mise en forme, est décrite en détail dans les rubriques de mise en forme suivantes :  
  
-   Pour plus d’informations sur les chaînes de format pour <xref:System.TimeSpan> valeurs, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
-   Pour plus d’informations sur la prise en charge de la mise en forme dans le .NET Framework, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 L’exemple suivant utilise le standard et personnalisée <xref:System.TimeSpan> pour afficher la représentation sous forme de chaîne de chaque élément dans un tableau de chaînes de format <xref:System.TimeSpan> valeurs  
  
 [!code-csharp[System.TimeSpan.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/tostring3.cs#3)]
 [!code-vb[System.TimeSpan.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Le paramètre <paramref name="format" /> n'est pas reconnu ou n'est pas pris en charge.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne de format <see cref="T:System.TimeSpan" /> standard ou personnalisé.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <summary>Convertit la valeur de l'objet <see cref="T:System.TimeSpan" /> actuel dans sa représentation sous forme de chaîne équivalente à l'aide du format et des informations de mise en forme spécifiques à la culture spécifiés.</summary>
        <returns>Représentation sous forme de chaîne de la valeur actuelle de <see cref="T:System.TimeSpan" />, tel que spécifié par <paramref name="format" /> et <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `format` paramètre peut être n’importe quel spécificateur de format standard ou personnalisé valide pour <xref:System.TimeSpan> valeurs. Si `format` est égal à <xref:System.String.Empty?displayProperty=nameWithType> ou `null`, la valeur de retour du courant <xref:System.TimeSpan> objet est mis en forme avec le spécificateur de format commun (« c »). Si le format est n’importe quelle autre valeur, la méthode lève un <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Chaînes de format personnalisé pour <xref:System.TimeSpan> valeurs n’incluent pas un séparateur de date ou d’heure. Si vous souhaitez inclure ces éléments dans votre chaîne de format, vous devez les traiter comme des littéraux de caractère. Consultez l’exemple pour obtenir une illustration et le [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md) rubrique pour plus d’informations.  
  
 Le .NET Framework fournit une prise en charge complète de la mise en forme, est décrite en détail dans les rubriques de mise en forme suivantes :  
  
-   Pour plus d’informations sur les chaînes de format pour <xref:System.TimeSpan> valeurs, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
-   Pour plus d’informations sur la prise en charge de la mise en forme dans le .NET Framework, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé. Si `format` est une chaîne de format personnalisé, le `formatProvider` paramètre est ignoré.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29> méthode pour le formatage de deux intervalles de temps. L’exemple appelle la méthode deux fois pour chaque chaîne de format, tout d’abord d’affichage en utilisant les conventions de la culture en-US, puis d’affichage en utilisant les conventions de la culture fr-FR.  
  
 [!code-csharp[System.TimeSpan.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/tostring4.cs#4)]
 [!code-vb[System.TimeSpan.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Le paramètre <paramref name="format" /> n'est pas reconnu ou n'est pas pris en charge.</exception>
      </Docs>
    </Member>
    <Member MemberName="TotalDays">
      <MemberSignature Language="C#" Value="public double TotalDays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalDays" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalDays" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalDays As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalDays { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur de la structure <see cref="T:System.TimeSpan" /> actuelle exprimée en jours entiers et fractionnaires.</summary>
        <value>Nombre total de jours représentés par cette instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété convertit la valeur de cette instance de graduations à jours. Ce nombre peut inclure des jours entiers et partiels.  
  
 Le <xref:System.TimeSpan.TotalDays%2A> propriété représente des jours entiers et partiels, alors que le <xref:System.TimeSpan.Days%2A> propriété représente des jours entiers.  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.TimeSpan> de l’objet et affiche la valeur de son <xref:System.TimeSpan.TotalDays%2A> propriété. Il affiche également la valeur de chaque composant (heures, minutes, secondes, millisecondes) qui forme la partie fractionnaire de la valeur de son <xref:System.TimeSpan.TotalDays%2A> propriété.  
  
 [!code-csharp[System.TimeSpan.TotalDays#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totaldays/cs/totaldays.cs#1)]
 [!code-vb[System.TimeSpan.TotalDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totaldays/vb/totaldays.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Days" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
      </Docs>
    </Member>
    <Member MemberName="TotalHours">
      <MemberSignature Language="C#" Value="public double TotalHours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalHours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalHours" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalHours As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalHours { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur de la structure <see cref="T:System.TimeSpan" /> actuelle exprimée en heures entières et fractionnaires.</summary>
        <value>Nombre total d'heures représentées par cette instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété convertit la valeur de cette instance de graduations en heures. Ce nombre peut inclure des heures entières et partielles.  
  
 Le <xref:System.TimeSpan.TotalHours%2A> propriété représente les heures entières et partielles, alors que le <xref:System.TimeSpan.Hours%2A> propriété représente les heures entières.  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.TimeSpan> de l’objet et affiche la valeur de son <xref:System.TimeSpan.TotalHours%2A> propriété. Il affiche également la valeur de chaque composant (heures, minutes, secondes et millisecondes) qui forme la partie fractionnaire de la valeur de son <xref:System.TimeSpan.TotalHours%2A> propriété.  
  
 [!code-csharp[System.TimeSpan.TotalHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalhours/cs/totalhours.cs#1)]
 [!code-vb[System.TimeSpan.TotalHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalhours/vb/totalhours.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalMilliseconds">
      <MemberSignature Language="C#" Value="public double TotalMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalMilliseconds As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalMilliseconds { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur de la structure <see cref="T:System.TimeSpan" /> actuelle exprimée en millisecondes entières et fractionnaires.</summary>
        <value>Nombre total de millisecondes représentées par cette instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété convertit la valeur de cette instance de graduations en millisecondes. Ce nombre peut inclure des millisecondes entières et partielles.  
  
 Le <xref:System.TimeSpan.TotalMilliseconds%2A> propriété représente des millisecondes entières et partielles, alors que le <xref:System.TimeSpan.Milliseconds%2A> propriété représente des millisecondes entières.  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.TimeSpan> de l’objet et affiche la valeur de son <xref:System.TimeSpan.TotalMilliseconds%2A> propriété.  
  
 [!code-csharp[System.TimeSpan.TotalMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalmilliseconds/cs/totalmilliseconds.cs#1)]
 [!code-vb[System.TimeSpan.TotalMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalmilliseconds/vb/totalmilliseconds.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalMinutes">
      <MemberSignature Language="C#" Value="public double TotalMinutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMinutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMinutes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalMinutes As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalMinutes { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur de la structure <see cref="T:System.TimeSpan" /> actuelle exprimée en minutes entières et fractionnaires.</summary>
        <value>Nombre total de minutes représentées par cette instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété convertit la valeur de cette instance de graduations à quelques minutes. Ce nombre peut inclure des minutes entières et partielles.  
  
 Le <xref:System.TimeSpan.TotalMinutes%2A> propriété représente des minutes entières et partielles, alors que le <xref:System.TimeSpan.Minutes%2A> propriété représente des minutes entières.  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.TimeSpan> de l’objet et affiche la valeur de son <xref:System.TimeSpan.TotalMinutes%2A> propriété. Il affiche également la valeur de chaque composant (secondes, millisecondes) qui forme la partie fractionnaire de la valeur de son <xref:System.TimeSpan.TotalMinutes%2A> propriété.  
  
 [!code-csharp[System.TimeSpan.TotalMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalminutes/cs/totalminutes.cs#1)]
 [!code-vb[System.TimeSpan.TotalMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalminutes/vb/totalminutes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalSeconds">
      <MemberSignature Language="C#" Value="public double TotalSeconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalSeconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalSeconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalSeconds As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalSeconds { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur de la structure <see cref="T:System.TimeSpan" /> actuelle exprimée en secondes entières et fractionnaires.</summary>
        <value>Nombre total de secondes représentées par cette instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété convertit la valeur de cette instance de graduations en secondes. Ce nombre peut inclure des secondes entières et partielles.  
  
 Le <xref:System.TimeSpan.TotalSeconds%2A> propriété représente les secondes entières et partielles, alors que le <xref:System.TimeSpan.Seconds%2A> propriété représente les secondes entières.  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.TimeSpan> de l’objet et affiche la valeur de son <xref:System.TimeSpan.TotalSeconds%2A> propriété. Elle affiche également la valeur de son composant « millisecondes », ce qui constitue la partie fractionnaire de la valeur de son <xref:System.TimeSpan.TotalSeconds%2A> propriété.  
  
 [!code-csharp[System.TimeSpan.TotalSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalseconds/cs/totalseconds.cs#1)]
 [!code-vb[System.TimeSpan.TotalSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalseconds/vb/totalseconds.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> et retourne une valeur qui indique si la conversion a réussi.</summary>
        <altmember cref="Overload:System.TimeSpan.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="result">Quand cette méthode est retournée, contient un objet qui représente l’intervalle de temps spécifié par <c>s</c>, ou <see cref="F:System.TimeSpan.Zero" /> si la conversion a échoué. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> et retourne une valeur qui indique si la conversion a réussi.</summary>
        <returns>
          <see langword="true" /> si la conversion de <paramref name="s" /> est réussie ; sinon, <see langword="false" />. Cette opération retourne <see langword="false" /> si le paramètre <paramref name="s" /> a la valeur <see langword="null" /> ou <see cref="F:System.String.Empty" />, a un format non valide, représente un intervalle de temps inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" /> ou encore possède au moins un composant « jours », « heures », « minutes » ou « secondes » en dehors de sa plage valide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.TryParse%2A> méthode est similaire à la <xref:System.TimeSpan.Parse%28System.String%29?displayProperty=nameWithType> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue.  
  
 Le `s` paramètre contient une spécification d’intervalle de temps sous la forme :  
  
 [*ws*] [-] { *d* &#124; *d*.* hh*:*mm*[ :*ss*[.* FF*]] &#124; *hh*:*mm*[ :*ss*[.* FF*]]} [*ws*]  
  
 Les éléments entre crochets ([ et ]) sont facultatifs. Une sélection dans la liste d’alternatives entourés accolades ({et}) et séparés par des barres verticales (&#124;) est requis. Le tableau suivant décrit chaque élément.  
  
|Élément|Description |  
|-------------|-----------------|  
|*ws*|Espace blanc facultatif.|  
|-|Un signe moins facultatif, qui indique une valeur négative <xref:System.TimeSpan>.|  
|*d*|Jours, allant de 0 à 10675199.|  
|.|Symbole dépendante de la culture qui sépare les jours des heures. Le format invariant utilise un point («. ») caractères.|  
|*hh*|Heures, allant de 0 à 23.|  
|:|Le symbole de séparateur d’heure dépendant de la culture. Le format invariant utilise un signe deux-points (« : ») caractères.|  
|*mm*|Minutes, entre 0 et 59.|  
|*ss*|Facultatif secondes, entre 0 et 59.|  
|.|Symbole dépendante de la culture qui sépare les secondes des fractions de seconde. Le format invariant utilise un point («. ») caractères.|  
|*ff*|Facultatif en fractions de seconde, constitué de chiffres décimaux d’un à sept.|  
  
 Les composants de `s` doivent collectivement spécifier un intervalle de temps qui est supérieur ou égal à <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> et inférieure ou égale à <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Le <xref:System.TimeSpan.Parse%28System.String%29> méthode essaie d’analyser `s` à l’aide de chacun des formats spécifiques à la culture pour la culture actuelle.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.TimeSpan.TryParse%2A> méthode pour créer <xref:System.TimeSpan> objets valide <xref:System.TimeSpan> chaînes et pour indiquer quand l’opération d’analyse a échoué, car la chaîne d’intervalle de temps n’est pas valide.  
  
 [!code-csharp[System.TimeSpan.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.TimeSpan.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Dans certains cas, lorsqu’un composant d’intervalle de temps dans la chaîne à analyser contient plus de sept chiffres, opérations d’analyse qui réussissent dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures peuvent échouer et lever une <see cref="T:System.OverflowException" /> dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], l’exemple suivant illustre ce scénario.  
  
 [!code-csharp[System.TimeSpan.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <param name="result">Quand cette méthode est retournée, contient un objet qui représente l’intervalle de temps spécifié par <c>input</c>, ou <see cref="F:System.TimeSpan.Zero" /> si la conversion a échoué. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide des informations de mise en forme spécifiques à la culture et retourne une valeur qui indique si la conversion a réussi.</summary>
        <returns>
          <see langword="true" /> si la conversion de <paramref name="input" /> est réussie ; sinon, <see langword="false" />. Cette opération retourne <see langword="false" /> si le paramètre <paramref name="input" /> a la valeur <see langword="null" /> ou <see cref="F:System.String.Empty" />, a un format non valide, représente un intervalle de temps inférieur à <see cref="F:System.TimeSpan.MinValue" /> ou supérieur à <see cref="F:System.TimeSpan.MaxValue" /> ou encore possède au moins un composant « jours », « heures », « minutes » ou « secondes » en dehors de sa plage valide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> méthode est similaire à la <xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue.  
  
 Le `input` paramètre contient une spécification d’intervalle de temps sous la forme :  
  
 [*ws*] [-] { *d* &#124; *d*.* hh*:*mm*[ :*ss*[.* FF*]] &#124; *hh*:*mm*[ :*ss*[.* FF*]]} [*ws*]  
  
 Les éléments entre crochets ([ et ]) sont facultatifs. Une sélection dans la liste d’alternatives entourés accolades ({et}) et séparés par des barres verticales (&#124;) est requis. Le tableau suivant décrit chaque élément.  
  
|Élément|Description |  
|-------------|-----------------|  
|*ws*|Espace blanc facultatif.|  
|-|Un signe moins facultatif, qui indique une valeur négative <xref:System.TimeSpan>.|  
|*d*|Jours, allant de 0 à 10675199.|  
|.|Symbole dépendante de la culture qui sépare les jours des heures. Le format invariant utilise un point («. ») caractères.|  
|*hh*|Heures, allant de 0 à 23.|  
|:|Le symbole de séparateur d’heure dépendant de la culture. Le format invariant utilise un signe deux-points (« : ») caractères.|  
|*mm*|Minutes, entre 0 et 59.|  
|*ss*|Facultatif secondes, entre 0 et 59.|  
|.|Symbole dépendante de la culture qui sépare les secondes des fractions de seconde. Le format invariant utilise un point («. ») caractères.|  
|*ff*|Facultatif en fractions de seconde, constitué de chiffres décimaux d’un à sept.|  
  
 Les composants de `input` doivent collectivement spécifier un intervalle de temps qui est supérieur ou égal à <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> et inférieure ou égale à <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Le <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> méthode essaie d’analyser `input` à l’aide de chacun des formats spécifiques à la culture pour la culture spécifiée par `formatProvider`.  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant définit un tableau de <xref:System.Globalization.CultureInfo> objets et chaque objet dans les appels à la <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> méthode pour analyser les éléments dans un tableau de chaînes. L’exemple illustre la façon dont les conventions d’une culture spécifique influencent l’opération de mise en forme.  
  
 [!code-csharp[System.TimeSpan.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.TimeSpan.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Dans certains cas, lorsqu’un composant d’intervalle de temps dans la chaîne à analyser contient plus de sept chiffres, opérations d’analyse qui réussissent et retournent <see langword="true" /> dans les [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures peuvent échouer et retourner <see langword="false" /> dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], L’exemple suivant illustre ce scénario.  
  
 [!code-csharp[System.TimeSpan.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> et retourne une valeur qui indique si la conversion a réussi. Le format de la chaîne doit correspondre exactement à un format spécifié.</summary>
        <altmember cref="Overload:System.TimeSpan.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="format">Chaîne de format standard ou personnalisé qui définit le format requis pour <c>input</c>.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <param name="result">Quand cette méthode est retournée, contient un objet qui représente l’intervalle de temps spécifié par <c>input</c>, ou <see cref="F:System.TimeSpan.Zero" /> si la conversion a échoué. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide du format et des informations de format spécifiques à la culture spécifiés, et retourne une valeur qui indique si la conversion a réussi. Le format de la chaîne doit correspondre exactement au format spécifié.</summary>
        <returns>
          <see langword="true" /> si la conversion de <paramref name="input" /> est réussie ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> méthode analyse la représentation sous forme de chaîne d’un intervalle de temps, qui doit être au format défini par le `format` paramètre, à ceci près que les et les espaces blancs de fin sont ignorés. Cette méthode est similaire à la <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue.  
  
 Le `format` paramètre est une chaîne qui contient un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisés qui définissent le format requis de `input`. Pour plus d’informations sur les chaînes de format valide, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
> [!IMPORTANT]
>  Le <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> méthode utilise les conventions de la culture spécifiée par le `formatProvider` paramètre uniquement si `format` est une norme <xref:System.TimeSpan> dont la valeur est « g » ou « G » de chaîne de format. Le « c », « t » et les chaînes de format standard « T » utilisent les conventions de mise en forme de la culture dite indifférente. Chaînes de format personnalisées définissent le format précis de la chaîne d’entrée et utilisent des caractères littéraux pour séparer les composants d’un intervalle de temps.  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée si `format` est une chaîne de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> méthode pour analyser plusieurs représentations sous forme de chaîne d’intervalles de temps à l’aide de différentes chaînes de format et de cultures.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample1.cs#1)]
 [!code-vb[System.TimeSpan.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="formats">Tableau de chaînes de format standard ou personnalisé qui définissent les formats acceptables de <c>input</c>.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <param name="result">Quand cette méthode est retournée, contient un objet qui représente l’intervalle de temps spécifié par <c>input</c>, ou <see cref="F:System.TimeSpan.Zero" /> si la conversion a échoué. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide des formats et des informations de format spécifiques à la culture spécifiés, et retourne une valeur qui indique si la conversion a réussi. Le format de la représentation sous forme de chaîne doit correspondre exactement à l'un des formats spécifiés.</summary>
        <returns>
          <see langword="true" /> si la conversion de <paramref name="input" /> est réussie ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> méthode analyse la représentation sous forme de chaîne d’un intervalle de temps, qui doit être au format défini par une des chaînes de format spécifiés par le `formats` paramètre, à ceci près que les et les espaces blancs de fin sont ignorés. Cette méthode est similaire à la <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue.  
  
 Le `formats` paramètre est un tableau de chaînes dont les éléments se composent d’un spécificateur de format standard unique, ou d’un ou plusieurs spécificateurs de format personnalisés qui définissent le format requis de `input`. Pour plus d’informations sur les chaînes de format valide, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md). `input` doit correspondre exactement à un membre de `formats` pour l’opération d’analyse. L’opération d’analyse tente de faire correspondre `input` à chaque élément de `formats` en commençant par le premier élément du tableau.  
  
> [!IMPORTANT]
>  Le <xref:System.TimeSpan.TryParseExact%2A> méthode utilise les conventions de la culture spécifiée par le `formatProvider` paramètre uniquement si la chaîne de format utilisée pour analyser `input` est une norme <xref:System.TimeSpan> dont la valeur est « g » ou « G » de chaîne de format. Le « c », « t » et les chaînes de format standard « T » utilisent les conventions de mise en forme de la culture dite indifférente. Chaînes de format personnalisées définissent le format précis de la chaîne d’entrée et utilisent des caractères littéraux pour séparer les composants d’un intervalle de temps.  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée si la chaîne de format utilisée pour analyser `input` est une chaîne de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> méthode pour convertir chaque élément d’un tableau de chaînes à un <xref:System.TimeSpan> valeur. L’exemple interprète les chaînes en utilisant les conventions de mise en forme du Français - culture de la France (« fr-FR »). Les chaînes peuvent représenter un intervalle de temps dans le format court général ou le format long général.  
  
 En outre, l’exemple modifie la manière dont dans lequel les méthodes d’analyse intervalle heure interprètent un chiffre unique. En règle générale, un seul chiffre est interprété comme le nombre de jours dans un intervalle de temps. Au lieu de cela, le `%h` chaîne de format personnalisée est utilisée pour interpréter un chiffre unique comme le nombre d’heures. Pour que cette modification prenne effet, notez que le `%h` chaîne de format personnalisée doit précéder les autres chaînes de format dans le `formats` tableau.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample3.cs#3)]
 [!code-vb[System.TimeSpan.TryParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample3.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="format">Chaîne de format standard ou personnalisé qui définit le format requis pour <c>input</c>.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <param name="styles">Une ou plusieurs valeurs d’énumération qui indiquent le style de <c>input</c>.</param>
        <param name="result">Quand cette méthode est retournée, contient un objet qui représente l’intervalle de temps spécifié par <c>input</c>, ou <see cref="F:System.TimeSpan.Zero" /> si la conversion a échoué. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide du format, des informations de format spécifiques à la culture et des styles spécifiés, et retourne une valeur qui indique si la conversion a réussi. Le format de la chaîne doit correspondre exactement au format spécifié.</summary>
        <returns>
          <see langword="true" /> si la conversion de <paramref name="input" /> est réussie ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> méthode analyse la représentation sous forme de chaîne d’un intervalle de temps, qui doit être au format défini par le `format` paramètre, à ceci près que les et les espaces blancs de fin sont ignorés. Cette méthode est similaire à la <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue.  
  
 Le `format` paramètre est une chaîne qui contient un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisés qui définissent le format requis de `input`. Pour plus d’informations sur les chaînes de format valide, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée si `format` est une chaîne de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
 Le `styles` paramètre affecte l’interprétation des chaînes analysées à l’aide de chaînes de format personnalisées. Il détermine si `input` est interprété comme un intervalle de temps négatif uniquement si un signe négatif est présent (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), ou si elle est toujours interprété comme un intervalle de temps négatif (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). Si <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> n’est pas utilisé, `format` doit inclure un symbole de signe négatif littéral (tel que «\\- ») pour analyser correctement un intervalle de temps négatif.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> méthode pour analyser plusieurs représentations sous forme de chaîne d’intervalles de temps à l’aide de différentes chaînes de format et de cultures. Elle utilise également la <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> valeur interprète chaque chaîne comme un intervalle de temps négatif. La sortie de l’exemple illustre que le <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> style affecte la valeur de retour uniquement lorsqu’il est utilisé avec les chaînes de format personnalisé.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample2.cs#2)]
 [!code-vb[System.TimeSpan.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne qui spécifie l'intervalle de temps à convertir.</param>
        <param name="formats">Tableau de chaînes de format standard ou personnalisé qui définissent les formats acceptables de <c>input</c>.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <param name="styles">Une ou plusieurs valeurs d’énumération qui indiquent le style de <c>input</c>.</param>
        <param name="result">Quand cette méthode est retournée, contient un objet qui représente l’intervalle de temps spécifié par <c>input</c>, ou <see cref="F:System.TimeSpan.Zero" /> si la conversion a échoué. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'un intervalle de temps dans son équivalent <see cref="T:System.TimeSpan" /> à l'aide des formats, des informations de format spécifiques à la culture et des styles spécifiés, et retourne une valeur qui indique si la conversion a réussi. Le format de la représentation sous forme de chaîne doit correspondre exactement à l'un des formats spécifiés.</summary>
        <returns>
          <see langword="true" /> si la conversion de <paramref name="input" /> est réussie ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> méthode analyse la représentation sous forme de chaîne d’un intervalle de temps, qui doit être au format défini par une des chaînes de format spécifiés par le `formats` paramètre, à ceci près que les et les espaces blancs de fin sont ignorés. Cette méthode est similaire à la <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue.  
  
 Le `formats` paramètre est un tableau de chaînes dont les éléments se composent d’un spécificateur de format standard unique, ou d’un ou plusieurs spécificateurs de format personnalisés qui définissent le format requis de `input`. Pour plus d’informations sur les chaînes de format valide, consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md). `input` doit correspondre exactement à un membre de `formats` pour l’opération d’analyse. L’opération d’analyse tente de faire correspondre `input` à chaque élément de `formats` en commençant par le premier élément du tableau.  
  
> [!IMPORTANT]
>  Le <xref:System.TimeSpan.ParseExact%2A> méthode utilise les conventions de la culture spécifiée par le `formatProvider` paramètre uniquement si la chaîne de format utilisée pour analyser `input` est une norme <xref:System.TimeSpan> dont la valeur est « g » ou « G » de chaîne de format. Le « c », « t » et les chaînes de format standard « T » utilisent les conventions de mise en forme de la culture dite indifférente. Chaînes de format personnalisées définissent le format précis de la chaîne d’entrée et utilisent des caractères littéraux pour séparer les composants d’un intervalle de temps.  
  
 Le `formatProvider` paramètre est un <xref:System.IFormatProvider> implémentation qui fournit des informations spécifiques à la culture sur le format de la chaîne retournée si la chaîne de format utilisée pour analyser `input` est une chaîne de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme de la chaîne retournée.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet est associé à la culture actuelle est utilisé.  
  
 Le `styles` paramètre affecte l’interprétation des chaînes qui sont analysées à l’aide de chaînes de format personnalisées. Il détermine si `input` est interprété comme un intervalle de temps négatif uniquement si un signe négatif est présent (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), ou si elle est toujours interprété comme un intervalle de temps négatif (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). Si <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> n’est pas utilisé, `format` doit inclure un symbole de signe négatif littéral (tel que «\\- ») pour analyser correctement un intervalle de temps négatif.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> méthode pour convertir chaque élément d’un tableau de chaînes à un <xref:System.TimeSpan> valeur. Les chaînes peuvent représenter un intervalle de temps dans le format court général ou le format long général.  
  
 En outre, l’exemple modifie la manière dont dans lequel les méthodes d’analyse intervalle heure interprètent un chiffre unique. En règle générale, un seul chiffre est interprété comme le nombre de jours dans un intervalle de temps. Au lieu de cela, le `%h` chaîne de format personnalisée est utilisée pour interpréter un chiffre unique comme le nombre d’heures. Pour que cette modification prenne effet, notez que le `%h` chaîne de format personnalisée doit précéder les autres chaînes de format dans le `formats` tableau. Notez également dans la sortie qui le <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> indicateur spécifié dans l’appel de méthode est uniquement utilisée lors de l’analyse d’une chaîne de ce spécificateur de format.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample4.cs#4)]
 [!code-vb[System.TimeSpan.TryParseExact#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample4.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan Zero" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Zero As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan Zero;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la valeur zéro de <see cref="T:System.TimeSpan" />. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que la valeur de la <xref:System.TimeSpan.Zero> champ est un <xref:System.TimeSpan> objet qui représente une valeur d’heure zéro, comparez-le avec d’autres <xref:System.TimeSpan> objets afin de déterminer si les derniers représentent des intervalles de temps positif, zéro ou négative. Vous pouvez également utiliser ce champ pour initialiser un <xref:System.TimeSpan> objet à une valeur d’heure zéro.  
  
   
  
## Examples  
 L’exemple suivant fait référence à et affiche la valeur de la <xref:System.TimeSpan.Zero> champ.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>