<Type Name="FormatException" FullName="System.FormatException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="041fd4b21ce035beb017a4f1a02285a70f983f8c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729243" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FormatException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FormatException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.FormatException" />
  <TypeSignature Language="VB.NET" Value="Public Class FormatException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormatException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exception levée quand le format d’un argument n’est pas valide ou qu’une [chaîne de format composite](~/docs/standard/base-types/composite-formatting.md) n’est pas formée correctement.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.FormatException> exception peut être levée pour l’une des raisons suivantes :  
  
-   Dans un appel à une méthode qui convertit une chaîne en un autre type de données, la chaîne n’est pas conforme au modèle requis. Cela se produit généralement lors de l’appel de certaines méthodes de la <xref:System.Convert> classe et le `Parse` et `ParseExact` méthodes de certains types.  
  
     Dans la plupart des cas, en particulier si la chaîne que vous convertissez est d’entrée par un utilisateur ou de lire à partir d’un fichier, vous devez utiliser un `try/catch` bloquer et de gérer le <xref:System.FormatException> exception si la conversion échoue. Vous pouvez également remplacer l’appel à la méthode de conversion par un appel à une `TryParse` ou `TryParseExact` (méthode), s’il en existe. Toutefois, un <xref:System.FormatException> exception qui est levée lorsque vous essayez d’analyser une chaîne prédéfinie ou codées en dur indique une erreur de programme. Dans ce cas, vous devez corriger l’erreur plutôt que gérer l’exception.  
  
     La conversion d’une chaîne pour les types suivants dans le <xref:System> espace de noms peut lever un <xref:System.FormatException> exception :  
  
    -   <xref:System.Boolean>. Le <xref:System.Boolean.Parse%28System.String%29?displayProperty=nameWithType> et <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> méthodes nécessitent la chaîne à convertir à « True », « true », « False » ou « false ». Toute autre valeur lève une <xref:System.FormatException> exception.  
  
    -   Voir <xref:System.DateTime> et <xref:System.DateTimeOffset>. Toutes les données de date et d’heure est interprété selon les conventions de mise en forme d’une culture particulière : soit la culture du thread actuel (ou, dans certains cas, la culture de domaine d’application en cours), la culture dite indifférente, ou à une culture spécifiée. Lorsque vous appelez le <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> et <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthodes, les données de date et d’heure doivent être conforme *exactement* à un modèle spécifié par un ou plusieurs [chaînes de format standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) ou [personnalisé chaînes de format](~/docs/standard/base-types/custom-date-and-time-format-strings.md) qui sont fournies comme arguments dans l’appel de méthode. Si elle n’est pas conforme à un modèle spécifique à la culture attendu, un <xref:System.FormatException> exception est levée. Cela signifie que les données de date et heure enregistrées dans un format propre à la culture sur un système ne peuvent pas analyser correctement sur un autre système.  
  
         Pour plus d’informations sur l’analyse des dates et heures, consultez [l’analyse de chaînes de Date et heure](~/docs/standard/base-types/parsing-datetime.md) et la documentation de la méthode qui a levé l’exception.  
  
    -   **GUIDs.** La représentation sous forme de chaîne d’un GUID doit être constituée de 32 chiffres hexadécimaux (0-F) et doit être l’un de la sortie de cinq formats par le <xref:System.Guid.ToString%2A?displayProperty=nameWithType> (méthode). Pour plus d'informations, voir la méthode <xref:System.Guid.Parse%2A?displayProperty=nameWithType>.  
  
    -   **Types numériques, y compris des entiers signés de tous les entiers non signés et les types à virgule flottante.** La chaîne à analyser doit contenir des chiffres 0-9 Latin. Un signe positif ou négatif, séparateur décimal, séparateurs de groupes et le symbole monétaire peuvent également être autorisées. La tentative d’analyse d’une chaîne qui contient tous les autres caractères toujours lève une <xref:System.FormatException> exception.  
  
         Toutes les chaînes numériques sont interprétées selon les conventions de mise en forme d’une culture particulière : soit la culture du thread actuel (ou, dans certains cas, la culture de domaine d’application en cours), la culture dite indifférente, ou à une culture spécifiée. Par conséquent, une chaîne numérique qui est analysée en utilisant les conventions d’une culture peut échouer lorsque vous utilisez les conventions d’une autre.  
  
         Pour plus d’informations sur l’analyse de chaînes numériques, consultez [l’analyse de chaînes numériques](~/docs/standard/base-types/parsing-numeric.md) et la documentation de la méthode spécifique qui a levé l’exception.  
  
    -   **Intervalles de temps.** La chaîne à analyser doit être dans un format indépendant de la culture fixe ou dans un format dépendante de la culture définie par la culture du thread actuel (ou, dans certains cas, la culture de domaine d’application en cours), la culture dite indifférente, ou à une culture spécifiée. Si la chaîne n’est pas dans un format approprié, ou si, au minimum, jours, heures, et les composants de minutes de l’intervalle de temps ne sont pas présents, la méthode d’analyse lève une <xref:System.FormatException> exception. Pour plus d’informations, consultez la documentation relative à la <xref:System.TimeSpan> l’analyse de méthode qui a levé l’exception.  
  
-   Un type implémente le <xref:System.IFormattable> interface, qui prend en charge les chaînes de format qui définissent la façon dont un objet est converti en sa représentation sous forme de chaîne, et une chaîne de format non valide est utilisée. Il s’agit d’une opération de mise en forme le plus courant. Dans l’exemple suivant, la chaîne de format standard « Q » est utilisée dans une chaîne de format composite pour mettre en forme un nombre. Toutefois, « Q » n’est pas valide [chaîne de format standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
     [!code-csharp[System.FormatException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable1.cs#7)]
     [!code-vb[System.FormatException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable1.vb#7)]  
  
     Cette exception provient d’une erreur de codage. Pour corriger cette erreur, supprimez la chaîne de format ou remplacer un. L’exemple suivant corrige l’erreur en remplaçant la chaîne de format non valide avec la chaîne de format « C » (devise).  
  
     [!code-csharp[System.FormatException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable2.cs#8)]
     [!code-vb[System.FormatException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable2.vb#8)]  
  
     A <xref:System.FormatException> exception peut également être levée par l’analyse de méthodes, telles que <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> et <xref:System.Guid.ParseExact%2A?displayProperty=nameWithType>, qui requiert que la chaîne analysée pour se conforme exactement à un modèle spécifié par une chaîne de format. Dans l’exemple suivant, la représentation sous forme de chaîne d’un GUID doit être conforme au modèle spécifié par la chaîne de format standard « G ». Toutefois, le <xref:System.Guid> l’implémentation de structure <xref:System.IFormattable> ne prend pas en charge la chaîne de format « G ».  
  
     [!code-csharp[System.FormatException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable3.cs#9)]
     [!code-vb[System.FormatException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable3.vb#9)]  
  
     Cette exception entraîne également à partir d’une erreur de codage. Pour le corriger, appelez une méthode d’analyse qui ne nécessite pas un format précis, tel que <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> ou <xref:System.Guid.Parse%2A?displayProperty=nameWithType>, ou le remplacer par une chaîne de format valide. L’exemple suivant corrige l’erreur en appelant le <xref:System.Guid.Parse%2A?displayProperty=nameWithType> (méthode).  
  
     [!code-csharp[System.FormatException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable4.cs#10)]
     [!code-vb[System.FormatException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable4.vb#10)]  
  
-   Un ou plusieurs des index des éléments de format dans un [chaîne de format composite](~/docs/standard/base-types/composite-formatting.md) est supérieur à l’index des éléments dans le tableau d’objets paramètre ou de la liste. Dans l’exemple suivant, le plus grand index d’un élément de format dans la chaîne de format est 3. Les index des éléments dans la liste d’objets sont de base zéro, la chaîne de format nécessite que la liste d’objets à quatre éléments. Au lieu de cela, il a uniquement trois `dat`, `temp`, et `scale`, de sorte que le code génère un <xref:System.FormatException> exception au moment de l’exécution :.  
  
     [!code-csharp[System.FormatException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example1.cs#1)]
     [!code-vb[System.FormatException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example1.vb#1)]  
  
     Dans ce cas, le <xref:System.FormatException> exception est le résultat d’erreur de développement. Il doit être corrigé plutôt que gérée dans un `try/catch` bloc en faisant en sorte que chaque élément dans la liste de l’objet correspond à l’index d’un élément de format. Pour corriger cet exemple, modifiez l’index de l’élément de la deuxième forme pour faire référence à la `dat` variable et la décrémentation de l’index de chaque élément de format suivantes d’une unité.  
  
     [!code-csharp[System.FormatException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example2.cs#2)]
     [!code-vb[System.FormatException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example2.vb#2)]  
  
-   La chaîne de format composite n’est pas bien formée. Dans ce cas, le <xref:System.FormatException> exception est toujours un résultat d’erreur de développement. Il doit être corrigé plutôt que gérée dans un `try/catch` bloc.  
  
     Tentative d’inclure les accolades littéral dans une chaîne, comme l’exemple suivant est, lève l’exception.  
  
     [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
     [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]  
  
     La technique recommandée pour inclure les accolades littéral dans une chaîne de format composite consiste à les inclure dans la liste d’objets et utiliser des éléments de format pour les insérer dans la chaîne de résultat. Par exemple, vous pouvez modifier la chaîne de format composite précédente comme indiqué ici.  
  
     [!code-csharp[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
     [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]  
  
     L’exception est également levée si votre chaîne de format contient une erreur typographique. L’appel suivant à la <xref:System.String.Format%2A?displayProperty=nameWithType> méthode omet une accolade fermante et paires une accolade ouvrante par un crochet fermant.  
  
     [!code-csharp[System.FormatException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#3)]
     [!code-vb[System.FormatException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#3)]  
  
     Pour corriger cette erreur, assurez-vous que tous les ouvrir et fermer les accolades correspondent.  
  
     [!code-csharp[System.FormatException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#4)]
     [!code-vb[System.FormatException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#4)]  
  
-   Vous avez fourni à la liste d’objets dans le tableau de paramètres fortement typée, la méthode de mise en forme composite et la <xref:System.FormatException> exception indique que l’index d’un ou plusieurs éléments de format dépasse le nombre d’arguments dans la liste d’objets. Cela se produit, car il n’existe aucune conversion explicite entre les types tableau, au lieu de cela que le compilateur traite le tableau comme un argument unique plutôt que comme un tableau de paramètres. Par exemple, l’appel suivant à la <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> méthode lève une exception un <xref:System.FormatException> exception, même si l’index le plus élevé des éléments de format est 3 et le tableau de paramètres de type <xref:System.Int32> a quatre éléments.  
  
     [!code-csharp[System.FormatException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa1.cs#5)]
     [!code-vb[System.FormatException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa1.vb#5)]  
  
     Au lieu de gérer cette exception, vous devez supprimer sa cause. Étant donné que Visual Basic ni c# peut convertir un tableau d’entiers à un tableau d’objets, vous devez effectuer la conversion avant d’appeler la méthode de mise en forme composite. L’exemple suivant fournit une implémentation.  
  
     [!code-csharp[System.FormatException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa2.cs#6)]
     [!code-vb[System.FormatException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa2.vb#6)]  
  
 <xref:System.FormatException> utilise le HRESULT COR_E_FORMAT dont la valeur est 0 x 80131537.  
  
 Le <xref:System.FormatException> dérive de la classe <xref:System.Exception> et l’ajoute pas de membres uniques. Pour obtenir la liste de valeurs de propriété initiales d’une instance de <xref:System.FormatException>, consultez la <xref:System.FormatException.%23ctor%2A> constructeurs.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.FormatException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.FormatException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Exception.Message%2A> propriété de la nouvelle instance à un message système qui décrit l’erreur, tel que « Format non valide ». Ce message prend en compte la culture système en cours.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.FormatException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Référence Null (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur localisé.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message décrivant l'erreur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.FormatException" /> avec un message d'erreur spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Exception.Message%2A?displayProperty=nameWithType> propriété de l’exception à l’aide du `message` paramètre. Le contenu de `message` doit être compréhensible par les utilisateurs. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.FormatException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Référence Null (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FormatException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FormatException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
        <param name="context">Informations contextuelles sur la source ou la destination.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.FormatException" /> avec des données sérialisées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur est appelé lors de la désérialisation pour reconstituer l’objet exception transmis sur un flux.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
        <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <c>innerException</c> n’est pas une référence Null (<see langword="Nothing" /> en Visual Basic), l’exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l’exception interne.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.FormatException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une exception levée en conséquence directe d'une exception précédente doit contenir une référence à celle-ci dans la propriété <xref:System.Exception.InnerException%2A>. La propriété <xref:System.Exception.InnerException%2A> retourne la même valeur que celle qui a été passée dans le constructeur ou une référence Null (`Nothing` en Visual Basic), si la propriété <xref:System.Exception.InnerException%2A> ne fournit pas la valeur de l'exception interne au constructeur.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.FormatException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|La référence à l'exception interne.|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>