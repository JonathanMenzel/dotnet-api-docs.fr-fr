<Type Name="Object" FullName="System.Object">
  <TypeSignature Language="C#" Value="public class Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit object" />
  <TypeSignature Language="DocId" Value="T:System.Object" />
  <TypeSignature Language="VB.NET" Value="Public Class Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class Object" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="042e9-101">Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes.</span><span class="sxs-lookup"><span data-stu-id="042e9-101">Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes.</span></span> <span data-ttu-id="042e9-102">This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.</span><span class="sxs-lookup"><span data-stu-id="042e9-102">This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-103">Langues ne nécessitent généralement pas d’une classe déclare l’héritage de <xref:System.Object> , car l’héritage est implicite.</span><span class="sxs-lookup"><span data-stu-id="042e9-103">Languages typically do not require a class to declare inheritance from <xref:System.Object> because the inheritance is implicit.</span></span>  
  
 <span data-ttu-id="042e9-104">Étant donné que toutes les classes dans le .NET Framework sont dérivées de <xref:System.Object>, toutes les méthodes définies dans la <xref:System.Object> classe n’est disponible dans tous les objets dans le système.</span><span class="sxs-lookup"><span data-stu-id="042e9-104">Because all classes in the .NET Framework are derived from <xref:System.Object>, every method defined in the <xref:System.Object> class is available in all objects in the system.</span></span> <span data-ttu-id="042e9-105">Classes dérivées peuvent et substituer certaines de ces méthodes, notamment :</span><span class="sxs-lookup"><span data-stu-id="042e9-105">Derived classes can and do override some of these methods, including:</span></span>  
  
-   <span data-ttu-id="042e9-106"><xref:System.Object.Equals%2A> -Prend en charge les comparaisons entre des objets.</span><span class="sxs-lookup"><span data-stu-id="042e9-106"><xref:System.Object.Equals%2A> - Supports comparisons between objects.</span></span>  
  
-   <span data-ttu-id="042e9-107"><xref:System.Object.Finalize%2A> -Effectue des opérations de nettoyage avant qu’un objet est automatiquement récupéré.</span><span class="sxs-lookup"><span data-stu-id="042e9-107"><xref:System.Object.Finalize%2A> - Performs cleanup operations before an object is automatically reclaimed.</span></span>  
  
-   <span data-ttu-id="042e9-108"><xref:System.Object.GetHashCode%2A> -Génère un nombre correspondant à la valeur de l’objet pour prendre en charge l’utilisation d’une table de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-108"><xref:System.Object.GetHashCode%2A> - Generates a number corresponding to the value of the object to support the use of a hash table.</span></span>  
  
-   <span data-ttu-id="042e9-109"><xref:System.Object.ToString%2A> -Fabrique une chaîne de texte explicite qui décrit une instance de la classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-109"><xref:System.Object.ToString%2A> - Manufactures a human-readable text string that describes an instance of the class.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="042e9-110">Considérations sur les performances</span><span class="sxs-lookup"><span data-stu-id="042e9-110">Performance Considerations</span></span>  
 <span data-ttu-id="042e9-111">Si vous concevez une classe, comme une collection, qui doit gérer tout type d’objet, vous pouvez créer des membres de classe qui acceptent des instances de la <xref:System.Object> classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-111">If you are designing a class, such as a collection, that must handle any type of object, you can create class members that accept instances of the <xref:System.Object> class.</span></span> <span data-ttu-id="042e9-112">Toutefois, le processus de conversion boxing et unboxing d’un type a un coût de performances.</span><span class="sxs-lookup"><span data-stu-id="042e9-112">However, the process of boxing and unboxing a type carries a performance cost.</span></span> <span data-ttu-id="042e9-113">Si vous savez que votre nouvelle classe devra souvent gérer certains types valeur, vous pouvez utiliser une des deux solutions suivantes pour réduire le coût de conversion boxing.</span><span class="sxs-lookup"><span data-stu-id="042e9-113">If you know your new class will frequently handle certain value types you can use one of two tactics to minimize the cost of boxing.</span></span>  
  
-   <span data-ttu-id="042e9-114">Créer une méthode générale qui accepte un <xref:System.Object> type et un ensemble de surcharges de méthode spécifique au type qui acceptent chaque type de valeur que votre classe à gérer souvent.</span><span class="sxs-lookup"><span data-stu-id="042e9-114">Create a general method that accepts an <xref:System.Object> type, and a set of type-specific method overloads that accept each value type you expect your class to frequently handle.</span></span> <span data-ttu-id="042e9-115">S’il existe une méthode spécifique au type qui accepte le type de paramètre appelant, aucun boxing se produit et la méthode spécifique au type est appelée.</span><span class="sxs-lookup"><span data-stu-id="042e9-115">If a type-specific method exists that accepts the calling parameter type, no boxing occurs and the type-specific method is invoked.</span></span> <span data-ttu-id="042e9-116">S’il n’existe aucun argument de la méthode qui correspond au type de paramètre appelant, le paramètre est convertie (boxed) et la méthode générale est appelée.</span><span class="sxs-lookup"><span data-stu-id="042e9-116">If there is no method argument that matches the calling parameter type, the parameter is boxed and the general method is invoked.</span></span>  
  
-   <span data-ttu-id="042e9-117">Concevoir votre type et ses membres pour utiliser des génériques.</span><span class="sxs-lookup"><span data-stu-id="042e9-117">Design your type and its members to use generics.</span></span> <span data-ttu-id="042e9-118">Le common language runtime crée un type générique fermé lorsque vous créez une instance de votre classe et que vous spécifiez un argument de type générique.</span><span class="sxs-lookup"><span data-stu-id="042e9-118">The common language runtime creates a closed generic type when you create an instance of your class and specify a generic type argument.</span></span> <span data-ttu-id="042e9-119">La méthode générique est spécifique au type et peut être appelée sans avoir à évaluer le paramètre appelant.</span><span class="sxs-lookup"><span data-stu-id="042e9-119">The generic method is type-specific and can be invoked without boxing the calling parameter.</span></span>  
  
 <span data-ttu-id="042e9-120">Bien qu’il est parfois nécessaire de développer des classes à usage général qui acceptent et retournent <xref:System.Object> types, vous pouvez améliorer les performances en fournissant également une classe spécifique au type pour gérer un type fréquemment utilisé.</span><span class="sxs-lookup"><span data-stu-id="042e9-120">Although it is sometimes necessary to develop general purpose classes that accept and return <xref:System.Object> types, you can improve performance by also providing a type-specific class to handle a frequently used type.</span></span> <span data-ttu-id="042e9-121">Par exemple, en fournissant une classe qui est spécifique à la définition et l’obtention des valeurs booléennes élimine le coût de conversion boxing et unboxing des valeurs booléennes.</span><span class="sxs-lookup"><span data-stu-id="042e9-121">For example, providing a class that is specific to setting and getting Boolean values eliminates the cost of boxing and unboxing Boolean values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="042e9-122">L’exemple suivant définit un type Point dérivé le <xref:System.Object> classe et substitue un grand nombre de méthodes virtuelles de la <xref:System.Object> classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-122">The following example defines a Point type derived from the <xref:System.Object> class and overrides many of the virtual methods of the <xref:System.Object> class.</span></span> <span data-ttu-id="042e9-123">En outre, l’exemple montre comment appeler la plupart des statiques et les méthodes de l’instance du <xref:System.Object> classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-123">In addition, the example shows how to call many of the static and instance methods of the <xref:System.Object> class.</span></span>  
  
 [!code-cpp[ObjectX#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectX/cpp/ObjectX.cpp#1)]
 [!code-csharp[ObjectX#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectX/CS/ObjectX.cs#1)]
 [!code-vb[ObjectX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectX/vb/objectX.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="042e9-124">Statique public (<see langword="Shared" /> en Visual Basic) de ce type sont thread-safe.</span><span class="sxs-lookup"><span data-stu-id="042e9-124">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="042e9-125">Les membres d’instance ne sont pas garantis être thread-safe.</span><span class="sxs-lookup"><span data-stu-id="042e9-125">Instance members are not guaranteed to be thread-safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Object ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Object();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="042e9-126">Initializes a new instance of the <see cref="T:System.Object" /> class.</span><span class="sxs-lookup"><span data-stu-id="042e9-126">Initializes a new instance of the <see cref="T:System.Object" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-127">Ce constructeur est appelé par les constructeurs dans les classes dérivées, mais il peut également être utilisé pour créer directement une instance de la <xref:System.Object> classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-127">This constructor is called by constructors in derived classes, but it can also be used to directly create an instance of the <xref:System.Object> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="042e9-128">Determines whether two object instances are equal.</span><span class="sxs-lookup"><span data-stu-id="042e9-128">Determines whether two object instances are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="042e9-129">The object to compare with the current object.</span><span class="sxs-lookup"><span data-stu-id="042e9-129">The object to compare with the current object.</span></span></param>
        <summary><span data-ttu-id="042e9-130">Determines whether the specified object is equal to the current object.</span><span class="sxs-lookup"><span data-stu-id="042e9-130">Determines whether the specified object is equal to the current object.</span></span></summary>
        <returns>
          <span data-ttu-id="042e9-131"><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="042e9-131"><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-132">Le type de comparaison entre l’instance actuelle et la `obj` paramètre varie selon que l’instance actuelle est un type référence ou un type valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-132">The type of comparison between the current instance and the `obj` parameter depends on whether the current instance is a reference type or a value type.</span></span>  
  
-   <span data-ttu-id="042e9-133">Si l’instance actuelle est un type référence, le <xref:System.Object.Equals%28System.Object%29> méthode teste l’égalité de référence et un appel à la <xref:System.Object.Equals%28System.Object%29> méthode est équivalente à un appel à la <xref:System.Object.ReferenceEquals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-133">If the current instance is a reference type, the <xref:System.Object.Equals%28System.Object%29> method tests for reference equality, and a call to the <xref:System.Object.Equals%28System.Object%29> method is equivalent to a call to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="042e9-134">L’égalité des références signifie que les variables d’objet qui sont comparées font référence au même objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-134">Reference equality means that the object variables that are compared refer to the same object.</span></span> <span data-ttu-id="042e9-135">L’exemple suivant illustre le résultat de ce type de comparaison.</span><span class="sxs-lookup"><span data-stu-id="042e9-135">The following example illustrates the result of such a comparison.</span></span> <span data-ttu-id="042e9-136">Il définit un `Person` (classe), qui est un type référence, et appelle le `Person` constructeur de classe à instancier deux nouveaux `Person` objets, `person1a` et `person2`, qui ont la même valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-136">It defines a `Person` class, which is a reference type, and calls the `Person` class constructor to instantiate two new `Person` objects, `person1a` and `person2`, which have the same value.</span></span> <span data-ttu-id="042e9-137">Il affecte également `person1a` à une autre variable objet, `person1b`.</span><span class="sxs-lookup"><span data-stu-id="042e9-137">It also assigns `person1a` to another object variable, `person1b`.</span></span> <span data-ttu-id="042e9-138">Comme la sortie de l’exemple, `person1a` et `person1b` sont égales, car elles référencent le même objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-138">As the output from the example shows, `person1a` and `person1b` are equal because they reference the same object.</span></span> <span data-ttu-id="042e9-139">Toutefois, `person1a` et `person2` ne sont pas égales, même si elles ont la même valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-139">However, `person1a` and `person2` are not equal, although they have the same value.</span></span>  
  
     [!code-csharp[System.Object.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_ref.cs#2)]
     [!code-vb[System.Object.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_ref.vb#2)]  
  
-   <span data-ttu-id="042e9-140">Si l’instance actuelle est un type valeur, le <xref:System.Object.Equals%28System.Object%29> méthode teste l’égalité de valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-140">If the current instance is a value type, the <xref:System.Object.Equals%28System.Object%29> method tests for value equality.</span></span> <span data-ttu-id="042e9-141">L’égalité des valeurs signifie que les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="042e9-141">Value equality means the following:</span></span>  
  
    -   <span data-ttu-id="042e9-142">Les deux objets sont du même type.</span><span class="sxs-lookup"><span data-stu-id="042e9-142">The two objects are of the same type.</span></span> <span data-ttu-id="042e9-143">Comme le montre l’exemple suivant, un <xref:System.Byte> objet qui a la valeur 12 n’est pas égale un <xref:System.Int32> objet qui a une valeur de 12, car les deux objets ont des types différents d’exécution.</span><span class="sxs-lookup"><span data-stu-id="042e9-143">As the following example shows, a <xref:System.Byte> object that has a value of 12 does not equal an <xref:System.Int32> object that has a value of 12, because the two objects have different run-time types.</span></span>  
  
         [!code-csharp[System.Object.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_val1.cs#3)]
         [!code-vb[System.Object.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_val1.vb#3)]  
  
    -   <span data-ttu-id="042e9-144">Les valeurs des champs publics et privés des deux objets sont égales.</span><span class="sxs-lookup"><span data-stu-id="042e9-144">The values of the public and private fields of the two objects are equal.</span></span> <span data-ttu-id="042e9-145">L’exemple suivant teste l’égalité des valeurs.</span><span class="sxs-lookup"><span data-stu-id="042e9-145">The following example tests for value equality.</span></span> <span data-ttu-id="042e9-146">Il définit un `Person` structure, qui est un type valeur, et appelle le `Person` constructeur de classe à instancier deux nouveaux `Person` objets, `person1` et `person2`, qui ont la même valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-146">It defines a `Person` structure, which is a value type, and calls the `Person` class constructor to instantiate two new `Person` objects, `person1` and `person2`, which have the same value.</span></span> <span data-ttu-id="042e9-147">Comme le montre la sortie de l’exemple, bien que les deux variables objets font référence à des objets différents, `person1` et `person2` sont égaux, car ils ont la même valeur pour privé `personName` champ.</span><span class="sxs-lookup"><span data-stu-id="042e9-147">As the output from the example shows, although the two object variables refer to different objects, `person1` and `person2` are equal because they have the same value for the private `personName` field.</span></span>  
  
         [!code-csharp[System.Object.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_val2.cs#4)]
         [!code-vb[System.Object.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_val2.vb#4)]  
  
 <span data-ttu-id="042e9-148">Étant donné que la <xref:System.Object> est la classe de base pour tous les types dans le .NET Framework, la <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> méthode fournit la comparaison d’égalité par défaut pour tous les autres types.</span><span class="sxs-lookup"><span data-stu-id="042e9-148">Because the <xref:System.Object> class is the base class for all types in the .NET Framework, the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method provides the default equality comparison for all other types.</span></span> <span data-ttu-id="042e9-149">Toutefois, les types souvent remplacer le <xref:System.Object.Equals%2A> méthode pour implémenter l’égalité des valeurs.</span><span class="sxs-lookup"><span data-stu-id="042e9-149">However, types often override the <xref:System.Object.Equals%2A> method to implement value equality.</span></span> <span data-ttu-id="042e9-150">Pour plus d’informations, consultez les Notes pour les appelants et les Notes pour les sections de l’attention des héritiers.</span><span class="sxs-lookup"><span data-stu-id="042e9-150">For more information, see the Notes for Callers and Notes for Inheritors sections.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="042e9-151">Notes pour le [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="042e9-151">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="042e9-152">Lorsque vous appelez le <xref:System.Object.Equals%28System.Object%29> la surcharge de méthode sur une classe dans le [!INCLUDE[wrt](~/includes/wrt-md.md)], il fournit le comportement par défaut pour les classes qui ne remplacent pas <xref:System.Object.Equals%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="042e9-152">When you call the <xref:System.Object.Equals%28System.Object%29> method overload on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don’t override <xref:System.Object.Equals%28System.Object%29>.</span></span> <span data-ttu-id="042e9-153">Cela fait partie de la prise en charge le .NET Framework fournit pour les [!INCLUDE[wrt](~/includes/wrt-md.md)] (consultez [.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="042e9-153">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="042e9-154">Classes de la [!INCLUDE[wrt](~/includes/wrt-md.md)] n’héritent pas <xref:System.Object>et n’implémentent pas actuellement un <xref:System.Object.Equals%28System.Object%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-154">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don’t inherit <xref:System.Object>, and currently don’t implement an <xref:System.Object.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="042e9-155">Toutefois, ils semblent avoir <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, et <xref:System.Object.GetHashCode%2A> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="042e9-155">However, they appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="042e9-156"> les classes qui sont écrits en c# ou Visual Basic peuvent substituer la <xref:System.Object.Equals%28System.Object%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="042e9-156"> classes that are written in C# or Visual Basic can override the <xref:System.Object.Equals%28System.Object%29> method overload.</span></span>  
  
## <a name="notes-for-callers"></a><span data-ttu-id="042e9-157">Remarques pour les appelants</span><span class="sxs-lookup"><span data-stu-id="042e9-157">Notes for Callers</span></span>  
 <span data-ttu-id="042e9-158">Les classes dérivées remplacer fréquemment le <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> méthode pour implémenter l’égalité des valeurs.</span><span class="sxs-lookup"><span data-stu-id="042e9-158">Derived classes frequently override the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to implement value equality.</span></span> <span data-ttu-id="042e9-159">En outre, les types fournissent aussi fréquemment une surcharge supplémentaire fortement typée pour le `Equals` méthode, généralement en implémentant le <xref:System.IEquatable%601> interface.</span><span class="sxs-lookup"><span data-stu-id="042e9-159">In addition, types also frequently provide an additional strongly typed overload to the `Equals` method, typically by implementing the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="042e9-160">Lorsque vous appelez le `Equals` méthode pour tester l’égalité, vous devez savoir si l’instance actuelle se substitue à <xref:System.Object.Equals%2A?displayProperty=nameWithType> et comprendre comment un appel particulier à un `Equals` méthode est résolue.</span><span class="sxs-lookup"><span data-stu-id="042e9-160">When you call the `Equals` method to test for equality, you should know whether the current instance overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType> and understand how a particular call to an `Equals` method is resolved.</span></span> <span data-ttu-id="042e9-161">Sinon, vous effectuer un test d’égalité qui est différente de ceux que vous aviez prévus, et la méthode peut retourner une valeur inattendue.</span><span class="sxs-lookup"><span data-stu-id="042e9-161">Otherwise, you may be performing a test for equality that is different from what you intended, and the method may return an unexpected value.</span></span>  
  
 <span data-ttu-id="042e9-162">L'exemple suivant illustre cette situation.</span><span class="sxs-lookup"><span data-stu-id="042e9-162">The following example provides an illustration.</span></span> <span data-ttu-id="042e9-163">Il instancie trois <xref:System.Text.StringBuilder> objets avec des chaînes identiques, puis appelle quatre `Equals` méthodes.</span><span class="sxs-lookup"><span data-stu-id="042e9-163">It instantiates three <xref:System.Text.StringBuilder> objects with identical strings, and then makes four calls to `Equals` methods.</span></span> <span data-ttu-id="042e9-164">La première méthode d’appel retourne `true`et le retour de trois autres `false`.</span><span class="sxs-lookup"><span data-stu-id="042e9-164">The first method call returns `true`, and the remaining three return `false`.</span></span>  
  
 [!code-csharp[System.Object.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equalssb1.cs#5)]
 [!code-vb[System.Object.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equalssb1.vb#5)]  
  
 <span data-ttu-id="042e9-165">Dans le premier cas, fortement typé <xref:System.Text.StringBuilder.Equals%28System.Text.StringBuilder%29?displayProperty=nameWithType> surcharge de méthode qui teste l’égalité des valeurs, est appelée.</span><span class="sxs-lookup"><span data-stu-id="042e9-165">In the first case, the strongly typed <xref:System.Text.StringBuilder.Equals%28System.Text.StringBuilder%29?displayProperty=nameWithType> method overload, which tests for value equality, is called.</span></span> <span data-ttu-id="042e9-166">Étant donné que les chaînes attribué aux deux <xref:System.Text.StringBuilder> objets sont égaux, la méthode retourne `true`.</span><span class="sxs-lookup"><span data-stu-id="042e9-166">Because the strings assigned to the two <xref:System.Text.StringBuilder> objects are equal, the method returns `true`.</span></span> <span data-ttu-id="042e9-167">Toutefois, <xref:System.Text.StringBuilder> ne remplace pas <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-167">However, <xref:System.Text.StringBuilder> does not override <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="042e9-168">Pour cette raison, lorsque le <xref:System.Text.StringBuilder> objet est converti en un <xref:System.Object>, lorsque un <xref:System.Text.StringBuilder> instance est assignée à une variable de type <xref:System.Object>et à quel moment le <xref:System.Object.Equals%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> méthode est passée de deux <xref:System.Text.StringBuilder> objets, la valeur par défaut <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="042e9-168">Because of this, when the <xref:System.Text.StringBuilder> object is cast to an <xref:System.Object>, when a <xref:System.Text.StringBuilder> instance is assigned to a variable of type <xref:System.Object>, and when the <xref:System.Object.Equals%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method is passed two <xref:System.Text.StringBuilder> objects, the default <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="042e9-169">Étant donné que <xref:System.Text.StringBuilder> est un type référence, cela équivaut à passer les deux <xref:System.Text.StringBuilder> des objets sur le <xref:System.Object.ReferenceEquals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-169">Because <xref:System.Text.StringBuilder> is a reference type, this is equivalent to passing the two <xref:System.Text.StringBuilder> objects to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="042e9-170">Bien que les trois <xref:System.Text.StringBuilder> objets contiennent des chaînes identiques, ils font référence à trois objets distincts.</span><span class="sxs-lookup"><span data-stu-id="042e9-170">Although all three <xref:System.Text.StringBuilder> objects contain identical strings, they refer to three distinct objects.</span></span> <span data-ttu-id="042e9-171">Par conséquent, ces trois appels de méthode retour `false`.</span><span class="sxs-lookup"><span data-stu-id="042e9-171">As a result, these three method calls return `false`.</span></span>  
  
 <span data-ttu-id="042e9-172">Vous pouvez comparer l’objet actuel à un autre objet pour égalité des références en appelant le <xref:System.Object.ReferenceEquals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-172">You can compare the current object to another object for reference equality by calling the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="042e9-173">En Visual Basic, vous pouvez également utiliser le `is` (mot clé) (par exemple, `If Me Is otherObject Then ...`).</span><span class="sxs-lookup"><span data-stu-id="042e9-173">In Visual Basic, you can also use the `is` keyword (for example, `If Me Is otherObject Then ...`).</span></span>  
  
## <a name="notes-for-inheritors"></a><span data-ttu-id="042e9-174">Remarques pour les héritiers de</span><span class="sxs-lookup"><span data-stu-id="042e9-174">Notes for Inheritors</span></span>  
 <span data-ttu-id="042e9-175">Lorsque vous définissez votre propre type, ce type hérite des fonctionnalités définies par le `Equals` méthode de son type de base.</span><span class="sxs-lookup"><span data-stu-id="042e9-175">When you define your own type, that type inherits the functionality defined by the `Equals` method of its base type.</span></span> <span data-ttu-id="042e9-176">Le tableau suivant répertorie l’implémentation par défaut de la `Equals` méthode pour les principales catégories de types dans le .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="042e9-176">The following table lists the default implementation of the `Equals` method for the major categories of types in the .NET Framework.</span></span>  
  
|<span data-ttu-id="042e9-177">Catégorie de type</span><span class="sxs-lookup"><span data-stu-id="042e9-177">Type category</span></span>|<span data-ttu-id="042e9-178">Égalité défini par</span><span class="sxs-lookup"><span data-stu-id="042e9-178">Equality defined by</span></span>|<span data-ttu-id="042e9-179">Commentaires</span><span class="sxs-lookup"><span data-stu-id="042e9-179">Comments</span></span>|  
|-------------------|-------------------------|--------------|  
|<span data-ttu-id="042e9-180">Classe dérivée directement à partir de <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="042e9-180">Class derived directly from <xref:System.Object></span></span>|<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>|<span data-ttu-id="042e9-181">Égalité de référence ; équivalent à l’appel <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-181">Reference equality; equivalent to calling <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="042e9-182">Structure</span><span class="sxs-lookup"><span data-stu-id="042e9-182">Structure</span></span>|<xref:System.ValueType.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="042e9-183">Égalité des valeurs ; une comparaison octet par octet directe ou comparaison de champ par champ à l’aide de la réflexion.</span><span class="sxs-lookup"><span data-stu-id="042e9-183">Value equality; either direct byte-by-byte comparison or field-by-field comparison using reflection.</span></span>|  
|<span data-ttu-id="042e9-184">Énumération</span><span class="sxs-lookup"><span data-stu-id="042e9-184">Enumeration</span></span>|<xref:System.Enum.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="042e9-185">Valeurs doivent avoir le même type d’énumération et la même valeur sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="042e9-185">Values must have the same enumeration type and the same underlying value.</span></span>|  
|<span data-ttu-id="042e9-186">délégué</span><span class="sxs-lookup"><span data-stu-id="042e9-186">Delegate</span></span>|<xref:System.MulticastDelegate.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="042e9-187">Les délégués doivent avoir le même type avec les listes d’appel identiques.</span><span class="sxs-lookup"><span data-stu-id="042e9-187">Delegates must have the same type with identical invocation lists.</span></span>|  
|<span data-ttu-id="042e9-188">Interface</span><span class="sxs-lookup"><span data-stu-id="042e9-188">Interface</span></span>|<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>|<span data-ttu-id="042e9-189">Égalité des références.</span><span class="sxs-lookup"><span data-stu-id="042e9-189">Reference equality.</span></span>|  
  
 <span data-ttu-id="042e9-190">Pour un type valeur, vous devez toujours remplacer <xref:System.Object.Equals%2A>, car les tests d’égalité qui reposent sur la réflexion offrent des performances médiocres.</span><span class="sxs-lookup"><span data-stu-id="042e9-190">For a value type, you should always override <xref:System.Object.Equals%2A>, because tests for equality that rely on reflection offer poor performance.</span></span> <span data-ttu-id="042e9-191">Vous pouvez également substituer l’implémentation par défaut de <xref:System.Object.Equals%2A> pour les types de référence pour tester l’égalité des valeurs au lieu de l’égalité des références et pour définir la signification précise de l’égalité des valeurs.</span><span class="sxs-lookup"><span data-stu-id="042e9-191">You can also override the default implementation of <xref:System.Object.Equals%2A> for reference types to test for value equality instead of reference equality and to define the precise meaning of value equality.</span></span> <span data-ttu-id="042e9-192">De telles implémentations de <xref:System.Object.Equals%2A> retourner `true` si les deux objets ont la même valeur, même s’ils ne sont pas la même instance.</span><span class="sxs-lookup"><span data-stu-id="042e9-192">Such implementations of <xref:System.Object.Equals%2A> return `true` if the two objects have the same value, even if they are not the same instance.</span></span> <span data-ttu-id="042e9-193">L’implémenteur du type décide ce qui constitue la valeur d’un objet, mais il est généralement tout ou partie des données stockées dans les variables d’instance de l’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-193">The type's implementer decides what constitutes an object's value, but it is typically some or all the data stored in the instance variables of the object.</span></span> <span data-ttu-id="042e9-194">Par exemple, la valeur d’un <xref:System.String> objet est basé sur les caractères de la chaîne ; le <xref:System.String.Equals%28System.Object%29?displayProperty=nameWithType> substitutions de méthode le <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> retour de méthode `true` pour les deux instances contiennent les mêmes caractères dans le même ordre de chaîne.</span><span class="sxs-lookup"><span data-stu-id="042e9-194">For example, the value of a <xref:System.String> object is based on the characters of the string; the <xref:System.String.Equals%28System.Object%29?displayProperty=nameWithType> method overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to return `true` for any two string instances that contain the same characters in the same order.</span></span>  
  
 <span data-ttu-id="042e9-195">L’exemple suivant montre comment substituer la <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> méthode pour tester l’égalité des valeurs.</span><span class="sxs-lookup"><span data-stu-id="042e9-195">The following example shows how to override the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to test for value equality.</span></span> <span data-ttu-id="042e9-196">Il remplace le <xref:System.Object.Equals%2A> méthode pour la `Person` classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-196">It overrides the <xref:System.Object.Equals%2A> method for the `Person` class.</span></span> <span data-ttu-id="042e9-197">Si `Person` accepté son implémentation de la classe de base de l’égalité, deux `Person` objets serait égales uniquement si elles référencé un objet unique.</span><span class="sxs-lookup"><span data-stu-id="042e9-197">If `Person` accepted its base class implementation of equality, two `Person` objects would be equal only if they referenced a single object.</span></span> <span data-ttu-id="042e9-198">Toutefois, dans ce cas, deux `Person` objets sont égales si elles ont la même valeur pour le `Person.Id` propriété.</span><span class="sxs-lookup"><span data-stu-id="042e9-198">However, in this case, two `Person` objects are equal if they have the same value for the `Person.Id` property.</span></span>  
  
 [!code-csharp[System.Object.Equals#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equalsoverride.cs#6)]
 [!code-vb[System.Object.Equals#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equalsoverride.vb#6)]  
  
 <span data-ttu-id="042e9-199">Outre l’écrasement <xref:System.Object.Equals%2A>, vous pouvez implémenter la <xref:System.IEquatable%601> interface afin de fournir un test fortement typé pour l’égalité.</span><span class="sxs-lookup"><span data-stu-id="042e9-199">In addition to overriding <xref:System.Object.Equals%2A>, you can implement the <xref:System.IEquatable%601> interface to provide a strongly typed test for equality.</span></span>  
  
 <span data-ttu-id="042e9-200">Les instructions suivantes doivent être remplies pour toutes les implémentations de la <xref:System.Object.Equals%28System.Object%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-200">The following statements must be true for all implementations of the <xref:System.Object.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="042e9-201">Dans la liste, `x`, `y`, et `z` représentent des références d’objet qui ne sont pas **null**.</span><span class="sxs-lookup"><span data-stu-id="042e9-201">In the list, `x`, `y`, and `z` represent object references that are not **null**.</span></span>  
  
-   <span data-ttu-id="042e9-202">`x.Equals(x)` Retourne `true`, sauf dans les scénarios qui impliquent des types à virgule flottante.</span><span class="sxs-lookup"><span data-stu-id="042e9-202">`x.Equals(x)` returns `true`, except in cases that involve floating-point types.</span></span> <span data-ttu-id="042e9-203">Voir ISO/IEC/IEEE 60559:2011, informatique--microprocesseur systèmes--arithmétique à virgule flottante.</span><span class="sxs-lookup"><span data-stu-id="042e9-203">See ISO/IEC/IEEE 60559:2011, Information technology -- Microprocessor Systems -- Floating-Point arithmetic.</span></span>  
  
-   <span data-ttu-id="042e9-204">`x.Equals(y)` Retourne la même valeur que `y.Equals(x)`.</span><span class="sxs-lookup"><span data-stu-id="042e9-204">`x.Equals(y)` returns the same value as `y.Equals(x)`.</span></span>  
  
-   <span data-ttu-id="042e9-205">`x.Equals(y)` Retourne `true` si les deux `x` et `y` sont `NaN`.</span><span class="sxs-lookup"><span data-stu-id="042e9-205">`x.Equals(y)` returns `true` if both `x` and `y` are `NaN`.</span></span>  
  
-   <span data-ttu-id="042e9-206">Si `(x.Equals(y) && y.Equals(z))` retourne `true`, puis `x.Equals(z)` retourne `true`.</span><span class="sxs-lookup"><span data-stu-id="042e9-206">If `(x.Equals(y) && y.Equals(z))` returns `true`, then `x.Equals(z)` returns `true`.</span></span>  
  
-   <span data-ttu-id="042e9-207">Les appels successifs à `x.Equals(y)` retournent la même valeur tant que les objets référencés par `x` et `y` ne sont pas modifiées.</span><span class="sxs-lookup"><span data-stu-id="042e9-207">Successive calls to `x.Equals(y)` return the same value as long as the objects referenced by `x` and `y` are not modified.</span></span>  
  
-   <span data-ttu-id="042e9-208">`x.Equals(null)` retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="042e9-208">`x.Equals(null)` returns `false`.</span></span>  
  
 <span data-ttu-id="042e9-209">Les implémentations de <xref:System.Object.Equals%2A> ne doit pas lever d’exceptions ; ils doivent toujours retourner une valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-209">Implementations of <xref:System.Object.Equals%2A> must not throw exceptions; they should always return a value.</span></span> <span data-ttu-id="042e9-210">Par exemple, si `obj` est `null`, le <xref:System.Object.Equals%2A> méthode doit retourner `false` au lieu de lever une <xref:System.ArgumentNullException>.</span><span class="sxs-lookup"><span data-stu-id="042e9-210">For example, if `obj` is `null`, the <xref:System.Object.Equals%2A> method should return `false` instead of throwing an <xref:System.ArgumentNullException>.</span></span>  
  
 <span data-ttu-id="042e9-211">Suivez ces recommandations lors de la substitution <xref:System.Object.Equals%28System.Object%29>:</span><span class="sxs-lookup"><span data-stu-id="042e9-211">Follow these guidelines when overriding <xref:System.Object.Equals%28System.Object%29>:</span></span>  
  
-   <span data-ttu-id="042e9-212">Les types qui implémentent <xref:System.IComparable> doit remplacer <xref:System.Object.Equals%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="042e9-212">Types that implement <xref:System.IComparable> must override <xref:System.Object.Equals%28System.Object%29>.</span></span>  
  
-   <span data-ttu-id="042e9-213">Types qui substituent <xref:System.Object.Equals%28System.Object%29> doit également substituer <xref:System.Object.GetHashCode%2A>; sinon, les tables de hachage peut ne pas fonctionneront correctement.</span><span class="sxs-lookup"><span data-stu-id="042e9-213">Types that override <xref:System.Object.Equals%28System.Object%29> must also override <xref:System.Object.GetHashCode%2A>; otherwise, hash tables  might not work correctly.</span></span>  
  
-   <span data-ttu-id="042e9-214">Vous devez envisager d’implémenter le <xref:System.IEquatable%601> interface pour prendre en charge fortement typé vérifie l’égalité.</span><span class="sxs-lookup"><span data-stu-id="042e9-214">You should consider implementing the <xref:System.IEquatable%601> interface to support strongly typed tests for equality.</span></span> <span data-ttu-id="042e9-215">Votre <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> implémentation doit retourner des résultats cohérents avec <xref:System.Object.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-215">Your <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> implementation should return results that are consistent with <xref:System.Object.Equals%2A>.</span></span>  
  
-   <span data-ttu-id="042e9-216">Si votre langage de programmation prend en charge la surcharge d’opérateur et si vous surchargez l’opérateur d’égalité pour un type donné, vous devez également substituer la <xref:System.Object.Equals%28System.Object%29> méthode pour retourner le même résultat que l’opérateur d’égalité.</span><span class="sxs-lookup"><span data-stu-id="042e9-216">If your programming language supports operator overloading and you overload the equality operator for a given type, you must also override the <xref:System.Object.Equals%28System.Object%29> method to return the same result as the equality operator.</span></span> <span data-ttu-id="042e9-217">Cela permet de garantir que code de bibliothèque de classe qui utilise <xref:System.Object.Equals%2A> (tel que <xref:System.Collections.ArrayList> et <xref:System.Collections.Hashtable>) se comporte de manière cohérente avec le mode d’utilisation de l’opérateur d’égalité par le code d’application.</span><span class="sxs-lookup"><span data-stu-id="042e9-217">This  helps ensure that class library code that uses <xref:System.Object.Equals%2A> (such as <xref:System.Collections.ArrayList> and <xref:System.Collections.Hashtable>) behaves in a manner that is consistent with the way the equality operator is used by application code.</span></span>  
  
### <a name="guidelines-for-reference-types"></a><span data-ttu-id="042e9-218">Recommandations pour les Types référence</span><span class="sxs-lookup"><span data-stu-id="042e9-218">Guidelines for Reference Types</span></span>  
 <span data-ttu-id="042e9-219">Les directives suivantes s’appliquent à la substitution de <xref:System.Object.Equals%28System.Object%29> pour un type référence :</span><span class="sxs-lookup"><span data-stu-id="042e9-219">The following guidelines apply to overriding <xref:System.Object.Equals%28System.Object%29> for a reference type:</span></span>  
  
-   <span data-ttu-id="042e9-220">Pensez à substituer <xref:System.Object.Equals%2A> si la sémantique de type est basée sur le fait que le type représente une ou plusieurs valeurs.</span><span class="sxs-lookup"><span data-stu-id="042e9-220">Consider overriding <xref:System.Object.Equals%2A> if the semantics of the type are based on the fact that the type represents some value(s).</span></span>  
  
-   <span data-ttu-id="042e9-221">La plupart des types référence ne doivent pas surcharger l’opérateur d’égalité, même s’ils substituent <xref:System.Object.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-221">Most reference types must not overload the equality operator, even if they override <xref:System.Object.Equals%2A>.</span></span> <span data-ttu-id="042e9-222">Toutefois, si vous implémentez un type référence qui doit avoir une sémantique de valeur, par exemple un type nombre complexe, vous devez substituer l’opérateur d’égalité.</span><span class="sxs-lookup"><span data-stu-id="042e9-222">However, if you are implementing a reference type that is intended to have value semantics, such as a complex number type, you must override the equality operator.</span></span>  
  
-   <span data-ttu-id="042e9-223">Vous ne devez pas substituer <xref:System.Object.Equals%2A> sur un type référence mutable.</span><span class="sxs-lookup"><span data-stu-id="042e9-223">You should not override <xref:System.Object.Equals%2A> on a mutable reference type.</span></span> <span data-ttu-id="042e9-224">C’est parce que la substitution de <xref:System.Object.Equals%2A> requiert également substituer la <xref:System.Object.GetHashCode%2A> méthode, comme indiqué dans la section précédente.</span><span class="sxs-lookup"><span data-stu-id="042e9-224">This is because overriding <xref:System.Object.Equals%2A> requires that you also override the <xref:System.Object.GetHashCode%2A> method, as discussed in the previous section.</span></span> <span data-ttu-id="042e9-225">Cela signifie que le code de hachage d’une instance d’un type référence mutable peut changer pendant sa durée de vie, ce qui peut entraîner l’objet à être perdues dans une table de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-225">This means that the hash code of an instance of a mutable reference type can change during its lifetime, which can cause the object to be lost in a hash table.</span></span>  
  
### <a name="guidelines-for-value-types"></a><span data-ttu-id="042e9-226">Recommandations pour les Types valeur</span><span class="sxs-lookup"><span data-stu-id="042e9-226">Guidelines for Value Types</span></span>  
 <span data-ttu-id="042e9-227">Les directives suivantes s’appliquent à la substitution de <xref:System.Object.Equals%28System.Object%29> pour un type valeur :</span><span class="sxs-lookup"><span data-stu-id="042e9-227">The following guidelines apply to overriding <xref:System.Object.Equals%28System.Object%29> for a value type:</span></span>  
  
-   <span data-ttu-id="042e9-228">Si vous définissez un type valeur qui inclut un ou plusieurs champs dont les valeurs sont des types référence, vous devez substituer <xref:System.Object.Equals%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="042e9-228">If you are defining a value type that includes one or more fields whose values are reference types, you should override <xref:System.Object.Equals%28System.Object%29>.</span></span> <span data-ttu-id="042e9-229">Le <xref:System.Object.Equals%28System.Object%29> implémentation fournie par <xref:System.ValueType> effectue une comparaison octet par octet pour les types de valeur dont les champs sont tous les types valeur, mais il utilise la réflexion pour effectuer une comparaison de champ par champ de types de valeur dont les champs sont des types référence.</span><span class="sxs-lookup"><span data-stu-id="042e9-229">The <xref:System.Object.Equals%28System.Object%29> implementation provided by <xref:System.ValueType> performs a byte-by-byte comparison for value types whose fields are all value types, but it uses reflection to perform a field-by-field comparison of value types whose fields include reference types.</span></span>  
  
-   <span data-ttu-id="042e9-230">Si vous substituez <xref:System.Object.Equals%2A> et votre langage de développement prend en charge la surcharge d’opérateur, vous devez surcharger l’opérateur d’égalité.</span><span class="sxs-lookup"><span data-stu-id="042e9-230">If you override <xref:System.Object.Equals%2A> and your development language supports operator overloading, you must overload the equality operator.</span></span>  
  
-   <span data-ttu-id="042e9-231">Vous devez implémenter la <xref:System.IEquatable%601> interface.</span><span class="sxs-lookup"><span data-stu-id="042e9-231">You should implement the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="042e9-232">Fortement typées <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> méthode évite de boxing le `obj` argument.</span><span class="sxs-lookup"><span data-stu-id="042e9-232">Calling the strongly typed <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method avoids boxing the `obj` argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="042e9-233">L’exemple suivant montre un `Point` classe qui remplace le <xref:System.Object.Equals%2A> méthode pour fournir l’égalité des valeurs et un `Point3D` classe qui est dérivée de `Point`.</span><span class="sxs-lookup"><span data-stu-id="042e9-233">The following example shows a `Point` class that overrides the <xref:System.Object.Equals%2A> method to provide value equality, and a `Point3D` class that is derived from `Point`.</span></span> <span data-ttu-id="042e9-234">Étant donné que `Point` substitue <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> pour tester l’égalité des valeurs, le <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> méthode n’est pas appelée.</span><span class="sxs-lookup"><span data-stu-id="042e9-234">Because `Point` overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> to test for value equality, the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is not called.</span></span> <span data-ttu-id="042e9-235">Toutefois, `Point3D.Equals` appelle `Point.Equals` car `Point` implémente <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> d’une manière qui fournit l’égalité des valeurs.</span><span class="sxs-lookup"><span data-stu-id="042e9-235">However, `Point3D.Equals` calls `Point.Equals` because `Point` implements <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> in a manner that provides value equality.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals2#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals2/CS/equals2.cs#1)]
 [!code-vb[ECMA-System.Object.Equals2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals2/VB/equals2.vb#1)]  
  
 <span data-ttu-id="042e9-236">Le `Point.Equals` méthode vérifie pour vous assurer que le `obj` argument n’est pas **null** et qu’elle fait référence à une instance du même type que cet objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-236">The `Point.Equals` method checks to make sure that the `obj` argument is not **null** and that it references an instance of the same type as this object.</span></span> <span data-ttu-id="042e9-237">Si une des vérifications échoue, la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="042e9-237">If either check fails, the method returns `false`.</span></span>  
  
 <span data-ttu-id="042e9-238">Le `Point.Equals` les appels de méthode le <xref:System.Object.GetType%2A> méthode pour déterminer si les types d’exécution des deux objets sont identiques.</span><span class="sxs-lookup"><span data-stu-id="042e9-238">The `Point.Equals` method calls the <xref:System.Object.GetType%2A> method to determine whether the run-time types of the two objects are identical.</span></span> <span data-ttu-id="042e9-239">Si la méthode a utilisé une vérification sous la forme `obj is Point` en c# ou `TryCast(obj, Point)` en Visual Basic, elle retourne `true` dans les cas où `obj` est une instance d’une classe dérivée de `Point`, même si `obj` et en cours instance ne sont pas du même type de Runtime.</span><span class="sxs-lookup"><span data-stu-id="042e9-239">If the method used a check of the form `obj is Point` in C# or `TryCast(obj, Point)` in Visual Basic, the check would return `true` in cases where `obj` is an instance of a derived class of `Point`, even though `obj` and the current instance are not of the same run-time type.</span></span> <span data-ttu-id="042e9-240">Après avoir vérifié que les deux objets sont du même type, la méthode effectue un cast `obj` au type `Point` et retourne le résultat de la comparaison de champs d’instance des deux objets.</span><span class="sxs-lookup"><span data-stu-id="042e9-240">Having verified that both objects are of the same type, the method casts `obj` to type `Point` and returns the result of comparing the instance fields of the two objects.</span></span>  
  
 <span data-ttu-id="042e9-241">Dans `Point3D.Equals`, héritées `Point.Equals` (méthode), qui remplace <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>, est appelée avant toute autre action.</span><span class="sxs-lookup"><span data-stu-id="042e9-241">In `Point3D.Equals`, the inherited `Point.Equals` method, which overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>, is invoked before anything else is done.</span></span> <span data-ttu-id="042e9-242">Étant donné que `Point3D` est une classe sealed (`NotInheritable` en Visual Basic), une vérification sous la forme `obj is Point` en c# ou `TryCast(obj, Point)` en Visual Basic est suffisante pour vous assurer que `obj` est un `Point3D` objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-242">Because `Point3D` is a sealed class (`NotInheritable` in Visual Basic), a check in the form `obj is Point` in C# or `TryCast(obj, Point)` in Visual Basic is adequate to ensure that `obj` is a `Point3D` object.</span></span> <span data-ttu-id="042e9-243">S’il s’agit un `Point3D` de l’objet, elle est convertie en un `Point` de l’objet et passé à l’implémentation de classe de base de <xref:System.Object.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-243">If it is a `Point3D` object, it is cast to a `Point` object and passed to the base class implementation of <xref:System.Object.Equals%2A>.</span></span> <span data-ttu-id="042e9-244">Uniquement lorsque hérité `Point.Equals` méthode retourne `true` est la méthode de comparaison du `z` introduites dans la classe dérivée de champs d’instance.</span><span class="sxs-lookup"><span data-stu-id="042e9-244">Only when the inherited `Point.Equals` method returns `true` does the method compare the `z` instance fields introduced in the derived class.</span></span>  
  
 <span data-ttu-id="042e9-245">L’exemple suivant définit un `Rectangle` classe qui implémente en interne un rectangle sous forme de deux `Point` objets.</span><span class="sxs-lookup"><span data-stu-id="042e9-245">The following example defines a `Rectangle` class that internally implements a rectangle as two `Point` objects.</span></span> <span data-ttu-id="042e9-246">Le `Rectangle` classe également remplacements <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> pour fournir l’égalité des valeurs.</span><span class="sxs-lookup"><span data-stu-id="042e9-246">The `Rectangle` class also overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> to provide for value equality.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals3#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals3/CS/equals3.cs#1)]
 [!code-vb[ECMA-System.Object.Equals3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals3/VB/equals3.vb#1)]  
  
 <span data-ttu-id="042e9-247">Certains langages tels que c# et Visual Basic prennent en charge la surcharge d’opérateur.</span><span class="sxs-lookup"><span data-stu-id="042e9-247">Some languages such as C# and Visual Basic support operator overloading.</span></span> <span data-ttu-id="042e9-248">Quand un type surcharge l’opérateur d’égalité, il doit également substituer la <xref:System.Object.Equals%28System.Object%29> méthode pour fournir les mêmes fonctionnalités.</span><span class="sxs-lookup"><span data-stu-id="042e9-248">When a type overloads the equality operator, it must also override the <xref:System.Object.Equals%28System.Object%29> method to provide the same functionality.</span></span> <span data-ttu-id="042e9-249">Cela est généralement accomplie en écrivant la <xref:System.Object.Equals%28System.Object%29> méthode en termes de l’opérateur d’égalité surchargé, comme dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="042e9-249">This is typically accomplished by writing the <xref:System.Object.Equals%28System.Object%29> method in terms of the overloaded equality operator, as in the following example.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals4#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals4/CS/equals4.cs#1)]
 [!code-vb[ECMA-System.Object.Equals4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals4/vb/equals4.vb#1)]  
  
 <span data-ttu-id="042e9-250">Étant donné que `Complex` est un type valeur, il ne peut pas être dérivé.</span><span class="sxs-lookup"><span data-stu-id="042e9-250">Because `Complex` is a value type, it cannot be derived from.</span></span>  <span data-ttu-id="042e9-251">Par conséquent, le remplacement <xref:System.Object.Equals%28System.Object%29> méthode pas nécessaire d’appeler <xref:System.Object.GetType%2A> pour déterminer la durée d’exécution précise de type de chaque objet, mais peut plutôt utiliser la `is` opérateur en c# ou le `TypeOf` opérateur en Visual Basic pour vérifier le type de la `obj` paramètre.</span><span class="sxs-lookup"><span data-stu-id="042e9-251">Therefore, the override to <xref:System.Object.Equals%28System.Object%29> method need not call <xref:System.Object.GetType%2A> to determine the precise run-time type of each object, but can instead use the `is` operator in C# or the `TypeOf` operator in Visual Basic to check the type of the `obj` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="T:System.Collections.Hashtable" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (object objA, object objB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(object objA, object objB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (objA As Object, objB As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Object ^ objA, System::Object ^ objB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objA" Type="System.Object" />
        <Parameter Name="objB" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objA"><span data-ttu-id="042e9-252">The first object to compare.</span><span class="sxs-lookup"><span data-stu-id="042e9-252">The first object to compare.</span></span></param>
        <param name="objB"><span data-ttu-id="042e9-253">The second object to compare.</span><span class="sxs-lookup"><span data-stu-id="042e9-253">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="042e9-254">Determines whether the specified object instances are considered equal.</span><span class="sxs-lookup"><span data-stu-id="042e9-254">Determines whether the specified object instances are considered equal.</span></span></summary>
        <returns>
          <span data-ttu-id="042e9-255"><see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="042e9-255"><see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="042e9-256">If both <paramref name="objA" /> and <paramref name="objB" /> are **null**, the method returns <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="042e9-256">If both <paramref name="objA" /> and <paramref name="objB" /> are **null**, the method returns <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-257">La méthode statique <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> méthode indique si deux objets, `objA` et `objB`, sont égales.</span><span class="sxs-lookup"><span data-stu-id="042e9-257">The static <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> method indicates whether two objects, `objA` and  `objB`, are equal.</span></span> <span data-ttu-id="042e9-258">Il vous permet également de tester les objets dont la valeur est **null** d’égalité.</span><span class="sxs-lookup"><span data-stu-id="042e9-258">It also enables you to test objects whose value is **null** for equality.</span></span> <span data-ttu-id="042e9-259">Il compare `objA` et `objB` pour l’égalité comme suit :</span><span class="sxs-lookup"><span data-stu-id="042e9-259">It compares `objA` and `objB` for equality as follows:</span></span>  
  
-   <span data-ttu-id="042e9-260">Il détermine si les deux objets représentent la même référence d’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-260">It determines whether the two objects represent the same object reference.</span></span> <span data-ttu-id="042e9-261">Si, dans ce cas, la méthode retourne `true`.</span><span class="sxs-lookup"><span data-stu-id="042e9-261">If they do, the method returns `true`.</span></span> <span data-ttu-id="042e9-262">Ce test revient à appeler le <xref:System.Object.ReferenceEquals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-262">This test is equivalent to calling the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="042e9-263">En outre, si les deux `objA` et `objB` sont **null**, la méthode retourne `true`.</span><span class="sxs-lookup"><span data-stu-id="042e9-263">In addition, if both `objA` and `objB` are **null**, the method returns `true`.</span></span>  
  
-   <span data-ttu-id="042e9-264">Il détermine si soit `objA` ou `objB` est **null**.</span><span class="sxs-lookup"><span data-stu-id="042e9-264">It determines whether either `objA` or `objB` is **null**.</span></span> <span data-ttu-id="042e9-265">Si, par conséquent, elle retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="042e9-265">If so, it returns `false`.</span></span>  
  
-   <span data-ttu-id="042e9-266">Si les deux objets ne représentent pas la même référence d’objet, et aucun n’est **null**, il appelle `objA`.`Equals` (`objB`) et retourne le résultat.</span><span class="sxs-lookup"><span data-stu-id="042e9-266">If the two objects do not represent the same object reference and neither is **null**, it calls `objA`.`Equals`(`objB`) and returns the result.</span></span> <span data-ttu-id="042e9-267">Cela signifie que si `objA` remplace la <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> méthode, ce remplacement est appelé.</span><span class="sxs-lookup"><span data-stu-id="042e9-267">This means that if `objA` overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, this override is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="042e9-268">L’exemple suivant illustre la <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> (méthode) et le compare avec le <xref:System.Object.ReferenceEquals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-268">The following example illustrates the <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> method and compares it with the <xref:System.Object.ReferenceEquals%2A> method.</span></span>  
  
 [!code-csharp[System.Object.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_static2.cs#1)]
 [!code-vb[System.Object.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_static2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Object ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Object ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="042e9-269">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span><span class="sxs-lookup"><span data-stu-id="042e9-269">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-270">Le <xref:System.Object.Finalize%2A> méthode est utilisée pour effectuer des opérations de nettoyage sur les ressources non managées détenues par l’objet actuel avant la destruction de l’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-270">The <xref:System.Object.Finalize%2A> method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed.</span></span> <span data-ttu-id="042e9-271">La méthode est protégée et par conséquent, est accessible uniquement par le biais de cette classe ou une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="042e9-271">The method is protected and therefore is accessible only through this class or through a derived class.</span></span>  
  
 <span data-ttu-id="042e9-272">Dans cette section :</span><span class="sxs-lookup"><span data-stu-id="042e9-272">In this section:</span></span>  
  
-   [<span data-ttu-id="042e9-273">Fonctionne de la finalisation</span><span class="sxs-lookup"><span data-stu-id="042e9-273">How finalization works</span></span>](#How)  
  
-   [<span data-ttu-id="042e9-274">Notes pour les implémenteurs</span><span class="sxs-lookup"><span data-stu-id="042e9-274">Notes for implementers</span></span>](#Notes)  
  
-   [<span data-ttu-id="042e9-275">L’alternative de SafeHandle</span><span class="sxs-lookup"><span data-stu-id="042e9-275">The SafeHandle alternative</span></span>](#SafeHandle)  
  
<a name="How"></a>   
## <a name="how-finalization-works"></a><span data-ttu-id="042e9-276">Fonctionne de la finalisation</span><span class="sxs-lookup"><span data-stu-id="042e9-276">How finalization works</span></span>  
 <span data-ttu-id="042e9-277">Le <xref:System.Object> classe ne fournit pas d’implémentation pour la <xref:System.Object.Finalize%2A> (méthode) et que le garbage collector ne marque pas les types dérivés de <xref:System.Object> pour la finalisation, sauf si elles remplacent les <xref:System.Object.Finalize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-277">The <xref:System.Object> class provides no implementation for the <xref:System.Object.Finalize%2A> method, and the garbage collector does not mark types derived from <xref:System.Object> for finalization unless they override the <xref:System.Object.Finalize%2A> method.</span></span>  
  
 <span data-ttu-id="042e9-278">Si un type remplace le <xref:System.Object.Finalize%2A> (méthode), le garbage collector ajoute une entrée pour chaque instance du type à une structure interne appelée la file d’attente de finalisation.</span><span class="sxs-lookup"><span data-stu-id="042e9-278">If a type does override the <xref:System.Object.Finalize%2A> method, the garbage collector adds an entry for each instance of the type to an internal structure called the finalization queue.</span></span> <span data-ttu-id="042e9-279">La file d’attente de finalisation contient des entrées pour tous les objets dans le tas managé dont le code de la finalisation doit s’exécuter avant que le garbage collector puisse récupérer la mémoire.</span><span class="sxs-lookup"><span data-stu-id="042e9-279">The finalization queue contains entries for all the objects in the managed heap whose finalization code must run before the garbage collector can reclaim their memory.</span></span> <span data-ttu-id="042e9-280">Le garbage collector appelle ensuite la <xref:System.Object.Finalize%2A> méthode automatiquement dans les conditions suivantes :</span><span class="sxs-lookup"><span data-stu-id="042e9-280">The garbage collector then calls the <xref:System.Object.Finalize%2A> method automatically under the following conditions:</span></span>  
  
-   <span data-ttu-id="042e9-281">Une fois que le garbage collector a découvert qu’un objet est inaccessible, à moins que l’objet a été dispensé de finalisation par un appel à la <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-281">After the garbage collector has discovered that an object is inaccessible, unless the object has been exempted from finalization by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="042e9-282">Pendant l’arrêt d’un domaine d’application, sauf si l’objet est exempté de la finalisation.</span><span class="sxs-lookup"><span data-stu-id="042e9-282">During shutdown of an application domain, unless the object is exempt from finalization.</span></span> <span data-ttu-id="042e9-283">Lors de l’arrêt, même les objets qui sont encore accessibles finalisées.</span><span class="sxs-lookup"><span data-stu-id="042e9-283">During shutdown, even objects that are still accessible are finalized.</span></span>  
  
 <span data-ttu-id="042e9-284"><xref:System.Object.Finalize%2A> est automatiquement appelé qu’une seule fois sur une instance donnée, sauf si l’objet est réinscrit à l’aide d’un mécanisme comme <xref:System.GC.ReRegisterForFinalize%2A?displayProperty=nameWithType> et <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> (méthode) n’a pas été appelée par la suite.</span><span class="sxs-lookup"><span data-stu-id="042e9-284"><xref:System.Object.Finalize%2A> is automatically called only once on a given instance, unless the object is re-registered by using a mechanism such as <xref:System.GC.ReRegisterForFinalize%2A?displayProperty=nameWithType> and the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method has not been subsequently called.</span></span>  
  
 <span data-ttu-id="042e9-285"><xref:System.Object.Finalize%2A> opérations présentent les limitations suivantes :</span><span class="sxs-lookup"><span data-stu-id="042e9-285"><xref:System.Object.Finalize%2A> operations have the following limitations:</span></span>  
  
-   <span data-ttu-id="042e9-286">L’heure exacte à laquelle s’exécute le finaliseur n’est pas défini.</span><span class="sxs-lookup"><span data-stu-id="042e9-286">The exact time when the finalizer executes is undefined.</span></span> <span data-ttu-id="042e9-287">Pour garantir la libération des ressources pour implémenter des instances de votre classe, un `Close` méthode ou fournissez un <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> mise en œuvre.</span><span class="sxs-lookup"><span data-stu-id="042e9-287">To ensure deterministic release of resources for instances of your class, implement a `Close` method or provide a <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation.</span></span>  
  
-   <span data-ttu-id="042e9-288">Les finaliseurs de deux objets ne sont pas garanties pour s’exécuter dans un ordre spécifique, même si un objet fait référence à l’autre.</span><span class="sxs-lookup"><span data-stu-id="042e9-288">The finalizers of two objects are not guaranteed to run in any specific order, even if one object refers to the other.</span></span> <span data-ttu-id="042e9-289">Autrement dit, si l’objet a une référence à l’objet B, et possèdent des finaliseurs, l’objet B peut avoir déjà été finalisation lorsque le finaliseur de l’objet A démarre.</span><span class="sxs-lookup"><span data-stu-id="042e9-289">That is, if Object A has a reference to Object B and both have finalizers, Object B might have already been finalized when the finalizer of Object A starts.</span></span>  
  
-   <span data-ttu-id="042e9-290">Le thread sur lequel s’exécute le finaliseur n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="042e9-290">The thread on which the finalizer runs is unspecified.</span></span>  
  
 <span data-ttu-id="042e9-291">Le <xref:System.Object.Finalize%2A> méthode ne peut pas s’exécuter jusqu'à son achèvement, ou s’exécute ne peut-être pas du tout dans les circonstances exceptionnelles suivantes :</span><span class="sxs-lookup"><span data-stu-id="042e9-291">The <xref:System.Object.Finalize%2A> method might not run to completion or might not run at all under the following exceptional circumstances:</span></span>  
  
-   <span data-ttu-id="042e9-292">Si un autre finaliseur se bloque indéfiniment (augmentent dans une boucle infinie, essaie d’obtenir un verrou, il peut obtenir jamais et ainsi de suite).</span><span class="sxs-lookup"><span data-stu-id="042e9-292">If another finalizer blocks indefinitely (goes into an infinite loop, tries to obtain a lock it can never obtain, and so on).</span></span> <span data-ttu-id="042e9-293">Étant donné que le runtime tente d’exécuter des finaliseurs jusqu'à son achèvement, les autres finaliseurs ne pas être appelés si un finaliseur se bloque indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="042e9-293">Because the runtime tries to run finalizers to completion, other finalizers might not be called if a finalizer blocks indefinitely.</span></span>  
  
-   <span data-ttu-id="042e9-294">Si le processus se termine sans donner au runtime une chance de les nettoyer.</span><span class="sxs-lookup"><span data-stu-id="042e9-294">If the process terminates without giving the runtime a chance to clean up.</span></span> <span data-ttu-id="042e9-295">Dans ce cas, la première notification d’arrêt du processus du runtime est une notification DLL_PROCESS_DETACH.</span><span class="sxs-lookup"><span data-stu-id="042e9-295">In this case, the runtime's first notification of process termination is a DLL_PROCESS_DETACH notification.</span></span>  
  
 <span data-ttu-id="042e9-296">Le runtime continue à finaliser des objets pendant l’arrêt aussi longtemps que le nombre d’objets finalisables diminue.</span><span class="sxs-lookup"><span data-stu-id="042e9-296">The runtime continues to finalize objects during shutdown only while the number of finalizable objects continues to decrease.</span></span>  
  
 <span data-ttu-id="042e9-297">Si <xref:System.Object.Finalize%2A> ou une substitution de <xref:System.Object.Finalize%2A> lève une exception et que le runtime n’est pas hébergée par une application qui substitue la stratégie par défaut, le runtime termine le processus et aucun active `try` / `finally` blocs ou les finaliseurs sont exécutés.</span><span class="sxs-lookup"><span data-stu-id="042e9-297">If <xref:System.Object.Finalize%2A> or an override of <xref:System.Object.Finalize%2A> throws an exception, and the runtime is not hosted by an application that overrides the default policy, the runtime terminates the process and no active `try`/`finally` blocks or finalizers are executed.</span></span> <span data-ttu-id="042e9-298">Ce comportement garantit l’intégrité du processus si le finaliseur ne peut pas libérer ou détruire des ressources.</span><span class="sxs-lookup"><span data-stu-id="042e9-298">This behavior ensures process integrity if the finalizer cannot free or destroy resources.</span></span>  
  
<a name="Notes"></a>   
## <a name="overriding-the-finalize-method"></a><span data-ttu-id="042e9-299">Substitution de la méthode Finalize</span><span class="sxs-lookup"><span data-stu-id="042e9-299">Overriding the Finalize method</span></span> 
 <span data-ttu-id="042e9-300">Vous devez substituer <xref:System.Object.Finalize%2A> pour une classe qui utilise des ressources non managées, telles que les handles de fichiers ou des connexions de base de données qui doivent être lancées lorsque l’objet managé qui les utilise est ignoré pendant le garbage collection.</span><span class="sxs-lookup"><span data-stu-id="042e9-300">You should override <xref:System.Object.Finalize%2A> for a class that uses unmanaged resources, such as file handles or database connections that must be released when the managed object that uses them is discarded during garbage collection.</span></span> <span data-ttu-id="042e9-301">Vous ne devez pas implémenter un <xref:System.Object.Finalize%2A> méthode pour les objets managés, car le garbage collector libère automatiquement les ressources managées.</span><span class="sxs-lookup"><span data-stu-id="042e9-301">You shouldn't implement a <xref:System.Object.Finalize%2A> method for managed objects because the garbage collector releases managed resources automatically.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="042e9-302">Si un <xref:System.Runtime.InteropServices.SafeHandle> objet n’est disponible qui encapsule votre ressource non managée, l’alternative recommandée consiste à implémenter le modèle de suppression avec un handle sécurisé et ne pas substituer <xref:System.Object.Finalize%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-302">If a <xref:System.Runtime.InteropServices.SafeHandle> object is available that wraps your unmanaged resource, the recommended alternative is to implement the dispose pattern with a safe handle and not override <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="042e9-303">Pour plus d’informations, consultez [alternative de SafeHandle le](#SafeHandle) section.</span><span class="sxs-lookup"><span data-stu-id="042e9-303">For more information, see [The SafeHandle alternative](#SafeHandle) section.</span></span>  
  
 <span data-ttu-id="042e9-304">Le <xref:System.Object.Finalize%2A?displayProperty=nameWithType> méthode ne fait rien par défaut, mais vous devez remplacer <xref:System.Object.Finalize%2A> uniquement si nécessaire et uniquement pour libérer les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="042e9-304">The <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method does nothing by default, but you should override <xref:System.Object.Finalize%2A> only if necessary, and only to release unmanaged resources.</span></span> <span data-ttu-id="042e9-305">Récupération de mémoire a tendance à s’allonger considérablement si une opération de finalisation est exécutée, car elle nécessite au moins deux opérations garbage collection.</span><span class="sxs-lookup"><span data-stu-id="042e9-305">Reclaiming memory tends to take much longer if a finalization operation runs, because it requires at least two garbage collections.</span></span> <span data-ttu-id="042e9-306">En outre, vous devez substituer la <xref:System.Object.Finalize%2A> types de méthode pour référence uniquement.</span><span class="sxs-lookup"><span data-stu-id="042e9-306">In addition, you should override the <xref:System.Object.Finalize%2A> method for reference types only.</span></span> <span data-ttu-id="042e9-307">Le common language runtime finalise uniquement les types référence.</span><span class="sxs-lookup"><span data-stu-id="042e9-307">The common language runtime only finalizes reference types.</span></span> <span data-ttu-id="042e9-308">Il ignore les finaliseurs dans les types valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-308">It ignores finalizers on value types.</span></span>  

<span data-ttu-id="042e9-309">L’étendue de la <xref:System.Object.Finalize%2A?displayProperty=nameWithType> méthode est `protected`.</span><span class="sxs-lookup"><span data-stu-id="042e9-309">The scope of the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method is `protected`.</span></span> <span data-ttu-id="042e9-310">Vous devez conserver cette portée limitée lorsque vous substituez la méthode dans votre classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-310">You should maintain this limited scope when you override the method in your class.</span></span> <span data-ttu-id="042e9-311">En conservant un <xref:System.Object.Finalize%2A> méthode protégée, empêcher les utilisateurs de votre application à partir de l’appel d’un objet <xref:System.Object.Finalize%2A> directement la méthode.</span><span class="sxs-lookup"><span data-stu-id="042e9-311">By keeping a <xref:System.Object.Finalize%2A> method protected, you prevent users of your application from calling an object's <xref:System.Object.Finalize%2A> method directly.</span></span>
  
 <span data-ttu-id="042e9-312">Chaque implémentation de <xref:System.Object.Finalize%2A> dans un type dérivé doit appeler mise en œuvre de son type de base de <xref:System.Object.Finalize%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-312">Every implementation of <xref:System.Object.Finalize%2A> in a derived type must call its base type's implementation of <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="042e9-313">C’est le cas uniquement dans l’application le code est autorisé à appeler <xref:System.Object.Finalize%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-313">This is the only case in which application code is allowed to call <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="042e9-314">D’un objet <xref:System.Object.Finalize%2A> méthode ne doit pas appeler une méthode sur les objets autres que ceux de sa classe de base.</span><span class="sxs-lookup"><span data-stu-id="042e9-314">An object's <xref:System.Object.Finalize%2A> method shouldn't call a method on any objects other than that of its base class.</span></span> <span data-ttu-id="042e9-315">Il s’agit, car les autres objets appelées pu être collectées en même temps que l’objet appelant, comme dans le cas d’un arrêt de runtime de langage commun.</span><span class="sxs-lookup"><span data-stu-id="042e9-315">This is because the other objects being called could be collected at the same time as the calling object, such as in the case of a common language runtime shutdown.</span></span> 
  
> [!NOTE]
>  <span data-ttu-id="042e9-316">Le compilateur c# n’autorise pas vous permet de remplacer le <xref:System.Object.Finalize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-316">The C# compiler does not allow you to override the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="042e9-317">Au lieu de cela, vous fournissez un finaliseur en implémentant un [destructeur](~/docs/csharp/programming-guide/classes-and-structs/destructors.md) pour votre classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-317">Instead, you provide a finalizer by implementing a [destructor](~/docs/csharp/programming-guide/classes-and-structs/destructors.md) for your class.</span></span> <span data-ttu-id="042e9-318">Un destructeur c# appelle automatiquement le destructeur de sa classe de base.</span><span class="sxs-lookup"><span data-stu-id="042e9-318">A C# destructor automatically calls the destructor of its base class.</span></span>  
>   
>  <span data-ttu-id="042e9-319">Visual C++ fournit aussi sa propre syntaxe pour l’implémentation de la <xref:System.Object.Finalize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-319">Visual C++ also provides its own syntax for implementing the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="042e9-320">Pour plus d’informations, consultez la section « Destructeurs et finaliseurs » de [Comment : définir et consommer des Classes et Structs (C + c++ / CLI)](http://msdn.microsoft.com/library/1c03cb0d-1459-4b5e-af65-97d6b3094fd7).</span><span class="sxs-lookup"><span data-stu-id="042e9-320">For more information, see the "Destructors and finalizers" section of [How to: Define and Consume Classes and Structs (C++/CLI)](http://msdn.microsoft.com/library/1c03cb0d-1459-4b5e-af65-97d6b3094fd7).</span></span>  
  
 <span data-ttu-id="042e9-321">Étant donné que le garbage collection est non déterministe, vous ne savez pas précisément à quel moment le garbage collector effectue la finalisation.</span><span class="sxs-lookup"><span data-stu-id="042e9-321">Because garbage collection is non-deterministic, you do not know precisely when the garbage collector performs finalization.</span></span> <span data-ttu-id="042e9-322">Pour libérer des ressources immédiatement, vous pouvez également choisir d’implémenter le [modèle de suppression](~/docs/standard/design-guidelines/dispose-pattern.md) et <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="042e9-322">To release resources immediately, you can also choose to implement the [dispose pattern](~/docs/standard/design-guidelines/dispose-pattern.md) and the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="042e9-323">Le <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation peut être appelée par les consommateurs de votre classe de libérer des ressources non managées, et vous pouvez utiliser la <xref:System.Object.Finalize%2A> méthode pour libérer les ressources non managées dans le cas où la <xref:System.IDisposable.Dispose%2A> méthode n’est pas appelée.</span><span class="sxs-lookup"><span data-stu-id="042e9-323">The <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation can be called by consumers of your class to free unmanaged resources, and you can use the <xref:System.Object.Finalize%2A> method to free unmanaged resources in the event that the <xref:System.IDisposable.Dispose%2A> method is not called.</span></span>  
  
 <span data-ttu-id="042e9-324"><xref:System.Object.Finalize%2A> peut effectuer quasiment toute action, y compris ressusciter (un objet qui rendre à nouveau accessible) a été nettoyé pendant le garbage collection.</span><span class="sxs-lookup"><span data-stu-id="042e9-324"><xref:System.Object.Finalize%2A> can take almost any action, including resurrecting an object (that is, making the object accessible again) after it has been cleaned up during garbage collection.</span></span> <span data-ttu-id="042e9-325">Toutefois, l’objet peut uniquement être réactivé une seule fois ; <xref:System.Object.Finalize%2A> ne peut pas être appelée sur des objets ressuscités pendant le garbage collection.</span><span class="sxs-lookup"><span data-stu-id="042e9-325">However, the object can only be resurrected once; <xref:System.Object.Finalize%2A> cannot be called on resurrected objects during garbage collection.</span></span> <span data-ttu-id="042e9-326">Il existe une seule action que votre implémentation de <xref:System.Object.Finalize%2A> ne doit jamais prendre : il ne doit jamais lever une exception.</span><span class="sxs-lookup"><span data-stu-id="042e9-326">There is one action that your implementation of <xref:System.Object.Finalize%2A> should never take: it should never throw an exception.</span></span> <span data-ttu-id="042e9-327">Si toutes les exceptions levées par les méthodes appelées à partir de la <xref:System.Object.Finalize%2A> (méthode) ne sont pas gérées par le <xref:System.Object.Finalize%2A> (méthode), le runtime suppose que le <xref:System.Object.Finalize%2A> méthode retournée et continue à appeler le <xref:System.Object.Finalize%2A> méthodes d’autres objets.</span><span class="sxs-lookup"><span data-stu-id="042e9-327">If any exceptions thrown by methods called from the <xref:System.Object.Finalize%2A> method are unhandled by the <xref:System.Object.Finalize%2A> method, the runtime assumes that the <xref:System.Object.Finalize%2A> method returned and continues to call the <xref:System.Object.Finalize%2A> methods of other objects.</span></span> 
  
<a name="SafeHandle"></a>   
## <a name="the-safehandle-alternative"></a><span data-ttu-id="042e9-328">L'alternative de SafeHandle</span><span class="sxs-lookup"><span data-stu-id="042e9-328">The SafeHandle alternative</span></span>  
 <span data-ttu-id="042e9-329">Création des finaliseurs fiables est souvent difficile, car vous ne pouvez pas faire d’hypothèses concernant l’état de votre application et non prises en charge des exceptions de système comme <xref:System.OutOfMemoryException> et <xref:System.StackOverflowException> terminer le finaliseur.</span><span class="sxs-lookup"><span data-stu-id="042e9-329">Creating reliable finalizers is often difficult, because you cannot make assumptions about the state of your application, and because unhandled system exceptions such as <xref:System.OutOfMemoryException> and <xref:System.StackOverflowException> terminate the finalizer.</span></span> <span data-ttu-id="042e9-330">Au lieu d’implémenter un finaliseur pour votre classe pour libérer les ressources non managées, vous pouvez utiliser un objet qui est dérivé de la <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> classe pour encapsuler les ressources non managées et implémentez le modèle de suppression sans un finaliseur.</span><span class="sxs-lookup"><span data-stu-id="042e9-330">Instead of implementing a finalizer for your class to release unmanaged resources, you can use an object that is derived from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> class to wrap your unmanaged resources, and then implement the dispose pattern without a finalizer.</span></span> <span data-ttu-id="042e9-331">Le .NET Framework fournit les classes suivantes dans le <xref:Microsoft.Win32?displayProperty=nameWithType> espace de noms qui sont dérivés de <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="042e9-331">The .NET Framework provides the following classes in the <xref:Microsoft.Win32?displayProperty=nameWithType> namespace that are derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>:</span></span>  
  
-   <span data-ttu-id="042e9-332"><xref:Microsoft.Win32.SafeHandles.SafeFileHandle> est une classe wrapper pour un handle de fichier.</span><span class="sxs-lookup"><span data-stu-id="042e9-332"><xref:Microsoft.Win32.SafeHandles.SafeFileHandle> is a wrapper class for a file handle.</span></span>  
  
-   <span data-ttu-id="042e9-333"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> est une classe wrapper pour des handles de fichier mappé en mémoire.</span><span class="sxs-lookup"><span data-stu-id="042e9-333"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> is a wrapper class for memory-mapped file handles.</span></span>  
  
-   <span data-ttu-id="042e9-334"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> est une classe wrapper pour un pointeur vers un bloc de mémoire non managée.</span><span class="sxs-lookup"><span data-stu-id="042e9-334"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> is a wrapper class for a pointer to a block of unmanaged memory.</span></span>  
  
-   <span data-ttu-id="042e9-335"><xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, et <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> sont des classes wrapper pour des handles de chiffrement.</span><span class="sxs-lookup"><span data-stu-id="042e9-335"><xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> are wrapper classes for cryptographic handles.</span></span>  
  
-   <span data-ttu-id="042e9-336"><xref:Microsoft.Win32.SafeHandles.SafePipeHandle> est une classe wrapper pour des handles de canal.</span><span class="sxs-lookup"><span data-stu-id="042e9-336"><xref:Microsoft.Win32.SafeHandles.SafePipeHandle> is a wrapper class for pipe handles.</span></span>  
  
-   <span data-ttu-id="042e9-337"><xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> est une classe wrapper pour un handle à une clé de Registre.</span><span class="sxs-lookup"><span data-stu-id="042e9-337"><xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> is a wrapper class for a handle to a registry key.</span></span>  
  
-   <span data-ttu-id="042e9-338"><xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> est une classe wrapper pour un handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="042e9-338"><xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> is a wrapper class for a wait handle.</span></span>  
  
 <span data-ttu-id="042e9-339">L’exemple suivant utilise le [modèle de suppression](~/docs/standard/design-guidelines/dispose-pattern.md) avec des handles sécurisés au lieu de remplacer le <xref:System.Object.Finalize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-339">The following example uses the [dispose pattern](~/docs/standard/design-guidelines/dispose-pattern.md) with safe handles instead of overriding the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="042e9-340">Il définit un `FileAssociation` classe qui encapsule des informations du Registre sur l’application qui traite les fichiers avec une extension de fichier particulière.</span><span class="sxs-lookup"><span data-stu-id="042e9-340">It defines a `FileAssociation` class that wraps registry information about the application that handles files with a particular file extension.</span></span> <span data-ttu-id="042e9-341">Les handles de deux Registre retournés en tant que `out` paramètres par Windows [RegOpenKeyEx](http://msdn.microsoft.com/library/windows/desktop/ms724897.aspx) les appels de fonction sont passés à la <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> constructeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-341">The two registry handles returned as `out` parameters by Windows [RegOpenKeyEx](http://msdn.microsoft.com/library/windows/desktop/ms724897.aspx) function calls are passed to the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> constructor.</span></span> <span data-ttu-id="042e9-342">Le type de protégé `Dispose` méthode appelle ensuite la `SafeRegistryHandle.Dispose` méthode pour libérer ces deux poignées.</span><span class="sxs-lookup"><span data-stu-id="042e9-342">The type's protected `Dispose` method then calls the `SafeRegistryHandle.Dispose` method  to free these two handles.</span></span>  
  
 [!code-csharp[System.Object.Finalize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.finalize/cs/finalize_safe.cs#2)]
 [!code-vb[System.Object.Finalize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.finalize/vb/finalize_safe.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="042e9-343">L’exemple suivant vérifie que la <xref:System.Object.Finalize%2A> méthode est appelée lorsqu’un objet qui substitue <xref:System.Object.Finalize%2A> est détruit.</span><span class="sxs-lookup"><span data-stu-id="042e9-343">The following example verifies that the <xref:System.Object.Finalize%2A> method is called when an object that overrides <xref:System.Object.Finalize%2A> is destroyed.</span></span> <span data-ttu-id="042e9-344">Notez que, dans une application de production, le <xref:System.Object.Finalize%2A> méthode est substituée pour libérer les ressources non managées détenues par l’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-344">Note that, in a production application, the <xref:System.Object.Finalize%2A> method would be overridden to release unmanaged resources held by the object.</span></span> <span data-ttu-id="042e9-345">Notez également que l’exemple c# fournit un destructeur au lieu de remplacer le <xref:System.Object.Finalize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-345">Also note that the C# example provides a destructor instead of overriding the <xref:System.Object.Finalize%2A> method.</span></span>  
  
 [!code-csharp[System.Object.Finalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.finalize/cs/finalize1.cs#1)]
 [!code-vb[System.Object.Finalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.finalize/vb/finalize1.vb#1)]  
  
 <span data-ttu-id="042e9-346">Pour obtenir un exemple supplémentaire qui remplace le <xref:System.Object.Finalize%2A> (méthode), consultez le <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-346">For an additional example that overrides the <xref:System.Object.Finalize%2A> method, see the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.GC.WaitForPendingFinalizers" />
        <altmember cref="T:System.WeakReference" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="042e9-347">Serves as the default hash function.</span><span class="sxs-lookup"><span data-stu-id="042e9-347">Serves as the default hash function.</span></span></summary>
        <returns><span data-ttu-id="042e9-348">A hash code for the current object.</span><span class="sxs-lookup"><span data-stu-id="042e9-348">A hash code for the current object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-349">Un code de hachage est une valeur numérique qui est utilisée pour insérer et identifier un objet dans une collection en fonction de hachage telles que la <xref:System.Collections.Generic.Dictionary%602> (classe), le <xref:System.Collections.Hashtable> classe ou un type dérivé de la <xref:System.Collections.DictionaryBase> classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-349">A hash code is a numeric value that is used to insert and identify an object in a hash-based collection such as the <xref:System.Collections.Generic.Dictionary%602> class, the <xref:System.Collections.Hashtable> class, or a type derived from the <xref:System.Collections.DictionaryBase> class.</span></span> <span data-ttu-id="042e9-350">Le <xref:System.Object.GetHashCode%2A> méthode fournit ce code de hachage pour les algorithmes qui doivent les contrôles rapides d’égalité d’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-350">The <xref:System.Object.GetHashCode%2A> method provides this hash code for algorithms that need quick checks of object equality.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="042e9-351">Pour plus d’informations sur l’utilisation des codes de hachage dans les tables de hachage et de certains algorithmes de code de hachage supplémentaires, consultez le [fonction de hachage](https://en.wikipedia.org/wiki/Hash_function) entrée dans Wikipedia.</span><span class="sxs-lookup"><span data-stu-id="042e9-351">For information about how hash codes are used in hash tables and for some additional hash code algorithms, see the [Hash Function](https://en.wikipedia.org/wiki/Hash_function) entry in Wikipedia.</span></span>  
  
 <span data-ttu-id="042e9-352">Deux objets qui sont des codes de hachage de retour égale sont égaux.</span><span class="sxs-lookup"><span data-stu-id="042e9-352">Two objects that are equal return hash codes that are equal.</span></span> <span data-ttu-id="042e9-353">Toutefois, l’inverse n’est pas vrai : codes de hachage égal n’impliquent pas l’égalité d’objet, car les différents objets (inégaux) peuvent avoir des codes de hachage identiques.</span><span class="sxs-lookup"><span data-stu-id="042e9-353">However, the reverse is not true: equal hash codes do not imply object equality, because different (unequal) objects can have identical hash codes.</span></span> <span data-ttu-id="042e9-354">En outre, le .NET Framework ne garantit pas l’implémentation par défaut de la <xref:System.Object.GetHashCode%2A> (méthode) et la valeur retournée par cette méthode peuvent différer entre les versions du .NET Framework et de plateformes, telles que les plateformes 32 bits et 64 bits.</span><span class="sxs-lookup"><span data-stu-id="042e9-354">Furthermore, the .NET Framework does not guarantee the default implementation of the <xref:System.Object.GetHashCode%2A> method, and the value this method returns may differ between .NET Framework versions and platforms, such as 32-bit and 64-bit platforms.</span></span> <span data-ttu-id="042e9-355">Pour ces raisons, n’utilisez pas l’implémentation par défaut de cette méthode comme un identificateur d’objet pour des raisons de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-355">For these reasons, do not use the default implementation of this method as a unique object identifier for hashing purposes.</span></span> <span data-ttu-id="042e9-356">Deux conséquences suivent à partir de ce :</span><span class="sxs-lookup"><span data-stu-id="042e9-356">Two consequences follow from this:</span></span>  
  
-   <span data-ttu-id="042e9-357">Vous ne devez pas supposer que les codes de hachage égale impliquent l’égalité d’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-357">You should not assume that equal hash codes imply object equality.</span></span>  
  
-   <span data-ttu-id="042e9-358">Vous ne devez jamais conserver ou utiliser un code de hachage en dehors du domaine d’application dans lequel il a été créé, car le même objet peuvent être hachées entre les plateformes, les processus et les domaines d’application.</span><span class="sxs-lookup"><span data-stu-id="042e9-358">You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash across application domains, processes, and platforms.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="042e9-359">Un code de hachage est prévu pour une insertion et de recherche dans les collections sont basées sur une table de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-359">A hash code is intended for efficient insertion and lookup in collections that are based on a hash table.</span></span> <span data-ttu-id="042e9-360">Un code de hachage n’est pas une valeur permanente.</span><span class="sxs-lookup"><span data-stu-id="042e9-360">A hash code is not a permanent value.</span></span> <span data-ttu-id="042e9-361">Pour cette raison :</span><span class="sxs-lookup"><span data-stu-id="042e9-361">For this reason:</span></span>  
>   
>  -   <span data-ttu-id="042e9-362">Ne pas sérialiser les valeurs de code de hachage ou les stocker dans les bases de données.</span><span class="sxs-lookup"><span data-stu-id="042e9-362">Do not serialize hash code values or store them in databases.</span></span>  
> -   <span data-ttu-id="042e9-363">N’utilisez pas le code de hachage comme clé pour récupérer un objet à partir d’une collection à clé.</span><span class="sxs-lookup"><span data-stu-id="042e9-363">Do not use the hash code as the key to retrieve an object from a keyed collection.</span></span>  
> -   <span data-ttu-id="042e9-364">Ne pas envoyer les codes de hachage entre les domaines d’application ou processus.</span><span class="sxs-lookup"><span data-stu-id="042e9-364">Do not send hash codes across application domains or processes.</span></span> <span data-ttu-id="042e9-365">Dans certains cas, les codes de hachage peuvent être calculées sur une base domaine par processus ou par application.</span><span class="sxs-lookup"><span data-stu-id="042e9-365">In some cases, hash codes may be computed on a per-process or per-application domain basis.</span></span>  
> -   <span data-ttu-id="042e9-366">N’utilisez pas le code de hachage au lieu d’une valeur renvoyée par une fonction de hachage cryptographique, si vous avez besoin d’un hachage cryptographique efficace.</span><span class="sxs-lookup"><span data-stu-id="042e9-366">Do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</span></span> <span data-ttu-id="042e9-367">Pour les hachages de chiffrement, utilisez une classe dérivée de la <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> ou <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-367">For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> class.</span></span>  
> -   <span data-ttu-id="042e9-368">Ne testez pas l’égalité des codes de hachage pour déterminer si deux objets sont égaux.</span><span class="sxs-lookup"><span data-stu-id="042e9-368">Do not test for equality of hash codes to determine whether two objects are equal.</span></span> <span data-ttu-id="042e9-369">(Les objets inégales peuvent avoir des codes de hachage identiques.) Pour tester l’égalité, appelez le <xref:System.Object.ReferenceEquals%2A> ou <xref:System.Object.Equals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-369">(Unequal objects can have identical hash codes.) To test for equality, call the <xref:System.Object.ReferenceEquals%2A> or <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="042e9-370">Le <xref:System.Object.GetHashCode%2A> méthode peut être substituée par un type dérivé.</span><span class="sxs-lookup"><span data-stu-id="042e9-370">The <xref:System.Object.GetHashCode%2A> method can be overridden by a derived type.</span></span> <span data-ttu-id="042e9-371">Si <xref:System.Object.GetHashCode%2A> est ne pas substituée, codes de hachage pour les types référence sont calculées en appelant le <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> méthode de classe de base, qui calcule un code de hachage basée sur la référence d’un objet ; pour plus d’informations, consultez <xref:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-371">If <xref:System.Object.GetHashCode%2A> is not overridden, hash codes for reference types are computed by calling the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> method of the base class, which computes a hash code based on an object's reference; for more information, see <xref:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="042e9-372">En d’autres termes, deux objets pour lesquels le <xref:System.Object.ReferenceEquals%2A> méthode retourne `true` ont des codes de hachage identiques.</span><span class="sxs-lookup"><span data-stu-id="042e9-372">In other words, two objects for which the <xref:System.Object.ReferenceEquals%2A> method returns `true` have identical hash codes.</span></span> <span data-ttu-id="042e9-373">Si les types valeur ne substituent pas <xref:System.Object.GetHashCode%2A>, le <xref:System.ValueType.GetHashCode%2A?displayProperty=nameWithType> méthode de la classe de base utilise la réflexion pour calculer le code de hachage basé sur les valeurs des champs du type.</span><span class="sxs-lookup"><span data-stu-id="042e9-373">If value types do not override <xref:System.Object.GetHashCode%2A>, the <xref:System.ValueType.GetHashCode%2A?displayProperty=nameWithType> method of the base class uses reflection to compute the hash code based on the values of the type's fields.</span></span> <span data-ttu-id="042e9-374">En d’autres termes, les types de valeur dont les champs ont des valeurs égales ont des codes de hachage égale.</span><span class="sxs-lookup"><span data-stu-id="042e9-374">In other words, value types whose fields have equal values have equal hash codes.</span></span> <span data-ttu-id="042e9-375">Pour plus d’informations sur la substitution de <xref:System.Object.GetHashCode%2A>, consultez la section « Remarques à l’attention des héritiers ».</span><span class="sxs-lookup"><span data-stu-id="042e9-375">For more information about overriding <xref:System.Object.GetHashCode%2A>, see the "Notes to Inheritors" section.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="042e9-376">Si vous remplacez le <xref:System.Object.GetHashCode%2A> (méthode), vous devez également substituer <xref:System.Object.Equals%2A>et vice versa.</span><span class="sxs-lookup"><span data-stu-id="042e9-376">If you override the <xref:System.Object.GetHashCode%2A> method, you should also override <xref:System.Object.Equals%2A>, and vice versa.</span></span> <span data-ttu-id="042e9-377">Si votre substituée <xref:System.Object.Equals%2A> méthode retourne `true` lorsque les deux objets sont testées pour l’égalité, votre substituée <xref:System.Object.GetHashCode%2A> méthode doit retourner la même valeur pour les deux objets.</span><span class="sxs-lookup"><span data-stu-id="042e9-377">If your overridden <xref:System.Object.Equals%2A> method returns `true` when two objects are tested for equality, your overridden <xref:System.Object.GetHashCode%2A> method must return the same value for the two objects.</span></span>  
  
 <span data-ttu-id="042e9-378">Si un objet qui est utilisé comme clé dans une table de hachage ne fournit pas une implémentation utile de <xref:System.Object.GetHashCode%2A>, vous pouvez spécifier un fournisseur de code de hachage en fournissant une <xref:System.Collections.IEqualityComparer> mise en œuvre à une des surcharges de la <xref:System.Collections.Hashtable> constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-378">If an object that is used as a key in a hash table does not provide a useful implementation of <xref:System.Object.GetHashCode%2A>, you can specify a hash code provider by supplying an <xref:System.Collections.IEqualityComparer> implementation to one of the overloads of the <xref:System.Collections.Hashtable> class constructor.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="042e9-379">Notes pour le [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="042e9-379">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="042e9-380">Lorsque vous appelez le <xref:System.Object.GetHashCode%2A> méthode sur une classe dans le [!INCLUDE[wrt](~/includes/wrt-md.md)], il fournit le comportement par défaut pour les classes qui ne remplacent pas <xref:System.Object.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-380">When you call the <xref:System.Object.GetHashCode%2A> method on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don’t override <xref:System.Object.GetHashCode%2A>.</span></span> <span data-ttu-id="042e9-381">Cela fait partie de la prise en charge le .NET Framework fournit pour les [!INCLUDE[wrt](~/includes/wrt-md.md)] (consultez [.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="042e9-381">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="042e9-382">Classes de la [!INCLUDE[wrt](~/includes/wrt-md.md)] n’héritent pas <xref:System.Object>et n’implémentent pas actuellement un <xref:System.Object.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-382">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don’t inherit <xref:System.Object>, and currently don’t implement a <xref:System.Object.GetHashCode%2A>.</span></span> <span data-ttu-id="042e9-383">Toutefois, ils semblent avoir <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, et <xref:System.Object.GetHashCode%2A> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="042e9-383">However, they appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="042e9-384"> les classes qui sont écrits en c# ou Visual Basic peuvent substituer la <xref:System.Object.GetHashCode%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-384"> classes that are written in C# or Visual Basic can override the <xref:System.Object.GetHashCode%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="042e9-385">Une des méthodes plus simples pour calculer un code de hachage pour une valeur numérique qui a la même ou à une plage plus petite que la <xref:System.Int32> est de type à retourner simplement cette valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-385">One of the simplest ways to compute a hash code for a numeric value that has the same or a smaller range than the <xref:System.Int32> type is to simply return that value.</span></span> <span data-ttu-id="042e9-386">L’exemple suivant montre une telle implémentation pour un `Number` structure.</span><span class="sxs-lookup"><span data-stu-id="042e9-386">The following example shows such an implementation for a `Number` structure.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/direct1.cs#1)]
 [!code-vb[System.Object.GetHashCode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/direct1.vb#1)]  
  
 <span data-ttu-id="042e9-387">Souvent, un type a plusieurs champs de données qui peuvent participer à la génération du code de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-387">Frequently, a type has multiple data fields that can participate in generating the hash code.</span></span> <span data-ttu-id="042e9-388">Permet de générer un code de hachage consiste à combiner ces champs à l’aide un `XOR (eXclusive OR)` opération, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="042e9-388">One way to generate a hash code is to combine these fields using an `XOR (eXclusive OR)` operation, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/xor1.cs#2)]
 [!code-vb[System.Object.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/xor1.vb#2)]  
  
 <span data-ttu-id="042e9-389">L’exemple précédent retourne le même code de hachage pour (n1, n2) et (n2, n1) et par conséquent, peut générer des collisions ceux souhaitable.</span><span class="sxs-lookup"><span data-stu-id="042e9-389">The previous example returns the same hash code for (n1, n2) and (n2, n1), and so may generate more collisions than are desirable.</span></span> <span data-ttu-id="042e9-390">Un nombre de solutions est disponible afin que les codes de hachage dans ces cas ne sont pas identiques.</span><span class="sxs-lookup"><span data-stu-id="042e9-390">A number of solutions are available so that hash codes in these cases are not identical.</span></span> <span data-ttu-id="042e9-391">Un consiste à retourner le code de hachage d’un `Tuple` objet qui reflète l’ordre de chaque champ.</span><span class="sxs-lookup"><span data-stu-id="042e9-391">One is to return the hash code of a `Tuple` object that reflects the order of each field.</span></span> <span data-ttu-id="042e9-392">L’exemple suivant montre une implémentation possible qui utilise le <xref:System.Tuple%602> classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-392">The following example shows a possible implementation that uses the <xref:System.Tuple%602> class.</span></span> <span data-ttu-id="042e9-393">Notez, cependant, que la surcharge des performances de l’instanciation d’un `Tuple` objet peut affecter considérablement les performances globales d’une application qui stocke un grand nombre d’objets dans les tables de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-393">Note, though, that the performance overhead of instantiating a `Tuple` object may significantly impact the overall performance of an application that stores large numbers of objects in hash tables.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/xor2.cs#3)]
 [!code-vb[System.Object.GetHashCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/xor2.vb#3)]  
  
 <span data-ttu-id="042e9-394">Une autre solution de remplacement implique les codes de hachage individuels de pondération en migrant les codes de hachage de champs successifs à gauche par deux ou plusieurs bits.</span><span class="sxs-lookup"><span data-stu-id="042e9-394">A second alternative solution involves weighting the individual hash codes by left-shifting the hash codes of successive fields by two or more bits.</span></span> <span data-ttu-id="042e9-395">De façon optimale, au lieu d’être supprimés, les bits décalés au-delà de bit 31 doivent habiller plutôt qu’ignorées.</span><span class="sxs-lookup"><span data-stu-id="042e9-395">Optimally, instead of being discarded, bits shifted beyond bit 31 should wrap around rather than be discarded.</span></span> <span data-ttu-id="042e9-396">Étant donné que les bits sont ignorés par les opérateurs de décalage vers la gauche en c# et Visual Basic, cela requiert la création d’une méthode MAJ-wrap gauche comme suit :</span><span class="sxs-lookup"><span data-stu-id="042e9-396">Since bits are discarded by the left-shift operators in both C# and Visual Basic, this requires creating a left shift-and-wrap method like the following:</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/shift1.cs#4)]
 [!code-vb[System.Object.GetHashCode#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/shift1.vb#4)]  
  
 <span data-ttu-id="042e9-397">L’exemple suivant utilise ensuite cette méthode MAJ-wrap pour calculer le code de hachage de la `Point` structure utilisée dans les exemples précédents.</span><span class="sxs-lookup"><span data-stu-id="042e9-397">The following example then uses this shift-and-wrap method to compute the hash code of the `Point` structure used in the previous examples.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/shift1.cs#5)]
 [!code-vb[System.Object.GetHashCode#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/shift1.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="042e9-398">Une fonction de hachage est utilisée pour générer rapidement un nombre (code de hachage) qui correspond à la valeur d’un objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-398">A hash function is used to quickly generate a number (hash code) that corresponds to the value of an object.</span></span> <span data-ttu-id="042e9-399">Fonctions de hachage sont généralement propres à chaque type et, pour l’unicité, doivent utiliser au moins un des champs d’instance comme entrée.</span><span class="sxs-lookup"><span data-stu-id="042e9-399">Hash functions are usually specific to each type and, for uniqueness, must use at least one of the instance fields as input.</span></span> <span data-ttu-id="042e9-400">Codes de hachage ne doivent pas être calculées en utilisant les valeurs des champs statiques.</span><span class="sxs-lookup"><span data-stu-id="042e9-400">Hash codes should not be computed by using the values of static fields.</span></span>  
  
 <span data-ttu-id="042e9-401">Pour les classes dérivées de <see cref="T:System.Object" />, le <see langword="GetHashCode" /> méthode peut déléguer à la classe de base <see cref="M:System.Object.GetHashCode" /> mise en œuvre uniquement si la classe dérivée définit l’égalité comme l’égalité des références.</span><span class="sxs-lookup"><span data-stu-id="042e9-401">For classes derived from <see cref="T:System.Object" />, the <see langword="GetHashCode" /> method can delegate to the base class <see cref="M:System.Object.GetHashCode" /> implementation only if the derived class defines equality to be reference equality.</span></span> <span data-ttu-id="042e9-402">L’implémentation par défaut de <see cref="M:System.Object.GetHashCode" /> pour référence types retourne un code de hachage qui est équivalent à celui retourné par la <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" /> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-402">The default implementation of <see cref="M:System.Object.GetHashCode" /> for reference types returns a hash code that is equivalent to the one returned by the <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" /> method.</span></span> <span data-ttu-id="042e9-403">Vous pouvez substituer <see cref="M:System.Object.GetHashCode" /> pour les types référence immuable.</span><span class="sxs-lookup"><span data-stu-id="042e9-403">You can override <see cref="M:System.Object.GetHashCode" /> for immutable reference types.</span></span> <span data-ttu-id="042e9-404">En règle générale, pour les types référence mutables, vous devez substituer <see cref="M:System.Object.GetHashCode" /> uniquement si :</span><span class="sxs-lookup"><span data-stu-id="042e9-404">In general, for mutable reference types, you should override <see cref="M:System.Object.GetHashCode" /> only if:</span></span>  
  
-   <span data-ttu-id="042e9-405">Vous pouvez calculer le code de hachage à partir des champs qui ne sont pas mutable ; ou</span><span class="sxs-lookup"><span data-stu-id="042e9-405">You can compute the hash code from fields that are not mutable; or</span></span>  
  
-   <span data-ttu-id="042e9-406">Vous pouvez vous assurer que le code de hachage d’un objet mutable ne change pas pendant que l’objet est contenu dans une collection qui s’appuie sur son code de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-406">You can ensure that the hash code of a mutable object does not change while the object is contained in a collection that relies on its hash code.</span></span>  
  
 <span data-ttu-id="042e9-407">Sinon, vous pouvez considérer que la perte de l’objet mutable dans la table de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-407">Otherwise, you might think that the mutable object is lost in the hash table.</span></span> <span data-ttu-id="042e9-408">Si vous choisissez de remplacer <see cref="M:System.Object.GetHashCode" /> pour un type référence mutable, la documentation doit indiquer clairement que les utilisateurs de votre type ne doivent pas changer les valeurs d’objet alors que l’objet est stocké dans une table de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-408">If you do choose to override <see cref="M:System.Object.GetHashCode" /> for a mutable reference type, your documentation should make it clear that users of your type should not modify object values while the object is stored in a hash table.</span></span>  
  
 <span data-ttu-id="042e9-409">Pour les types valeur, <see cref="M:System.ValueType.GetHashCode" /> fournit une implémentation de code de hachage par défaut qui utilise la réflexion.</span><span class="sxs-lookup"><span data-stu-id="042e9-409">For value types, <see cref="M:System.ValueType.GetHashCode" /> provides a default hash code implementation that uses reflection.</span></span> <span data-ttu-id="042e9-410">Vous devez envisager de substitution pour de meilleures performances.</span><span class="sxs-lookup"><span data-stu-id="042e9-410">You should consider overriding it for better performance.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="042e9-411">Pour plus d’informations et des exemples qui calculent des codes de hachage de plusieurs manières, consultez la section Exemples.</span><span class="sxs-lookup"><span data-stu-id="042e9-411">For more information and examples that compute hash codes in a variety of ways, see the Examples section.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="042e9-412">Une fonction de hachage doit avoir les propriétés suivantes :</span><span class="sxs-lookup"><span data-stu-id="042e9-412">A hash function must have the following properties:</span></span>  
  
-   <span data-ttu-id="042e9-413">Si deux objets sont considérés comme égaux, la <see cref="M:System.Object.GetHashCode" /> méthode pour chaque objet doit retourner la même valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-413">If two objects compare as equal, the <see cref="M:System.Object.GetHashCode" /> method for each object must return the same value.</span></span> <span data-ttu-id="042e9-414">Toutefois, si deux objets ne sont pas considérés comme égaux, la <see cref="M:System.Object.GetHashCode" /> méthodes pour les deux objets n’ont pas à retourner des valeurs différentes.</span><span class="sxs-lookup"><span data-stu-id="042e9-414">However, if two objects do not compare as equal, the <see cref="M:System.Object.GetHashCode" /> methods for the two objects do not have to return different values.</span></span>  
  
-   <span data-ttu-id="042e9-415">Le <see cref="M:System.Object.GetHashCode" /> méthode pour un objet doit constamment retourner le même code de hachage tant qu’il n’existe aucune modification à l’état de l’objet qui détermine la valeur de retour de l’objet [System.Object.Equals](xref:System.Object.Equals*) (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-415">The <see cref="M:System.Object.GetHashCode" /> method for an object must consistently return the same hash code as long as there is no modification to the object state that determines the return value of the object's [System.Object.Equals](xref:System.Object.Equals*) method.</span></span> <span data-ttu-id="042e9-416">Notez que cela est vrai uniquement pour l’exécution en cours d’une application, et qu’un code de hachage différent peut être retourné si l’application est exécutée à nouveau.</span><span class="sxs-lookup"><span data-stu-id="042e9-416">Note that this is true only for the current execution of an application, and that a different hash code can be returned if the application is run again.</span></span>  
  
-   <span data-ttu-id="042e9-417">Pour des performances optimales, une fonction de hachage doit générer une distribution uniforme pour toutes les entrées, y compris les entrées qui sont fortement en cluster.</span><span class="sxs-lookup"><span data-stu-id="042e9-417">For the best performance, a hash function should generate an even distribution for all input, including input that is heavily clustered.</span></span> <span data-ttu-id="042e9-418">Une conséquence est que les petites modifications à l’état de l’objet doivent entraînent des modifications volumineuses dans le code de hachage qui en résulte pour de meilleures performances de table de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-418">An implication is that small modifications to object state should result in large modifications to the resulting hash code for best hash table performance.</span></span>  
  
-   <span data-ttu-id="042e9-419">Fonctions de hachage doivent être peu coûteuses à calculer.</span><span class="sxs-lookup"><span data-stu-id="042e9-419">Hash functions should be inexpensive to compute.</span></span>  
  
-   <span data-ttu-id="042e9-420">Le <see cref="M:System.Object.GetHashCode" /> méthode lever d’exceptions.</span><span class="sxs-lookup"><span data-stu-id="042e9-420">The <see cref="M:System.Object.GetHashCode" /> method should not throw exceptions.</span></span>  
  
 <span data-ttu-id="042e9-421">Par exemple, l’implémentation de la <see cref="M:System.String.GetHashCode" /> méthode fournie par la <see cref="T:System.String" /> classe retourne des codes de hachage identiques pour les valeurs de chaîne identiques.</span><span class="sxs-lookup"><span data-stu-id="042e9-421">For example, the implementation of the <see cref="M:System.String.GetHashCode" /> method provided by the <see cref="T:System.String" /> class returns identical hash codes for identical string values.</span></span> <span data-ttu-id="042e9-422">Par conséquent, deux <see cref="T:System.String" /> objets retournent le même code de hachage s’ils représentent la même valeur de chaîne.</span><span class="sxs-lookup"><span data-stu-id="042e9-422">Therefore, two <see cref="T:System.String" /> objects return the same hash code if they represent the same string value.</span></span> <span data-ttu-id="042e9-423">En outre, la méthode utilise tous les caractères dans la chaîne pour générer une sortie distribuée de manière raisonnablement aléatoire, même si l’entrée est ordonnée en clusters dans certaines plages (par exemple, de nombreux utilisateurs peuvent comporter des chaînes qui contiennent uniquement les 128 caractères ASCII inférieurs, même si un chaîne peut contenir les 65 535 caractères Unicode).</span><span class="sxs-lookup"><span data-stu-id="042e9-423">Also, the method uses all the characters in the string to generate reasonably randomly distributed output, even when the input is clustered in certain ranges (for example, many users might have strings that contain only the lower 128 ASCII characters, even though a string can contain any of the 65,535 Unicode characters).</span></span>  
  
 <span data-ttu-id="042e9-424">En fournissant une fonction de hachage adéquate sur une classe peut affecter considérablement les performances de l’ajout de ces objets à une table de hachage.</span><span class="sxs-lookup"><span data-stu-id="042e9-424">Providing a good hash function on a class can significantly affect the performance of adding those objects to a hash table.</span></span> <span data-ttu-id="042e9-425">Dans une table de hachage avec des clés qui fournissent une bonne implémentation d’une fonction de hachage, recherche un élément du temps constant (par exemple, il s’agit d’une opération o (1)).</span><span class="sxs-lookup"><span data-stu-id="042e9-425">In a hash table with keys that provide a good implementation of a hash function, searching for an element takes constant time (for example, an O(1) operation).</span></span> <span data-ttu-id="042e9-426">Dans une table de hachage avec une mauvaise implémentation d’une fonction de hachage, les performances d’une recherche varie selon le nombre d’éléments dans la table de hachage (par exemple, un O (`n`) opération, où `n` est le nombre d’éléments dans la table de hachage).</span><span class="sxs-lookup"><span data-stu-id="042e9-426">In a hash table with a poor implementation of a hash function, the performance of a search depends on the number of items in the hash table (for example, an O(`n`) operation, where `n` is the number of items in the hash table).</span></span> <span data-ttu-id="042e9-427">Un utilisateur malveillant peut entrer des données qui augmente le nombre de collisions, ce qui peut dégrader considérablement les performances des applications qui dépendent des tables de hachage, les conditions suivantes :</span><span class="sxs-lookup"><span data-stu-id="042e9-427">A malicious user can input data that increases the number of collisions, which can significantly degrade the performance of applications that depend on hash tables, under the following conditions:</span></span>  
  
-   <span data-ttu-id="042e9-428">Lorsque les fonctions de hachage produisent des conflits fréquents.</span><span class="sxs-lookup"><span data-stu-id="042e9-428">When hash functions produce frequent collisions.</span></span>  
  
-   <span data-ttu-id="042e9-429">Quand une proportion élevée d’objets dans une table de hachage produisent des codes de hachage qui sont égaux ou approximativement égal à un autre.</span><span class="sxs-lookup"><span data-stu-id="042e9-429">When a large proportion of objects in a hash table produce hash codes that are equal or approximately equal to one another.</span></span>  
  
-   <span data-ttu-id="042e9-430">Lorsque les utilisateurs d’entrée les données à partir de laquelle le code de hachage est calculé.</span><span class="sxs-lookup"><span data-stu-id="042e9-430">When users input the data from which the hash code is computed.</span></span>  
  
 <span data-ttu-id="042e9-431">Classes dérivées qui substituent <see cref="M:System.Object.GetHashCode" /> doit également substituer <see cref="M:System.Object.Equals(System.Object)" /> pour garantir que deux objets considérés comme égaux possèdent le même code de hachage ; sinon, le <see cref="T:System.Collections.Hashtable" /> type peut ne pas fonctionne correctement.</span><span class="sxs-lookup"><span data-stu-id="042e9-431">Derived classes that override <see cref="M:System.Object.GetHashCode" /> must also override <see cref="M:System.Object.Equals(System.Object)" /> to guarantee that two objects considered equal have the same hash code; otherwise, the <see cref="T:System.Collections.Hashtable" /> type might not work correctly.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="042e9-432">Gets the <see cref="T:System.Type" /> of the current instance.</span><span class="sxs-lookup"><span data-stu-id="042e9-432">Gets the <see cref="T:System.Type" /> of the current instance.</span></span></summary>
        <returns><span data-ttu-id="042e9-433">The exact runtime type of the current instance.</span><span class="sxs-lookup"><span data-stu-id="042e9-433">The exact runtime type of the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-434">Étant donné que <xref:System.Object?displayProperty=nameWithType> est la classe de base pour tous les types dans le système de type .NET Framework, le <xref:System.Object.GetType%2A> méthode peut être utilisée pour retourner <xref:System.Type> objets qui représentent tous les types .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="042e9-434">Because <xref:System.Object?displayProperty=nameWithType> is the base class for all types in the .NET Framework type system, the <xref:System.Object.GetType%2A> method can be used to return <xref:System.Type> objects that represent all .NET Framework types.</span></span> <span data-ttu-id="042e9-435">Le .NET Framework reconnaît les cinq catégories de types suivantes :</span><span class="sxs-lookup"><span data-stu-id="042e9-435">The .NET Framework recognizes the following five categories of types:</span></span>  
  
-   <span data-ttu-id="042e9-436">Classes, qui sont dérivés de <xref:System.Object?displayProperty=nameWithType>,</span><span class="sxs-lookup"><span data-stu-id="042e9-436">Classes, which are derived from <xref:System.Object?displayProperty=nameWithType>,</span></span>  
  
-   <span data-ttu-id="042e9-437">Types valeur, qui sont dérivées de <xref:System.ValueType?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-437">Value types, which are derived from <xref:System.ValueType?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="042e9-438">Les interfaces sont dérivés de <xref:System.Object?displayProperty=nameWithType> en commençant par le .NET Framework 2.0.</span><span class="sxs-lookup"><span data-stu-id="042e9-438">Interfaces, which are derived from <xref:System.Object?displayProperty=nameWithType> starting with the .NET Framework 2.0.</span></span>  
  
-   <span data-ttu-id="042e9-439">Énumérations qui sont dérivées de <xref:System.Enum?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-439">Enumerations, which are derived from <xref:System.Enum?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="042e9-440">Les délégués sont dérivés de <xref:System.MulticastDelegate?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-440">Delegates, which are derived from <xref:System.MulticastDelegate?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="042e9-441">Pour deux objets `x` et `y` qui ont des types de runtime identiques, `Object.ReferenceEquals(x.GetType(),y.GetType())` retourne `true`.</span><span class="sxs-lookup"><span data-stu-id="042e9-441">For two objects `x` and `y` that have identical runtime types, `Object.ReferenceEquals(x.GetType(),y.GetType())` returns `true`.</span></span> <span data-ttu-id="042e9-442">L’exemple suivant utilise le <xref:System.Object.GetType%2A> méthode avec la <xref:System.Object.ReferenceEquals%2A> méthode pour déterminer si une valeur numérique est du même type que les deux autres valeurs numériques.</span><span class="sxs-lookup"><span data-stu-id="042e9-442">The following example uses the <xref:System.Object.GetType%2A> method with the <xref:System.Object.ReferenceEquals%2A> method to determine whether one numeric value is the same type as two other numeric values.</span></span>  
  
 [!code-csharp[System.Object.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gettype/cs/gettype1.cs#1)]
 [!code-vb[System.Object.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gettype/vb/gettype1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="042e9-443">Pour déterminer si un objet est un type spécifique, vous pouvez utiliser le mot clé de comparaison du type de votre langage ou construire.</span><span class="sxs-lookup"><span data-stu-id="042e9-443">To determine whether an object is a specific type, you can use your language's type comparison keyword or construct.</span></span> <span data-ttu-id="042e9-444">Par exemple, vous pouvez utiliser la `TypeOf…Is` construire en Visual Basic ou `is` (mot clé) en c#.</span><span class="sxs-lookup"><span data-stu-id="042e9-444">For example, you can use the `TypeOf…Is` construct in Visual Basic or the `is` keyword in C#.</span></span>  
  
 <span data-ttu-id="042e9-445">Le <xref:System.Object.GetType%2A> méthode est héritée par tous les types qui dérivent de <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="042e9-445">The <xref:System.Object.GetType%2A> method is inherited by all types that derive from <xref:System.Object>.</span></span> <span data-ttu-id="042e9-446">Cela signifie que, en plus d’utiliser le mot clé de comparaison de votre propre langage, vous pouvez utiliser la <xref:System.Object.GetType%2A> méthode pour déterminer le type d’un objet particulier, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="042e9-446">This means that, in addition to using your own language's comparison keyword, you can use the <xref:System.Object.GetType%2A> method to determine the type of a particular object, as the following example shows.</span></span>  
  
 [!code-csharp[System.Object.GetType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gettype/cs/GetTypeEx2.cs#2)]
 [!code-vb[System.Object.GetType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gettype/vb/GetTypeEx2.vb#2)]  
  
 <span data-ttu-id="042e9-447">Le <xref:System.Type> objet expose les métadonnées associées à la classe de courant <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="042e9-447">The <xref:System.Type> object exposes the metadata associated with the class of the current <xref:System.Object>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="042e9-448">L’exemple de code suivant montre que <xref:System.Object.GetType%2A> retourne le type de runtime de l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="042e9-448">The following code example demonstrates that <xref:System.Object.GetType%2A> returns the runtime type of the current instance.</span></span>  
  
 [!code-cpp[ECMA-System.Object.GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/ECMA-System.Object.GetType/CPP/gettype.cpp#1)]
 [!code-csharp[ECMA-System.Object.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.GetType/CS/gettype.cs#1)]
 [!code-vb[ECMA-System.Object.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.GetType/VB/gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="MemberwiseClone">
      <MemberSignature Language="C#" Value="protected object MemberwiseClone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object MemberwiseClone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.MemberwiseClone" />
      <MemberSignature Language="VB.NET" Value="Protected Function MemberwiseClone () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ MemberwiseClone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="042e9-449">Creates a shallow copy of the current <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="042e9-449">Creates a shallow copy of the current <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="042e9-450">A shallow copy of the current <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="042e9-450">A shallow copy of the current <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-451">Le <xref:System.Object.MemberwiseClone%2A> méthode crée une copie superficielle en créant un nouvel objet, puis en copiant les champs non statiques de l’objet actuel vers le nouvel objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-451">The <xref:System.Object.MemberwiseClone%2A> method creates a shallow copy by creating a new object, and then copying the nonstatic fields of the current object to the new object.</span></span> <span data-ttu-id="042e9-452">Si un champ est un type valeur, une copie bit par bit du champ est effectuée.</span><span class="sxs-lookup"><span data-stu-id="042e9-452">If a field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="042e9-453">Si un champ est un type référence, la référence est copiée, mais l’objet référencé n’est pas. Par conséquent, l’objet d’origine et son clone font référence au même objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-453">If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</span></span>  
  
 <span data-ttu-id="042e9-454">Par exemple, considérez un objet appelé X qui fait référence à son tour, les objets A et B, C. Une copie superficielle de X crée l’objet X2 qui fait également référence à des objets A et B. En revanche, une copie complète de X crée un nouvel objet X2 qui fait référence à nouveaux objets A2 et B2, qui sont des copies de A et B. B2 référence à son tour, le nouvel objet C2, qui est une copie de C. L’exemple illustre la différence entre un shallow et une opération de copie complète.</span><span class="sxs-lookup"><span data-stu-id="042e9-454">For example, consider an object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy of C. The example illustrates the difference between a shallow and a deep copy operation.</span></span>  
  
 <span data-ttu-id="042e9-455">Il existe plusieurs façons pour implémenter une opération de copie complète si l’opération de copie superficielle exécutée par le <xref:System.Object.MemberwiseClone%2A> (méthode) ne répond pas à vos besoins.</span><span class="sxs-lookup"><span data-stu-id="042e9-455">There are numerous ways to implement a deep copy operation if the shallow copy operation performed by the <xref:System.Object.MemberwiseClone%2A> method does not meet your needs.</span></span> <span data-ttu-id="042e9-456">Notamment :</span><span class="sxs-lookup"><span data-stu-id="042e9-456">These include the following:</span></span>  
  
-   <span data-ttu-id="042e9-457">Appeler un constructeur de classe de l’objet doit être copié pour créer un second objet avec les valeurs de propriété provenant du premier objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-457">Call a class constructor of the object to be copied to create a second object with property values taken from the first object.</span></span> <span data-ttu-id="042e9-458">Cela suppose que les valeurs d’un objet sont entièrement définis par son constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-458">This assumes that the values of an object are entirely defined by its class constructor.</span></span>  
  
-   <span data-ttu-id="042e9-459">Appelez le <xref:System.Object.MemberwiseClone%2A> méthode pour créer une copie superficielle d’un objet et assigner des objets dont les valeurs sont les mêmes que l’objet d’origine à des propriétés ou des champs dont les valeurs sont des types référence.</span><span class="sxs-lookup"><span data-stu-id="042e9-459">Call the <xref:System.Object.MemberwiseClone%2A> method to create a shallow copy of an object, and then assign new objects whose values are the same as the original object to any properties or fields whose values are reference types.</span></span> <span data-ttu-id="042e9-460">Le `DeepCopy` méthode dans l’exemple illustre cette approche.</span><span class="sxs-lookup"><span data-stu-id="042e9-460">The `DeepCopy` method in the example illustrates this approach.</span></span>  
  
-   <span data-ttu-id="042e9-461">Sérialiser l’objet de manière complète copiés et restaurer les données sérialisées à une variable objet différent.</span><span class="sxs-lookup"><span data-stu-id="042e9-461">Serialize the object to be deep copied, and then restore the serialized data to a different object variable.</span></span>  
  
-   <span data-ttu-id="042e9-462">Utiliser la réflexion pour effectuer l’opération de copie complète avec la récurrence.</span><span class="sxs-lookup"><span data-stu-id="042e9-462">Use reflection with recursion to perform the deep copy operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="042e9-463">L’exemple suivant illustre la <xref:System.Object.MemberwiseClone%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-463">The following example illustrates the <xref:System.Object.MemberwiseClone%2A> method.</span></span> <span data-ttu-id="042e9-464">Il définit un `ShallowCopy` méthode qui appelle le <xref:System.Object.MemberwiseClone%2A> méthode pour effectuer une opération de copie superficielle sur un `Person` objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-464">It defines a `ShallowCopy` method that calls the <xref:System.Object.MemberwiseClone%2A> method to perform a shallow copy operation on a `Person` object.</span></span> <span data-ttu-id="042e9-465">Il définit également un `DeepCopy` méthode qui effectue une opération de copie complète sur un `Person` objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-465">It also defines a `DeepCopy` method that performs a deep copy operation on a `Person` object.</span></span>  
  
 [!code-csharp[System.Object.MemberwiseClone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.memberwiseclone/cs/memberwiseclone1.cs#1)]
 [!code-vb[System.Object.MemberwiseClone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.memberwiseclone/vb/memberwiseclone1.vb#1)]  
  
 <span data-ttu-id="042e9-466">Dans cet exemple, le `Person.IdInfo` propriété retourne un `IdInfo` objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-466">In this example, the `Person.IdInfo` property returns an `IdInfo` object.</span></span> <span data-ttu-id="042e9-467">Comme la sortie de l’exemple, lorsqu’un `Person` est cloné en appelant le <xref:System.Object.MemberwiseClone%2A> (méthode), le clonage `Person` objet est une copie indépendante de l’objet d’origine, sauf qu’elles partagent le même `Person.IdInfo` référence d’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-467">As the output from the example shows, when a `Person` object is cloned by calling the <xref:System.Object.MemberwiseClone%2A> method, the cloned `Person` object is an independent copy of the original object, except that they share the same `Person.IdInfo` object reference.</span></span> <span data-ttu-id="042e9-468">Par conséquent, modification du clone `Person.IdInfo` propriété modifie l’objet d’origine `Person.IdInfo` propriété.</span><span class="sxs-lookup"><span data-stu-id="042e9-468">As a result, modifying the clone's `Person.IdInfo` property changes the original object's `Person.IdInfo` property.</span></span> <span data-ttu-id="042e9-469">En revanche, quand une opération de copie complète est effectuée, le clonage `Person` de l’objet, y compris son `Person.IdInfo` propriété, peut être modifiée sans affecter l’objet d’origine.</span><span class="sxs-lookup"><span data-stu-id="042e9-469">On the other hand, when a deep copy operation is performed, the cloned `Person` object, including its `Person.IdInfo` property, can be modified without affecting the original object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEquals">
      <MemberSignature Language="C#" Value="public static bool ReferenceEquals (object objA, object objB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ReferenceEquals(object objA, object objB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEquals (objA As Object, objB As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ReferenceEquals(System::Object ^ objA, System::Object ^ objB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objA" Type="System.Object" />
        <Parameter Name="objB" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objA"><span data-ttu-id="042e9-470">The first object to compare.</span><span class="sxs-lookup"><span data-stu-id="042e9-470">The first object to compare.</span></span></param>
        <param name="objB"><span data-ttu-id="042e9-471">The second object  to compare.</span><span class="sxs-lookup"><span data-stu-id="042e9-471">The second object  to compare.</span></span></param>
        <summary><span data-ttu-id="042e9-472">Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</span><span class="sxs-lookup"><span data-stu-id="042e9-472">Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</span></span></summary>
        <returns>
          <span data-ttu-id="042e9-473"><see langword="true" /> if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are **null**; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="042e9-473"><see langword="true" /> if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are **null**; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-474">Contrairement à la <xref:System.Object.Equals%2A> méthode et l’opérateur d’égalité, le <xref:System.Object.ReferenceEquals%2A> méthode ne peut pas être substituée.</span><span class="sxs-lookup"><span data-stu-id="042e9-474">Unlike the <xref:System.Object.Equals%2A> method and the equality operator, the <xref:System.Object.ReferenceEquals%2A> method cannot be overridden.</span></span> <span data-ttu-id="042e9-475">Pour cette raison, si vous souhaitez tester deux références à l’égalité des objets et vous ne savez pas sur l’implémentation de la `Equals` (méthode), vous pouvez appeler la <xref:System.Object.ReferenceEquals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-475">Because of this, if you want to test two object references for equality and you are unsure about the implementation of the `Equals` method, you can call the <xref:System.Object.ReferenceEquals%2A> method.</span></span>  
  
 <span data-ttu-id="042e9-476">Toutefois, la valeur de retour de la <xref:System.Object.ReferenceEquals%2A> méthode peut apparaître comme étant anormaux dans ces deux scénarios :</span><span class="sxs-lookup"><span data-stu-id="042e9-476">However, the return value of the <xref:System.Object.ReferenceEquals%2A> method may appear to be anomalous in these two scenarios:</span></span>  
  
-   <span data-ttu-id="042e9-477">Lors de la comparaison des types valeur.</span><span class="sxs-lookup"><span data-stu-id="042e9-477">When comparing value types.</span></span> <span data-ttu-id="042e9-478">Si `objA` et `objB` sont des types valeur, ils sont convertis avant d’être passés à la <xref:System.Object.ReferenceEquals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-478">If `objA` and `objB` are value types, they are boxed before they are passed to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="042e9-479">Cela signifie que si les deux `objA` et `objB` représentent la même instance d’un type valeur, le <xref:System.Object.ReferenceEquals%2A> méthode néanmoins retourne `false`, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="042e9-479">This means that if both `objA` and `objB` represent the same instance of a value type, the <xref:System.Object.ReferenceEquals%2A> method nevertheless returns `false`, as the following example shows.</span></span>  
  
     [!code-csharp[System.Object.ReferenceEquals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.referenceequals/cs/referenceequals4.cs#1)]
     [!code-vb[System.Object.ReferenceEquals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.referenceequals/vb/referenceequals4.vb#1)]  
  
     <span data-ttu-id="042e9-480">Pour plus d’informations sur les types valeur boxing, consultez [conversion Boxing et Unboxing](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md).</span><span class="sxs-lookup"><span data-stu-id="042e9-480">For information on boxing value types, see [Boxing and Unboxing](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md).</span></span>  
  
-   <span data-ttu-id="042e9-481">Lors de la comparaison de chaînes.</span><span class="sxs-lookup"><span data-stu-id="042e9-481">When comparing strings.</span></span> <span data-ttu-id="042e9-482">Si `objA` et `objB` sont des chaînes, la <xref:System.Object.ReferenceEquals%2A> retourne de la méthode `true` si la chaîne est dans le pool interne.</span><span class="sxs-lookup"><span data-stu-id="042e9-482">If `objA` and `objB` are strings, the <xref:System.Object.ReferenceEquals%2A> method returns `true` if the string is interned.</span></span> <span data-ttu-id="042e9-483">Il n’effectue pas un test de l’égalité des valeurs.</span><span class="sxs-lookup"><span data-stu-id="042e9-483">It does not perform a test for value equality.</span></span>  <span data-ttu-id="042e9-484">Dans l’exemple suivant, `s1` et `s2` sont égales, car elles sont deux instances d’une chaîne dans le pool interne unique.</span><span class="sxs-lookup"><span data-stu-id="042e9-484">In the following example, `s1` and `s2` are equal because they are two instances of a single interned string.</span></span> <span data-ttu-id="042e9-485">Toutefois, `s3` et `s4` ne sont pas égales, car même si elles sont ont des valeurs de chaîne identique, cette chaîne n’est pas intégrée.</span><span class="sxs-lookup"><span data-stu-id="042e9-485">However, `s3` and `s4` are not equal, because although they are have identical string values, that string is not interned.</span></span>  
  
     [!code-csharp[System.Object.ReferenceEquals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.referenceequals/cs/referenceequalsa.cs#2)]
     [!code-vb[System.Object.ReferenceEquals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.referenceequals/vb/referenceequalsa.vb#2)]  
  
     <span data-ttu-id="042e9-486">Pour plus d’informations sur la centralisation des chaînes, consultez <xref:System.String.IsInterned%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-486">For more information about string interning, see <xref:System.String.IsInterned%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="042e9-487">L’exemple suivant utilise <xref:System.Object.ReferenceEquals%2A> pour déterminer si deux objets sont identiques.</span><span class="sxs-lookup"><span data-stu-id="042e9-487">The following example uses <xref:System.Object.ReferenceEquals%2A> to determine if two objects are the same instance.</span></span>  
  
 [!code-cpp[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/cpp/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/CPP/referenceequals.cpp#1)]
 [!code-csharp[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/CS/referenceequals.cs#1)]
 [!code-vb[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/vb/referenceequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public virtual string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="042e9-488">Returns a string that represents the current object.</span><span class="sxs-lookup"><span data-stu-id="042e9-488">Returns a string that represents the current object.</span></span></summary>
        <returns><span data-ttu-id="042e9-489">A string that represents the current object.</span><span class="sxs-lookup"><span data-stu-id="042e9-489">A string that represents the current object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="042e9-490"><xref:System.Object.ToString%2A?displayProperty=nameWithType> principales est mise en forme de méthode dans le .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="042e9-490"><xref:System.Object.ToString%2A?displayProperty=nameWithType> is the major formatting method in the .NET Framework.</span></span> <span data-ttu-id="042e9-491">Il convertit un objet en sa représentation sous forme de chaîne afin qu’il soit adapté à l’affichage.</span><span class="sxs-lookup"><span data-stu-id="042e9-491">It converts an object to its string representation so that it is suitable for display.</span></span> <span data-ttu-id="042e9-492">(Pour plus d’informations sur la mise en forme de la prise en charge dans le .NET Framework, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).) Implémentations par défaut de la <xref:System.Object.ToString%2A?displayProperty=nameWithType> méthode retourne le nom qualifié complet du type de l’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-492">(For information about formatting support in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).) Default implementations of the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method return the fully qualified name of the object's type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="042e9-493">Vous avez atteint cette page en suivant le lien à partir de la liste des membres d’un autre type.</span><span class="sxs-lookup"><span data-stu-id="042e9-493">You may have reached this page by following the link from the member list of another type.</span></span> <span data-ttu-id="042e9-494">C’est parce que ce type ne se substitue pas <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-494">That is because that type does not override <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="042e9-495">Au lieu de cela, il hérite de la fonctionnalité de le <xref:System.Object.ToString%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-495">Instead, it inherits the functionality of the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="042e9-496">Les types remplacer fréquemment le <xref:System.Object.ToString%2A?displayProperty=nameWithType> méthode pour fournir une représentation de chaîne plus appropriée d’un type particulier.</span><span class="sxs-lookup"><span data-stu-id="042e9-496">Types frequently override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to provide a more suitable string representation of a particular type.</span></span> <span data-ttu-id="042e9-497">Types de surcharge aussi fréquemment le <xref:System.Object.ToString%2A?displayProperty=nameWithType> méthode pour prendre en charge les chaînes de format ou la mise en forme dépendante de la culture.</span><span class="sxs-lookup"><span data-stu-id="042e9-497">Types also frequently overload the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to provide support for format strings or culture-sensitive formatting.</span></span>  
  
 <span data-ttu-id="042e9-498">Dans cette section :</span><span class="sxs-lookup"><span data-stu-id="042e9-498">In this section:</span></span>  
  
 <span data-ttu-id="042e9-499">[La méthode Object.ToString () par défaut](#Default) </span><span class="sxs-lookup"><span data-stu-id="042e9-499">[The default Object.ToString() method](#Default) </span></span>  
 <span data-ttu-id="042e9-500">[Substitution de la méthode Object.ToString)](#Overriding) </span><span class="sxs-lookup"><span data-stu-id="042e9-500">[Overriding the Object.ToString() method](#Overriding) </span></span>  
 <span data-ttu-id="042e9-501">[Surcharge de la méthode ToString](#Overloading) </span><span class="sxs-lookup"><span data-stu-id="042e9-501">[Overloading the ToString method](#Overloading) </span></span>  
 <span data-ttu-id="042e9-502">[Extension de la méthode Object.ToString](#Extending) </span><span class="sxs-lookup"><span data-stu-id="042e9-502">[Extending the Object.ToString method](#Extending) </span></span>  
 [<span data-ttu-id="042e9-503">Notes pour le Windows Runtime</span><span class="sxs-lookup"><span data-stu-id="042e9-503">Notes for the Windows Runtime</span></span>](#WinRT)  
  
<a name="Default"></a>   
## <a name="the-default-objecttostring-method"></a><span data-ttu-id="042e9-504">La méthode Object.ToString () par défaut</span><span class="sxs-lookup"><span data-stu-id="042e9-504">The default Object.ToString() method</span></span>  
 <span data-ttu-id="042e9-505">L’implémentation par défaut de la <xref:System.Object.ToString%2A> méthode retourne le nom qualifié complet du type de la <xref:System.Object>, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="042e9-505">The default implementation of the <xref:System.Object.ToString%2A> method returns the fully qualified name of the type of the <xref:System.Object>, as the following example shows.</span></span>  
  
 [!code-cpp[System.Object.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring1.cpp#1)]
 [!code-csharp[System.Object.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Object.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring1.vb#1)]  
  
 <span data-ttu-id="042e9-506">Étant donné que <xref:System.Object> est la classe de base de tous les types de référence dans le .NET Framework, ce comportement est hérité par les types de référence qui ne remplacent pas les <xref:System.Object.ToString%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-506">Because <xref:System.Object> is the base class of all reference types in the .NET Framework, this behavior is inherited by reference types that do not override the <xref:System.Object.ToString%2A> method.</span></span> <span data-ttu-id="042e9-507">L'exemple suivant illustre ce comportement.</span><span class="sxs-lookup"><span data-stu-id="042e9-507">The following example illustrates this.</span></span> <span data-ttu-id="042e9-508">Il définit une classe nommée `Object1` qui accepte l’implémentation par défaut de tous les <xref:System.Object> membres.</span><span class="sxs-lookup"><span data-stu-id="042e9-508">It defines a class named `Object1` that accepts the default implementation of all <xref:System.Object> members.</span></span> <span data-ttu-id="042e9-509">Son <xref:System.Object.ToString%2A> méthode retourne le nom de type qualifié complet de l’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-509">Its <xref:System.Object.ToString%2A> method returns the object's fully qualified type name.</span></span>  
  
 [!code-cpp[System.Object.ToString#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring2.cpp#2)]
 [!code-csharp[System.Object.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.Object.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring2.vb#2)]  
  
<a name="Overriding"></a>   
## <a name="overriding-the-objecttostring-method"></a><span data-ttu-id="042e9-510">Substitution de la méthode Object.ToString)</span><span class="sxs-lookup"><span data-stu-id="042e9-510">Overriding the Object.ToString() method</span></span>  
 <span data-ttu-id="042e9-511">Les types couramment remplacer le <xref:System.Object.ToString%2A?displayProperty=nameWithType> méthode pour retourner une chaîne qui représente l’instance d’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-511">Types commonly override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to return a string that represents the object instance.</span></span> <span data-ttu-id="042e9-512">Par exemple, les types de base telles que <xref:System.Char>, <xref:System.Int32>, et <xref:System.String> fournir <xref:System.Object.ToString%2A> qu’il retourne la forme de chaîne de la valeur que l’objet représente.</span><span class="sxs-lookup"><span data-stu-id="042e9-512">For example, the base types such as <xref:System.Char>, <xref:System.Int32>, and <xref:System.String> provide <xref:System.Object.ToString%2A> implementations that return the string form of the value that the object represents.</span></span> <span data-ttu-id="042e9-513">L’exemple suivant définit une classe, `Object2`, qui remplace la <xref:System.Object.ToString%2A> le nom de type, ainsi que sa valeur de retour de méthode.</span><span class="sxs-lookup"><span data-stu-id="042e9-513">The following example defines a class, `Object2`, that overrides the <xref:System.Object.ToString%2A> method to return the type name along with its value.</span></span>  
  
 [!code-cpp[System.Object.ToString#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring3.cpp#3)]
 [!code-csharp[System.Object.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.Object.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring3.vb#3)]  
  
 <span data-ttu-id="042e9-514">Le tableau suivant répertorie les catégories de type dans le .NET Framework et indique si elles remplacent les <xref:System.Object.ToString%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-514">The following table lists the type categories in the .NET Framework and indicates whether or not they override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
|<span data-ttu-id="042e9-515">Catégorie de type</span><span class="sxs-lookup"><span data-stu-id="042e9-515">Type category</span></span>|<span data-ttu-id="042e9-516">Substitue Object.ToString)</span><span class="sxs-lookup"><span data-stu-id="042e9-516">Overrides Object.ToString()</span></span>|<span data-ttu-id="042e9-517">Comportement</span><span class="sxs-lookup"><span data-stu-id="042e9-517">Behavior</span></span>|  
|-------------------|-----------------------------------|--------------|  
|<span data-ttu-id="042e9-518">Classe</span><span class="sxs-lookup"><span data-stu-id="042e9-518">Class</span></span>|<span data-ttu-id="042e9-519">N/A</span><span class="sxs-lookup"><span data-stu-id="042e9-519">n/a</span></span>|<span data-ttu-id="042e9-520">N/A</span><span class="sxs-lookup"><span data-stu-id="042e9-520">n/a</span></span>|  
|<span data-ttu-id="042e9-521">Structure</span><span class="sxs-lookup"><span data-stu-id="042e9-521">Structure</span></span>|<span data-ttu-id="042e9-522">Oui (<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="042e9-522">Yes (<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>)</span></span>|<span data-ttu-id="042e9-523">Identique à Object.ToString)</span><span class="sxs-lookup"><span data-stu-id="042e9-523">Same as Object.ToString()</span></span>|  
|<span data-ttu-id="042e9-524">Énumération</span><span class="sxs-lookup"><span data-stu-id="042e9-524">Enumeration</span></span>|<span data-ttu-id="042e9-525">Oui (<xref:System.Enum.ToString?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="042e9-525">Yes (<xref:System.Enum.ToString?displayProperty=nameWithType>)</span></span>|<span data-ttu-id="042e9-526">Le nom de membre</span><span class="sxs-lookup"><span data-stu-id="042e9-526">The member name</span></span>|  
|<span data-ttu-id="042e9-527">Interface</span><span class="sxs-lookup"><span data-stu-id="042e9-527">Interface</span></span>|<span data-ttu-id="042e9-528">Non</span><span class="sxs-lookup"><span data-stu-id="042e9-528">No</span></span>|<span data-ttu-id="042e9-529">N/A</span><span class="sxs-lookup"><span data-stu-id="042e9-529">n/a</span></span>|  
|<span data-ttu-id="042e9-530">délégué</span><span class="sxs-lookup"><span data-stu-id="042e9-530">Delegate</span></span>|<span data-ttu-id="042e9-531">Non</span><span class="sxs-lookup"><span data-stu-id="042e9-531">No</span></span>|<span data-ttu-id="042e9-532">N/A</span><span class="sxs-lookup"><span data-stu-id="042e9-532">n/a</span></span>|  
  
 <span data-ttu-id="042e9-533">Consultez les section Remarques à l’attention des héritiers pour plus d’informations sur la substitution <xref:System.Object.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-533">See the Notes to Inheritors section for additional information on overriding <xref:System.Object.ToString%2A>.</span></span>  
  
<a name="Overloading"></a>   
## <a name="overloading-the-tostring-method"></a><span data-ttu-id="042e9-534">Surcharge de la méthode ToString</span><span class="sxs-lookup"><span data-stu-id="042e9-534">Overloading the ToString method</span></span>  
 <span data-ttu-id="042e9-535">Outre l’écrasement sans paramètre <xref:System.Object.ToString?displayProperty=nameWithType> surcharge de méthode, de nombreux types du `ToString` méthode pour fournir des versions de la méthode qui acceptent des paramètres.</span><span class="sxs-lookup"><span data-stu-id="042e9-535">In addition to overriding the parameterless <xref:System.Object.ToString?displayProperty=nameWithType> method, many types overload the `ToString` method to provide versions of the method that accept parameters.</span></span> <span data-ttu-id="042e9-536">En règle générale, cela est fait pour prendre en charge la mise en forme variable et la mise en forme dépendante de la culture.</span><span class="sxs-lookup"><span data-stu-id="042e9-536">Most commonly, this is done to provide support for variable formatting and culture-sensitive formatting.</span></span>  
  
 <span data-ttu-id="042e9-537">L’exemple suivant surcharge le `ToString` méthode pour retourner une chaîne de résultat qui inclut la valeur des champs variés d’une `Automobile` classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-537">The following example overloads the `ToString` method to return a result string that includes the value of various fields of an `Automobile` class.</span></span> <span data-ttu-id="042e9-538">Il définit quatre chaînes de format : G, qui retourne le nom du modèle et l’année ; D, qui retourne le nom du modèle, année et nombre de portes ; C, qui retourne le nom du modèle, année et nombre de cylindres ; et, qui retourne une chaîne avec toutes les valeurs de champ de quatre.</span><span class="sxs-lookup"><span data-stu-id="042e9-538">It defines four format strings: G, which returns the model name and year; D, which returns the model name, year, and number of doors; C, which returns the model name, year, and number of cylinders; and A, which returns a string with all four field values.</span></span>  
  
 [!code-csharp[System.Object.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostringoverload1.cs#4)]
 [!code-vb[System.Object.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostringoverload1.vb#4)]  
  
 <span data-ttu-id="042e9-539">L’exemple suivant appelle surchargées <xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthode pour afficher la mise en forme dépendante de la culture d’une valeur monétaire.</span><span class="sxs-lookup"><span data-stu-id="042e9-539">The following example calls the overloaded <xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method to display culture-sensitive formatting of a currency value.</span></span>  
  
 [!code-csharp[System.Object.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostringoverload2.cs#5)]
 [!code-vb[System.Object.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostringoverload2.vb#5)]  
  
 <span data-ttu-id="042e9-540">Pour plus d’informations sur les chaînes de format et la mise en forme dépendante de la culture, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="042e9-540">For more information on format strings and culture-sensitive formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span> <span data-ttu-id="042e9-541">Pour les chaînes de format pris en charge par les valeurs numériques, consultez [des chaînes de Format numériques Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) et [les chaînes de Format numériques personnalisées](~/docs/standard/base-types/custom-numeric-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="042e9-541">For the format strings supported by numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="042e9-542">Pour les chaînes de format pris en charge par les valeurs de date et d’heure, consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [les chaînes de Format de temps et de Date personnalisée](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="042e9-542">For the format strings supported by date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
<a name="Extending"></a>   
## <a name="extending-the-objecttostring-method"></a><span data-ttu-id="042e9-543">Extension de la méthode Object.ToString</span><span class="sxs-lookup"><span data-stu-id="042e9-543">Extending the Object.ToString method</span></span>  
 <span data-ttu-id="042e9-544">Parce qu’un type hérite de la valeur par défaut <xref:System.Object.ToString%2A?displayProperty=nameWithType> (méthode), vous pouvez trouver son comportement indésirables et souhaitez le modifier.</span><span class="sxs-lookup"><span data-stu-id="042e9-544">Because a type inherits the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method, you may find its behavior undesirable and want to change it.</span></span> <span data-ttu-id="042e9-545">Cela est particulièrement vrai des tableaux et des classes de collection.</span><span class="sxs-lookup"><span data-stu-id="042e9-545">This is particularly true of arrays and collection classes.</span></span> <span data-ttu-id="042e9-546">Pendant que vous pouvez attendre la `ToString` méthode d’une classe de collection ou du tableau pour afficher les valeurs de ses membres, il affiche à la place le nom de type qualifié complet de type, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="042e9-546">While you may expect the `ToString` method of an array or collection class to display the values of its members, it instead displays the type fully qualified type name, as the following example shows.</span></span>  
  
 [!code-csharp[System.Object.ToString#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/array1.cs#6)]
 [!code-vb[System.Object.ToString#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/array1.vb#6)]  
  
 <span data-ttu-id="042e9-547">Vous avez plusieurs options pour produire la chaîne de résultat que vous souhaitez.</span><span class="sxs-lookup"><span data-stu-id="042e9-547">You have several options to produce the result string that you'd like.</span></span>  
  
-   <span data-ttu-id="042e9-548">Si le type est un tableau, un objet de collection ou un objet qui implémente le <xref:System.Collections.IEnumerable> ou <xref:System.Collections.Generic.IEnumerable%601> interfaces, vous pouvez énumérer ses éléments à l’aide de la `foreach` instruction en c# ou le `For Each...Next` construire en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="042e9-548">If the type is an array, a collection object, or an object that implements the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interfaces, you can enumerate its elements by using the `foreach` statement in C# or the `For Each...Next` construct in Visual Basic.</span></span>  
  
-   <span data-ttu-id="042e9-549">Si la classe n’est pas `sealed` (en c#) ou `NotInheritable` (en Visual Basic), vous pouvez développer une classe wrapper qui hérite de la classe de base dont <xref:System.Object.ToString%2A?displayProperty=nameWithType> méthode que vous souhaitez personnaliser.</span><span class="sxs-lookup"><span data-stu-id="042e9-549">If the class is not `sealed` (in C#) or `NotInheritable` (in Visual Basic), you can develop a wrapper class that inherits from the base class whose <xref:System.Object.ToString%2A?displayProperty=nameWithType> method you want to customize.</span></span> <span data-ttu-id="042e9-550">Au minimum, cela nécessite que vous procédez comme suit :</span><span class="sxs-lookup"><span data-stu-id="042e9-550">At a minimum, this requires that you do the following:</span></span>  
  
    1.  <span data-ttu-id="042e9-551">Implémenter des constructeurs nécessaires.</span><span class="sxs-lookup"><span data-stu-id="042e9-551">Implement any necessary constructors.</span></span> <span data-ttu-id="042e9-552">Classes dérivées n’héritent pas de leurs constructeurs de classe de base.</span><span class="sxs-lookup"><span data-stu-id="042e9-552">Derived classes do not inherit their base class constructors.</span></span>  
  
    2.  <span data-ttu-id="042e9-553">Remplacer la <xref:System.Object.ToString%2A?displayProperty=nameWithType> méthode pour retourner la chaîne de résultat que vous souhaitez.</span><span class="sxs-lookup"><span data-stu-id="042e9-553">Override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to return the result string that you'd like.</span></span>  
  
     <span data-ttu-id="042e9-554">L’exemple suivant définit une classe wrapper pour la <xref:System.Collections.Generic.List%601> classe.</span><span class="sxs-lookup"><span data-stu-id="042e9-554">The following example defines a wrapper class for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="042e9-555">Il remplace le <xref:System.Object.ToString%2A?displayProperty=nameWithType> méthode pour afficher la valeur de chaque méthode de la collection plutôt que le nom de type qualifié complet.</span><span class="sxs-lookup"><span data-stu-id="042e9-555">It overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to display the value of each method of the collection rather than the fully qualified type name.</span></span>  
  
     [!code-csharp[System.Object.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/customize1.cs#7)]
     [!code-vb[System.Object.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/customize1.vb#7)]  
  
-   <span data-ttu-id="042e9-556">Développer un [méthode d’extension](~/docs/standard/design-guidelines/extension-methods.md) qui retourne la chaîne de résultat souhaité.</span><span class="sxs-lookup"><span data-stu-id="042e9-556">Develop an [extension method](~/docs/standard/design-guidelines/extension-methods.md) that returns the result string that you want.</span></span> <span data-ttu-id="042e9-557">Notez que vous ne pouvez pas remplacer la valeur par défaut <xref:System.Object.ToString%2A?displayProperty=nameWithType> de cette manière (méthode) (autrement dit, votre classe d’extension (en c#) ou un module (Visual Basic) ne peut pas avoir une méthode sans paramètre nommée `ToString` qui est appelée à la place du type d’origine `ToString` (méthode) .</span><span class="sxs-lookup"><span data-stu-id="042e9-557">Note that you can't override the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method in this way (that is, your extension class (in C#) or module (in Visual Basic) cannot have a parameterless method named `ToString` that is called in place of the original type's `ToString` method.</span></span> <span data-ttu-id="042e9-558">Vous devrez fournir un autre nom pour votre sans paramètre `ToString` remplacement.</span><span class="sxs-lookup"><span data-stu-id="042e9-558">You'll have to provide some other name for your parameterless `ToString` replacement.</span></span>  
  
     <span data-ttu-id="042e9-559">L’exemple suivant définit deux méthodes qui étendent la <xref:System.Collections.Generic.List%601> classe : un sans paramètre `ToString2` (méthode) et un `ToString` méthode avec un <xref:System.String> paramètre qui représente une chaîne de format.</span><span class="sxs-lookup"><span data-stu-id="042e9-559">The following example defines two methods that extend the <xref:System.Collections.Generic.List%601> class: a parameterless `ToString2` method, and a `ToString` method with a <xref:System.String> parameter that represents a format string.</span></span>  
  
     [!code-csharp[System.Object.ToString#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/customize2.cs#8)]
     [!code-vb[System.Object.ToString#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/customize2.vb#8)]  
  
<a name="WinRT"></a>   
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="042e9-560">Notes pour le [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="042e9-560">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="042e9-561">Lorsque vous appelez le <xref:System.Object.ToString%2A> méthode sur une classe dans le [!INCLUDE[wrt](~/includes/wrt-md.md)], il fournit le comportement par défaut pour les classes qui ne remplacent pas <xref:System.Object.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-561">When you call the <xref:System.Object.ToString%2A> method on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don’t override <xref:System.Object.ToString%2A>.</span></span> <span data-ttu-id="042e9-562">Cela fait partie de la prise en charge le .NET Framework fournit pour les [!INCLUDE[wrt](~/includes/wrt-md.md)] (consultez [.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="042e9-562">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="042e9-563">Classes de la [!INCLUDE[wrt](~/includes/wrt-md.md)] n’héritent pas <xref:System.Object>et n’implémentent pas toujours un <xref:System.Object.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="042e9-563">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don’t inherit <xref:System.Object>, and don’t always implement a <xref:System.Object.ToString%2A>.</span></span> <span data-ttu-id="042e9-564">Toutefois, ils apparaissent toujours avoir <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, et <xref:System.Object.GetHashCode%2A> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit un comportement par défaut pour ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="042e9-564">However, they always appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides a default behavior for these methods.</span></span>  
  
 <span data-ttu-id="042e9-565">En commençant par le [!INCLUDE[net_v451](~/includes/net-v451-md.md)], le common language runtime utilise [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) sur un [!INCLUDE[wrt](~/includes/wrt-md.md)] objet avant de revenir à l’implémentation par défaut de <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-565">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)], the common language runtime will use [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) on a [!INCLUDE[wrt](~/includes/wrt-md.md)] object before falling back to the default implementation of <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="042e9-566"> les classes qui sont écrits en c# ou Visual Basic peuvent substituer la <xref:System.Object.ToString%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="042e9-566"> classes that are written in C# or Visual Basic can override the <xref:System.Object.ToString%2A> method.</span></span>  
  
### <a name="the-includewrtincludeswrt-mdmd-and-the-istringable-interface"></a><span data-ttu-id="042e9-567">Le [!INCLUDE[wrt](~/includes/wrt-md.md)] et l’Interface IStringable</span><span class="sxs-lookup"><span data-stu-id="042e9-567">The [!INCLUDE[wrt](~/includes/wrt-md.md)] and the IStringable Interface</span></span>  
 <span data-ttu-id="042e9-568">En commençant par [!INCLUDE[win81](~/includes/win81-md.md)], le [!INCLUDE[wrt](~/includes/wrt-md.md)] inclut un [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) dont la méthode unique, de l’interface [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx), fournit le support de mise en forme base comparable à celle fourni par <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="042e9-568">Starting with [!INCLUDE[win81](~/includes/win81-md.md)], the [!INCLUDE[wrt](~/includes/wrt-md.md)] includes an [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) interface whose single method, [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx), provides basic formatting support comparable to that provided by <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="042e9-569">Pour éviter toute ambiguïté, vous ne devez pas implémenter [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) sur les types managés.</span><span class="sxs-lookup"><span data-stu-id="042e9-569">To prevent ambiguity, you should not implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) on managed types.</span></span>  
  
 <span data-ttu-id="042e9-570">Lorsque les objets managés sont appelées par du code natif ou en code écrit dans des langages tels que JavaScript ou C + c++ / CX, ils s’affichent pour implémenter [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span><span class="sxs-lookup"><span data-stu-id="042e9-570">When managed objects are called by native code or by code written in languages such as JavaScript or C++/CX, they appear to implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span></span> <span data-ttu-id="042e9-571">Le common language runtime route automatiquement les appels à partir de [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) à <xref:System.Object.ToString%2A?displayProperty=nameWithType> de l’événement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) n’est pas implémentée sur l’objet managé.</span><span class="sxs-lookup"><span data-stu-id="042e9-571">The common language runtime will automatically route calls from [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) to <xref:System.Object.ToString%2A?displayProperty=nameWithType> in the event [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) is not implemented on the managed object.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="042e9-572">Étant donné que le common language runtime auto-implémente [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) pour tous les types dans gérés [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] applications, nous recommandons que vous ne fournissez pas votre propre [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) mise en œuvre.</span><span class="sxs-lookup"><span data-stu-id="042e9-572">Because the common language runtime auto-implements [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) for all managed types in [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps, we recommend that you do not provide your own [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) implementation.</span></span> <span data-ttu-id="042e9-573">Mise en œuvre [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) peut entraîner un comportement inattendu lors de l’appel `ToString` à partir de la [!INCLUDE[wrt](~/includes/wrt-md.md)], C + c++ / CX ou JavaScript.</span><span class="sxs-lookup"><span data-stu-id="042e9-573">Implementing [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) may result in unintended behavior when calling `ToString` from the [!INCLUDE[wrt](~/includes/wrt-md.md)], C++/CX, or JavaScript.</span></span>  
  
 <span data-ttu-id="042e9-574">Si vous choisissez d’implémenter [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) dans un type managé public qui est exporté dans un [!INCLUDE[wrt](~/includes/wrt-md.md)] composant, les restrictions suivantes s’appliquent :</span><span class="sxs-lookup"><span data-stu-id="042e9-574">If you do choose to implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) in a public managed type that is exported in a [!INCLUDE[wrt](~/includes/wrt-md.md)] component, the following restrictions apply:</span></span>  
  
-   <span data-ttu-id="042e9-575">Vous pouvez définir le [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) interface uniquement dans une relation « la classe implémente », tels que</span><span class="sxs-lookup"><span data-stu-id="042e9-575">You can define the [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) interface only in a "class implements" relationship, such as</span></span>  
  
    ```  
    public class NewClass : IStringable  
    ```  
  
     <span data-ttu-id="042e9-576">en C#, ou</span><span class="sxs-lookup"><span data-stu-id="042e9-576">in C#, or</span></span>  
  
    ```  
    Public Class NewClass : Implements IStringable  
    ```  
  
     <span data-ttu-id="042e9-577">en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="042e9-577">in Visual Basic.</span></span>  
  
-   <span data-ttu-id="042e9-578">Vous ne pouvez pas implémenter [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) sur une interface.</span><span class="sxs-lookup"><span data-stu-id="042e9-578">You cannot implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) on an interface.</span></span>  
  
-   <span data-ttu-id="042e9-579">Vous ne pouvez pas déclarer un paramètre de type [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span><span class="sxs-lookup"><span data-stu-id="042e9-579">You cannot declare a parameter to be of type [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span></span>  
  
-   <span data-ttu-id="042e9-580">[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) ne peut pas être le type de retour d’une méthode, une propriété ou un champ.</span><span class="sxs-lookup"><span data-stu-id="042e9-580">[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) cannot be the return type of a method, property, or field.</span></span>  
  
-   <span data-ttu-id="042e9-581">Vous ne pouvez pas masquer votre [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) implémentation de classes de base à l’aide d’une définition de méthode telle que la suivante :</span><span class="sxs-lookup"><span data-stu-id="042e9-581">You cannot hide your [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) implementation from base classes by using a method definition such as the following:</span></span>  
  
    ```  
  
    public class NewClass : IStringable  
    {  
       public new string ToString()  
       {  
          return "New ToString in NewClass";  
       }  
    }  
  
    ```  
  
     <span data-ttu-id="042e9-582">Au lieu de cela, le [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implémentation doit toujours remplacer l’implémentation de classe de base.</span><span class="sxs-lookup"><span data-stu-id="042e9-582">Instead, the [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implementation must always override the base class implementation.</span></span> <span data-ttu-id="042e9-583">Vous pouvez masquer une implémentation `ToString` uniquement en l'appelant sur une instance de classe fortement typée.</span><span class="sxs-lookup"><span data-stu-id="042e9-583">You can hide a `ToString` implementation only by invoking it on a strongly typed class instance.</span></span>  
  
 <span data-ttu-id="042e9-584">Notez que dans diverses conditions, les appels à partir du code natif à un type managé qui implémente [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) ou masque son [ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implémentation peut entraîner un comportement inattendu.</span><span class="sxs-lookup"><span data-stu-id="042e9-584">Note that under a variety of conditions, calls from native code to a managed type that implements [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) or hides its [ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implementation can produce unexpected behavior.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="042e9-585">Lorsque vous implémentez vos propres types, vous devez substituer la <see cref="M:System.Object.ToString" /> méthode pour retourner des valeurs qui sont pertinents pour ces types.</span><span class="sxs-lookup"><span data-stu-id="042e9-585">When you implement your own types, you should override the <see cref="M:System.Object.ToString" /> method to return values that are meaningful for those types.</span></span> <span data-ttu-id="042e9-586">Classes dérivées qui requièrent davantage de contrôle sur la mise en forme que <see cref="M:System.Object.ToString" /> fournit peuvent implémenter la <see cref="T:System.IFormattable" /> interface.</span><span class="sxs-lookup"><span data-stu-id="042e9-586">Derived classes that require more control over formatting than <see cref="M:System.Object.ToString" /> provides can implement the <see cref="T:System.IFormattable" /> interface.</span></span> <span data-ttu-id="042e9-587">Son <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> méthode vous permet de définir des chaînes de format qui contrôlent la mise en forme et d’utiliser un <see cref="T:System.IFormatProvider" /> objet qui peut fournir pour la mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="042e9-587">Its <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> method enables you to define format strings that control formatting and to use an <see cref="T:System.IFormatProvider" /> object that can provide for culture-specific formatting.</span></span>  
  
 <span data-ttu-id="042e9-588">Les remplacements de la <see cref="M:System.Object.ToString" /> méthode doit suivre les recommandations suivantes :</span><span class="sxs-lookup"><span data-stu-id="042e9-588">Overrides of the <see cref="M:System.Object.ToString" /> method should follow these guidelines:</span></span>  
  
-   <span data-ttu-id="042e9-589">La chaîne retournée doit être lisible par l’homme et conviviale.</span><span class="sxs-lookup"><span data-stu-id="042e9-589">The returned string should be friendly and readable by humans.</span></span>  
  
-   <span data-ttu-id="042e9-590">La chaîne retournée doit identifier de manière unique la valeur de l’instance d’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-590">The returned string should uniquely identify the value of the object instance.</span></span>  
  
-   <span data-ttu-id="042e9-591">La chaîne retournée doit être aussi courte que possible afin qu’il soit adapté à l’affichage par un débogueur.</span><span class="sxs-lookup"><span data-stu-id="042e9-591">The returned string should be as short as possible so that it is suitable for display by a debugger.</span></span>  
  
-   <span data-ttu-id="042e9-592">Votre <see cref="M:System.Object.ToString" /> substitution ne doit pas retourner <see cref="F:System.String.Empty" /> ou une chaîne null.</span><span class="sxs-lookup"><span data-stu-id="042e9-592">Your <see cref="M:System.Object.ToString" /> override should not return <see cref="F:System.String.Empty" /> or a null string.</span></span>  
  
-   <span data-ttu-id="042e9-593">Votre <see cref="M:System.Object.ToString" /> remplacement ne doit pas lever d’exception.</span><span class="sxs-lookup"><span data-stu-id="042e9-593">Your <see cref="M:System.Object.ToString" /> override should not throw an exception.</span></span>  
  
-   <span data-ttu-id="042e9-594">Si la représentation sous forme de chaîne d’une instance est dépendante de la culture ou peut être mise en forme de plusieurs façons, implémentez le <see cref="T:System.IFormattable" /> interface.</span><span class="sxs-lookup"><span data-stu-id="042e9-594">If the string representation of an instance is culture-sensitive or can be formatted in multiple ways, implement the <see cref="T:System.IFormattable" /> interface.</span></span>  
  
-   <span data-ttu-id="042e9-595">Si la chaîne retournée inclut des informations sensibles, vous devez tout d’abord demander une autorisation appropriée.</span><span class="sxs-lookup"><span data-stu-id="042e9-595">If the returned string includes sensitive information, you should first demand an appropriate permission.</span></span> <span data-ttu-id="042e9-596">Si la demande réussit, vous pouvez retourner des informations sensibles. dans le cas contraire, vous devez retourner une chaîne qui exclut les informations sensibles.</span><span class="sxs-lookup"><span data-stu-id="042e9-596">If the demand succeeds, you can return the sensitive information; otherwise, you should return a string that excludes the sensitive information.</span></span>  
  
-   <span data-ttu-id="042e9-597">Votre <see cref="M:System.Object.ToString" /> remplacement ne doit avoir aucun effet observable afin d’éviter les problèmes de débogage.</span><span class="sxs-lookup"><span data-stu-id="042e9-597">Your <see cref="M:System.Object.ToString" /> override should have no observable side effects to avoid complications in debugging.</span></span> <span data-ttu-id="042e9-598">Par exemple, un appel à la <see cref="M:System.Object.ToString" /> méthode ne doit pas modifier la valeur des champs d’instance.</span><span class="sxs-lookup"><span data-stu-id="042e9-598">For example, a call to the <see cref="M:System.Object.ToString" /> method should not change the value of instance fields.</span></span>  
  
-   <span data-ttu-id="042e9-599">Si votre type implémente une méthode d’analyse (ou <see langword="Parse" /> ou <see langword="TryParse" /> méthode, un constructeur ou une autre méthode statique qui instancie une instance du type à partir d’une chaîne), vous devez vous assurer que la chaîne retournée par la <see cref="M:System.Object.ToString" /> méthode peut être converti en une instance d’objet.</span><span class="sxs-lookup"><span data-stu-id="042e9-599">If your type implements a parsing method (or <see langword="Parse" /> or <see langword="TryParse" /> method, a constructor, or some other static method that instantiates an instance of the type from a string), you should ensure that the string returned by the <see cref="M:System.Object.ToString" /> method can be converted to an object instance.</span></span></para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>