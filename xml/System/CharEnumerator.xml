<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ddbbc5904a93c4f5a72ac5f2e5212ec457f9c441" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51321348" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8b6a4-101">Prend en charge l’itération sur un objet <see cref="T:System.String" /> et la lecture de ses différents caractères.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8b6a4-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span>
      </span>
      <span data-ttu-id="8b6a4-102">Cette classe ne peut pas être héritée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8b6a4-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b6a4-103">Un <xref:System.CharEnumerator> fournit l’accès en lecture seule aux caractères dans un texte référencé <xref:System.String> objet.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="8b6a4-104">Par exemple, le `foreach` instruction des langages de programmation Microsoft Visual Basic et c#, qui parcourt les éléments d’une collection, récupère un <xref:System.CharEnumerator> à partir d’un <xref:System.String> objet pour effectuer une itération à travers les caractères dans cette objet.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="8b6a4-105">Le `CharEnumerator` classe énumère 16 bits individuels <xref:System.Char> instances.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-105">The `CharEnumerator` class enumerates individual 16-bit <xref:System.Char> instances.</span></span> <span data-ttu-id="8b6a4-106">Il ne tient pas compte graphèmes (autrement dit, un caractère suivi d’un ou plusieurs caractères combiding) ou (autrement dit, les caractères en dehors de l’Unicode Basic Multilingual Plane) de paires de substitution en tant que caractères uniques.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-106">It does not consider graphemes (that is, a character followed by one or more combiding characters) or surrogate pairs (that is, characters outside the Unicode Basic Multilingual Plane) as single characters.</span></span> <span data-ttu-id="8b6a4-107">Pour un énumérateur qui gère ces types de caractères comme une seule unité, utilisez la <xref:System.Globalization.StringInfo> classe.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-107">For an enumerator that handles these types of characters as a single unit, use the <xref:System.Globalization.StringInfo> class.</span></span>

 <span data-ttu-id="8b6a4-108">Il n’existe aucun constructeur public pour <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-108">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="8b6a4-109">Au lieu de cela, appelez une <xref:System.String> l’objet <xref:System.String.GetEnumerator%2A> méthode pour obtenir un <xref:System.CharEnumerator> qui est initialisé pour référencer la chaîne.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-109">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="8b6a4-110">Un <xref:System.CharEnumerator> gère un index interne pour les caractères dans la chaîne de la <xref:System.CharEnumerator> références.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-110">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="8b6a4-111">L’état de l’index est non valide lorsqu’elle fait référence à une position de caractère logiquement avant le premier caractère ou après le dernier caractère dans la chaîne et valide lorsqu’elle fait référence à un caractère dans la chaîne.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-111">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="8b6a4-112">L’index est initialisé à une position logiquement avant le premier caractère et est définie à une position après le dernier caractère lorsque l’itération est terminée.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-112">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="8b6a4-113">Une exception est levée si vous essayez d’accéder à un caractère tandis que l’index n’est pas valide.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-113">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="8b6a4-114">Le <xref:System.CharEnumerator.MoveNext%2A> méthode incrémente l’index d’une unité, donc les caractères de la première et les suivants sont accessibles à son tour.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-114">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="8b6a4-115">Le <xref:System.CharEnumerator.Reset%2A> méthode définit l’index à une position logiquement avant le premier caractère.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-115">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="8b6a4-116">Le <xref:System.CharEnumerator.Current%2A> propriété récupère le caractère actuellement référencé par l’index.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-116">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="8b6a4-117">Le <xref:System.CharEnumerator.Clone%2A> méthode crée une copie de la <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-117">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b6a4-118">Plusieurs instances indépendantes de <xref:System.CharEnumerator> sur un ou plusieurs threads peuvent avoir accès à une seule instance de <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-118">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="8b6a4-119">Cette classe est implémentée pour prendre en charge la <xref:System.Collections.IEnumerator> interface.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-119">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="8b6a4-120">Pour plus d’informations sur l’utilisation d’un énumérateur, consultez le <xref:System.Collections.IEnumerator> rubrique.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-120">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b6a4-121">L’exemple suivant utilise la <xref:System.CharEnumerator> classe pour énumérer les caractères individuels dans une chaîne.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-121">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="8b6a4-122">Il instancie un <xref:System.CharEnumerator> objet en appelant le <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> (méthode), passe d’un caractère à l’autre en appelant le <xref:System.CharEnumerator.MoveNext%2A> (méthode) et affiche le caractère actuel en récupérant la valeur de la <xref:System.CharEnumerator.Current%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-122">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="8b6a4-123">Notez, cependant, que la même opération peut être effectuée plus intuitivement en utilisant `foreach` (en c#) ou `For Each` (en Visual Basic), comme dans l’exemple suivant montre.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-123">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b6a4-124">Crée une copie de l'objet <see cref="T:System.CharEnumerator" /> en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-124">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b6a4-125">
            <see cref="T:System.Object" /> qui est une copie de l'objet <see cref="T:System.CharEnumerator" /> en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-125">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b6a4-126">La valeur de retour est une copie de cette instance de <xref:System.CharEnumerator> et son état actuel.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-126">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="8b6a4-127">Cela est utile pour enregistrer votre état pendant l’itération via une <xref:System.String> objet.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-127">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="8b6a4-128">Par exemple, supposons que votre application utilise une instance d’origine de <xref:System.CharEnumerator> pour effectuer une itération dans chaque caractère dans un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-128">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="8b6a4-129">Lorsqu’un caractère unique est détecté, votre application suspend le traitement et appelle le <xref:System.CharEnumerator.Clone%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8b6a4-129">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="8b6a4-130">En effet, cela permet d’économiser le <xref:System.CharEnumerator> index de l’objet dans le <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-130">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="8b6a4-131">Votre application utilise le clone pour naviguer vers une autre partie de la `String` pour effectuer un traitement auxiliaire.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-131">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="8b6a4-132">L’effet secondaire de cette navigation est que le clone perd la trace de la position où le traitement s’est arrêté.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-132">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="8b6a4-133">Toutefois, lors du traitement auxiliaire est terminé, votre application abandonne le clone et utilise la version d’origine <xref:System.CharEnumerator> instance reprendre votre travail sur le <xref:System.String> où le traitement d’origine s’est arrêté.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-133">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b6a4-134">Cette méthode est implémentée pour prendre en charge la <xref:System.ICloneable> interface.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-134">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b6a4-135">Obtient le caractère actuellement référencé dans la chaîne énumérée par cet objet <see cref="T:System.CharEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-135">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b6a4-136">Caractère Unicode actuellement référencé par cet objet <see cref="T:System.CharEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-136">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b6a4-137">Le <xref:System.CharEnumerator> classe gère un index interne pour la chaîne énumérée et le <xref:System.CharEnumerator.Current%2A> propriété retourne le caractère qui est actuellement référencé par l’index.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-137">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="8b6a4-138">Cette propriété doit être appelée uniquement lorsque l’index est valide ; Sinon, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-138">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="8b6a4-139">L’index est toujours non valide pour une chaîne vide ( » »).</span><span class="sxs-lookup"><span data-stu-id="8b6a4-139">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="8b6a4-140">L’index est également non valide après la <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> ou <xref:System.CharEnumerator.Reset%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-140">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="8b6a4-141">Une fois qu’une de ces méthodes est appelée, appeler le <xref:System.CharEnumerator.MoveNext%2A> méthode pour ajuster l’index vers le premier caractère dans la chaîne énumérée.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-141">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="8b6a4-142">L’index est valide chaque fois que le <xref:System.CharEnumerator.MoveNext%2A> retourne de la méthode `true`.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-142">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="8b6a4-143"><xref:System.CharEnumerator.Current%2A> ne déplace pas l’index et les appels consécutifs à <xref:System.CharEnumerator.Current%2A> retournent le même caractère jusqu'à ce que <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, ou <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> est appelée.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-143"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b6a4-144">L’exemple suivant utilise la <xref:System.CharEnumerator> classe pour énumérer les caractères individuels dans une chaîne.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-144">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="8b6a4-145">Il instancie un <xref:System.CharEnumerator> objet en appelant le <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> (méthode), passe d’un caractère à l’autre en appelant le <xref:System.CharEnumerator.MoveNext%2A> (méthode) et affiche le caractère actuel en récupérant la valeur de la <xref:System.CharEnumerator.Current%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-145">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="8b6a4-146">Notez, cependant, que la même opération peut être effectuée plus intuitivement en utilisant `foreach` (en c#) ou `For Each` (en Visual Basic), comme dans l’exemple suivant montre.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-146">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8b6a4-147">L'index est non valide (il figure avant le premier caractère ou après le dernier caractère de la chaîne énumérée).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-147">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b6a4-148">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.CharEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-148">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b6a4-149">Appelez la méthode <xref:System.CharEnumerator.Dispose%2A> une fois que vous avez terminé d'utiliser <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-149">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="8b6a4-150">La méthode <xref:System.CharEnumerator.Dispose%2A> rend le <xref:System.CharEnumerator> inutilisable.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-150">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="8b6a4-151">Après avoir appelé <xref:System.CharEnumerator.Dispose%2A>, vous devez libérer toutes les références à la <xref:System.CharEnumerator> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.CharEnumerator> occupée.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-151">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="8b6a4-152">Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="8b6a4-152">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b6a4-153">Appelez toujours <xref:System.CharEnumerator.Dispose%2A> avant de libérer votre dernière référence à <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-153">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="8b6a4-154">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.CharEnumerator> de l'objet `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-154">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b6a4-155">Incrémente l'index interne de l'objet <see cref="T:System.CharEnumerator" /> actuel jusqu'au caractère suivant de la chaîne énumérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-155">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b6a4-156">
            <see langword="true" /> si l'index est incrémenté avec succès dans la chaîne énumérée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-156">
              <see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b6a4-157">Le <xref:System.CharEnumerator> classe gère un index interne pour la chaîne énumérée et la <xref:System.CharEnumerator.MoveNext%2A> méthode incrémente l’index d’une unité.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-157">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="8b6a4-158">Appelez <xref:System.CharEnumerator.MoveNext%2A> après avoir appelé <xref:System.String.GetEnumerator%2A> ou <xref:System.CharEnumerator.Reset%2A> pour incrémenter la position de caractère actuelle vers le premier caractère dans la chaîne énumérée.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-158">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="8b6a4-159">Vérifiez que la valeur de retour est `true` pour déterminer que la position du caractère actuel est valide.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-159">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="8b6a4-160">Si l’index est déjà au-delà du dernier caractère de la chaîne énumérée, l’index n’est pas modifié et `false` est retourné.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-160">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="8b6a4-161">Notez que si la chaîne énumérée est vide (« »), l’état de la <xref:System.CharEnumerator> est toujours non valide.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-161">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="8b6a4-162">Il s’agit, car l’index interne pour la <xref:System.CharEnumerator> est initialement avant le premier caractère de la chaîne énumérée et n’est donc pas valide.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-162">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="8b6a4-163"><xref:System.CharEnumerator.MoveNext%2A> logiquement, définit l’index après le dernier caractère (inexistant) de la chaîne énumérée qui est également non valide.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-163"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b6a4-164">L’exemple suivant utilise la <xref:System.CharEnumerator> classe pour énumérer les caractères individuels dans une chaîne.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-164">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="8b6a4-165">Il instancie un <xref:System.CharEnumerator> objet en appelant le <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> (méthode), passe d’un caractère à l’autre en appelant le <xref:System.CharEnumerator.MoveNext%2A> (méthode) et affiche le caractère actuel en récupérant la valeur de la <xref:System.CharEnumerator.Current%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-165">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="8b6a4-166">Notez, cependant, que la même opération peut être effectuée plus intuitivement en utilisant `foreach` (en c#) ou `For Each` (en Visual Basic), comme dans l’exemple suivant montre.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-166">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b6a4-167">Initialise logiquement l'index à une position figurant avant le premier caractère de la chaîne énumérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-167">Initializes the index to a position logically before the first character of the enumerated string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b6a4-168">Le <xref:System.CharEnumerator> classe gère un index interne pour la chaîne énumérée et la <xref:System.CharEnumerator.Reset%2A> méthode définit l’index de l’état non valide.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-168">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b6a4-169">Obtient le caractère actuellement référencé dans la chaîne énumérée par cet objet <see cref="T:System.CharEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-169">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
          <span data-ttu-id="8b6a4-170">Pour obtenir une description de ce membre, consultez <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-170">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b6a4-171">Caractère Unicode ayant fait l'objet d'un boxing actuellement référencé par cet objet <see cref="T:System.CharEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-171">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b6a4-172">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-172">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b6a4-173">Il peut uniquement être utilisé lorsque l'instance de <xref:System.CharEnumerator> est castée en interface <xref:System.Collections.IEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="8b6a4-173">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8b6a4-174">L'énumération n'a pas démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-174">Enumeration has not started.</span>
          </span>
          <span data-ttu-id="8b6a4-175">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-175">-or-</span>
          </span>
          <span data-ttu-id="8b6a4-176">L'énumération est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b6a4-176">Enumeration has ended.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>