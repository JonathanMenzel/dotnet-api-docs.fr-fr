<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b667dcf79e5ae762a2e599fd337d51ceea34b2c7" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37482403" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Type du paramètre de la méthode encapsulée par ce délégué.</typeparam>
    <param name="obj">Paramètre de la méthode encapsulée par ce délégué.</param>
    <summary>Encapsule une méthode ayant un seul paramètre et ne retournant aucune valeur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le <xref:System.Action%601> délégué à passer à une méthode en tant que paramètre sans déclarer explicitement un délégué personnalisé. La méthode encapsulée doit correspondre à la signature de méthode définie par ce délégué. Cela signifie que la méthode encapsulée doit avoir un paramètre qui est passé par valeur, et il ne doit pas retourner une valeur. (En c#, la méthode doit retourner `void`. En Visual Basic, il doit être défini par le `Sub`...`End Sub` construction. Il peut également être une méthode qui retourne une valeur qui est ignorée.) En règle générale, une telle méthode est utilisée pour effectuer une opération.  
  
> [!NOTE]
>  Pour faire référence à une méthode qui a un paramètre et retourne une valeur, utilisez le modèle générique <xref:System.Func%602> déléguer à la place.  
  
 Lorsque vous utilisez le <xref:System.Action%601> délégué, vous n’avez pas à définir explicitement un délégué qui encapsule une méthode avec un seul paramètre. Par exemple, le code suivant déclare explicitement un délégué nommé `DisplayMessage` et assigne une référence à un le <xref:System.Console.WriteLine%2A> méthode ou le `ShowWindowsMessage` à son instance de délégué (méthode).  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 L’exemple suivant simplifie ce code en instanciant le <xref:System.Action%601> délégué au lieu de définir un nouveau délégué et lui assigner une méthode nommée explicitement.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 Vous pouvez également utiliser le <xref:System.Action%601> déléguer avec les méthodes anonymes en c#, comme l’illustre l’exemple suivant. (Pour une introduction aux méthodes anonymes, consultez [méthodes anonymes](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 Vous pouvez également affecter une expression lambda à une <xref:System.Action%601> déléguer l’instance, comme l’illustre l’exemple suivant. (Pour une introduction aux expressions lambda, consultez [Expressions Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 Le <xref:System.Collections.Generic.List%601.ForEach%2A> et <xref:System.Array.ForEach%2A> méthodes chaque prennent un <xref:System.Action%601> délégué en tant que paramètre. La méthode encapsulée par le délégué vous permet d’exécuter une action sur chaque élément du tableau ou de la liste. L’exemple utilise le <xref:System.Collections.Generic.List%601.ForEach%2A> méthode pour fournir une illustration.  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de la <xref:System.Action%601> délégué pour imprimer le contenu d’un <xref:System.Collections.Generic.List%601> objet. Dans cet exemple, le `Print` méthode est utilisée pour afficher le contenu de la liste dans la console. En outre, l’exemple c# montre également l’utilisation de méthodes anonymes pour afficher le contenu dans la console. Notez que l’exemple ne déclare pas explicitement un <xref:System.Action%601> variable. Au lieu de cela, il passe une référence à une méthode qui accepte un seul paramètre et qui ne retourne pas de valeur pour le <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> méthode, dont le paramètre unique est un <xref:System.Action%601> déléguer. De même, dans l’exemple c#, un <xref:System.Action%601> délégué n’est pas explicitement instancié, car la signature de la méthode anonyme correspond à la signature de la <xref:System.Action%601> délégué est attendu par le <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> (méthode).  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>