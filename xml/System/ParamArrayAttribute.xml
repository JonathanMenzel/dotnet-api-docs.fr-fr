<Type Name="ParamArrayAttribute" FullName="System.ParamArrayAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2abb5d715f4827ef791ba2f842f5cfac33d4ca8c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429270" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ParamArrayAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ParamArrayAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ParamArrayAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ParamArrayAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParamArrayAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ParamArrayAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ebc3e-101">Indique qu'une méthode autorisera un nombre variable d'arguments dans son appel.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ebc3e-101">Indicates that a method will allow a variable number of arguments in its invocation.</span>
      </span>
      <span data-ttu-id="ebc3e-102">Cette classe ne peut pas être héritée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ebc3e-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc3e-103">La <xref:System.ParamArrayAttribute> indique qu’un paramètre de méthode est un tableau de paramètres.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-103">The <xref:System.ParamArrayAttribute> indicates that a method parameter is a parameter array.</span></span> <span data-ttu-id="ebc3e-104">Un tableau de paramètres permet de spécifier un nombre inconnu d’arguments.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-104">A parameter array allows the specification of an unknown number of arguments.</span></span> <span data-ttu-id="ebc3e-105">Un tableau de paramètres doit être le dernier paramètre dans une liste de paramètres formels, et il doit être un tableau unidimensionnel.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-105">A parameter array must be the last parameter in a formal parameter list, and it must be a single-dimension array.</span></span> <span data-ttu-id="ebc3e-106">Lorsque la méthode est appelée, un tableau de paramètres permet des arguments à une méthode doit être spécifié dans une des deux façons :</span><span class="sxs-lookup"><span data-stu-id="ebc3e-106">When the method is called, a parameter array permits arguments to a method to be specified in either of two ways:</span></span>  
  
-   <span data-ttu-id="ebc3e-107">Comme une seule expression d’un type qui est implicitement convertible en type tableau de paramètres.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-107">As a single expression of a type that is implicitly convertible to the parameter array type.</span></span> <span data-ttu-id="ebc3e-108">Le tableau de paramètres fonctionne comme un paramètre de valeur.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-108">The parameter array functions as a value parameter.</span></span>  
  
-   <span data-ttu-id="ebc3e-109">Comme zéro ou plusieurs arguments, où chaque argument est une expression d’un type qui est implicitement convertible au type de l’élément de tableau de paramètres.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-109">As zero or more arguments, where each argument is an expression of a type that is implictly convertible to the type of the parameter array element.</span></span>  
  
 <span data-ttu-id="ebc3e-110">L’exemple dans la section suivante illustre les deux conventions d’appel.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-110">The example in the next section illustrates both calling conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ebc3e-111">En règle générale, le <xref:System.ParamArrayAttribute> n’est pas utilisé directement dans le code.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-111">Typically, the <xref:System.ParamArrayAttribute> is not used directly in code.</span></span> <span data-ttu-id="ebc3e-112">Au lieu de cela, mots clés de langage individuels, tels que `ParamArray` en Visual Basic et `params` en c#, sont utilisés comme wrappers pour la <xref:System.ParamArrayAttribute> classe.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-112">Instead, individual language keywords, such as `ParamArray` in Visual Basic and `params` in C#, are used as wrappers for the <xref:System.ParamArrayAttribute> class.</span></span> <span data-ttu-id="ebc3e-113">Certains langages, tels que c#, peuvent même nécessitent l’utilisation du mot clé de langage et interdire l’utilisation de <xref:System.ParamArrayAttribute>.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-113">Some languages, such as C#, may even require the use of the language keyword and prohibit the use of <xref:System.ParamArrayAttribute>.</span></span>  
  
 <span data-ttu-id="ebc3e-114">Lors de la résolution de surcharge, lorsque les compilateurs qui prennent en charge les tableaux de paramètres rencontrent une surcharge de méthode qui n’existe pas, mais a moins de paramètres qu’une surcharge qui inclut un tableau de paramètres, ils remplaceront la méthode avec la surcharge qui inclut le tableau de paramètres.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-114">During overload resolution, when compilers that support parameter arrays encounter a method overload that does not exist but has one fewer parameter than an overload that includes a parameter array, they will replace the method with the overload that includes the parameter array.</span></span> <span data-ttu-id="ebc3e-115">Par exemple, un appel à la `String.Split()` méthode d’instance (qui n’existe pas dans le <xref:System.String> classe) est résolu comme un appel à la <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="ebc3e-115">For example, a call to the `String.Split()` instance method (which does not exist in the <xref:System.String> class) is resolved as a call to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="ebc3e-116">Le compilateur passera également un tableau vide du type requis à la méthode.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-116">The compiler will also pass an empty array of the required type to the method.</span></span> <span data-ttu-id="ebc3e-117">Cela signifie que la méthode doit toujours être préparée à gérer un tableau dont la longueur est égale à zéro lorsqu’il traite les éléments dans le tableau de paramètres.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-117">This means that the method must always be prepared to handle an array whose length is zero when it processes the elements in the parameter array.</span></span> <span data-ttu-id="ebc3e-118">Cet exemple en fournit une illustration.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-118">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="ebc3e-119">Pour plus d’informations sur l’utilisation d’attributs, consultez [attributs](~/docs/standard/attributes/index.md).</span><span class="sxs-lookup"><span data-stu-id="ebc3e-119">For more information about using attributes, see [Attributes](~/docs/standard/attributes/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc3e-120">L’exemple suivant définit un `Temperature` classe inclut un `Display` (méthode), ce qui permet d’afficher une ou plusieurs valeurs de température mises en forme.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-120">The following example defines a `Temperature` class that includes a `Display` method, which is intended to display one or more formatted temperature values.</span></span> <span data-ttu-id="ebc3e-121">La méthode comporte un paramètre unique, `formats`, qui est définie comme un tableau de paramètres.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-121">The method has a single parameter, `formats`, which is defined as a parameter array.</span></span>  
  
 [!code-csharp[System.ParamArrayAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.ParamArrayAttribute/cs/Example.cs#1)]
 [!code-vb[System.ParamArrayAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.ParamArrayAttribute/vb/Example.vb#1)]  
  
 <span data-ttu-id="ebc3e-122">L’exemple suivant illustre trois appels différents à la `Temperature.Display` (méthode).</span><span class="sxs-lookup"><span data-stu-id="ebc3e-122">The following example illustrates three different calls to the `Temperature.Display` method.</span></span> <span data-ttu-id="ebc3e-123">Dans la première, un tableau de chaînes de format est passé à la méthode.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-123">In the first, the method is passed an array of format strings.</span></span> <span data-ttu-id="ebc3e-124">Dans la seconde, est passé à la méthode quatre chaînes de format en tant qu’arguments.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-124">In the second, the method is passed four individual format strings as arguments.</span></span> <span data-ttu-id="ebc3e-125">Dans la troisième, la méthode est appelée sans argument.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-125">In the third, the method is called with no arguments.</span></span> <span data-ttu-id="ebc3e-126">Comme l’illustre la sortie de l’exemple, les compilateurs c# et Visual Basic transforment ceci en appel à la `Display` méthode avec un tableau de chaînes vide.</span><span class="sxs-lookup"><span data-stu-id="ebc3e-126">As the output from the example illustrates, the Visual Basic and C# compilers translate this into a call to the `Display` method with an empty string array.</span></span>  
  
 [!code-csharp[System.ParamArrayAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.ParamArrayAttribute/cs/Example.cs#2)]
 [!code-vb[System.ParamArrayAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.ParamArrayAttribute/vb/Example.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Attribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParamArrayAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ParamArrayAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ParamArrayAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ebc3e-127">Initialise une nouvelle instance de la classe <see cref="T:System.ParamArrayAttribute" /> avec des propriétés par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebc3e-127">Initializes a new instance of the <see cref="T:System.ParamArrayAttribute" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>