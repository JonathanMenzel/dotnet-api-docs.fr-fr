<Type Name="ParamArrayAttribute" FullName="System.ParamArrayAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb1072129cbf30a1009cd77fab7829ca16ba98e3" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58706046" /></Metadata><TypeSignature Language="C#" Value="public sealed class ParamArrayAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ParamArrayAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ParamArrayAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ParamArrayAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParamArrayAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ParamArrayAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indique qu'une méthode autorise un nombre variable d'arguments dans son appel. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.ParamArrayAttribute> indique qu’un paramètre de méthode est un tableau de paramètres. Un tableau de paramètres permet de spécifier un nombre inconnu d’arguments. Un tableau de paramètres doit être le dernier paramètre dans une liste de paramètres formels, et il doit être un tableau unidimensionnel. Lorsque la méthode est appelée, un tableau de paramètres permet de transmettre les arguments à une méthode doit être spécifié dans une des deux façons :  
  
-   En tant qu’une seule expression d’un type qui est implicitement convertible en type tableau de paramètres. Le tableau de paramètres fonctionne comme un paramètre de valeur.  
  
-   Comme zéro ou plusieurs arguments, où chaque argument est une expression d’un type qui est implicitement convertible au type de l’élément de tableau de paramètre.  
  
 L’exemple dans la section suivante illustre les deux conventions d’appel.  
  
> [!NOTE]
>  En règle générale, le <xref:System.ParamArrayAttribute> n’est pas utilisé directement dans le code. Au lieu de cela, mots clés du langage individuels, tels que `ParamArray` en Visual Basic et `params` en c#, sont utilisés comme wrappers pour la <xref:System.ParamArrayAttribute> classe. Certains langages, tels que c#, peuvent même nécessitent l’utilisation du mot clé de langage et interdire l’utilisation de <xref:System.ParamArrayAttribute>.  
  
 Lors de la résolution de surcharge, lorsque les compilateurs qui prennent en charge des tableaux de paramètres rencontrent une surcharge de méthode qui n’existe pas, mais a moins de paramètres qu’une surcharge qui inclut un tableau de paramètres, ils remplaceront la méthode avec la surcharge qui inclut le tableau de paramètres. Par exemple, un appel à la `String.Split()` méthode d’instance (qui n’existe pas dans le <xref:System.String> classe) est résolu comme un appel à la <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> (méthode). Le compilateur sera également passer un tableau vide du type requis à la méthode. Cela signifie que la méthode doit toujours être prête à gérer un tableau dont la longueur est égale à zéro lorsqu’il traite les éléments dans le tableau de paramètres. Cet exemple en fournit une illustration.  
  
 Pour plus d’informations sur l’utilisation d’attributs, consultez [attributs](~/docs/standard/attributes/index.md).  
  
   
  
## Examples  
 L’exemple suivant définit un `Temperature` classe inclut un `Display` (méthode), ce qui permet d’afficher une ou plusieurs valeurs de température mises en forme. La méthode a un seul paramètre, `formats`, qui est définie comme un tableau de paramètres.  
  
 [!code-csharp[System.ParamArrayAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.ParamArrayAttribute/cs/Example.cs#1)]
 [!code-vb[System.ParamArrayAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.ParamArrayAttribute/vb/Example.vb#1)]  
  
 L’exemple suivant illustre trois différents appels à la `Temperature.Display` (méthode). Dans le premier, la méthode reçoit un tableau de chaînes de format. Dans la seconde, la méthode est passée à quatre chaînes de format en tant qu’arguments. Dans la troisième, la méthode est appelée sans argument. Comme l’illustre la sortie de l’exemple, les compilateurs Visual Basic et c# de traduire cela en appel à la `Display` méthode avec un tableau de chaînes vide.  
  
 [!code-csharp[System.ParamArrayAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.ParamArrayAttribute/cs/Example.cs#2)]
 [!code-vb[System.ParamArrayAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.ParamArrayAttribute/vb/Example.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Attribute" />
    <related type="Article" href="~/docs/standard/attributes/index.md">Extension des métadonnées à l'aide des attributs</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParamArrayAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ParamArrayAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ParamArrayAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ParamArrayAttribute" /> avec des propriétés par défaut.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>