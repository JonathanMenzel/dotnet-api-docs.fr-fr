<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d58c5d7d0755ba744adb0fc63e586f88a9bd828" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430907" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente l'état d'une opération asynchrone.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IAsyncResult> interface est implémentée par des classes contenant des méthodes qui peuvent opérer de façon asynchrone. Il est le type de retour des méthodes qui initie une opération asynchrone, tel que <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, et il est passé aux méthodes qui conclut une opération asynchrone, tel que <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>. <xref:System.IAsyncResult> les objets sont également passés aux méthodes appelées par <xref:System.AsyncCallback> délègue lors d’une opération asynchrone se termine.  
  
 Un objet qui prend en charge la <xref:System.IAsyncResult> interface stocke les informations d’état pour une opération asynchrone et fournit un objet de synchronisation permettant aux threads d’être signalé lors de la fin de l’opération.  
  
> [!NOTE]
>  Le <xref:System.Runtime.Remoting.Messaging.AsyncResult> classe est l’implémentation de <xref:System.IAsyncResult> qui est retourné par la `BeginInvoke` méthode lorsque vous utilisez un délégué pour appeler une méthode de façon asynchrone.  
  
 Pour obtenir une description détaillée de la façon dont <xref:System.IAsyncResult> interface est utilisée, consultez la [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) rubrique.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> propriété à obtenir un <xref:System.Threading.WaitHandle>et l’attente d’un appel asynchrone sur un délégué. Le <xref:System.Threading.WaitHandle> est signalé quand l’appel asynchrone se termine et vous pouvez l’attendre en appelant la méthode <xref:System.Threading.WaitHandle.WaitOne%2A> .  
  
 L’exemple se compose de deux classes : la classe qui contient la méthode est appelée de façon asynchrone et la classe qui contient le `Main` méthode qui effectue l’appel.  
  
 Pour plus d’informations et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet défini par l’utilisateur qui qualifie ou contient des informations sur une opération asynchrone.</summary>
        <value>Objet défini par l’utilisateur qui qualifie ou contient des informations sur une opération asynchrone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne l’objet qui est le dernier paramètre de la méthode qui initie une opération asynchrone.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment la <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> propriété est utilisée pour passer des informations à une méthode de rappel. Le dernier paramètre de la `BeginInvoke` appel de méthode est une chaîne de format, la méthode de rappel utilise pour mettre en forme un message de sortie.  
  
 L’exemple se compose de deux classes : la classe qui contient la méthode est appelée de façon asynchrone et la classe qui contient le `Main` méthode qui effectue l’appel.  
  
 Pour plus d’informations sur le fonctionne de cet exemple de rappel et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implémentez cette propriété pour permettre à l’appelant d’une opération asynchrone obtenir un objet défini par l’application spécifié au début de l’opération.</para>
        </block>
        <block subset="none" type="usage">
          <para>Cet objet peut être utilisé pour passer des informations d’état de l’opération asynchrone pour une <see cref="T:System.AsyncCallback" /> que vous fournissez.</para>
        </block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Threading.WaitHandle" /> qui est utilisé pour attendre qu’une opération asynchrone se termine.</summary>
        <value>
          <see cref="T:System.Threading.WaitHandle" /> utilisé pour attendre qu’une opération asynchrone se termine.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour permet au client d’attente pour une opération asynchrone se termine au lieu d’interrogation <xref:System.IAsyncResult.IsCompleted%2A> jusqu'à ce que l’opération se termine. La valeur de retour peut être utilisée pour effectuer un <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, ou <xref:System.Threading.WaitHandle.WaitAll%2A> opération.  
  
 Le common language runtime fournit un nombre d’objets, tels que <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, et <xref:System.Threading.Mutex>, qui reflètent les primitives de synchronisation Win32.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.IAsyncResult.AsyncWaitHandle%2A> propriété à obtenir un <xref:System.Threading.WaitHandle>et l’attente d’un appel asynchrone sur un délégué. Le <xref:System.Threading.WaitHandle> est signalé quand l’appel asynchrone se termine et vous pouvez l’attendre en appelant la méthode <xref:System.Threading.WaitHandle.WaitOne%2A> .  
  
 L’exemple se compose de deux classes : la classe qui contient la méthode est appelée de façon asynchrone et la classe qui contient le `Main` méthode qui effectue l’appel.  
  
 Pour plus d’informations et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L’objet qui implémente <see cref="T:System.IAsyncResult" /> est inutile de créer le <see cref="T:System.Threading.WaitHandle" /> jusqu'à ce que le <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> propriété est en lecture. Il s’agit du choix de la <see cref="T:System.IAsyncResult" /> responsable de l’implémentation. Toutefois, si l’implémenteur crée <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, il incombe à l’implémenteur de signaler le <see cref="T:System.Threading.WaitHandle" /> qui mettra fin à l’attente au moment opportun. Par exemple, <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> met fin à l’attente pour l’appelant lorsqu’une méthode appelée de manière asynchrone retourne. Une fois créé, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> doit rester actif jusqu'à ce que l’utilisateur appelle la méthode qui termine l’opération asynchrone. À ce moment, l’objet derrière <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> peuvent être ignorées.</para>
        </block>
        <block subset="none" type="usage">
          <para>Les clients que vous attendez que l’opération se termine (par opposition à l’interrogation) utilisent cette propriété pour obtenir un objet de synchronisation à attendre.  <block subset="none" type="note"><para> Lorsque vous utilisez la <see langword="BeginInvoke" /> méthode d’un délégué à appeler une méthode de façon asynchrone et obtenir un handle d’attente à partir de résultant <see cref="T:System.IAsyncResult" />, nous vous recommandons de fermer le handle d’attente dès que vous avez terminé d’utiliser, en appelant le <see cref="M:System.Threading.WaitHandle.Close" /> (méthode). Si vous vous contentez de libérer toutes les références au handle d’attente, les ressources système sont libérées quand le garbage collection récupère le handle d’attente, mais le garbage collection fonctionne plus efficacement quand les objets sont explicitement fermées ou libérées. Pour plus d’informations, consultez le <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> propriété.  </para></block></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l’opération asynchrone s’est terminée de manière synchrone.</summary>
        <value>
          <see langword="true" /> si l’opération asynchrone s’est terminée de manière synchrone ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’achèvement synchrone de l’appel est détectée dans le <xref:System.AsyncCallback> délégué, il est probable que le thread qui a initié l’opération asynchrone est le thread actuel.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La plupart des implémenteurs de le <see cref="T:System.IAsyncResult" /> interface n’utilise pas cette propriété et doit retourner <see langword="false" />. À partir de la [ ! Include[net_v45](~/Includes/NET-V45-MD.MD)], une tâche qui est créée avec le <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> méthode ne se terminera pas si cette propriété n’est pas correctement implémentée. Consultez [compatibilité des applications dans 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para>
        </block>
        <block subset="none" type="usage">
          <para>Utilisez cette propriété pour déterminer si l’opération asynchrone s’est terminée de façon synchrone. Par exemple, cette propriété peut retourner <see langword="true" /> pour une opération d’e/s asynchrone si la demande d’e/s était petite.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l’opération asynchrone est terminée.</summary>
        <value>
          <see langword="true" /> si l'opération est terminée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque cette propriété est `true`, vous pouvez supposer sans risque ignorer toutes les ressources que vous pouvez allouer pour une utilisation à l’opération asynchrone.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.IAsyncResult.IsCompleted%2A> propriété de la <xref:System.IAsyncResult> pour déterminer quand un appel asynchrone se termine. Dans ce cas, l’appel asynchrone est effectué à l’aide de la `BeginInvoke` méthode d’un délégué. Vous pouvez utiliser le <xref:System.IAsyncResult.IsCompleted%2A> propriété pour interrogation lorsque vous passez de l’appel asynchrone à partir d’un thread qui gère l’interface utilisateur. L’interrogation pour connaître l’état d’avancement permet au thread appelant de continuer à s’exécuter pendant que l’appel asynchrone s’exécute sur un thread <xref:System.Threading.ThreadPool> .  
  
 L’exemple se compose de deux classes : la classe qui contient la méthode est appelée de façon asynchrone et la classe qui contient le `Main` méthode qui effectue l’appel.  
  
 Pour plus d’informations et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Les implémenteurs retourneront généralement la valeur d’un champ privé ou interne en tant que la valeur de cette propriété.</para>
        </block>
        <block subset="none" type="usage">
          <para>Les clients qui interrogent l’état de l’opération (par opposition à l’attente d’un objet de synchronisation) utilisent cette propriété pour déterminer l’état de l’opération.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>