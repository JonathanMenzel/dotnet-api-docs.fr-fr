<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IAsyncResult.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52276b9f380f6f18b31bcbd48397cc4ae980b77ed.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2276b9f380f6f18b31bcbd48397cc4ae980b77ed</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IAsyncResult">
          <source>Represents the status of an asynchronous operation.</source>
          <target state="translated">Représente l'état d'une opération asynchrone.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface is implemented by classes containing methods that can operate asynchronously.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface est implémentée par des classes contenant des méthodes qui peuvent opérer de façon asynchrone.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>It is the return type of methods that initiate an asynchronous operation, such as <ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType&gt;</ph>, and it is passed to methods that conclude an asynchronous operation, such as <ph id="ph2">&lt;xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Il est le type de retour des méthodes qui initie une opération asynchrone, tel que <ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType&gt;</ph>, et il est passé aux méthodes qui conclut une opération asynchrone, tel que <ph id="ph2">&lt;xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source><ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> objects are also passed to methods invoked by <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegates when an asynchronous operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> les objets sont également passés aux méthodes appelées par <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> délègue lors d’une opération asynchrone se termine.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>An object that supports the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.</source>
          <target state="translated">Un objet qui prend en charge la <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface stocke les informations d’état pour une opération asynchrone et fournit un objet de synchronisation permettant aux threads d’être signalé lors de la fin de l’opération.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class is the implementation of <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> that is returned by the <ph id="ph3">`BeginInvoke`</ph> method when you use a delegate to call a method asynchronously.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> classe est l’implémentation de <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> qui est retourné par la <ph id="ph3">`BeginInvoke`</ph> méthode lorsque vous utilisez un délégué pour appeler une méthode de façon asynchrone.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>For a detailed description of how the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface is used, see the <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept> topic.</source>
          <target state="translated">Pour obtenir une description détaillée de la façon dont <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface est utilisée, consultez la <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept> rubrique.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">L’exemple suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> propriété à obtenir un <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>et l’attente d’un appel asynchrone sur un délégué.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> est signalé quand l’appel asynchrone se termine et vous pouvez l’attendre en appelant la méthode <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L’exemple se compose de deux classes : la classe qui contient la méthode est appelée de façon asynchrone et la classe qui contient le <ph id="ph1">`Main`</ph> méthode qui effectue l’appel.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IAsyncResult">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Pour plus d’informations et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.IAsyncResult.AsyncState">
          <source>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</source>
          <target state="translated">Obtient un objet défini par l’utilisateur qui qualifie ou contient des informations sur une opération asynchrone.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>A user-defined object that qualifies or contains information about an asynchronous operation.</source>
          <target state="translated">Objet défini par l’utilisateur qui qualifie ou contient des informations sur une opération asynchrone.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>This property returns the object that is the last parameter of the method that initiates an asynchronous operation.</source>
          <target state="translated">Cette propriété retourne l’objet qui est le dernier paramètre de la méthode qui initie une opération asynchrone.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>The following code example demonstrates how the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> property is used to pass information to a callback method.</source>
          <target state="translated">L’exemple de code suivant montre comment la <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> propriété est utilisée pour passer des informations à une méthode de rappel.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>The last parameter of the <ph id="ph1">`BeginInvoke`</ph> method call is a format string, which the callback method uses to format an output message.</source>
          <target state="translated">Le dernier paramètre de la <ph id="ph1">`BeginInvoke`</ph> appel de méthode est une chaîne de format, la méthode de rappel utilise pour mettre en forme un message de sortie.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L’exemple se compose de deux classes : la classe qui contient la méthode est appelée de façon asynchrone et la classe qui contient le <ph id="ph1">`Main`</ph> méthode qui effectue l’appel.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>For more information about how this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur le fonctionne de cet exemple de rappel et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>Implement this property to allow the caller of an asynchronous operation to obtain an application-defined object specified at the start of the operation.</source>
          <target state="translated">Implémentez cette propriété pour permettre à l’appelant d’une opération asynchrone obtenir un objet défini par l’application spécifié au début de l’opération.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncState">
          <source>This object can be used to pass state information for the asynchronous operation to an <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> that you provide.</source>
          <target state="translated">Cet objet peut être utilisé pour passer des informations d’état de l’opération asynchrone pour une <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que vous fournissez.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">Obtient un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> qui est utilisé pour attendre qu’une opération asynchrone se termine.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> utilisé pour attendre qu’une opération asynchrone se termine.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The return value allows the client to wait for an asynchronous operation to complete instead of polling <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> until the operation concludes.</source>
          <target state="translated">La valeur de retour permet au client d’attente pour une opération asynchrone se termine au lieu d’interrogation <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> jusqu'à ce que l’opération se termine.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The return value can be used to perform a <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> operation.</source>
          <target state="translated">La valeur de retour peut être utilisée pour effectuer un <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> opération.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The common language runtime supplies a number of waitable objects, such as <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Mutex&gt;</ph>, all of which mirror Win32 synchronization primitives.</source>
          <target state="translated">Le common language runtime fournit un nombre d’objets, tels que <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, et <ph id="ph3">&lt;xref:System.Threading.Mutex&gt;</ph>, qui reflètent les primitives de synchronisation Win32.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">L’exemple suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> propriété à obtenir un <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>et l’attente d’un appel asynchrone sur un délégué.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> est signalé quand l’appel asynchrone se termine et vous pouvez l’attendre en appelant la méthode <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L’exemple se compose de deux classes : la classe qui contient la méthode est appelée de façon asynchrone et la classe qui contient le <ph id="ph1">`Main`</ph> méthode qui effectue l’appel.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Pour plus d’informations et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>The object that implements <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> does not need to create the <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> until the <ph id="ph3">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph> property is read.</source>
          <target state="translated">L’objet qui implémente <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> est inutile de créer le <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> jusqu'à ce que le <ph id="ph3">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph> propriété est en lecture.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>It is the choice of the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> implementer.</source>
          <target state="translated">Il s’agit du choix de la <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> responsable de l’implémentation.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>However, if the implementer creates <ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph>, it is the responsibility of the implementer to signal the <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that will terminate the wait at the appropriate time.</source>
          <target state="translated">Toutefois, si l’implémenteur crée <ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph>, il incombe à l’implémenteur de signaler le <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> qui mettra fin à l’attente au moment opportun.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph> terminates the wait on behalf of the caller when an asynchronously invoked method returns.</source>
          <target state="translated">Par exemple, <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph> met fin à l’attente pour l’appelant lorsqu’une méthode appelée de manière asynchrone retourne.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>Once created, <ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph> should be kept alive until the user calls the method that concludes the asynchronous operation.</source>
          <target state="translated">Une fois créé, <ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph> doit rester actif jusqu'à ce que l’utilisateur appelle la méthode qui termine l’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>At that time the object behind <ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph> can be discarded.</source>
          <target state="translated">À ce moment, l’objet derrière <ph id="ph1">&lt;see cref="P:System.IAsyncResult.AsyncWaitHandle" /&gt;</ph> peuvent être ignorées.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>Clients that wait for the operation to complete (as opposed to polling) use this property to obtain a synchronization object to wait on.</source>
          <target state="translated">Les clients que vous attendez que l’opération se termine (par opposition à l’interrogation) utilisent cette propriété pour obtenir un objet de synchronisation à attendre.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>When you use the <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method of a delegate to call a method asynchronously and obtain a wait handle from the resulting <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>, we recommend that you close the wait handle as soon as you are finished using it, by calling the <ph id="ph3">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> method.</source>
          <target state="translated">Lorsque vous utilisez la <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> méthode d’un délégué à appeler une méthode de façon asynchrone et obtenir un handle d’attente à partir de résultant <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>, nous vous recommandons de fermer le handle d’attente dès que vous avez terminé d’utiliser, en appelant le <ph id="ph3">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>If you simply release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle, but garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</source>
          <target state="translated">Si vous vous contentez de libérer toutes les références au handle d’attente, les ressources système sont libérées quand le garbage collection récupère le handle d’attente, mais le garbage collection fonctionne plus efficacement quand les objets sont explicitement fermées ou libérées.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.AsyncWaitHandle">
          <source>For more information, see the <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /&gt;</ph> property.</source>
          <target state="translated">Pour plus d'informations, consultez la propriété <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>Gets a value that indicates whether the asynchronous operation completed synchronously.</source>
          <target state="translated">Obtient une valeur qui indique si l’opération asynchrone s’est terminée de manière synchrone.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the asynchronous operation completed synchronously; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l’opération asynchrone s’est terminée de manière synchrone ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>If the synchronous completion of the call is detected in the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.</source>
          <target state="translated">Si l’achèvement synchrone de l’appel est détectée dans le <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> délégué, il est probable que le thread qui a initié l’opération asynchrone est le thread actuel.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>Most implementers of the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface will not use this property and should return <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">La plupart des implémenteurs de le <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface n’utilise pas cette propriété et doit retourner <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, a task that is created with the <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph> method will not complete if this property is not implemented correctly.</source>
          <target state="translated">Compter les <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, une tâche qui est créée avec le <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph> méthode ne se terminera pas si cette propriété n’est pas correctement implémentée.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>See <bpt id="p1">[</bpt>Application Compatibility in 4.5<ept id="p1">](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)</ept>.</source>
          <target state="translated">Consultez <bpt id="p1">[</bpt>compatibilité des applications dans 4.5<ept id="p1">](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>Use this property to determine if the asynchronous operation completed synchronously.</source>
          <target state="translated">Utilisez cette propriété pour déterminer si l’opération asynchrone s’est terminée de façon synchrone.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.CompletedSynchronously">
          <source>For example, this property can return <ph id="ph1">&lt;see langword="true" /&gt;</ph> for an asynchronous I/O operation if the I/O request was small.</source>
          <target state="translated">Par exemple, cette propriété peut retourner <ph id="ph1">&lt;see langword="true" /&gt;</ph> pour une opération d’e/s asynchrone si la demande d’e/s était petite.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.IAsyncResult.IsCompleted">
          <source>Gets a value that indicates whether the asynchronous operation has completed.</source>
          <target state="translated">Obtient une valeur qui indique si l’opération asynchrone est terminée.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is complete; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'opération est terminée ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>When this property is <ph id="ph1">`true`</ph>, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.</source>
          <target state="translated">Lorsque cette propriété est <ph id="ph1">`true`</ph>, vous pouvez supposer sans risque ignorer toutes les ressources que vous pouvez allouer pour une utilisation à l’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to discover when an asynchronous call completes.</source>
          <target state="translated">L’exemple suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> propriété de la <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> pour déterminer quand un appel asynchrone se termine.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>In this case, the asynchronous call is made by using the <ph id="ph1">`BeginInvoke`</ph> method of a delegate.</source>
          <target state="translated">Dans ce cas, l’appel asynchrone est effectué à l’aide de la <ph id="ph1">`BeginInvoke`</ph> méthode d’un délégué.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>You might use the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property to poll for completion when making the asynchronous call from a thread that services the user interface.</source>
          <target state="translated">Vous pouvez utiliser le <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> propriété pour interrogation lorsque vous passez de l’appel asynchrone à partir d’un thread qui gère l’interface utilisateur.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">L’interrogation pour connaître l’état d’avancement permet au thread appelant de continuer à s’exécuter pendant que l’appel asynchrone s’exécute sur un thread <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L’exemple se compose de deux classes : la classe qui contient la méthode est appelée de façon asynchrone et la classe qui contient le <ph id="ph1">`Main`</ph> méthode qui effectue l’appel.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Pour plus d’informations et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>Implementers will typically return the value of a private field or internal test as the value of this property.</source>
          <target state="translated">Les implémenteurs retourneront généralement la valeur d’un champ privé ou interne en tant que la valeur de cette propriété.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IAsyncResult.IsCompleted">
          <source>Clients that poll for operation status (as opposed to waiting on a synchronization object) use this property to determine the status of the operation.</source>
          <target state="translated">Les clients qui interrogent l’état de l’opération (par opposition à l’attente d’un objet de synchronisation) utilisent cette propriété pour déterminer l’état de l’opération.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>