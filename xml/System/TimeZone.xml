<Type Name="TimeZone" FullName="System.TimeZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b9517fbeaef4a1ffeae183916b49b11a730eaccf" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52606206" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TimeZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TimeZone extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeZone" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeZone" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZone abstract" />
  <TypeSignature Language="F#" Value="type TimeZone = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2">
      <AttributeName>System.Obsolete("System.TimeZone has been deprecated.  Please investigate the use of System.TimeZoneInfo instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un fuseau horaire.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un fuseau horaire est une région géographique dans laquelle la même heure standard est utilisée.  
  
> [!IMPORTANT]
>  Si possible, utilisez le <xref:System.TimeZoneInfo> classe au lieu du <xref:System.TimeZone> classe.  
  
 Vous pouvez utiliser la <xref:System.TimeZone> classe à récupérer des informations sur le fuseau horaire actuel et convertir des heures de l’heure locale en temps universel coordonné (UTC), ou vice versa. Toutefois, vous ne pouvez pas utiliser le <xref:System.TimeZone> classe pour représenter des fuseaux horaires différents de la zone locale ou pour gérer les conversions de date et l’heure d’un fuseau horaire à un autre. Pour ce faire, utilisez la <xref:System.TimeZoneInfo> classe. Vous pouvez utiliser cette classe pour récupérer des informations sur tout fuseau horaire défini sur le système local, pour créer des fuseaux horaires personnalisés et pour convertir les heures d’un fuseau horaire à un autre.  
  
 Le <xref:System.TimeZone> classe prend en charge uniquement une règle d’ajustement heure unique pour le fuseau horaire local. Par conséquent, la <xref:System.TimeZone> classe pouvez précisément recueillent des informations de l’heure d’été ou convertir entre UTC et l’heure locale uniquement pour la période pendant laquelle la dernière règle d’ajustement est en vigueur. En revanche, la <xref:System.TimeZoneInfo> classe prend en charge plusieurs règles d’ajustement, ce qui permet de travailler avec des données de fuseau horaire historiques.  
  
   
  
## Examples  
 Les références de l’exemple et les affiche sélectionné suivants `TimeZone` classe les éléments.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>En plus de fournir des implémentations pour ses <see langword="abstract" /> membres (celles marquées comme <see langword="MustOverride" /> en Visual Basic), il est important que les classes dérivées de <see cref="T:System.TimeZone" /> remplacer le comportement par défaut de la <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> (méthode). Il s’agit, car le comportement par défaut de <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> dans le .NET Framework version 2.0 ne dépend pas un appel à <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />, comme c’était le cas dans les versions 1.0 et 1.1 du .NET Framework.  Pour plus d’informations, consultez le <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> (méthode).</para>
    </block>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeZone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.TimeZone" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZone CurrentTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZone CurrentTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.CurrentTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentTimeZone As TimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZone ^ CurrentTimeZone { TimeZone ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTimeZone : TimeZone" Usage="System.TimeZone.CurrentTimeZone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le fuseau horaire de votre ordinateur actuel.</summary>
        <value>Un objet <see cref="T:System.TimeZone" /> qui représente le fuseau horaire local actuel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeZone.CurrentTimeZone%2A> propriété correspond à la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriété. Si possible, utilisez le <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriété.  
  
   
  
## Examples  
 Les références de l’exemple suivant le `CurrentTimeZone` propriété et affiche les noms de l’heure d’hiver et l’heure d’été pour le fuseau horaire local.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Les données de fuseau horaire local sont mis en cache après <see cref="P:System.TimeZone.CurrentTimeZone" /> tout d’abord permet de récupérer les informations de fuseau horaire. Si le système local de l’horaire change par la suite, le <see cref="P:System.TimeZone.CurrentTimeZone" /> propriété ne reflète pas cette modification. Si vous avez besoin gérer les changements de fuseau horaire lors de votre application est en cours d’exécution, utilisez la <see cref="T:System.TimeZoneInfo" /> classe et appelez ses <see cref="M:System.TimeZoneInfo.ClearCachedData" /> (méthode).</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.Local" />
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public abstract string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZone.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom du fuseau horaire appliquant l'heure d'été.</summary>
        <value>Nom du fuseau horaire appliquant l'heure d'été.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’heure d’été n’est pas utilisé dans le fuseau horaire, une chaîne vide (" ») est retournée.  
  
 Le <xref:System.TimeZone.DaylightName%2A> propriété correspond à la <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> propriété. Si possible, utilisez le <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> propriété.  
  
   
  
## Examples  
 L’exemple références et les affiche suivant le `DaylightName` propriété du fuseau horaire actuel.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.DaylightName" />
      </Docs>
    </Member>
    <Member MemberName="GetDaylightChanges">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDaylightChanges (year As Integer) As DaylightTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Globalization::DaylightTime ^ GetDaylightChanges(int year);" />
      <MemberSignature Language="F#" Value="abstract member GetDaylightChanges : int -&gt; System.Globalization.DaylightTime" Usage="timeZone.GetDaylightChanges year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DaylightTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Année à laquelle se rapporte la période d'application de l'heure d'été.</param>
        <summary>Retourne la période d'application de l'heure d'été au cours d'une année particulière.</summary>
        <returns>Un objet <see cref="T:System.Globalization.DaylightTime" /> qui contient la date de début et de fin de l'heure d'été dans <paramref name="year" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Qu’une seule période d’heure par an est pris en charge.  
  
 Si l’heure d’été n’est pas utilisé dans le fuseau horaire actuel, la valeur de retour est un <xref:System.Globalization.DaylightTime> objet, où la valeur de <xref:System.Globalization.DaylightTime.Start%2A> et <xref:System.Globalization.DaylightTime.End%2A> est <xref:System.DateTime.MinValue?displayProperty=nameWithType>et la valeur de <xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=nameWithType> est un <xref:System.TimeSpan> initialisé à 0 graduation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> est inférieur à 1 ou supérieur à 9999.</exception>
        <block subset="none" type="usage">
          <para>Étant donné que le <see cref="T:System.TimeZone" /> classe prend en charge qu’une seule règle d’ajustement de l’heure d’été, la <see cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" /> méthode s’applique la règle d’ajustement actuelle à toute année, indépendamment de si s’applique la règle d’ajustement à cette année. En supposant que le système d’exploitation lui-même a des données exactes pour une année donnée, un résultat plus précis est disponible en utilisant le tableau de <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objets retournés par le <see cref="M:System.TimeZoneInfo.GetAdjustmentRules" /> (méthode). Le <see cref="P:System.Globalization.DaylightTime.Start" />, <see cref="P:System.Globalization.DaylightTime.End" />, et <see cref="P:System.Globalization.DaylightTime.Delta" /> propriétés correspondent à la <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />, <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />, et <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> propriétés.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.GetAdjustmentRules" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public abstract TimeSpan GetUtcOffset (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUtcOffset (time As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract TimeSpan GetUtcOffset(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZone.GetUtcOffset time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Valeur de date et heure.</param>
        <summary>Retourne l'offset en temps universel coordonné (UTC, Coordinated Universal Time) pour le fuseau horaire spécifié.</summary>
        <returns>L'offset du temps universel (UTC, Universal Time Coordinated) de <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode retourne l’offset ou la différence, entre le `time` paramètre et le temps universel coordonné (UTC). Plus précisément :  
  
 `time` = UTC + décalage  
  
 La méthode interprète le fuseau horaire de `time` selon son <xref:System.DateTime.Kind%2A> propriété. Si la valeur de la <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, la méthode retourne le décalage de fuseau horaire local. Si la valeur de la <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, la méthode retourne un décalage égal à <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Si le fuseau horaire local observe l’heure d’été <xref:System.TimeZone.GetUtcOffset%2A> s’applique la règle d’ajustement actuelle à `time` lors de la détermination de l’offset du fuseau horaire local. Autrement dit, le décalage retourné par <xref:System.TimeZone.GetUtcOffset%2A> reflète si `time` se situe dans l’heure d’hiver du fuseau horaire ou de son passage à l’heure.  
  
> [!NOTE]
>  Le <xref:System.TimeZone.GetUtcOffset%2A> méthode reconnaît uniquement la règle d’ajustement l’heure actuelle pour le fuseau horaire local. Par conséquent, il est garanti pour retourner correctement l’offset UTC d’une heure locale uniquement pendant la période dans laquelle la dernière règle d’ajustement est en vigueur. Elle peut retourner des résultats inexacts si `time` est un historique valeur date et heure qui a été soumis à une règle d’ajustement.  
  
 Le <xref:System.TimeZone.GetUtcOffset%2A> méthode correspond à la <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> (méthode). Si possible, utilisez le <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> (méthode).  
  
 Étant donné que la valeur de date et d’heure représentée par `time` et décalage de cette valeur à l’heure UTC non étroitement couplées, une date locale ou non spécifiée et valeur d’heure peut retourner une valeur de décalage différente lorsque s’exécutent sur des ordinateurs différents ou lorsque exécuté sur le même ordinateur sous fuseaux horaires différents. Si ce comportement est indésirable, utilisez un <xref:System.DateTimeOffset> valeur à la place. Le <xref:System.DateTimeOffset> type de données couple étroitement une valeur de date et d’heure avec son décalage à l’heure UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une valeur indiquant si un horodatage spécifié se trouve dans une période d'application de l'heure d'été.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public virtual bool IsDaylightSavingTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDaylightSavingTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDaylightSavingTime (time As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDaylightSavingTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member IsDaylightSavingTime : DateTime -&gt; bool&#xA;override this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZone.IsDaylightSavingTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Date et heure.</param>
        <summary>Retourne une valeur indiquant si l'horodatage spécifié se trouve dans une période d'application de l'heure d'été.</summary>
        <returns>
          <see langword="true" /> si <paramref name="time" /> se trouve dans une période d'application de l'heure d'été ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’année à laquelle s’applique la période de l’heure d’été est dérivée de la `time` paramètre.  
  
 Étant donné que le <xref:System.TimeZone> classe prend en charge une règle d’ajustement de l’heure d’été unique, le <xref:System.TimeZone.IsDaylightSavingTime%28System.DateTime%29> méthode s’applique la règle d’ajustement à n’importe quelle date, indépendamment de la règle d’ajustement en vigueur à cette date. En supposant que le système d’exploitation lui-même a précis historiques de données d’heure, un résultat plus précis est disponible à l’aide de la <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> (méthode). Si possible, utilisez le <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDaylightSavingTime (time As DateTime, daylightTimes As DaylightTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDaylightSavingTime(DateTime time, System::Globalization::DaylightTime ^ daylightTimes);" />
      <MemberSignature Language="F#" Value="static member IsDaylightSavingTime : DateTime * System.Globalization.DaylightTime -&gt; bool" Usage="System.TimeZone.IsDaylightSavingTime (time, daylightTimes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="daylightTimes" Type="System.Globalization.DaylightTime" />
      </Parameters>
      <Docs>
        <param name="time">Date et heure.</param>
        <param name="daylightTimes">Période d'application de l'heure d'été.</param>
        <summary>Retourne une valeur indiquant si l'horodatage spécifié se trouve dans la période d'application de l'heure d'été déterminée.</summary>
        <returns>
          <see langword="true" /> si <paramref name="time" /> se trouve dans <paramref name="daylightTimes" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> méthode fournit les mêmes fonctionnalités que cette surcharge de la <xref:System.TimeZone.IsDaylightSavingTime%2A> (méthode). Si possible, utilisez le <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="daylightTimes" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public abstract string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZone.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom du fuseau horaire standard.</summary>
        <value>Nom du fuseau horaire standard.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeZone.StandardName%2A> propriété correspond à la <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> propriété. Si possible, utilisez le <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> propriété.  
  
   
  
## Examples  
 L’exemple références et les affiche suivant le `StandardName` propriété du fuseau horaire actuel.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Une tentative d'affecter <see langword="null" /> à cette propriété a été effectuée.</exception>
        <altmember cref="P:System.TimeZoneInfo.StandardName" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToLocalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToLocalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToLocalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToLocalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToLocalTime : DateTime -&gt; DateTime&#xA;override this.ToLocalTime : DateTime -&gt; DateTime" Usage="timeZone.ToLocalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Une heure de temps universel (UTC, Universal Time Coordinated).</param>
        <summary>Retourne l'heure locale qui correspond à une valeur d'heure et de date spécifiée.</summary>
        <returns>Un objet <see cref="T:System.DateTime" /> dont la valeur est l'heure locale qui correspond à <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant montre la relation entre la `time` paramètre et le <xref:System.DateTime> valeur retournée par cette méthode.  
  
|Paramètre `time`|Comportement|Valeur de retour|  
|----------------------|--------------|------------------|  
|Une heure de temps universel coordonné (UTC) (<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>).|Convertit l’heure UTC en heure locale.|Un objet <xref:System.DateTime> dont la valeur est l'heure locale qui correspond à `time`.|  
|Une heure locale (<xref:System.DateTimeKind.Local?displayProperty=nameWithType>).|Aucune conversion n’est nécessaire.|Le même <xref:System.DateTime> valeur représentée par le `time` paramètre.|  
|Une heure non spécifiée (<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>).|Suppose que l’heure est UTC et convertit à l’heure UTC en heure locale.|Un objet <xref:System.DateTime> dont la valeur est l'heure locale qui correspond à `time`.|  
  
 Si le fuseau horaire local observe l’heure d’été <xref:System.TimeZone.ToLocalTime%2A> s’applique la règle d’ajustement actuelle à `time` lors de la conversion.  
  
> [!NOTE]
>  Le <xref:System.TimeZone.ToLocalTime%2A> méthode reconnaît uniquement la règle d’ajustement l’heure actuelle pour le fuseau horaire local. Par conséquent, il est garanti pour retourner correctement l’heure locale correspondant à une heure UTC particulière uniquement pendant la période dans laquelle la dernière règle d’ajustement est en vigueur. Elle peut retourner des résultats inexacts si `time` est un historique valeur date et heure qui a été soumis à une règle d’ajustement.  
  
 Le <xref:System.TimeZone.ToLocalTime%2A> méthode correspond à la <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> méthode avec ses `destinationTimeZone` paramètre défini sur <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Si possible, utilisez le <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il n’est pas obligatoire, dans la plupart des cas en cours d’exécution sous le .NET Framework version 2.0 de classes dérivées doivent substituer l’implémentation par défaut de cette méthode. Dans les versions de .NET Framework 1.0 et 1.1, le <see langword="ToLocalTime" /> méthode appelée le <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> méthode réglé sur l’heure d’été lors du retour de l’heure locale. Toutefois, à compter de .NET Framework 2.0, le comportement de l’implémentation par défaut dépend du <see cref="P:System.DateTime.Kind" /> propriété de le <paramref name="time" /> paramètre. Si sa valeur est <see cref="F:System.DateTimeKind.Local" />, cette méthode retourne <paramref name="time" /> inchangé. Si sa valeur est soit <see cref="F:System.DateTimeKind.Utc" /> ou <see cref="F:System.DateTimeKind.Unspecified" />, cette méthode suppose <paramref name="time" /> est UTC et la convertit à l’heure système locale sans appeler le <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> (méthode).  
  
Le code suivant fournit un simple remplacement de l’implémentation par défaut de la <see langword="ToLocalTime" /> (méthode). Dans ce code, le <see langword="internalTimeZone" /> variable représente une instance privée de la <see langword="TimeZone" /> classe : 
[ ! code-csharp[System.TimeZone.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/CS/TimeZone_ToLocalTime.cs#1)] [ ! code-vb[System.TimeZone.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/VB/TimeZone_ToLocalTime.vb#1)]</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToUniversalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToUniversalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToUniversalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToUniversalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToUniversalTime : DateTime -&gt; DateTime&#xA;override this.ToUniversalTime : DateTime -&gt; DateTime" Usage="timeZone.ToUniversalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Date et heure.</param>
        <summary>Retourne le temps universel (UTC, Universal Time Coordinated) qui correspond à une heure spécifiée.</summary>
        <returns>Un objet <see cref="T:System.DateTime" /> dont la valeur est le temps universel (UTC, Universal Time Coordinated) qui correspond à <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le fuseau horaire local observe l’heure d’été <xref:System.TimeZone.ToUniversalTime%2A> s’applique la règle d’ajustement actuelle à la `time` paramètre lors de la conversion.  
  
> [!NOTE]
>  Le <xref:System.TimeZone.ToUniversalTime%2A> méthode reconnaît uniquement la règle d’ajustement l’heure actuelle pour le fuseau horaire local. Par conséquent, il est garanti pour retourner correctement le temps universel coordonné (UTC) correspondant à une heure locale particulière uniquement pendant la période dans laquelle la dernière règle d’ajustement est en vigueur. Elle peut retourner des résultats inexacts si `time` est un historique valeur date et heure qui a été soumis à une règle d’ajustement.  
  
 Si le `time` paramètre est une heure ambiguë, la méthode suppose qu’il est d’une heure. (Une heure ambiguë est une correspondant à une heure ou à une heure dans le fuseau horaire local). Si `time` est une heure non valide, la méthode soustrait simplement l’heure locale à l’heure UTC du fuseau horaire local de décalage pour retourner l’heure UTC. (Une heure non valide est un objet qui n’existe pas en raison de l’application des règles d’ajustement de l’heure d’été.)  
  
 Étant donné que `time` est interprétée en relation avec le fuseau horaire actuel sur le système actuel, la date et l’heure retournée par cette méthode peuvent être différent si une application est exécutée sur des ordinateurs différents ou sur le même ordinateur avec des fuseaux horaires différents. Dans le cas dans lequel une valeur date / heure doit représenter un point unique et non équivoque dans le temps, utilisez un <xref:System.DateTimeOffset> valeur pour représenter l’heure locale.  
  
 Le <xref:System.TimeZone.ToUniversalTime%2A> méthode correspond à la <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> surcharge de méthode avec un <xref:System.DateTime> paramètre dont <xref:System.DateTime.Kind%2A> propriété n’est pas égal <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si possible, utilisez le <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> surcharge de méthode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      </Docs>
    </Member>
  </Members>
</Type>