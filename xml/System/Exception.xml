<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Exception.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c3e876a1482a23c73451498e9a529b706c17f38a0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e876a1482a23c73451498e9a529b706c17f38a0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Exception">
          <source>Represents errors that occur during application execution.</source>
          <target state="translated">Représente les erreurs qui se produisent lors de l'exécution de l'application.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This class is the base class for all exceptions.</source>
          <target state="translated">Cette classe est la classe de base pour toutes les exceptions.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error.</source>
          <target state="translated">Lorsqu’une erreur se produit, le système ou l’application en cours d’exécution la signale en levant une exception qui contient des informations sur l’erreur.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>After an exception is thrown, it is handled by the application or by the default exception handler.</source>
          <target state="translated">Après qu’une exception est levée, elle est gérée par l’application ou par le Gestionnaire d’exceptions par défaut.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In this section:</source>
          <target state="translated">Dans cette section :</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Errors and exceptions<ept id="p1">](#Errors)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Erreurs et exceptions<ept id="p1">](#Errors)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Try/catch blocks<ept id="p1">](#TryCatch)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Try/catch (blocs)<ept id="p1">](#TryCatch)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Exception type features<ept id="p1">](#Features)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Fonctions de type d’exception<ept id="p1">](#Features)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Exception class properties<ept id="p1">](#Properties)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Propriétés de classe d’exception<ept id="p1">](#Properties)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Performance considerations<ept id="p1">](#Performance)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Considérations relatives aux performances<ept id="p1">](#Performance)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Re-throwing an exception<ept id="p1">](#Rethrow)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Une exception est levée à nouveau<ept id="p1">](#Rethrow)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Choosing standard exceptions<ept id="p1">](#Standard)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Choix d’exceptions standard<ept id="p1">](#Standard)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Implementing custom exceptions<ept id="p1">](#Custom)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Implémentation des exceptions personnalisées<ept id="p1">](#Custom)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Errors and exceptions</source>
          <target state="translated">Erreurs et exceptions</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Run-time errors can occur for a variety of reasons.</source>
          <target state="translated">Erreurs d’exécution peuvent se produire pour diverses raisons.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>However, not all errors should be handled as exceptions in your code.</source>
          <target state="translated">Toutefois, toutes les erreurs doivent être traités comme des exceptions dans votre code.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.</source>
          <target state="translated">Voici certaines catégories d’erreurs qui peuvent se produire au moment de l’exécution et les méthodes appropriées pour y répondre.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">**</bpt>Usage errors.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Erreurs d’utilisation.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A usage error represents an error in program logic that can result in an exception.</source>
          <target state="translated">Une erreur d’utilisation représente une erreur dans le programme qui peut entraîner une exception.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>However, the error should be addressed not through exception handling but by modifying the faulty code.</source>
          <target state="translated">Toutefois, l’erreur doit être résolu, mais pas par le biais de la gestion des exceptions en modifiant le code défectueux.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, the override of the <ph id="ph1">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method in the following example assumes that the <ph id="ph2">`obj`</ph> argument must always be non-null.</source>
          <target state="translated">Par exemple, la substitution de la <ph id="ph1">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> méthode dans l’exemple suivant suppose que le <ph id="ph2">`obj`</ph> argument doit toujours être non null.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception that results when <ph id="ph2">`obj`</ph> is <ph id="ph3">`null`</ph> can be eliminated by modifying the source code to explicitly test for null before calling the <ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph> override and then re-compiling.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception qui résulte lorsque <ph id="ph2">`obj`</ph> est <ph id="ph3">`null`</ph> peuvent être éliminés en modifiant le code source pour tester null avant d’appeler explicitement la <ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph> override et puis ré-la compilation.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example contains the corrected source code that handles a <ph id="ph1">`null`</ph> argument.</source>
          <target state="translated">L’exemple suivant contient le code source corrigé qui gère un <ph id="ph1">`null`</ph> argument.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Instead of using exception handling for usage errors, you can use the <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType&gt;</ph> method to identify usage errors in debug builds, and the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType&gt;</ph> method to identify usage errors in both debug and release builds.</source>
          <target state="translated">Au lieu d’utiliser la gestion des exceptions pour les erreurs d’utilisation, vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType&gt;</ph> méthode pour identifier les erreurs d’utilisation dans les versions debug et le <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType&gt;</ph> génère de méthode pour identifier les erreurs de l’utilisation de debug et release.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For more information, see <bpt id="p1">[</bpt>Assertions in Managed Code<ept id="p1">](/visualstudio/debugger/assertions-in-managed-code)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Assertions dans du Code managé<ept id="p1">](/visualstudio/debugger/assertions-in-managed-code)</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">**</bpt>Program errors.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Erreurs du programme.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.</source>
          <target state="translated">Une erreur de programme est une erreur d’exécution qui ne peut pas nécessairement être évitée en écrivant du code de bogue.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In some cases, a program error may reflect an expected or routine error condition.</source>
          <target state="translated">Dans certains cas, une erreur de programme peut-être refléter une condition d’erreur attendu ou de routine.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation.</source>
          <target state="translated">Dans ce cas, vous souhaiterez Évitez d’utiliser la gestion des exceptions pour traiter l’erreur de programme et à la place renouvelez l’opération.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <ph id="ph1">&lt;xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType&gt;</ph> method, which returns a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the parse operation succeeded, instead of using the <ph id="ph3">&lt;xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType&gt;</ph> method, which throws a <ph id="ph4">&lt;xref:System.FormatException&gt;</ph> exception if the date string cannot be converted to a <ph id="ph5">&lt;xref:System.DateTime&gt;</ph> value.</source>
          <target state="translated">Par exemple, si l’utilisateur doit entrer une date dans un format particulier, vous pouvez analyser la chaîne de date en appelant le <ph id="ph1">&lt;xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType&gt;</ph> (méthode), qui retourne un <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valeur qui indique si l’opération d’analyse a réussi, au lieu d’utiliser la <ph id="ph3">&lt;xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType&gt;</ph>méthode qui lève un <ph id="ph4">&lt;xref:System.FormatException&gt;</ph> exception si la chaîne de date ne peut pas être convertie en un <ph id="ph5">&lt;xref:System.DateTime&gt;</ph> valeur.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Similarly, if a user tries to open a file that does not exist, you can first call the <ph id="ph1">&lt;xref:System.IO.File.Exists%2A?displayProperty=nameWithType&gt;</ph> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.</source>
          <target state="translated">De même, si un utilisateur tente d’ouvrir un fichier qui n’existe pas, vous pouvez commencer par appeler la <ph id="ph1">&lt;xref:System.IO.File.Exists%2A?displayProperty=nameWithType&gt;</ph> méthode permettant de vérifier si le fichier existe et, dans ce cas, l’utilisateur si il souhaite créer.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In other cases, a program error reflects an unexpected error condition that can be handled in your code.</source>
          <target state="translated">Dans d’autres cas, une erreur de programme reflète une condition d’erreur qui peut être gérée dans votre code.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted.</source>
          <target state="translated">Par exemple, même si vous avez vérifié pour s’assurer qu’un fichier existe, il peut être supprimé avant que vous pouvez l’ouvrir, ou il peut être endommagé.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In that case, trying to open the file by instantiating a <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> object or calling the <ph id="ph2">&lt;xref:System.IO.File.Open%2A&gt;</ph> method may throw a <ph id="ph3">&lt;xref:System.IO.FileNotFoundException&gt;</ph> exception.</source>
          <target state="translated">Dans ce cas, la tentative d’ouverture du fichier en instanciant une <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> objet ou en appelant le <ph id="ph2">&lt;xref:System.IO.File.Open%2A&gt;</ph> méthode peut lever un <ph id="ph3">&lt;xref:System.IO.FileNotFoundException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In these cases, you should use exception handling to recover from the error.</source>
          <target state="translated">Dans ce cas, vous devez utiliser la gestion des exceptions pour récupérer de l’erreur.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">**</bpt>System failures.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Défaillances du système.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A system failure is a run-time error that cannot be handled programmatically in a meaningful way.</source>
          <target state="translated">Une défaillance du système est une erreur d’exécution qui ne peuvent pas être gérée par programme de manière explicite.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, any method can throw an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception if the common language runtime is unable to allocate additional memory.</source>
          <target state="translated">Par exemple, une méthode peut lever une <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception si le common language runtime ne peut pas allouer de mémoire supplémentaire.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Ordinarily, system failures are not handled by using exception handling.</source>
          <target state="translated">En règle générale, les défaillances du système ne sont pas gérées à l’aide de la gestion des exceptions.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Instead, you may be able to use an event such as <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> and call the <ph id="ph2">&lt;xref:System.Environment.FailFast%2A?displayProperty=nameWithType&gt;</ph> method to log exception information and notify the user of the failure before the application terminates.</source>
          <target state="translated">Au lieu de cela, vous pourrez peut-être utiliser un événement comme <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> et appelez le <ph id="ph2">&lt;xref:System.Environment.FailFast%2A?displayProperty=nameWithType&gt;</ph> méthode afin de consigner des informations sur les exceptions et informer l’utilisateur de l’échec avant l’arrêt de l’application.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Try/catch blocks</source>
          <target state="translated">Try/catch (blocs)</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into <ph id="ph1">`try`</ph> blocks and <ph id="ph2">`catch`</ph> blocks.</source>
          <target state="translated">Le common language runtime fournit un modèle de gestion des exceptions qui est basé sur la représentation des exceptions sous forme d’objets et la séparation du code de programme et des exceptions de code dans <ph id="ph1">`try`</ph> blocs et <ph id="ph2">`catch`</ph> blocs.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>There can be one or more <ph id="ph1">`catch`</ph> blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.</source>
          <target state="translated">Il peut y avoir un ou plusieurs <ph id="ph1">`catch`</ph> blocs, chacun conçu pour gérer un type particulier d’exception, ou un seul bloc conçu pour intercepter une exception plus spécifique qu’un autre bloc.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a <ph id="ph1">`try`</ph> statement and is called a <ph id="ph2">`try`</ph> block.</source>
          <target state="translated">Si une application gère les exceptions qui se produisent pendant l’exécution d’un bloc de code de l’application, le code doit être placé dans un <ph id="ph1">`try`</ph> instruction et est appelé un <ph id="ph2">`try`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Application code that handles exceptions thrown by a <ph id="ph1">`try`</ph> block is placed within a <ph id="ph2">`catch`</ph> statement and is called a <ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">Code d’application qui gère les exceptions levées par un <ph id="ph1">`try`</ph> bloc est placé dans un <ph id="ph2">`catch`</ph> instruction et est appelé un <ph id="ph3">`catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Zero or more <ph id="ph1">`catch`</ph> blocks are associated with a <ph id="ph2">`try`</ph> block, and each <ph id="ph3">`catch`</ph> block includes a type filter that determines the types of exceptions it handles.</source>
          <target state="translated">Zéro ou plusieurs <ph id="ph1">`catch`</ph> blocs sont associés un <ph id="ph2">`try`</ph> bloc et chaque <ph id="ph3">`catch`</ph> bloc inclut un filtre de type qui détermine les types d’exceptions à gérer.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When an exception occurs in a <ph id="ph1">`try`</ph> block, the system searches the associated <ph id="ph2">`catch`</ph> blocks in the order they appear in application code, until it locates a <ph id="ph3">`catch`</ph> block that handles the exception.</source>
          <target state="translated">Si une exception se produit dans un <ph id="ph1">`try`</ph> bloc, le système recherche associé <ph id="ph2">`catch`</ph> blocs dans l’ordre d’apparition dans le code d’application, jusqu'à ce qu’il trouve un <ph id="ph3">`catch`</ph> bloc qui gère l’exception.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A <ph id="ph1">`catch`</ph> block handles an exception of type <ph id="ph2">`T`</ph> if the type filter of the catch block specifies <ph id="ph3">`T`</ph> or any type that <ph id="ph4">`T`</ph> derives from.</source>
          <target state="translated">A <ph id="ph1">`catch`</ph> bloc gère une exception de type <ph id="ph2">`T`</ph> si le filtre de type du bloc catch spécifie <ph id="ph3">`T`</ph> ou tout autre type qui <ph id="ph4">`T`</ph> dérive.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The system stops searching after it finds the first <ph id="ph1">`catch`</ph> block that handles the exception.</source>
          <target state="translated">Le système arrête la recherche après avoir trouvé le premier <ph id="ph1">`catch`</ph> bloc qui gère l’exception.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For this reason, in application code, a <ph id="ph1">`catch`</ph> block that handles a type must be specified before a <ph id="ph2">`catch`</ph> block that handles its base types, as demonstrated in the example that follows this section.</source>
          <target state="translated">Pour cette raison, dans le code d’application, un <ph id="ph1">`catch`</ph> bloc qui gère un type doit être spécifié avant un <ph id="ph2">`catch`</ph> bloc qui gère ses types de base, comme illustré dans l’exemple qui suit cette section.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A catch block that handles <ph id="ph1">`System.Exception`</ph> is specified last.</source>
          <target state="translated">Un bloc catch qui gère les <ph id="ph1">`System.Exception`</ph> est spécifié en dernier.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If none of the <ph id="ph1">`catch`</ph> blocks associated with the current <ph id="ph2">`try`</ph> block handle the exception, and the current <ph id="ph3">`try`</ph> block is nested within other <ph id="ph4">`try`</ph> blocks in the current call, the <ph id="ph5">`catch`</ph> blocks associated with the next enclosing <ph id="ph6">`try`</ph> block are searched.</source>
          <target state="translated">Si aucun de la <ph id="ph1">`catch`</ph> blocs associés en cours <ph id="ph2">`try`</ph> bloc gérer l’exception et en cours <ph id="ph3">`try`</ph> bloc est imbriqué dans d’autres <ph id="ph4">`try`</ph> blocs dans l’appel en cours, le <ph id="ph5">`catch`</ph> blocs associés à la suivante englobant <ph id="ph6">`try`</ph> bloc sont recherchés.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If no <ph id="ph1">`catch`</ph> block for the exception is found, the system searches previous nesting levels in the current call.</source>
          <target state="translated">Si aucun <ph id="ph1">`catch`</ph> bloc est trouvé pour l’exception, le système recherche les niveaux d’imbrication précédents dans l’appel actuel.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If no <ph id="ph1">`catch`</ph> block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a <ph id="ph2">`catch`</ph> block that handles the exception.</source>
          <target state="translated">Si aucun <ph id="ph1">`catch`</ph> bloquer pour l’exception se trouve dans l’appel en cours, l’exception remonte la pile des appels et le frame de pile précédent est recherché dans un <ph id="ph2">`catch`</ph> bloc qui gère l’exception.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The search of the call stack continues until the exception is handled or until no more frames exist on the call stack.</source>
          <target state="translated">La recherche de la pile des appels se poursuit jusqu'à ce que l’exception est gérée ou jusqu'à ce que des frames sont présents sur la pile des appels.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If the top of the call stack is reached without finding a <ph id="ph1">`catch`</ph> block that handles the exception, the default exception handler handles it and the application terminates.</source>
          <target state="translated">Si le haut de la pile des appels est atteint sans recherche un <ph id="ph1">`catch`</ph> bloc qui gère l’exception, le Gestionnaire d’exceptions par défaut et l’application s’arrête.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Exception type features</source>
          <target state="translated">Fonctions de type d’exception</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Exception types support the following features:</source>
          <target state="translated">Types d’exceptions prennent en charge les fonctionnalités suivantes :</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Human-readable text that describes the error.</source>
          <target state="translated">Texte contrôlable de visu qui décrit l’erreur.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem.</source>
          <target state="translated">Lorsqu’une exception se produit, le runtime fait un message texte disponible pour informer l’utilisateur de la nature de l’erreur et de suggérer des action pour résoudre le problème.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This text message is held in the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the exception object.</source>
          <target state="translated">Ce message textuel est contenu dans le <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> propriété de l’objet exception.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception.</source>
          <target state="translated">Lors de la création de l’objet exception, vous pouvez passer une chaîne de texte au constructeur pour décrire les détails de cette exception particulière.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If no error message argument is supplied to the constructor, the default error message is used.</source>
          <target state="translated">Si aucun argument de message d’erreur n’est fourni au constructeur, le message d’erreur par défaut est utilisé.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property.</source>
          <target state="translated">Pour plus d'informations, consultez la propriété <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The state of the call stack when the exception was thrown.</source>
          <target state="translated">L’état de la pile des appels lorsque l’exception a été levée.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property carries a stack trace that can be used to determine where the error occurs in the code.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> propriété conserve une trace de pile qui peut être utilisée pour déterminer où l’erreur se produit dans le code.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The stack trace lists all the called methods and the line numbers in the source file where the calls are made.</source>
          <target state="translated">La trace de pile répertorie toutes les méthodes appelées et les numéros de ligne dans le fichier source où les appels sont effectués.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Exception class properties</source>
          <target state="translated">Propriétés de classe d’exception</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <ph id="ph2">&lt;xref:System.Exception.StackTrace%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Exception.Message%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Exception.HelpLink%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Exception.HResult%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Exception.Source%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Exception.TargetSite%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Exception.Data%2A&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception&gt;</ph> classe inclut un nombre de propriétés qui permettent d’identifier l’emplacement du code, le type, le fichier d’aide et la raison de l’exception : <ph id="ph2">&lt;xref:System.Exception.StackTrace%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Exception.Message%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Exception.HelpLink%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Exception.HResult%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Exception.Source%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Exception.TargetSite%2A&gt;</ph>, et <ph id="ph9">&lt;xref:System.Exception.Data%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When a causal relationship exists between two or more exceptions, the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property maintains this information.</source>
          <target state="translated">Lors de l’existence d’une relation existe entre deux ou plusieurs exceptions, la <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété conserve ces informations.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The outer exception is thrown in response to this inner exception.</source>
          <target state="translated">L’exception externe levée en réponse à l’exception interne.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately.</source>
          <target state="translated">Le code qui gère l’exception externe peut utiliser les informations à partir de l’exception interne antérieure pour gérer l’erreur plus convenablement.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Supplementary information about the exception can be stored as a collection of key/value pairs in the <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property.</source>
          <target state="translated">Informations supplémentaires sur l’exception peuvent être stockées comme une collection de paires clé/valeur dans le <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
          <target state="translated">La chaîne de message d’erreur qui est passée au constructeur lors de la création de l’objet exception doit être localisée et peut être fournie à partir d’un fichier de ressources à l’aide de la <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For more information about localized resources, see the <bpt id="p1">[</bpt>Creating Satellite Assemblies<ept id="p1">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept> and <bpt id="p2">[</bpt>Packaging and Deploying Resources<ept id="p2">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> topics.</source>
          <target state="translated">Pour plus d’informations sur les ressources localisées, consultez le <bpt id="p1">[</bpt>création d’assemblys satellites<ept id="p1">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept> et <bpt id="p2">[</bpt>empaquetage et déploiement de ressources<ept id="p2">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> rubriques.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>To provide the user with extensive information about why the exception occurred, the <ph id="ph1">&lt;xref:System.Exception.HelpLink%2A&gt;</ph> property can hold a URL (or URN) to a help file.</source>
          <target state="translated">Pour fournir l’utilisateur avec des informations détaillées sur la raison pour laquelle l’exception s’est produite, le <ph id="ph1">&lt;xref:System.Exception.HelpLink%2A&gt;</ph> propriété peut contenir une URL (ou URN) vers un fichier d’aide.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Exception&gt;</ph> classe utilise HRESULT COR_E_EXCEPTION, dont la valeur est 0 x 80131500.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For a list of initial property values for an instance of the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class, see the <ph id="ph2">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructors.</source>
          <target state="translated">Pour obtenir la liste de valeurs de propriété initiales d’une instance de la <ph id="ph1">&lt;xref:System.Exception&gt;</ph> de classe, consultez la <ph id="ph2">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructeurs.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Performance considerations</source>
          <target state="translated">Considérations sur les performances</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Throwing or handling an exception consumes a significant amount of system resources and execution time.</source>
          <target state="translated">La levée ou la gestion d’une exception consomme une quantité importante de ressources système et les temps d’exécution.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control.</source>
          <target state="translated">Lever des exceptions que pour gérer des conditions vraiment extraordinaires, afin de ne pas gérer les événements prévisibles ou de contrôle de flux.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters.</source>
          <target state="translated">Par exemple, dans certains cas, par exemple lorsque vous développez une bibliothèque de classes, il est raisonnable de lever une exception si un argument de méthode n’est pas valide, parce que vous comptez votre méthode d’être appelée avec des paramètres valides.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred.</source>
          <target state="translated">Un argument de méthode non valide, si elle n’est pas le résultat d’une erreur d’utilisation, signifie que quelque chose d’anormal s’est produite.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data.</source>
          <target state="translated">Inversement, ne levez pas d’exception si l’entrée d’utilisateur n’est pas valide, car vous pouvez vous attendre les utilisateurs entrent parfois des données non valides.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Instead, provide a retry mechanism so users can enter valid input.</source>
          <target state="translated">Au lieu de cela, fournissent un mécanisme de nouvelle tentative pour permettre aux utilisateurs d’entrer une entrée valide.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Nor should you use exceptions to handle usage errors.</source>
          <target state="translated">Ni doit utiliser des exceptions pour gérer les erreurs d’utilisation.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Instead, use <bpt id="p1">[</bpt>assertions<ept id="p1">](/visualstudio/debugger/assertions-in-managed-code)</ept> to identify and correct usage errors.</source>
          <target state="translated">Au lieu de cela, utilisez <bpt id="p1">[</bpt>assertions<ept id="p1">](/visualstudio/debugger/assertions-in-managed-code)</ept> pour identifier et corriger les erreurs d’utilisation.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.</source>
          <target state="translated">En outre, ne levez pas d’exception lorsqu’un code de retour est suffisant ; ne sont pas convertis d’un code de retour pour une exception ; n’interceptez pas régulièrement une exception, l’ignorer et poursuivre le traitement.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Re-throwing an exception</source>
          <target state="translated">Génération répétée d’une exception</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In many cases, an exception handler simply wants to pass the exception on to the caller.</source>
          <target state="translated">Dans de nombreux cas, un gestionnaire d’exceptions veut simplement passer l’exception à l’appelant.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This most often occurs in:</source>
          <target state="translated">Ceci arrive le plus souvent dans :</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.</source>
          <target state="translated">Une bibliothèque de classes qui à son tour encapsule les appels aux méthodes dans la bibliothèque de classes .NET Framework ou d’autres bibliothèques de classes.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An application or library that encounters a fatal exception.</source>
          <target state="translated">Une application ou une bibliothèque qui rencontre une erreur fatale.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The exception handler can log the exception and then re-throw the exception.</source>
          <target state="translated">Le Gestionnaire d’exceptions peut enregistrer l’exception et lever à nouveau l’exception.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The recommended way to re-throw an exception is to simply use the <bpt id="p1">[</bpt>throw<ept id="p1">](~/docs/csharp/language-reference/keywords/throw.md)</ept> statement in C# and the <bpt id="p2">[</bpt>Throw<ept id="p2">](~/docs/visual-basic/language-reference/statements/throw-statement.md)</ept> statement in Visual Basic without including an expression.</source>
          <target state="translated">La méthode recommandée pour lever à nouveau une exception est simplement d’utiliser le <bpt id="p1">[</bpt>lever<ept id="p1">](~/docs/csharp/language-reference/keywords/throw.md)</ept> instruction en c# et la <bpt id="p2">[</bpt>lever<ept id="p2">](~/docs/visual-basic/language-reference/statements/throw-statement.md)</ept> instruction en Visual Basic, sans inclure une expression.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This ensures that all call stack information is preserved when the exception is propagated to the caller.</source>
          <target state="translated">Cela garantit que toutes les informations de pile des appels sont conservées lorsque l’exception est propagée à l’appelant.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example illustrates this.</source>
          <target state="translated">L'exemple suivant illustre ce comportement.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A string extension method, <ph id="ph1">`FindOccurrences`</ph>, wraps one or more calls to <ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> without validating its arguments beforehand.</source>
          <target state="translated">Une méthode d’extension de chaîne, <ph id="ph1">`FindOccurrences`</ph>, inclut un ou plusieurs appels à <ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> sans valider au préalable de ses arguments.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A caller then calls <ph id="ph1">`FindOccurrences`</ph> twice.</source>
          <target state="translated">Un appelant appelle ensuite <ph id="ph1">`FindOccurrences`</ph> à deux reprises.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In the second call to <ph id="ph1">`FindOccurrences`</ph>, the caller passes a <ph id="ph2">`null`</ph> as the search string, which cases the <ph id="ph3">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to throw an <ph id="ph4">&lt;xref:System.ArgumentNullException&gt;</ph> exception.</source>
          <target state="translated">Dans le deuxième appel à <ph id="ph1">`FindOccurrences`</ph>, l’appelant passe un <ph id="ph2">`null`</ph> comme chaîne de recherche, les cas les <ph id="ph3">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> méthode pour lever une <ph id="ph4">&lt;xref:System.ArgumentNullException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This exception is handled by the <ph id="ph1">`FindOccurrences`</ph> method and passed back to the caller.</source>
          <target state="translated">Cette exception est gérée par le <ph id="ph1">`FindOccurrences`</ph> (méthode) et passé renvoyés à l’appelant.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.</source>
          <target state="translated">Étant donné que l’instruction throw est utilisée sans expression, la sortie de l’exemple montre que la pile des appels est conservée.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In contrast, if the exception is re-thrown by using the</source>
          <target state="translated">En revanche, si l’exception est levée à nouveau à l’aide de la</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>statement, the full call stack is not preserved, and the example would generate the following output:</source>
          <target state="translated">instruction, la pile des appels n’est pas conservée, et l’exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception.</source>
          <target state="translated">Une solution légèrement plus lourde consiste à lever une exception et pour conserver les informations de pile des appels de l’exception d’origine de l’exception interne.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The caller can then use the new exception's <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to retrieve stack frame and other information about the original exception.</source>
          <target state="translated">L’appelant peut ensuite utiliser la nouvelle exception <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété à récupérer le frame de pile et d’autres informations relatives à l’exception d’origine.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In this case, the throw statement is:</source>
          <target state="translated">Dans ce cas, l’instruction throw est :</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The user code that handles the exception has to know that the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property contains information about the original exception, as the following exception handler illustrates.</source>
          <target state="translated">Le code utilisateur qui gère l’exception est de savoir que le <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété contient des informations sur l’exception d’origine, comme l’illustre le Gestionnaire d’exceptions.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Choosing standard exceptions</source>
          <target state="translated">Choix d’exceptions standard</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception.</source>
          <target state="translated">Lorsque vous devez lever une exception, vous pouvez souvent utiliser un type d’exception dans le .NET Framework au lieu d’implémenter une exception personnalisée.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You should use a standard exception type under these two conditions:</source>
          <target state="translated">Vous devez utiliser un type d’exception standard dans ces deux conditions :</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method).</source>
          <target state="translated">Vous sont lever une exception provoquée par une erreur d’utilisation (autrement dit, par une erreur dans la logique du programme effectuée par le développeur qui appelle votre méthode).</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Typically, you would throw an exception such as <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>, <ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph>, <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>, or <ph id="ph4">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">En règle générale, vous lèverait une exception comme <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>, <ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph>, <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>, ou <ph id="ph4">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it.</source>
          <target state="translated">La chaîne que vous fournissez à un constructeur de l’objet exception lors de l’instanciation de l’objet exception doit décrire l’erreur afin que le développeur peut corriger.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property.</source>
          <target state="translated">Pour plus d'informations, consultez la propriété <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You are handling an error that can be communicated to the caller with an existing .NET Framework exception.</source>
          <target state="translated">Vous gérez une erreur pouvant être communiqué à l’appelant avec une exception .NET Framework existante.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You should throw the most derived exception possible.</source>
          <target state="translated">Vous devez lever l’exception la plus dérivée possible.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <ph id="ph1">&lt;xref:System.ComponentModel.InvalidEnumArgumentException&gt;</ph> (the most derived class) rather than an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Par exemple, si une méthode requiert un argument d’être un membre valide d’un type énumération, vous devez lever une <ph id="ph1">&lt;xref:System.ComponentModel.InvalidEnumArgumentException&gt;</ph> (la classe dérivée le meilleur) plutôt qu’une <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following table lists common exception types and the conditions under which you would throw them.</source>
          <target state="translated">Le tableau suivant répertorie les types d’exception communs et les conditions dans lesquelles vous les lèverait.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Exception</source>
          <target state="translated">Exception</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Condition</source>
          <target state="translated">Condition</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A non-null argument that is passed to a method is invalid.</source>
          <target state="translated">Un argument non null est passé à une méthode n’est pas valide.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An argument that is passed to a method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Un argument est passé à une méthode est <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An argument is outside the range of valid values.</source>
          <target state="translated">Un argument est en dehors de la plage de valeurs valides.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Part of a directory path is not valid.</source>
          <target state="translated">Partie d’un chemin de répertoire n’est pas valide.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The denominator in an integer or <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> division operation is zero.</source>
          <target state="translated">Le dénominateur dans un entier ou <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> opération de division est zéro.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A drive is unavailable or does not exist.</source>
          <target state="translated">Un lecteur n’est pas disponible ou n’existe pas.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A file does not exist.</source>
          <target state="translated">Un fichier n’existe pas.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A value is not in an appropriate format to be converted from a string by a conversion method such as <ph id="ph1">`Parse`</ph>.</source>
          <target state="translated">Une valeur n’est pas dans un format approprié à convertir à partir d’une chaîne par une méthode de conversion telles que <ph id="ph1">`Parse`</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An index is outside the bounds of an array or collection.</source>
          <target state="translated">Un index est en dehors des limites d’un tableau ou une collection.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A method call is invalid in an object's current state.</source>
          <target state="translated">Un appel de méthode n’est pas valide dans l’état actuel d’un objet.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The specified key for accessing a member in a collection cannot be found.</source>
          <target state="translated">Impossible de trouver la clé spécifiée pour l’accès à un membre d’une collection.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A method or operation is not implemented.</source>
          <target state="translated">Une méthode ou l’opération n’est pas implémentée.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A method or operation is not supported.</source>
          <target state="translated">Une méthode ou l’opération n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An operation is performed on an object that has been disposed.</source>
          <target state="translated">Une opération est effectuée sur un objet qui a été supprimé.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An arithmetic, casting, or conversion operation results in an overflow.</source>
          <target state="translated">Une opération arithmétique, de casting ou de conversion engendre un dépassement de capacité.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A path or file name exceeds the maximum system-defined length.</source>
          <target state="translated">Un chemin d’accès ou nom de fichier dépasse la longueur maximale définie par le système.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The operation is not supported on the current platform.</source>
          <target state="translated">L’opération n’est pas pris en charge sur la plateforme actuelle.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An array with the wrong number of dimensions is passed to a method.</source>
          <target state="translated">Un tableau ayant un nombre incorrect de dimensions est passé à une méthode.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The time interval allotted to an operation has expired.</source>
          <target state="translated">L’intervalle de temps alloué à une opération a expiré.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An invalid Uniform Resource Identifier (URI) is used.</source>
          <target state="translated">Un non valide ressource identificateur URI (Uniform) est utilisé.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Implementing custom exceptions</source>
          <target state="translated">Implémentation des exceptions personnalisées</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:</source>
          <target state="translated">Dans les cas suivants, à l’aide d’une exception .NET Framework existante pour gérer une condition d’erreur n’est pas suffisante :</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.</source>
          <target state="translated">Lorsque l’exception indique une erreur de programme unique qui ne peut pas être mappée à une exception .NET Framework existante.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception.</source>
          <target state="translated">Lorsque l’exception requiert que la gestion est différente de la gestion appropriée pour une exception .NET Framework existante, ou l’exception doit être de lever l’ambiguïté à partir d’une exception semblable.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, if you throw an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.</source>
          <target state="translated">Par exemple, si vous levez une <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception lors de l’analyse de la représentation numérique d’une chaîne qui est en dehors de la plage du type intégral cible, vous ne souhaitez pas utiliser la même exception pour une erreur qui résulte de l’appelant ne fournit ne pas la valeurs de contraintes appropriées lors de l’appel de la méthode.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class is the base class of all exceptions in the .NET Framework.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception&gt;</ph> est la classe de base de toutes les exceptions dans le .NET Framework.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Many derived classes rely on the inherited behavior of the members of the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class; they do not override the members of <ph id="ph2">&lt;xref:System.Exception&gt;</ph>, nor do they define any unique members.</source>
          <target state="translated">De nombreuses classes dérivées s’appuient sur le comportement hérité des membres de la <ph id="ph1">&lt;xref:System.Exception&gt;</ph> classe ; ils ne remplacent pas les membres de <ph id="ph2">&lt;xref:System.Exception&gt;</ph>, ni de faire les membres uniques.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>To define your own exception class:</source>
          <target state="translated">Pour définir votre propre classe d’exception :</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Define a class that inherits from <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Définissez une classe qui hérite de <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If necessary, define any unique members needed by your class to provide additional information about the exception.</source>
          <target state="translated">Si nécessaire, définissez les membres uniques requis par votre classe pour fournir des informations supplémentaires sur l’exception.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, the <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> class includes a <ph id="ph2">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property that specifies the name of the parameter whose argument caused the exception, and the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> property includes a <ph id="ph4">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A&gt;</ph> property that indicates the time-out interval.</source>
          <target state="translated">Par exemple, le <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> classe inclut un <ph id="ph2">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> propriété qui spécifie le nom du paramètre dont l’argument a provoqué l’exception, et le <ph id="ph3">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> propriété inclut un <ph id="ph4">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A&gt;</ph> propriété qui indique le délai d’attente.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If necessary, override any inherited members whose functionality you want to change or modify.</source>
          <target state="translated">Si nécessaire, remplacer tous les membres hérités dont vous souhaitez modifier les fonctionnalités.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Note that most existing derived classes of <ph id="ph1">&lt;xref:System.Exception&gt;</ph> do not override the behavior of inherited members.</source>
          <target state="translated">Notez qu’existant de la plupart des classes dérivées de <ph id="ph1">&lt;xref:System.Exception&gt;</ph> ne remplacent pas le comportement des membres hérités.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Determine whether your custom exception object is serializable.</source>
          <target state="translated">Déterminer si votre objet d’exception personnalisé est sérialisable.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context.</source>
          <target state="translated">Sérialisation vous permet d’enregistrer des informations sur l’exception et autorise les informations sur les exceptions d’être partagées par un serveur et un proxy client dans un contexte de la communication à distance.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>To make the exception object serializable, mark it with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
          <target state="translated">Pour rendre l’objet exception sérialisable, marquez-le avec le <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribut.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Define the constructors of your exception class.</source>
          <target state="translated">Définir les constructeurs de votre classe d’exception.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Typically, exception classes have one or more of the following constructors:</source>
          <target state="translated">En règle générale, les classes d’exceptions ont un ou plusieurs des constructeurs suivants :</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><ph id="ph1">&lt;xref:System.Exception.%23ctor&gt;</ph>, which uses default values to initialize the properties of a new exception object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.%23ctor&gt;</ph>, qui utilise les valeurs par défaut pour initialiser les propriétés d’un nouvel objet d’exception.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.String%29&gt;</ph>, which initializes a new exception object with a specified error message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.String%29&gt;</ph>, qui initialise un nouvel objet d’exception avec un message d’erreur spécifié.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29&gt;</ph>, which initializes a new exception object with a specified error message and inner exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29&gt;</ph>, qui initialise un nouvel objet d’exception avec une erreur spécifiée message et l’exception interne.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29&gt;</ph>, which is a <ph id="ph2">`protected`</ph> constructor that initializes a new exception object from serialized data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29&gt;</ph>, qui est un <ph id="ph2">`protected`</ph> constructeur qui initialise un nouvel objet d’exception à partir des données sérialisées.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You should implement this constructor if you've chosen to make your exception object serializable.</source>
          <target state="translated">Vous devez implémenter ce constructeur si vous avez choisi de rendre votre objet d’exception sérialisable.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example illustrates the use of a custom exception class.</source>
          <target state="translated">L’exemple suivant illustre l’utilisation d’une classe d’exception personnalisée.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>It defines a <ph id="ph1">`NotPrimeException`</ph> exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime.</source>
          <target state="translated">Il définit un <ph id="ph1">`NotPrimeException`</ph> exception qui est levée lorsqu’un client essaie de récupérer d’une séquence de nombres premiers en spécifiant un numéro de départ n’est pas principal.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The exception defines a new property, <ph id="ph1">`NonPrime`</ph>, that returns the non-prime number that caused the exception.</source>
          <target state="translated">L’exception définit une nouvelle propriété, <ph id="ph1">`NonPrime`</ph>, qui retourne la non-nombre premier a provoqué l’exception.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Besides implementing a protected parameterless constructor and a constructor with <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> parameters for serialization, the <ph id="ph3">`NotPrimeException`</ph> class defines three additional constructors to support the <ph id="ph4">`NonPrime`</ph> property.</source>
          <target state="translated">Outre l’implémentation d’un constructeur sans paramètre protégé et un constructeur avec <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> et <ph id="ph2">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> paramètres pour la sérialisation, le <ph id="ph3">`NotPrimeException`</ph> classe définit trois constructeurs supplémentaires pour prendre en charge le <ph id="ph4">`NonPrime`</ph> propriété.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Each constructor calls a base class constructor in addition to preserving the value of the non-prime number.</source>
          <target state="translated">Chaque constructeur appelle un constructeur de classe de base en plus de conserver la valeur des nombres premiers.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">`NotPrimeException`</ph> class is also marked with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
          <target state="translated">Le <ph id="ph1">`NotPrimeException`</ph> est également marquée avec la <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribut.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">`PrimeNumberGenerator`</ph> class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor.</source>
          <target state="translated">La <ph id="ph1">`PrimeNumberGenerator`</ph> classe indiqué dans l’exemple suivant utilise le crible d’Ératosthène pour calculer la séquence de nombres premiers de 2 à une limite spécifiée par le client dans l’appel à son constructeur de classe.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">`GetPrimesFrom`</ph> method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a <ph id="ph2">`NotPrimeException`</ph> if that lower limit is not a prime number.</source>
          <target state="translated">Le <ph id="ph1">`GetPrimesFrom`</ph> méthode retourne tous les nombres premiers qui sont supérieurs ou égaux à la limite inférieure spécifiée, mais lève une <ph id="ph2">`NotPrimeException`</ph> si ce seuil n’est pas un nombre premier.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example makes two calls to the <ph id="ph1">`GetPrimesFrom`</ph> method with non-prime numbers, one of which crosses application domain boundaries.</source>
          <target state="translated">L’exemple suivant effectue deux appels à la <ph id="ph1">`GetPrimesFrom`</ph> méthode avec les nombres non premiers, dont dépasse les limites du domaine d’application.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In both cases, the exception is thrown and successfully handled in client code.</source>
          <target state="translated">Dans les deux cas, l’exception est levée et gérée avec succès dans le code client.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Windows Runtime and <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph></source>
          <target state="translated">Windows Runtime et <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> for <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph>, some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames.</source>
          <target state="translated">Dans <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> pour <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph>, certaines informations sur l’exception sont généralement perdues lorsqu’une exception est propagée par le biais des frames de pile non .NET Framework.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> and <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, the common language runtime continues to use the original <ph id="ph3">&lt;xref:System.Exception&gt;</ph> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> et <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, le common language runtime continue à utiliser la version d’origine <ph id="ph3">&lt;xref:System.Exception&gt;</ph> objet qui a été levée, sauf si cette exception a été modifiée dans un frame de pile non .NET Framework.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example demonstrates a <ph id="ph1">`catch`</ph> block that is defined to handle <ph id="ph2">&lt;xref:System.ArithmeticException&gt;</ph> errors.</source>
          <target state="translated">L’exemple suivant montre un <ph id="ph1">`catch`</ph> bloc qui est défini pour gérer <ph id="ph2">&lt;xref:System.ArithmeticException&gt;</ph> erreurs.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This <ph id="ph1">`catch`</ph> block also catches <ph id="ph2">&lt;xref:System.DivideByZeroException&gt;</ph> errors, because <ph id="ph3">&lt;xref:System.DivideByZeroException&gt;</ph> derives from <ph id="ph4">&lt;xref:System.ArithmeticException&gt;</ph> and there is no <ph id="ph5">`catch`</ph> block explicitly defined for <ph id="ph6">&lt;xref:System.DivideByZeroException&gt;</ph> errors.</source>
          <target state="translated">Cela <ph id="ph1">`catch`</ph> également bloquer les captures <ph id="ph2">&lt;xref:System.DivideByZeroException&gt;</ph> erreurs, car <ph id="ph3">&lt;xref:System.DivideByZeroException&gt;</ph> dérive <ph id="ph4">&lt;xref:System.ArithmeticException&gt;</ph> et qu’il existe aucune <ph id="ph5">`catch`</ph> bloc défini explicitement pour <ph id="ph6">&lt;xref:System.DivideByZeroException&gt;</ph> erreurs.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="T:System.Exception">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</source>
          <target state="translated">Ce constructeur initialise la propriété <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> de la nouvelle instance en lui assignant un message système qui décrit l'erreur et prend en compte la culture du système en cours.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>All the derived classes should provide this default constructor.</source>
          <target state="translated">Toutes les classes dérivées doivent fournir ce constructeur par défaut.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>Value</source>
          <target state="translated">Value</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">Référence Null (<ph id="ph1">`Nothing`</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>A system-supplied localized description.</source>
          <target state="translated">Description localisée fournie par le système.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>The following code example derives an <ph id="ph1">`Exception`</ph> that uses a predefined message.</source>
          <target state="translated">L’exemple de code suivant dérive un <ph id="ph1">`Exception`</ph> qui utilise un message prédéfini.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>The code demonstrates the use of the parameterless constructor for the derived class and the base <ph id="ph1">`Exception`</ph> class.</source>
          <target state="translated">Le code illustre l’utilisation du constructeur sans paramètre pour la classe dérivée et la base de <ph id="ph1">`Exception`</ph> classe.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String)">
          <source>The message that describes the error.</source>
          <target state="translated">Message décrivant l'erreur.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> avec un message d'erreur spécifié.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance by using the <ph id="ph2">`message`</ph> parameter.</source>
          <target state="translated">Ce constructeur initialise la <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> propriété de la nouvelle instance à l’aide de le <ph id="ph2">`message`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>If the <ph id="ph1">`message`</ph> parameter is <ph id="ph2">`null`</ph>, this is the same as calling the <ph id="ph3">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Si le <ph id="ph1">`message`</ph> paramètre est <ph id="ph2">`null`</ph>, cela revient à appeler la <ph id="ph3">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">Value</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">Référence Null (<ph id="ph1">`Nothing`</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>The error message string.</source>
          <target state="translated">Chaîne du message d'erreur.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>The following code example derives an <ph id="ph1">`Exception`</ph> for a specific condition.</source>
          <target state="translated">L’exemple de code suivant dérive un <ph id="ph1">`Exception`</ph> pour une condition spécifique.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base <ph id="ph1">`Exception`</ph> class.</source>
          <target state="translated">Le code illustre l’utilisation du constructeur qui prend un message spécifié par l’appelant comme paramètre pour la classe dérivée et la base de <ph id="ph1">`Exception`</ph> classe.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> qui contient les données d'objet sérialisées concernant l'exception levée.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> qui contient des informations contextuelles relatives à la source ou à la destination.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class with serialized data.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> avec des données sérialisées.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">Ce constructeur est appelé lors de la désérialisation pour reconstituer l’objet exception transmis sur un flux.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>sérialisation XML et SOAP<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The following code example defines a derived serializable <ph id="ph1">`Exception`</ph> class.</source>
          <target state="translated">L’exemple de code suivant définit une dérivée sérialisable <ph id="ph1">`Exception`</ph> classe.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph>) constructor.</source>
          <target state="translated">Le code impose une erreur de division par 0 et crée ensuite une instance de l’exception dérivée à l’aide du (<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph>) constructeur.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</source>
          <target state="translated">Le code sérialise l’instance dans un fichier, désérialise le fichier dans une nouvelle exception, qu’il lève, puis intercepte et affiche les données de l’exception.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;paramref name="info" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="info" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The class name is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="P:System.Exception.HResult" /&gt;</ph> is zero (0).</source>
          <target state="translated">Le nom de la classe est <ph id="ph1">&lt;see langword="null" /&gt;</ph> ou <ph id="ph2">&lt;see cref="P:System.Exception.HResult" /&gt;</ph> est zéro (0).</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">Message d'erreur qui explique la raison de l'exception.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception, or a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) if no inner exception is specified.</source>
          <target state="translated">Exception à l'origine de l'exception actuelle, ou une référence null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic) si aucune exception interne n'est spécifiée.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">Une exception levée en conséquence directe d'une exception précédente doit contenir une référence à celle-ci dans la propriété <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> retourne la même valeur que celle qui a été passée dans le constructeur ou une référence Null (<ph id="ph2">`Nothing`</ph> en Visual Basic), si la propriété <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> ne fournit pas la valeur de l'exception interne au constructeur.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">Value</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">La référence à l'exception interne.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The error message string.</source>
          <target state="translated">Chaîne du message d'erreur.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The following code example derives an <ph id="ph1">`Exception`</ph> for a specific condition.</source>
          <target state="translated">L’exemple de code suivant dérive un <ph id="ph1">`Exception`</ph> pour une condition spécifique.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base <ph id="ph1">`Exception`</ph> class.</source>
          <target state="translated">Le code illustre l’utilisation du constructeur qui accepte un message et une exception interne comme paramètres pour la classe dérivée et la base de <ph id="ph1">`Exception`</ph> classe.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Exception.Data">
          <source>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</source>
          <target state="translated">Obtient une collection de paires clé/valeur qui fournissent des informations supplémentaires définies par l’utilisateur sur l’exception.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> interface and contains a collection of user-defined key/value pairs.</source>
          <target state="translated">Objet qui implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> et contient une collection de paires clé/valeur définies par l'utilisateur.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The default is an empty collection.</source>
          <target state="translated">La valeur par défaut est une collection vide.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Exception.Data%2A&gt;</ph> property to store and retrieve supplementary information relevant to the exception.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> objet retourné par la <ph id="ph2">&lt;xref:System.Exception.Data%2A&gt;</ph> propriété pour stocker et récupérer des informations supplémentaires concernant l’exception.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The information is in the form of an arbitrary number of user-defined key/value pairs.</source>
          <target state="translated">Les informations sont sous la forme d’un nombre arbitraire de paires clé/valeur définies par l’utilisateur.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.</source>
          <target state="translated">Le composant clé de chaque paire clé/valeur est généralement une chaîne d’identification, tandis que le composant de valeur de la paire peut être tout type d’objet.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Key/Value Pair Security</source>
          <target state="translated">Sécurité des paires clé/valeur.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The key/value pairs stored in the collection returned by the <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property are not secure.</source>
          <target state="translated">Les paires clé/valeur stockées dans la collection retournée par la <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> propriété ne sont pas sécurisées.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers.</source>
          <target state="translated">Si votre application appelle une série imbriquée de routines et que chaque routine contient des gestionnaires d’exceptions, la pile des appels résultante contient une hiérarchie de ces gestionnaires d’exceptions.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler.</source>
          <target state="translated">Si une routine de niveau inférieur lève une exception, un gestionnaire d’exceptions de niveau supérieur dans la hiérarchie de la pile des appels peut lire ou de modifier les paires clé/valeur stockées dans la collection par n’importe quel autre gestionnaire d’exceptions.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.</source>
          <target state="translated">Cela signifie que vous devez vous assurer que les informations contenues dans les paires clé/valeur ne sont pas confidentielles et que votre application fonctionnera correctement si les informations contenues dans les paires clé/valeur sont endommagés.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Key Conflicts</source>
          <target state="translated">Conflits de clés</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>A key conflict occurs when different exception handlers specify the same key to access a key/value pair.</source>
          <target state="translated">Un conflit de clés se produit lorsque les gestionnaires d’exceptions différents spécifient la même clé pour accéder à une paire clé/valeur.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors.</source>
          <target state="translated">Soyez prudent lorsque vous développez votre application, car les conséquences d’un conflit de clés sont que les gestionnaires d’exceptions de niveau inférieur peuvent communiquer par inadvertance avec des gestionnaires d’exceptions plus haut niveau, et cette communication peut provoquer des erreurs de programmation subtiles.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>However, if you are cautious you can use key conflicts to enhance your application.</source>
          <target state="translated">Toutefois, si vous êtes prudent, vous pouvez utiliser les conflits de clé pour améliorer votre application.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Avoiding Key Conflicts</source>
          <target state="translated">Éviter les conflits de clés</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs.</source>
          <target state="translated">Éviter les conflits de clés en adoptant une convention d’affectation de noms pour générer des clés uniques pour les paires clé/valeur.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.</source>
          <target state="translated">Par exemple, une convention d’affectation de noms peut générer une clé qui se compose du nom séparé de votre application, la méthode qui fournit des informations supplémentaires pour la paire et un identificateur unique.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Suppose two applications, named Products and Suppliers, each has a method named Sales.</source>
          <target state="translated">Supposons que deux applications, nommées produits et fournisseurs, chacun possède une méthode nommée Sales.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product.</source>
          <target state="translated">La méthode ventes dans l’application produits fournit le numéro d’identification (la cote de stockage ou SKU) d’un produit.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The Sales method in the Suppliers application provides the identification number, or SID, of a supplier.</source>
          <target state="translated">La méthode ventes dans l’application fournisseurs fournit le numéro d’identification, ou SID, d’un fournisseur.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Consequently, the naming convention for this example yields the keys, "Products.Sales.SKU" and "Suppliers.Sales.SID".</source>
          <target state="translated">Par conséquent, la convention d’affectation de noms pour cet exemple produit les clés « Produits.ventes.CDs » et « Fournisseurs.ventes.SID ».</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Exploiting Key Conflicts</source>
          <target state="translated">Exploitation des conflits de clés</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing.</source>
          <target state="translated">Exploiter les conflits de clés à l’aide de la présence d’une ou plusieurs clés spéciales, préétablies pour contrôler le traitement.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers.</source>
          <target state="translated">Supposons, dans un scénario, que le Gestionnaire d’exceptions de niveau le plus élevé dans la hiérarchie de la pile des appels intercepte toutes les exceptions levées par les gestionnaires d’exceptions de niveau inférieur.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.</source>
          <target state="translated">Si une paire clé/valeur avec une clé spéciale existe, le Gestionnaire d’exceptions de haut niveau met en forme les paires clé/valeur restantes dans le <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> l’objet d’une certaine façon non standard ; sinon, les paires clé/valeur restantes sont mises en forme de façon normale.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler.</source>
          <target state="translated">Supposons à présent, dans un autre scénario, que le Gestionnaire d’exceptions à chaque niveau de la hiérarchie de la pile des appels intercepte l’exception levée par le Gestionnaire d’exceptions de niveau inférieur suivant.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>In addition, each exception handler knows the collection returned by the <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.</source>
          <target state="translated">De plus, chaque gestionnaire d’exceptions sait que la collection retournée par la <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> propriété contient un ensemble de paires clé/valeur qui sont accessibles avec un jeu préétablie de clés.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler.</source>
          <target state="translated">Chaque gestionnaire d’exceptions utilise l’ensemble préétablie de clés pour mettre à jour le composant de valeur de la paire clé/valeur correspondante avec des informations propres à ce gestionnaire d’exceptions.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>After the update process is complete, the exception handler throws the exception to the next higher-level exception handler.</source>
          <target state="translated">Une fois le processus de mise à jour terminé, le Gestionnaire d’exceptions lève l’exception au gestionnaire d’exceptions de niveau supérieur suivant.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</source>
          <target state="translated">Enfin, le Gestionnaire d’exceptions de niveau le plus élevé accède aux paires clé/valeur et affiche les informations de mise à jour consolidées à partir de tous les gestionnaires d’exceptions de niveau inférieur.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The following example demonstrates how to add and retrieve information using the <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple suivant montre comment ajouter et récupérer des informations à l’aide du <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Exception.GetBaseException">
          <source>When overridden in a derived class, returns the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that is the root cause of one or more subsequent exceptions.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, retourne la <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> qui est à l'origine d'une ou de plusieurs exceptions ultérieures.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Exception.GetBaseException">
          <source>The first exception thrown in a chain of exceptions.</source>
          <target state="translated">Première exception levée dans une chaîne d'exceptions.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Exception.GetBaseException">
          <source>If the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property of the current exception is a null reference (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), this property returns the current exception.</source>
          <target state="translated">Si la propriété <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> de l'exception actuelle est une référence null (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic), cette propriété retourne l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its <ph id="ph1">`InnerException`</ph> property.</source>
          <target state="translated">Une chaîne d’exceptions se compose d’un jeu d’exceptions où chaque exception de la chaîne a été levée en conséquence directe d’une exception référencée dans sa <ph id="ph1">`InnerException`</ph> propriété.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain.</source>
          <target state="translated">Pour une chaîne donnée, il peut y avoir exactement une exception qui est la cause première de toutes les autres exceptions dans la chaîne.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>This exception is called the base exception and its <ph id="ph1">`InnerException`</ph> property always contains a null reference.</source>
          <target state="translated">Cette exception est appelée à l’exception de base et ses <ph id="ph1">`InnerException`</ph> propriété contient toujours une référence null.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>For all exceptions in a chain of exceptions, the <ph id="ph1">`GetBaseException`</ph> method must return the same object (the base exception).</source>
          <target state="translated">Pour toutes les exceptions dans une chaîne d’exceptions, la <ph id="ph1">`GetBaseException`</ph> méthode doit retourner le même objet (l’exception de base).</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>Use the <ph id="ph1">`GetBaseException`</ph> method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</source>
          <target state="translated">Utilisez la <ph id="ph1">`GetBaseException`</ph> méthode lorsque vous souhaitez trouver la cause d’une exception mais que vous n’avez pas besoin d’informations sur les exceptions qui se sont produites entre l’exception en cours et la première exception.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>The following code example defines two derived <ph id="ph1">`Exception`</ph> classes.</source>
          <target state="translated">L’exemple de code suivant définit deux dérivées <ph id="ph1">`Exception`</ph> classes.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>It forces an exception and then throws it again with each of the derived classes.</source>
          <target state="translated">Il force une exception et lève à nouveau avec chacune des classes dérivées.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>The code shows the use of the <ph id="ph1">`GetBaseException`</ph> method to retrieve the original exception.</source>
          <target state="translated">Le code illustre l’utilisation de la <ph id="ph1">`GetBaseException`</ph> méthode pour récupérer l’exception d’origine.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>The <ph id="ph1">&lt;see langword="GetBaseException" /&gt;</ph> method is overridden in classes that require control over the exception content or format.</source>
          <target state="translated">Le <ph id="ph1">&lt;see langword="GetBaseException" /&gt;</ph> méthode est substituée dans les classes qui requièrent un contrôle le format ou le contenu de l’exception.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> qui contient les données d'objet sérialisées concernant l'exception levée.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> qui contient des informations contextuelles relatives à la source ou à la destination.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>When overridden in a derived class, sets the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> with information about the exception.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, définit <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> avec des informations sur l'exception.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">`GetObjectData`</ph> sets a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with all the exception object data targeted for serialization.</source>
          <target state="translated"><ph id="ph1">`GetObjectData`</ph> définit <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> avec toutes les données de l'objet exception ciblées en vue d'une sérialisation.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>During deserialization, the exception is reconstituted from the <ph id="ph1">`SerializationInfo`</ph> transmitted over the stream.</source>
          <target state="translated">Au cours de la désérialisation, l'exception est reconstituée à partir de l'<ph id="ph1">`SerializationInfo`</ph> transmises sur le flux.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The following code example defines a derived serializable <ph id="ph1">`Exception`</ph> class that implements <ph id="ph2">`GetObjectData`</ph>, which makes minor changes to two properties and then calls the base class to perform the serialization.</source>
          <target state="translated">L’exemple de code suivant définit une dérivée sérialisable <ph id="ph1">`Exception`</ph> classe qui implémente <ph id="ph2">`GetObjectData`</ph>, ce qui permet des modifications mineures à deux propriétés et puis appelle la classe de base pour effectuer la sérialisation.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The example forces a divide-by-0 error and then creates an instance of the derived exception.</source>
          <target state="translated">L’exemple impose une erreur de division par 0, puis crée une instance de l’exception dérivée.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</source>
          <target state="translated">Le code sérialise l’instance dans un fichier, désérialise le fichier dans une nouvelle exception, qu’il lève, puis intercepte et affiche les données de l’exception.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;paramref name="info" /&gt;</ph> parameter is a null reference (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="info" /&gt;</ph> est une référence null (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Exception.GetType">
          <source>Gets the runtime type of the current instance.</source>
          <target state="translated">Obtient le type au moment de l'exécution de l'instance actuelle.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Exception.GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the exact runtime type of the current instance.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> qui représente le type exact au moment de l'exécution de l'instance actuelle.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetType">
          <source>The <ph id="ph1">&lt;xref:System.Exception.GetType%2A&gt;</ph> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <ph id="ph2">&lt;xref:System.Object.GetType%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception.GetType%2A&gt;</ph> méthode existe pour prendre en charge l’infrastructure .NET Framework et appelle en interne la méthode fondamentale, <ph id="ph2">&lt;xref:System.Object.GetType%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="P:System.Exception.HelpLink">
          <source>Gets or sets a link to the help file associated with this exception.</source>
          <target state="translated">Obtient ou définit un lien vers le fichier d'aide associé à cette exception.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</source>
          <target state="translated">URN (Uniform Resource Name) ou URL (Uniform Resource Locator).</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>The return value, which represents a help file, is a URN or URL.</source>
          <target state="translated">La valeur de retour, qui représente un fichier d'aide, est une adresse URN ou URL.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>For example, the <ph id="ph1">`HelpLink`</ph> value could be:</source>
          <target state="translated">Par exemple, le <ph id="ph1">`HelpLink`</ph> valeur peut être :</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</source>
          <target state="translated">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>The following code example throws an <ph id="ph1">`Exception`</ph> that sets the <ph id="ph2">`HelpLink`</ph> property in its constructor and then catches the exception and displays <ph id="ph3">`HelpLink`</ph>.</source>
          <target state="translated">Le code suivant exemple lève une <ph id="ph1">`Exception`</ph> qui définit le <ph id="ph2">`HelpLink`</ph> propriété dans son constructeur, puis intercepte l’exception et l’affiche <ph id="ph3">`HelpLink`</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="P:System.Exception.HResult">
          <source>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</source>
          <target state="translated">Obtient ou définit HRESULT, valeur numérique codée qui est assignée à une exception spécifique.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The HRESULT value.</source>
          <target state="translated">Valeur HRESULT.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code.</source>
          <target state="translated">HRESULT est une valeur 32 bits, divisée en trois champs : un code de gravité, un code de service et un code d’erreur.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The severity code indicates whether the return value represents information, warning, or error.</source>
          <target state="translated">Le code de gravité indique si la valeur de retour représente plus d’informations, avertissement ou erreur.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The facility code identifies the area of the system responsible for the error.</source>
          <target state="translated">Le code de fonctionnalité identifie la zone du système responsable de l’erreur.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The error code is a unique number that is assigned to represent the exception.</source>
          <target state="translated">Le code d’erreur est un nombre unique affecté pour représenter une exception.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>Each exception is mapped to a distinct HRESULT.</source>
          <target state="translated">Chaque exception est mappée à une valeur HRESULT distincte.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>When managed code throws an exception, the runtime passes the HRESULT to the COM client.</source>
          <target state="translated">Lorsque le code managé lève une exception, le runtime passe la valeur HRESULT vers le client COM.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.</source>
          <target state="translated">Code non managé retourne une erreur HRESULT est converti en une exception qui est ensuite levée par le runtime.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>For information about HRESULT values and their corresponding .NET Framework exceptions, see <bpt id="p1">[</bpt>How to: Map HRESULTs and Exceptions<ept id="p1">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur les exceptions .NET Framework correspondantes et les valeurs HRESULT, consultez <bpt id="p1">[</bpt>Comment : mappage HRESULT et des Exceptions<ept id="p1">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>See <bpt id="p1">[</bpt>Common HRESULT Values<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx)</ept> in the Windows documentation for a list of the values you are most likely to encounter.</source>
          <target state="translated">Consultez <bpt id="p1">[</bpt>valeurs HRESULT courantes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx)</ept> dans la documentation de Windows pour obtenir la liste des valeurs que vous êtes susceptible de rencontrer.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Exception.HResult%2A&gt;</ph> property's setter is protected, whereas its getter is public.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, le <ph id="ph2">&lt;xref:System.Exception.HResult%2A&gt;</ph> setter de la propriété est protégé, tandis que sa méthode getter est public.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>In previous versions of the .NET Framework, both getter and setter are protected.</source>
          <target state="translated">Dans les versions précédentes du .NET Framework, les méthodes getter et setter sont protégés.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The following code example defines a derived <ph id="ph1">`Exception`</ph> class that sets the <ph id="ph2">`HResult`</ph> property to a custom value in its constructor.</source>
          <target state="translated">L’exemple de code suivant définit une dérivée <ph id="ph1">`Exception`</ph> classe qui définit le <ph id="ph2">`HResult`</ph> propriété à une valeur personnalisée dans son constructeur.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="P:System.Exception.InnerException">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instance that caused the current exception.</source>
          <target state="translated">Obtient l'instance <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> qui a provoqué l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>An object that describes the error that caused the current exception.</source>
          <target state="translated">Objet décrivant l'erreur qui a provoqué l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property returns the same value as was passed into the <ph id="ph2">&lt;see cref="M:System.Exception.#ctor(System.String,System.Exception)" /&gt;</ph> constructor, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the inner exception value was not supplied to the constructor.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> retourne la même valeur que celle transmise au constructeur <ph id="ph2">&lt;see cref="M:System.Exception.#ctor(System.String,System.Exception)" /&gt;</ph>, ou <ph id="ph3">&lt;see langword="null" /&gt;</ph> si la valeur de l'exception interne n'a pas été fournie au constructeur.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>This property is read-only.</source>
          <target state="translated">Cette propriété est en lecture seule.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>When an exception <ph id="ph1">`X`</ph> is thrown as a direct result of a previous exception <ph id="ph2">`Y`</ph>, the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of <ph id="ph4">`X`</ph> should contain a reference to <ph id="ph5">`Y`</ph>.</source>
          <target state="translated">Lorsqu’une exception <ph id="ph1">`X`</ph> est levée en conséquence directe d’une exception précédente <ph id="ph2">`Y`</ph>, le <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété du <ph id="ph4">`X`</ph> doit contenir une référence à <ph id="ph5">`Y`</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>Use the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to obtain the set of exceptions that led to the current exception.</source>
          <target state="translated">Utilisez la propriété <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> pour obtenir l'ensemble d'exceptions ayant provoqué l'exception en cours.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>You can create a new exception that catches an earlier exception.</source>
          <target state="translated">Vous pouvez créer une nouvelle exception qui intercepte une exception antérieure.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</source>
          <target state="translated">Le code qui gère la deuxième exception peut utiliser les informations supplémentaires à partir de l’exception antérieure pour gérer l’erreur plus convenablement.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>Suppose that there is a function that reads a file and formats the data from that file.</source>
          <target state="translated">Supposons qu’il existe une fonction qui lit un fichier et met en forme les données à partir de ce fichier.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>In this example, as the code tries to read the file, an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> is thrown.</source>
          <target state="translated">Dans cet exemple, en tant que le code essaie de lire le fichier, un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The function catches the <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> and throws a <ph id="ph2">&lt;xref:System.IO.FileNotFoundException&gt;</ph>.</source>
          <target state="translated">La fonction intercepte le <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> et lève un <ph id="ph2">&lt;xref:System.IO.FileNotFoundException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> could be saved in the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.IO.FileNotFoundException&gt;</ph>, enabling the code that catches the <ph id="ph4">&lt;xref:System.IO.FileNotFoundException&gt;</ph> to examine the cause of the initial error.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> peut être enregistré dans le <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété de la <ph id="ph3">&lt;xref:System.IO.FileNotFoundException&gt;</ph>, permettre au code qui intercepte les <ph id="ph4">&lt;xref:System.IO.FileNotFoundException&gt;</ph> pour examiner la cause de l’erreur initiale.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété, qui conserve une référence à l’exception interne, est définie lors de l’initialisation de l’objet exception.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The following example demonstrates throwing and catching an exception that references an inner exception.</source>
          <target state="translated">L’exemple suivant montre comment lever et intercepter une exception qui fait référence à une exception interne.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="P:System.Exception.Message">
          <source>Gets a message that describes the current exception.</source>
          <target state="translated">Obtient un message qui décrit l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The error message that explains the reason for the exception, or an empty string ("").</source>
          <target state="translated">Message d'erreur qui explique la raison de l'exception ou bien chaîne vide ("").</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Error messages target the developer who is handling the exception.</source>
          <target state="translated">Messages d’erreur ciblent le développeur qui gère l’exception.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The text of the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property should completely describe the error and, when possible, should also explain how to correct the error.</source>
          <target state="translated">Le texte de la <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> doit décrire complètement l’erreur de propriété et, si possible, également expliquer comment corriger l’erreur.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period.</source>
          <target state="translated">Gestionnaires d’exceptions de niveau supérieur peuvent afficher le message aux utilisateurs finaux, donc vous devez vous assurer qu’il est grammaire correcte et que chaque phrase du message se termine par un point.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Do not use question marks or exclamation points.</source>
          <target state="translated">N’utilisez pas de points d’interrogation ou des points d’exclamation.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>If your application uses localized exception messages, you should ensure that they are accurately translated.</source>
          <target state="translated">Si votre application utilise des messages d’exception localisées, vous devez vous assurer qu’ils sont traduits correctement.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Do not disclose sensitive information in exception messages without checking for the appropriate permissions.</source>
          <target state="translated">Ne divulguent pas les informations sensibles dans les messages d’exception sans vérifier les autorisations appropriées.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The value of the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property is included in the information returned by <ph id="ph2">&lt;xref:System.Exception.ToString%2A&gt;</ph>.The <ph id="ph3">&lt;xref:System.Exception.Message%2A&gt;</ph> property is set only when creating an <ph id="ph4">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">La valeur de la <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> propriété est incluse dans les informations retournées par <ph id="ph2">&lt;xref:System.Exception.ToString%2A&gt;</ph>. Le <ph id="ph3">&lt;xref:System.Exception.Message%2A&gt;</ph> propriété est définie uniquement lorsque vous créez un <ph id="ph4">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</source>
          <target state="translated">Si aucun message n’a été fourni au constructeur pour l’instance actuelle, le système fournit un message par défaut qui est mis en forme à l’aide de la culture système actuelle.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Windows Runtime and <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph></source>
          <target state="translated">Windows Runtime et <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> and <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> et <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, la fidélité des messages d’erreur à partir d’exceptions qui sont propagés à partir des types Windows Runtime et les membres qui ne font pas partie du .NET Framework est améliorée.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <ph id="ph1">&lt;xref:System.Exception&gt;</ph> objects.</source>
          <target state="translated">En particulier, messages d’exception à partir des extensions de composant Visual C++ (C + c++ / CX) sont désormais propagées dans .NET Framework <ph id="ph1">&lt;xref:System.Exception&gt;</ph> objets.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The following code example throws and then catches an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> exception and displays the exception's text message using the <ph id="ph2">&lt;xref:System.Exception.Message%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple de code suivant lève, puis intercepte un <ph id="ph1">&lt;xref:System.Exception&gt;</ph> exception et afficher du texte de l’exception du message à l’aide de la <ph id="ph2">&lt;xref:System.Exception.Message%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>If you throw an exception from a property, and you need to refer in the text of <ph id="ph1">&lt;see cref="P:System.Exception.Message" /&gt;</ph> to the property argument that you set or get, use "value" as the name of the property argument.</source>
          <target state="translated">Si vous levez une exception à partir d’une propriété, vous devez faire référence dans le texte de <ph id="ph1">&lt;see cref="P:System.Exception.Message" /&gt;</ph> à l’argument de propriété que vous définissez ou obtenez, utilisez « valeur » comme nom de l’argument de la propriété.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.Message" /&gt;</ph> property is overridden in classes that require control over message content or format.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="P:System.Exception.Message" /&gt;</ph> est substituée dans les classes qui requièrent un contrôle de contenu de message ou le format.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Application code typically accesses this property when it needs to display information about an exception that has been caught.</source>
          <target state="translated">Code de l’application accède généralement à cette propriété lorsqu’il a besoin pour afficher des informations concernant une exception a été interceptée.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The error message should be localized.</source>
          <target state="translated">Le message d’erreur doit être localisé.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="E:System.Exception.SerializeObjectState">
          <source>Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</source>
          <target state="translated">Se produit quand une exception est sérialisée pour créer un objet d'état d'exception qui contient des données sérialisées concernant l'exception.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The exception state object implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> interface.</source>
          <target state="translated">L’objet d’état exception implémente le <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>When the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event is subscribed to, the exception is deserialized and created as an empty exception.</source>
          <target state="translated">Lorsque le <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> est abonné à l’événement, l’exception est désérialisée et créée en tant qu’une exception vide.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The exception's constructor is not run, and the exception state is also deserialized.</source>
          <target state="translated">Le constructeur d’exception n’est pas exécuté, et l’état d’exception est également désérialisé.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A&gt;</ph> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A&gt;</ph> méthode de rappel de l’objet d’état exception est ensuite notifiée afin qu’il peut pousser des données désérialisées dans l’exception vide.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event enables transparent exception types to serialize and deserialize exception data.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> événement permet aux types d’exception transparents sérialiser et désérialiser des données d’exception.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.</source>
          <target state="translated">Code transparent peut exécuter des commandes dans les limites du jeu d’autorisations qu’il fonctionne, mais il ne peut pas exécuter, appeler, dériver d’ou contenir du code critique.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>If the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event is not subscribed to, deserialization occurs as usual using the <ph id="ph2">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> n'est pas abonné à l’événement, la désérialisation se produit comme d’habitude à l’aide de la <ph id="ph2">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>Typically, a handler for the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event is added in the exception's constructor to provide for its serialization.</source>
          <target state="translated">En règle générale, un gestionnaire pour le <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> événement est ajouté dans le constructeur d’exception à fournir pour sa sérialisation.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>But because the constructor is not executed when the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event handler executes, serializing a deserialized exception can throw a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception when you try to deserialize the exception.</source>
          <target state="translated">Mais étant donné que le constructeur n’est pas exécutée lorsque la <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> s’exécute le Gestionnaire d’événements, la sérialisation d’une exception désérialisée peut lever un <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception lorsque vous essayez de désérialiser l’exception.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>To avoid this, you should also add the handler for the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event in the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour éviter cela, vous devez également ajouter le gestionnaire pour le <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> événement dans le <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>See the Examples section for an illustration.</source>
          <target state="translated">Consultez la section exemples pour obtenir une illustration.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The following example defines a <ph id="ph1">`BadDivisionException`</ph> that handles the <ph id="ph2">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`BadDivisionException`</ph> qui gère la <ph id="ph2">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> événement.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>It also contains a state object, which is a nested structure named <ph id="ph1">`BadDivisionExceptionState`</ph> that implements the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> interface.</source>
          <target state="translated">Il contient également un objet d’état, qui est imbriquée structure nommée <ph id="ph1">`BadDivisionExceptionState`</ph> qui implémente le <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The <ph id="ph1">`BadDivisionException`</ph> exception is thrown when a floating-point division by zero occurs.</source>
          <target state="translated">Le <ph id="ph1">`BadDivisionException`</ph> exception est levée lorsqu’une division à virgule flottante par zéro se produit.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>During the first division by zero, the example instantiates a <ph id="ph1">`BadDivisionException`</ph> object, serializes it, and throws the exception.</source>
          <target state="translated">Lors de la première division par zéro, l’exemple instancie un <ph id="ph1">`BadDivisionException`</ph> sérialise l’objet et lève l’exception.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception.</source>
          <target state="translated">Ultérieures unités de division par zéro se produisent, l’exemple désérialise l’objet sérialisé précédemment, il resérialise et lève l’exception.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event handler both in the <ph id="ph2">`BadDivisionException`</ph> class constructor and in the <ph id="ph3">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">Pour assurer la sérialisation d’objets, la désérialisation, resérialisation et la désérialisation, l’exemple ajoute le <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> Gestionnaire d’événements à la fois dans le <ph id="ph2">`BadDivisionException`</ph> constructeur de classe et dans le <ph id="ph3">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType&gt;</ph> implémentation.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>If this event is subscribed to and used, all derived types that follow in the inheritance hierarchy must implement the same serialization mechanism.</source>
          <target state="translated">Si cet événement est abonné à et est utilisé, tous les types dérivés qui se suivent dans la hiérarchie d’héritage doivent implémenter le même mécanisme de sérialisation.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="P:System.Exception.Source">
          <source>Gets or sets the name of the application or the object that causes the error.</source>
          <target state="translated">Obtient ou définit le nom de l'application ou de l'objet qui est à l'origine de l'erreur.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Source">
          <source>The name of the application or the object that causes the error.</source>
          <target state="translated">Nom de l'application ou de l'objet qui est à l'origine de l'erreur.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Source">
          <source>If the <ph id="ph1">&lt;xref:System.Exception.Source%2A&gt;</ph> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Exception.Source%2A&gt;</ph> propriété n’est pas définie explicitement, le runtime définit automatiquement le nom de l’assembly d'où provient l’exception.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Source">
          <source>The following example throws an <ph id="ph1">`Exception`</ph> that sets the <ph id="ph2">`Source`</ph> property in its constructor and then catches the exception and displays <ph id="ph3">`Source`</ph>.</source>
          <target state="translated">L’exemple suivant lève une <ph id="ph1">`Exception`</ph> qui définit le <ph id="ph2">`Source`</ph> propriété dans son constructeur, puis intercepte l’exception et l’affiche <ph id="ph3">`Source`</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="P:System.Exception.Source">
          <source>The object must be a runtime <ph id="ph1">&lt;see cref="N:System.Reflection" /&gt;</ph> object</source>
          <target state="translated">L’objet doit être un objet <ph id="ph1">&lt;see cref="N:System.Reflection" /&gt;</ph> d’exécution.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="P:System.Exception.StackTrace">
          <source>Gets a string representation of the immediate frames on the call stack.</source>
          <target state="translated">Obtient une représentation sous forme de chaîne des frames immédiats sur la pile des appels.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>A string that describes the immediate frames of the call stack.</source>
          <target state="translated">Chaîne qui décrit les frames immédiates de la pile des appels.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The execution stack keeps track of all the methods that are in execution at a given instant.</source>
          <target state="translated">La pile d'exécution assure le suivi de toutes les méthodes qui sont en cours d'exécution à un moment donné.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>A trace of the method calls is called a stack trace.</source>
          <target state="translated">La trace des appels de méthodes s'appelle la trace de la pile.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.</source>
          <target state="translated">La liste de trace de pile offre un moyen de suivre la pile des appels au numéro de ligne dans la méthode où l’exception se produit.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property returns the frames of the call stack that originate at the location where the exception was thrown.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> propriété retourne les frames de la pile des appels qui proviennent de l’emplacement où l’exception a été levée.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>You can obtain information about additional frames in the call stack by creating a new instance of the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace?displayProperty=nameWithType&gt;</ph> class and using its <ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Vous pouvez obtenir des informations sur les frames supplémentaires dans la pile des appels en créant une nouvelle instance de la <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace?displayProperty=nameWithType&gt;</ph> classe et à l’aide de son <ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the <ph id="ph1">`throw`</ph> keyword).</source>
          <target state="translated">Le common language runtime (CLR) met à jour la trace de pile chaque fois qu’une exception est levée dans le code d’application (à l’aide de la <ph id="ph1">`throw`</ph> mot clé).</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown.</source>
          <target state="translated">Si l’exception a été levée dans une méthode qui est différente de celle où il a été levée à l’origine, la trace de pile contient à la fois l’emplacement dans la méthode où l’exception a été levée initialement et l’emplacement dans la méthode où l’exception a été de nouveau levée.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.</source>
          <target state="translated">Si l’exception est levée et levée ensuite à nouveau dans la même méthode, la trace de pile contient uniquement l’emplacement où l’exception a été levée et n’inclut pas l’emplacement où l’exception a été levée initialement.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> propriété peut ne pas rapporter autant d’appels de méthode comme prévu en raison des transformations de code, tel qu’incorporation (inlining), qui se produisent pendant l’optimisation.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The following code example throws an <ph id="ph1">`Exception`</ph> and then catches it and displays a stack trace using the <ph id="ph2">`StackTrace`</ph> property.</source>
          <target state="translated">Le code suivant exemple lève une <ph id="ph1">`Exception`</ph> intercepte et affiche une trace de pile à l’aide de la <ph id="ph2">`StackTrace`</ph> propriété.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The <ph id="ph1">&lt;see langword="StackTrace" /&gt;</ph> property is overridden in classes that require control over the stack trace content or format.</source>
          <target state="translated">Le <ph id="ph1">&lt;see langword="StackTrace" /&gt;</ph> est substituée dans les classes qui requièrent un contrôle sur le format ou le contenu de trace de pile.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>By default, the stack trace is captured immediately before an exception object is thrown.</source>
          <target state="translated">Par défaut, la trace de pile est capturée immédiatement avant un objet d’exception est levé.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>Use <ph id="ph1">&lt;see cref="P:System.Environment.StackTrace" /&gt;</ph> to get stack trace information when no exception is being thrown.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;see cref="P:System.Environment.StackTrace" /&gt;</ph> pour obtenir des informations de trace de pile quand aucune exception n’est levée.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="P:System.Exception.TargetSite">
          <source>Gets the method that throws the current exception.</source>
          <target state="translated">Obtient la méthode qui lève l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodBase" /&gt;</ph> that threw the current exception.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodBase" /&gt;</ph> qui a levé l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>If the method that throws this exception is not available and the stack trace is not a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic), <ph id="ph2">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> obtains the method from the stack trace.</source>
          <target state="translated">Si la méthode qui lève cette exception n’est pas disponible et la trace de pile n’est pas une référence null (<ph id="ph1">`Nothing`</ph> en Visual Basic), <ph id="ph2">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> Obtient la méthode de la trace de pile.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>If the stack trace is a null reference, <ph id="ph1">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> also returns a null reference.</source>
          <target state="translated">Si la trace de la pile est une référence nulle, <ph id="ph1">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> retourne également une référence nulle.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>The <ph id="ph1">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> propriété ne peut pas signaler correctement le nom de la méthode dans laquelle une exception a été levée si le Gestionnaire d’exceptions gère une exception au-delà des limites de domaine application.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>The following code example throws an <ph id="ph1">`Exception`</ph> and then catches it and displays the originating method using the <ph id="ph2">`TargetSite`</ph> property.</source>
          <target state="translated">Le code suivant exemple lève une <ph id="ph1">`Exception`</ph> intercepte et affiche la méthode d’origine à l’aide du <ph id="ph2">`TargetSite`</ph> propriété.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Exception.ToString">
          <source>Creates and returns a string representation of the current exception.</source>
          <target state="translated">Crée et retourne une chaîne représentant l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Exception.ToString">
          <source>A string representation of the current exception.</source>
          <target state="translated">Représentation sous forme de chaîne de l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source><ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> returns a representation of the current exception that is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> Retourne une représentation de l’exception actuelle est destinée à être compréhensible par les utilisateurs.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>Where the exception contains culture-sensitive data, the string representation returned by <ph id="ph1">`ToString`</ph> is required to take into account the current system culture.</source>
          <target state="translated">Lorsque l’exception contient des données sensibles à la culture, la représentation sous forme de chaîne retournée par <ph id="ph1">`ToString`</ph> est requis pour prendre en compte la culture système actuelle.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</source>
          <target state="translated">Bien qu’il n’existe aucune exigence exacte pour le format de la chaîne retournée, il doit essayer refléter la valeur de l’objet en tant que perçue par l’utilisateur.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> obtains the name of the class that threw the current exception, the message, the result of calling <ph id="ph2">&lt;xref:System.Exception.ToString%2A&gt;</ph> on the inner exception, and the result of calling <ph id="ph3">&lt;xref:System.Environment.StackTrace%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">L’implémentation par défaut de <ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> Obtient le nom de la classe qui a levé l’exception actuelle, le message, le résultat de l’appel de <ph id="ph2">&lt;xref:System.Exception.ToString%2A&gt;</ph> sur l’exception interne et le résultat de l’appel de <ph id="ph3">&lt;xref:System.Environment.StackTrace%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>If any of these members is <ph id="ph1">`null`</ph>, its value is not included in the returned string.</source>
          <target state="translated">Si une de ces membres est <ph id="ph1">`null`</ph>, sa valeur n’est pas incluse dans la chaîne retournée.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>If there is no error message or if it is an empty string (""), then no error message is returned.</source>
          <target state="translated">S’il n’existe aucun message d’erreur ou s’il s’agit d’une chaîne vide (" »), aucun message d’erreur est retourné.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>The name of the inner exception and the stack trace are returned only if they are not <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Le nom de l’exception interne et la trace de pile sont retournés uniquement si elles ne sont pas <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Cette méthode se substitue à <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>The following example causes an exception and displays the result of calling <ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> on that exception.</source>
          <target state="translated">L’exemple suivant provoque une exception et affiche le résultat de l’appel de <ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> sur cette exception.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>Note that the <ph id="ph1">&lt;xref:System.Exception.ToString%2A?displayProperty=nameWithType&gt;</ph> method is called implicitly when the Exception class instance appears in the argument list of the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Notez que la <ph id="ph1">&lt;xref:System.Exception.ToString%2A?displayProperty=nameWithType&gt;</ph> méthode est appelée implicitement lorsque l’instance de classe d’Exception apparaît dans la liste d’arguments de la <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>