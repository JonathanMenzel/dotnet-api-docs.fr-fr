<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a314918c1d567aa8e851e722e13a8cf0a79fc268" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48638252" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit une méthode qui prend en charge la mise en forme personnalisée de la valeur d'un objet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ICustomFormatter> interface inclut une méthode unique, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Lorsque cette interface est implémentée par un type référence ou valeur, la <xref:System.ICustomFormatter.Format%2A> méthode retourne une représentation sous forme de chaîne mise en forme personnalisée de la valeur d’un objet.  
  
 En règle générale, le <xref:System.ICustomFormatter> interface est implémentée avec le <xref:System.IFormatProvider> interface pour personnaliser le comportement de deux méthodes .NET Framework chaîne composite mise en forme qui incluent un <xref:System.IFormatProvider> paramètre. Plus précisément, le <xref:System.ICustomFormatter> interface peut fournir une mise en forme personnalisée de la valeur d’un objet passé à la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> et <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> méthodes.  
  
 En fournissant une représentation personnalisée de la valeur d’un objet nécessite que vous procédez comme suit :  
  
1.  Définissez une classe qui implémente le <xref:System.ICustomFormatter> interface et son membre unique, la <xref:System.ICustomFormatter.Format%2A> (méthode).  
  
2.  Définissez une classe qui implémente le <xref:System.IFormatProvider> interface et son membre unique, la <xref:System.IFormatProvider.GetFormat%2A> (méthode). Le <xref:System.IFormatProvider.GetFormat%2A> méthode retourne une instance de votre <xref:System.ICustomFormatter> implémentation. Souvent, une seule classe implémente à la fois <xref:System.ICustomFormatter> et <xref:System.IFormatProvider>. Dans de ce cas, la classe `GetFormat` implémentation retourne simplement une instance d’elle-même.  
  
3.  Passer le <xref:System.IFormatProvider> mise en œuvre en tant que le `provider` argument de la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> méthode ou une méthode comparable.  
  
 La méthode .NET Framework utilise alors votre mise en forme personnalisée au lieu de son propre.  
  
   
  
## Examples  
 L’exemple suivant implémente <xref:System.ICustomFormatter> pour permettre la mise en forme binaire, octales et hexadécimales de valeurs intégrales. Dans cet exemple, une classe unique, `IBinaryFormatter`, implémente à la fois <xref:System.ICustomFormatter> et <xref:System.IFormatProvider>. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode détermine si le `formatType` paramètre représente un <xref:System.ICustomFormatter> type. Le cas échéant, `BinaryFormatter` retourne une instance de lui-même ; sinon, elle retourne `null`. Son <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implémentation détermine si le paramètre de format est un des trois chaînes de format pris en charge (« B » pour le fichier binaire, « O » pour octal et « H » pour hexadécimal) et met en forme le `arg` paramètre correctement. Sinon, si `arg` n’est pas `null`, il appelle le `arg` du paramètre <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implémentation, s’il en existe, ou sa sans paramètre `ToString` méthode, si un n’est pas le cas. Si `arg` est `null`, la méthode retourne <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` peut ensuite être utilisé pour fournir la mise en forme personnalisée en passant un `BinaryFormatter` de l’objet en tant que le `provider` paramètre de la <xref:System.String.Format%2A> méthode, comme le montre l’exemple suivant.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Le common language runtime tente d’utiliser votre <see cref="T:System.ICustomFormatter" /> implémentation pour chaque élément de format dans une chaîne de format composite. Par conséquent, vous devez vous attendre que votre <see cref="T:System.ICustomFormatter" /> implémentation sera appelée pour fournir des services de mise en forme aux objets ou de valeurs qu’il est pas conçue pour gérer. Dans ce cas, votre <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> méthode doit appeler la méthode de mise en forme appropriée pour cet objet ou une valeur.  
  
Il existe deux types de <see cref="T:System.ICustomFormatter" /> implémentations : intrinsèque et l’extension.  
  
Les implémentations intrinsèques sont des implémentations qui fournissent la mise en forme personnalisée pour un objet défini par l’application. Dans ce cas, votre implémentation doit inclure les éléments suivants : 
-Définition de chaînes de format qui définissent la mise en forme de l’objet. Chaînes de format sont facultatifs. En règle générale, une chaîne de format « G » ou « g » définit le format général (ou plus couramment utilisé). Toutefois, vous êtes libre de définir toutes les chaînes de format que vous choisissez. Vous pouvez également décider s’ils respectent la casse.  
  
-Un test afin de garantir que le type de l’objet passé à votre <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> méthode est votre type défini par l’application. Si elle n’est pas le cas, vous devez appeler l’objet <see cref="T:System.IFormattable" /> implémentation, s’il en existe, ou son <see cref="M:System.Object.ToString" /> méthode, si elle n’est pas le cas. Il se peut que vous devez être prêt à gérer les exceptions à ces appels de méthode peuvent lever.  
  
-Code pour gérer une chaîne de format null, si votre implémentation prend en charge les chaînes de format. L’approche la plus courante consiste à remplacer une chaîne de format null avec le spécificateur de format général.  
  
-Code pour gérer toutes les chaînes de format qui prend en charge par votre implémentation.  
  
-Code pour gérer les chaînes de format que vous ne prennent pas en charge. L’approche la plus courante consiste à lever une <see cref="T:System.FormatException" />, bien que vous pouvez fournir la mise en forme par défaut.  
  
Implémentations d’extension sont des implémentations qui fournissent la mise en forme personnalisée pour un type qui a déjà la prise en charge la mise en forme. Par exemple, vous pouvez définir un <c>CustomerNumberFormatter</c> qui met en forme un type intégral avec des traits d’union entre des chiffres spécifiques. Dans ce cas, votre implémentation doit inclure les éléments suivants : 
-Définition de chaînes de format qui étendent la mise en forme de l’objet. Ces chaînes de format sont obligatoires, mais ils ne doivent pas entrer en conflit avec les chaînes de format existant du type. Par exemple, si vous étendez mise en forme pour le <see cref="T:System.Int32" /> type, vous ne devez pas implémenter les spécificateurs de format « C », « D », « E », « F » et « G », entre autres.  
  
-Un test qui a le type de l’objet passé à votre <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> méthode est un type dont votre extension de mise en forme prend en charge. Si elle n’est pas le cas, appelez l’objet <see cref="T:System.IFormattable" /> implémentation, s’il en existe un, ou sans paramètre de l’objet <see cref="M:System.Object.ToString" /> méthode, si elle n’est pas le cas. Il se peut que vous devez être prêt à gérer les exceptions à ces appels de méthode peuvent lever.  
  
-Code pour gérer toutes les chaînes de format qui prend en charge par votre extension.  
  
-Code pour gérer toutes les chaînes de format que votre extension ne prend pas en charge. Celles-ci doivent être transmises le type <see cref="T:System.IFormattable" /> implémentation. Il se peut que vous devez être prêt à gérer les exceptions à ces appels de méthode peuvent lever.</para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne de format contenant des spécifications de mise en forme.</param>
        <param name="arg">Objet à mettre en forme.</param>
        <param name="formatProvider">Objet qui fournit les informations de format concernant l'instance actuelle.</param>
        <summary>Convertit la valeur d'un objet spécifié en une chaîne équivalente à l'aide du format spécifié et des informations de mise en forme propres à la culture.</summary>
        <returns>Représentation sous forme de chaîne de la valeur de <paramref name="arg" />, mise en forme comme spécifié par <paramref name="format" /> et <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> est une méthode de rappel. Elle est appelée par une méthode qui prend en charge la mise en forme personnalisée, tel que <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> ou <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. L’implémentation est appelée une fois pour chaque élément de format dans un [chaîne de format composite](~/docs/standard/base-types/composite-formatting.md). Par exemple, dans l’instruction suivante, le <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> méthode est appelée trois fois.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 Le `arg` paramètre est l’objet dans la liste d’objets dont la position de base zéro correspond à l’index d’un élément de format particulier.  
  
 Le `format` paramètre contient une chaîne de format, ce qui est le `formatString` composant d’un élément de format. Si l’élément de format n’a pas `formatString` composant, la valeur de `format` est `null`. Si `format` est `null`, selon le type de `arg`, vous pourrez peut-être utiliser la spécification de format par défaut de votre choix.  
  
 Le `formatProvider` paramètre est le <xref:System.IFormatProvider> implémentation qui fournit la mise en forme pour `arg`. En règle générale, il s’agit d’une instance de votre <xref:System.ICustomFormatter> implémentation. Si `formatProvider` est `null`, ignorez ce paramètre.  
  
 Votre implémentation de la <xref:System.ICustomFormatter.Format%2A> méthode doit inclure les fonctionnalités suivantes pour le .NET Framework puissent fournir, vous ne prennent pas en charge de la mise en forme. Si votre méthode de format ne prend pas en charge un format, déterminer si l’objet mis en forme implémente le <xref:System.IFormattable> interface. Si ce cas, appelez le <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> méthode de cette interface. Appeler dans le cas contraire, la valeur par défaut <xref:System.Object.ToString%2A?displayProperty=nameWithType> méthode de l’objet sous-jacent. Le code suivant illustre ce modèle.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 L’exemple suivant implémente <xref:System.ICustomFormatter> pour permettre la mise en forme binaire, octales et hexadécimales de valeurs intégrales. Son <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implémentation détermine si le paramètre de format est un des trois chaînes de format pris en charge (« B » pour le fichier binaire, « O » pour octal et « H » pour hexadécimal) et met en forme le `arg` paramètre correctement. Sinon, si `arg` n’est pas `null`, il appelle le `arg` du paramètre <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implémentation, s’il en existe, ou sa sans paramètre `ToString` méthode, si un n’est pas le cas. Si `arg` est `null`, la méthode retourne <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` peut ensuite être utilisé pour fournir la mise en forme personnalisée en passant un `BinaryFormatter` de l’objet en tant que le `provider` paramètre de la <xref:System.String.Format%2A> méthode, comme le montre l’exemple suivant.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Mettre en forme des types dans .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Mise en forme composite</related>
      </Docs>
    </Member>
  </Members>
</Type>