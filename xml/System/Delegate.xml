<Type Name="Delegate" FullName="System.Delegate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d9b1839ccedabbb705da25899027acccda6a8a3" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53233118" /></Metadata><TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7df4d-101">Représente un délégué, qui est une structure de données faisant référence à une méthode statique ou une instance de classe et à une méthode d'instance de cette classe.</span><span class="sxs-lookup"><span data-stu-id="7df4d-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-102">Le <xref:System.Delegate> classe est la classe de base pour les types délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="7df4d-103">Toutefois, seul le système et les compilateurs peuvent dériver explicitement de la <xref:System.Delegate> classe ou à partir de la <xref:System.MulticastDelegate> classe.</span><span class="sxs-lookup"><span data-stu-id="7df4d-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="7df4d-104">Il est également possible de dériver un nouveau type à partir d’un type délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="7df4d-105">Le <xref:System.Delegate> classe n’est pas considéré comme un type délégué ; c’est une classe utilisée pour dériver des types délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="7df4d-106">Implémenter la plupart des langages un `delegate` mot clé et les compilateurs pour ces langages sont en mesure de dériver à partir de la <xref:System.MulticastDelegate> classe ; par conséquent, les utilisateurs doivent utiliser le `delegate` mot clé fourni par le langage.</span><span class="sxs-lookup"><span data-stu-id="7df4d-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-107">Le common language runtime fournit un `Invoke` méthode pour chaque type de délégué, avec la même signature que le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="7df4d-108">Il est inutile d’appeler cette méthode explicitement à partir de c#, Visual Basic ou Visual C++, car les compilateurs appellent automatiquement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="7df4d-109">Le `Invoke` méthode est utile dans [réflexion](~/docs/framework/reflection-and-codedom/reflection.md) lorsque vous souhaitez trouver la signature du type délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="7df4d-110">Le common language runtime fournit chaque type délégué avec `BeginInvoke` et `EndInvoke` méthodes, pour permettre l’invocation asynchrone du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="7df4d-111">Pour plus d’informations sur ces méthodes, consultez [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="7df4d-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="7df4d-112">La déclaration d’un type délégué établit un contrat qui spécifie la signature d’une ou plusieurs méthodes.</span><span class="sxs-lookup"><span data-stu-id="7df4d-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="7df4d-113">Un délégué est une instance d’un type délégué qui comporte des références à :</span><span class="sxs-lookup"><span data-stu-id="7df4d-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="7df4d-114">Une méthode d’instance d’un type et un objet cible peut être assigné à ce type.</span><span class="sxs-lookup"><span data-stu-id="7df4d-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="7df4d-115">Une méthode d’instance d’un type, avec le texte masqué `this` paramètre exposée dans la liste de paramètres formels.</span><span class="sxs-lookup"><span data-stu-id="7df4d-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="7df4d-116">Le délégué est dit être un délégué d’ouvrir une instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="7df4d-117">Une méthode statique.</span><span class="sxs-lookup"><span data-stu-id="7df4d-117">A static method.</span></span>  
  
-   <span data-ttu-id="7df4d-118">Une méthode statique et un objet cible peut être assigné au premier paramètre de la méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="7df4d-119">Le délégué est dit être fermé sur son premier argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="7df4d-120">Pour plus d’informations sur la liaison de délégués, consultez le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-121">Dans les versions 1.0 et 1.1 du .NET Framework, un délégué peut représenter une méthode uniquement si la signature de la méthode correspond exactement à la signature spécifiée par le type délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="7df4d-122">Par conséquent, uniquement les première et troisième puces dans la liste précédente sont prises en charge, et la première puce requiert une correspondance de type exact.</span><span class="sxs-lookup"><span data-stu-id="7df4d-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="7df4d-123">Lorsqu’un délégué représente une méthode d’instance fermée sur son premier argument (le cas le plus courant), le délégué stocke une référence au point d’entrée de la méthode et une référence à un objet, appelé cible, qui est d’un type assignable au type défini par le méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="7df4d-124">Lorsqu’un délégué représente une méthode d’instance ouverte, il stocke une référence au point d’entrée de la méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="7df4d-125">La signature du délégué doit inclure le texte masqué `this` paramètre dans sa liste de paramètres formels ; dans ce cas, le délégué n’a pas une référence à un objet cible, et un objet cible doit être fourni lorsque le délégué est appelé.</span><span class="sxs-lookup"><span data-stu-id="7df4d-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="7df4d-126">Lorsqu’un délégué représente une méthode statique, le délégué stocke une référence au point d’entrée de la méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="7df4d-127">Lorsqu’un délégué représente une méthode statique fermée sur son premier argument, le délégué stocke une référence au point d’entrée de la méthode et une référence à un objet cible peut être assigné au type du premier argument de la méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="7df4d-128">Lorsque le délégué est appelé, le premier argument de la méthode statique reçoit l’objet cible.</span><span class="sxs-lookup"><span data-stu-id="7df4d-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="7df4d-129">La liste d’appel d’un délégué est un ensemble ordonné de délégués dont chaque élément de la liste appelle exactement une des méthodes représentées par le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="7df4d-130">Une liste d’appel peut contenir des méthodes en double.</span><span class="sxs-lookup"><span data-stu-id="7df4d-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="7df4d-131">Lors d’un appel, les méthodes sont appelées dans l’ordre dans lequel ils apparaissent dans la liste d’appel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="7df4d-132">Un délégué tente d’appeler chaque méthode dans sa liste d’appel ; les doublons sont appelés une fois pour chaque fois qu’ils apparaissent dans la liste d’appel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="7df4d-133">Les délégués sont immuables ; une fois créé, la liste d’appel d’un délégué ne change pas.</span><span class="sxs-lookup"><span data-stu-id="7df4d-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="7df4d-134">Les délégués sont désignées comme multidiffusion ou la classe combinable, car un délégué peut appeler une ou plusieurs méthodes et peut être utilisé dans la combinaison d’opérations.</span><span class="sxs-lookup"><span data-stu-id="7df4d-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="7df4d-135">Opérations d’association, tel que <xref:System.Delegate.Combine%2A> et <xref:System.Delegate.Remove%2A>, ne modifient pas les délégués existants.</span><span class="sxs-lookup"><span data-stu-id="7df4d-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="7df4d-136">Au lieu de cela, une telle opération retourne un nouveau délégué qui contient les résultats de l’opération, un délégué inchangé ou `null`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="7df4d-137">Une opération d’association retourne `null` lorsque le résultat de l’opération est un délégué qui ne fait pas référence au moins une méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="7df4d-138">Retourne un délégué inchangé lorsque l’opération demandée n’a aucun effet.</span><span class="sxs-lookup"><span data-stu-id="7df4d-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-139">Les langages managés utilisent le <xref:System.Delegate.Combine%2A> et <xref:System.Delegate.Remove%2A> méthodes pour implémenter des opérations de délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="7df4d-140">Exemples incluent la `AddHandler` et `RemoveHandler` instructions en Visual Basic et les opérateurs += et -= sur types délégués en c#.</span><span class="sxs-lookup"><span data-stu-id="7df4d-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="7df4d-141">En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], les types délégués génériques peuvent avoir des paramètres de type variant.</span><span class="sxs-lookup"><span data-stu-id="7df4d-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="7df4d-142">Paramètres de type contravariant peuvent être utilisés comme types de paramètre du délégué et un paramètre de type covariant peut être utilisé comme type de retour.</span><span class="sxs-lookup"><span data-stu-id="7df4d-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="7df4d-143">Cette fonctionnalité autorise types construits à partir de la même définition de type générique pour être compatibles-assignation si leurs arguments de type sont des types de référence avec une relation d’héritage, comme expliqué dans les délégués génériques [Covariance et La contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span><span class="sxs-lookup"><span data-stu-id="7df4d-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-144">Les délégués génériques qui sont compatibles avec affectation en raison de la variance ne sont pas nécessairement combinables.</span><span class="sxs-lookup"><span data-stu-id="7df4d-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="7df4d-145">Pour pouvoir être associés, les types doivent correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="7df4d-146">Par exemple, prenons une classe nommée `Derived` est dérivé d’une classe nommée `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="7df4d-147">Un délégué du type `Action<Base>` (`Action(Of Base)` en Visual Basic) peut être assignée à une variable de type `Action<Derived>`, mais les deux délégués ne peuvent pas être combinés, car les types ne correspondent pas exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="7df4d-148">Si une méthode appelée lève une exception, la méthode arrête l’exécution de l’exception est passée à l’appelant du délégué et les méthodes restantes dans la liste d’appel ne sont pas appelés.</span><span class="sxs-lookup"><span data-stu-id="7df4d-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="7df4d-149">Intercepter l’exception dans l’appelant ne modifie pas ce comportement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="7df4d-150">Lors de la signature des méthodes appelées par un délégué inclut une valeur de retour, le délégué retourne la valeur de retour du dernier élément dans la liste d’appel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="7df4d-151">Lors de la signature inclut un paramètre qui est passé par référence, la valeur finale du paramètre est le résultat de chaque méthode dans la liste d’appel l’exécution de manière séquentielle et la mise à jour la valeur du paramètre.</span><span class="sxs-lookup"><span data-stu-id="7df4d-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="7df4d-152">L’équivalent le plus proche d’un délégué en C est un pointeur de fonction.</span><span class="sxs-lookup"><span data-stu-id="7df4d-152">The closest equivalent of a delegate in C is a function pointer.</span></span> <span data-ttu-id="7df4d-153">Un délégué peut représenter une méthode statique ou une méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="7df4d-154">Lorsque le délégué représente une méthode d’instance, le délégué stocke non seulement une référence au point d’entrée de la méthode, mais également une référence à l’instance de classe.</span><span class="sxs-lookup"><span data-stu-id="7df4d-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="7df4d-155">Contrairement aux pointeurs de fonction, les délégués sont orientés objet et plus sûr.</span><span class="sxs-lookup"><span data-stu-id="7df4d-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7df4d-156">L’exemple suivant montre comment définir un délégué nommé `myMethodDelegate`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="7df4d-157">Instances de ce délégué sont créées pour une méthode d’instance et une méthode statique de la commande imbriquée `mySampleClass` classe.</span><span class="sxs-lookup"><span data-stu-id="7df4d-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="7df4d-158">Le délégué de la méthode d’instance requiert une instance de `mySampleClass`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="7df4d-159">Le `mySampleClass` instance est enregistrée dans une variable nommée `mySC`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
    <related type="Article" href="https://msdn.microsoft.com/library/41972034-92ed-450a-9664-ab93fcc6f1fb"><span data-ttu-id="7df4d-160">Appel de méthodes synchrones de façon asynchrone</span><span class="sxs-lookup"><span data-stu-id="7df4d-160">Calling Synchronous Methods Asynchronously</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="7df4d-161">Délégués (Guide de programmation C#)</span><span class="sxs-lookup"><span data-stu-id="7df4d-161">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="7df4d-162">Délégués (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="7df4d-162">Delegates (Visual Basic)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/1cdf3420-89c1-47c0-b796-aa984020e0f8"><span data-ttu-id="7df4d-163">Comment : définir et utiliser des délégués (C++/CLI)</span><span class="sxs-lookup"><span data-stu-id="7df4d-163">How to: Define and Use Delegates (C++/CLI)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f"><span data-ttu-id="7df4d-164">Gestion et déclenchement d'événements</span><span class="sxs-lookup"><span data-stu-id="7df4d-164">Handling and Raising Events</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7df4d-165">Initialise un nouveau délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-165">Initializes a new delegate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="7df4d-166">Instance de classe sur laquelle le délégué appelle <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-166">The class instance on which the delegate invokes <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-167">Nom de la méthode d'instance représentée par le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-167">The name of the instance method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="7df4d-168">Initialise un délégué qui appelle la méthode d'instance spécifiée sur l'instance de classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-168">Initializes a delegate that invokes the specified instance method on the specified class instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-169">Ce constructeur ne peut pas être utilisé dans le code d’application.</span><span class="sxs-lookup"><span data-stu-id="7df4d-169">This constructor cannot be used in application code.</span></span> <span data-ttu-id="7df4d-170">Pour créer un délégué en spécifiant le nom d’une méthode d’instance, utilisez une surcharge de la <xref:System.Delegate.CreateDelegate%2A> méthode qui spécifie un nom de méthode et un objet cible.</span><span class="sxs-lookup"><span data-stu-id="7df4d-170">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="7df4d-171">Par exemple, le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> surcharge de méthode crée un délégué pour une méthode d’instance avec un nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="7df4d-171">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="7df4d-172">Ce constructeur crée des délégués par exemple uniquement des méthodes.</span><span class="sxs-lookup"><span data-stu-id="7df4d-172">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="7df4d-173">Une méthode d’instance est une méthode qui est associée à une instance d’une classe ; une méthode statique est une méthode qui est associée à la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="7df4d-173">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-174"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-174"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-175">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-175">-or-</span></span> 
 <span data-ttu-id="7df4d-176"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-176"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-177">Une erreur s'est produite lors de la liaison à la méthode cible.</span><span class="sxs-lookup"><span data-stu-id="7df4d-177">There was an error binding to the target method.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-178">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-178">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-179">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-179">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="7df4d-180"><see cref="T:System.Type" /> représentant la classe qui définit <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-180">The <see cref="T:System.Type" /> representing the class that defines <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-181">Nom de la méthode statique représentée par le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-181">The name of the static method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="7df4d-182">Initialise un délégué qui appelle la méthode statique spécifiée à partir de la classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-182">Initializes a delegate that invokes the specified static method from the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-183">Ce constructeur ne peut pas être utilisé dans le code d’application.</span><span class="sxs-lookup"><span data-stu-id="7df4d-183">This constructor cannot be used in application code.</span></span> <span data-ttu-id="7df4d-184">Pour créer un délégué en spécifiant le nom d’une méthode statique, utilisez une surcharge de la <xref:System.Delegate.CreateDelegate%2A> méthode qui spécifie un nom de méthode, mais ne spécifie pas un objet cible.</span><span class="sxs-lookup"><span data-stu-id="7df4d-184">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="7df4d-185">Par exemple, le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> surcharge de méthode crée un délégué statique pour une méthode avec un nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="7df4d-185">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="7df4d-186">Ce constructeur crée des délégués pour les méthodes statiques uniquement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-186">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="7df4d-187">Une méthode d’instance est une méthode qui est associée à une instance d’une classe ; une méthode statique est une méthode qui est associée à la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="7df4d-187">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-188"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-188"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-189">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-189">-or-</span></span> 
 <span data-ttu-id="7df4d-190"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-190"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-191"><paramref name="target" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-191"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-192">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-192">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-193">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-193">-or-</span></span> 
 <span data-ttu-id="7df4d-194"><paramref name="target" /> représente un type générique ouvert.</span><span class="sxs-lookup"><span data-stu-id="7df4d-194"><paramref name="target" /> represents an open generic type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-195">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-195">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-196">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-196">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7df4d-197">Crée une copie superficielle du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-197">Creates a shallow copy of the delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-198">Copie superficielle du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-198">A shallow copy of the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-199">Le clone a les mêmes <xref:System.Type>, cible, méthode et liste d’appel que le délégué d’origine.</span><span class="sxs-lookup"><span data-stu-id="7df4d-199">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="7df4d-200">Une copie superficielle crée une nouvelle instance du même type que l’objet d’origine et copie ensuite les champs non statiques de l’objet d’origine.</span><span class="sxs-lookup"><span data-stu-id="7df4d-200">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="7df4d-201">Si le champ est un type valeur, une copie bit par bit du champ est effectuée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-201">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="7df4d-202">Si le champ est un type référence, la référence est copiée, mais l’objet référencé n’est pas. Par conséquent, la référence dans l’objet d’origine et la référence dans le clone pointent vers le même objet.</span><span class="sxs-lookup"><span data-stu-id="7df4d-202">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="7df4d-203">En revanche, une copie complète d’un objet duplique tous les éléments référencés directement ou indirectement par les champs dans l’objet.</span><span class="sxs-lookup"><span data-stu-id="7df4d-203">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-204">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-204">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-205">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-205">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7df4d-206">Concatène les listes d'appel des délégués multicast (pouvant être combinés) spécifiés.</span><span class="sxs-lookup"><span data-stu-id="7df4d-206">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates"><span data-ttu-id="7df4d-207">Tableau de délégués à combiner.</span><span class="sxs-lookup"><span data-stu-id="7df4d-207">The array of delegates to combine.</span></span></param>
        <summary><span data-ttu-id="7df4d-208">Concatène les listes d'appel d'un tableau de délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-208">Concatenates the invocation lists of an array of delegates.</span></span></summary>
        <returns><span data-ttu-id="7df4d-209">Nouveau délégué avec une liste d’invocation qui concatène les listes d’invocation des délégués dans le tableau <paramref name="delegates" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-209">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span></span> <span data-ttu-id="7df4d-210">Retourne <see langword="null" /> si <paramref name="delegates" /> est <see langword="null" />, si <paramref name="delegates" /> contient zéro élément ou si chaque entrée de <paramref name="delegates" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-210">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-211">Si le `delegates` tableau contient des entrées qui sont `null`, ces entrées sont ignorées.</span><span class="sxs-lookup"><span data-stu-id="7df4d-211">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="7df4d-212">La liste d’appel peut contenir des entrées en double ; Autrement dit, les entrées qui font référence à la même méthode sur le même objet.</span><span class="sxs-lookup"><span data-stu-id="7df4d-212">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-213">Les délégués génériques qui sont compatibles avec affectation en raison de la variance ne sont pas nécessairement combinables.</span><span class="sxs-lookup"><span data-stu-id="7df4d-213">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="7df4d-214">Pour pouvoir être associés, les types doivent correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-214">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="7df4d-215">Par exemple, prenons une classe nommée `Derived` est dérivé d’une classe nommée `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-215">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="7df4d-216">Un délégué du type `Action<Base>` (`Action(Of Base)` en Visual Basic) peut être assignée à une variable de type `Action<Derived>`, comme expliqué dans [Covariance et Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), mais les deux délégués ne peuvent pas être combinés, car les types pas correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-216">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="7df4d-217"><xref:System.Delegate.Combine%2A> est utile pour créer des gestionnaires d’événements qui appellent que plusieurs méthodes chaque fois qu’un événement se produit.</span><span class="sxs-lookup"><span data-stu-id="7df4d-217"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-218">Les entrées non null dans <paramref name="delegates" /> ne sont pas toutes des instances du même type de délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-218">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-219">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-219">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-220">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-220">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="7df4d-221">Délégué dont la liste d’appel est la première.</span><span class="sxs-lookup"><span data-stu-id="7df4d-221">The delegate whose invocation list comes first.</span></span></param>
        <param name="b"><span data-ttu-id="7df4d-222">Délégué dont la liste d’appel est la dernière.</span><span class="sxs-lookup"><span data-stu-id="7df4d-222">The delegate whose invocation list comes last.</span></span></param>
        <summary><span data-ttu-id="7df4d-223">Concatène les listes d'appel de deux délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-223">Concatenates the invocation lists of two delegates.</span></span></summary>
        <returns><span data-ttu-id="7df4d-224">Nouveau délégué avec une liste d’appel qui concatène les listes d’appel de <paramref name="a" /> et <paramref name="b" />, dans cet ordre.</span><span class="sxs-lookup"><span data-stu-id="7df4d-224">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span></span> <span data-ttu-id="7df4d-225">Retourne <paramref name="a" /> si <paramref name="b" /> est <see langword="null" />, retourne <paramref name="b" /> si <paramref name="a" /> est une référence null, et retourne une référence null si <paramref name="a" /> et <paramref name="b" /> sont des références null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-225">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-226">La liste d’appel peut contenir des entrées en double ; Autrement dit, les entrées qui font référence à la même méthode sur le même objet.</span><span class="sxs-lookup"><span data-stu-id="7df4d-226">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-227">Les délégués génériques qui sont compatibles avec affectation en raison de la variance ne sont pas nécessairement combinables.</span><span class="sxs-lookup"><span data-stu-id="7df4d-227">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="7df4d-228">Pour pouvoir être associés, les types doivent correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-228">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="7df4d-229">Par exemple, prenons une classe nommée `Derived` est dérivé d’une classe nommée `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-229">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="7df4d-230">Un délégué du type `Action<Base>` (`Action(Of Base)` en Visual Basic) peut être assignée à une variable de type `Action<Derived>`, comme expliqué dans [Covariance et Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), mais les deux délégués ne peuvent pas être combinés, car les types pas correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-230">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="7df4d-231"><xref:System.Delegate.Combine%2A> est utile pour créer des gestionnaires d’événements qui appellent que plusieurs méthodes chaque fois qu’un événement se produit.</span><span class="sxs-lookup"><span data-stu-id="7df4d-231"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-232"><paramref name="a" /> et <paramref name="b" /> ne sont ni l’un ni l’autre <see langword="null" />, et <paramref name="a" /> et <paramref name="b" /> ne sont pas des instances du même type délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-232">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-233">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-233">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-234">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-234">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="7df4d-235">Délégué multicast (pouvant être combiné) dont la liste d'appel doit être ajoutée à la fin de la liste d'appel du délégué multicast (pouvant être combiné) en cours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-235">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span></span></param>
        <summary><span data-ttu-id="7df4d-236">Concatène les listes d'appel du délégué multicast (pouvant être combiné) spécifié et du délégué multicast (pouvant être combiné) actuel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-236">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-237">Nouveau délégué multicast (pouvant être combiné) avec une liste d'appel qui concatène les listes d'appel du délégué multicast (pouvant être combiné) en cours et de <paramref name="d" />, ou délégué multicast (pouvant être combiné) en cours si <paramref name="d" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-237">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-238">Cette méthode s’applique uniquement si le délégué actuel est multicast (pouvant être combiné).</span><span class="sxs-lookup"><span data-stu-id="7df4d-238">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="7df4d-239">L’implémentation actuelle lève simplement une <xref:System.MulticastNotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="7df4d-239">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="7df4d-240">La liste d’appel peut contenir des entrées en double ; Autrement dit, les entrées qui font référence à la même méthode sur le même objet.</span><span class="sxs-lookup"><span data-stu-id="7df4d-240">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException"><span data-ttu-id="7df4d-241">Toujours levée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-241">Always thrown.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-242">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-242">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-243">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-243">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7df4d-244">Crée un délégué du type spécifié.</span><span class="sxs-lookup"><span data-stu-id="7df4d-244">Creates a delegate of the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-245"><see cref="T:System.Type" /> de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-245">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-246"><see cref="T:System.Reflection.MethodInfo" /> décrivant la méthode statique ou d’instance que le délégué doit représenter.</span><span class="sxs-lookup"><span data-stu-id="7df4d-246">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span> <span data-ttu-id="7df4d-247">Seules les méthodes statiques sont prises en charge dans les versions 1.0 et 1.1 du .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="7df4d-247">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span></span></param>
        <summary><span data-ttu-id="7df4d-248">Crée un délégué du type spécifié pour représenter la méthode statique spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-248">Creates a delegate of the specified type to represent the specified static method.</span></span></summary>
        <returns><span data-ttu-id="7df4d-249">Délégué du type spécifié pour représenter la méthode statique spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-249">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-250">Dans la version 1.0 et 1.1 du .NET Framework, cette surcharge de méthode crée des délégués pour les méthodes statiques uniquement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-250">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="7df4d-251">Dans le .NET Framework version 2.0, cette surcharge de méthode peut également créer instance ouverte délégués de la méthode ; Autrement dit, les délégués qui fournissent explicitement le premier argument masqué des méthodes d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-251">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="7df4d-252">Pour obtenir une explication détaillée, consultez le plus général <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> surcharge de méthode, qui vous permet de créer toutes les combinaisons de délégués ouverts ou fermés pour les méthodes d’instance ou statiques et éventuellement pour spécifier un premier argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-252">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-253">Cette surcharge de méthode doit être utilisée lorsque le délégué n’est pas fermé sur son premier argument, car il est un peu plus rapide dans ce cas.</span><span class="sxs-lookup"><span data-stu-id="7df4d-253">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="7df4d-254">Cette surcharge de méthode revient à appeler le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> surcharge de méthode et en spécifiant `true` pour `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-254">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-255">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-255">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-256">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-256">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-257">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-257">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="7df4d-258">Types de paramètre compatibles et Type de retour</span><span class="sxs-lookup"><span data-stu-id="7df4d-258">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="7df4d-259">Dans le .NET Framework version 2.0, les types de paramètre et le type de retour d’un délégué créé à l’aide de cette surcharge de méthode doivent être compatibles avec les types de paramètre et le type de retour de la méthode que le délégué représente ; les types n’ont pas à correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-259">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="7df4d-260">Cela représente un réel atout car bien du comportement de liaison dans le .NET Framework version 1.0 et 1.1, où les types doivent correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-260">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="7df4d-261">Le paramètre d'un délégué est compatible avec le paramètre correspondant d'une méthode si le type de paramètre du délégué est plus restrictif que le type de paramètre de la méthode. En effet, cela garantit qu'un argument transmis au délégué peut être transmis à la méthode en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="7df4d-261">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="7df4d-262">De même, le type de retour d'un délégué est compatible avec le type de retour d'une méthode si le type de retour de la méthode est plus restrictif que le type de retour du délégué, car cela garantit que le cast de la valeur de retour de la méthode peut être effectué sans risque au type de retour du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-262">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="7df4d-263">Par exemple, un délégué avec un paramètre de type <xref:System.Collections.Hashtable> et un type de retour <xref:System.Object> peut représenter une méthode avec un paramètre de type <xref:System.Object> et une valeur de retour de type <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="7df4d-263">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7df4d-264">Cette section contient deux exemples de code.</span><span class="sxs-lookup"><span data-stu-id="7df4d-264">This section contains two code examples.</span></span> <span data-ttu-id="7df4d-265">Le premier exemple montre les deux types délégués qui peuvent être créés avec cette surcharge de méthode : ouvrir sur une méthode d’instance et ouvert sur une méthode statique.</span><span class="sxs-lookup"><span data-stu-id="7df4d-265">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="7df4d-266">Le deuxième exemple de code illustre les types de paramètre compatibles et types de retour.</span><span class="sxs-lookup"><span data-stu-id="7df4d-266">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="7df4d-267">**Exemple 1**</span><span class="sxs-lookup"><span data-stu-id="7df4d-267">**Example 1**</span></span>  
  
 <span data-ttu-id="7df4d-268">L’exemple de code suivant montre deux façons un délégué peut être créé à l’aide de cette surcharge de la <xref:System.Delegate.CreateDelegate%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="7df4d-268">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-269">Il existe deux surcharges de la <xref:System.Delegate.CreateDelegate%2A> méthode qui spécifient un <xref:System.Reflection.MethodInfo> mais pas dans un premier argument ; leurs fonctionnalités sont identiques, sauf qu’une vous permet de spécifier s’il faut lever en cas d’échec pour lier et l’autre lève toujours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-269">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="7df4d-270">Cet exemple de code utilise les deux surcharges.</span><span class="sxs-lookup"><span data-stu-id="7df4d-270">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="7df4d-271">L’exemple déclare une classe `C` avec une méthode statique `M2` et une méthode d’instance `M1`, et deux types délégués : `D1` prend une instance de `C` et une chaîne, et `D2` prend une chaîne.</span><span class="sxs-lookup"><span data-stu-id="7df4d-271">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="7df4d-272">Une deuxième classe nommée `Example` contient le code qui crée les délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-272">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="7df4d-273">Un délégué du type `D1`, représentant une méthode d’instance ouverte, est créé pour la méthode d’instance `M1`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-273">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="7df4d-274">Une instance doit être passée lorsque le délégué est appelé.</span><span class="sxs-lookup"><span data-stu-id="7df4d-274">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="7df4d-275">Un délégué du type `D2`, représentant une méthode statique ouverte, est créé pour la méthode statique `M2`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-275">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="7df4d-276">**Exemple 2**</span><span class="sxs-lookup"><span data-stu-id="7df4d-276">**Example 2**</span></span>  
  
 <span data-ttu-id="7df4d-277">L’exemple de code suivant illustre la compatibilité des types de paramètres et types de retour.</span><span class="sxs-lookup"><span data-stu-id="7df4d-277">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="7df4d-278">L’exemple de code définit une classe de base nommée `Base` et une classe nommée `Derived` qui dérive de `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-278">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="7df4d-279">La classe dérivée a un `static` (`Shared` en Visual Basic) méthode nommée `MyMethod` avec un paramètre de type `Base` et un type de retour `Derived`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-279">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="7df4d-280">L’exemple de code définit également un délégué nommé `Example` qui a un paramètre de type `Derived` et un type de retour `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-280">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="7df4d-281">L’exemple de code montre que le délégué nommé `Example` peut être utilisé pour représenter la méthode `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-281">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="7df4d-282">La méthode peut être liée au délégué, car :</span><span class="sxs-lookup"><span data-stu-id="7df4d-282">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="7df4d-283">Le type de paramètre du délégué (`Derived`) est plus restrictif que le type de paramètre de `MyMethod` (`Base`), afin qu’il soit toujours possible de passer l’argument du délégué à `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-283">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="7df4d-284">Le type de retour de `MyMethod` (`Derived`) est plus restrictif que le type de paramètre du délégué (`Base`), afin qu’il est toujours possible de convertir le type de retour de la méthode pour le type de retour du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-284">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="7df4d-285">L’exemple de code ne produit aucune sortie.</span><span class="sxs-lookup"><span data-stu-id="7df4d-285">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-286"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-286"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-287">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-287">-or-</span></span> 
 <span data-ttu-id="7df4d-288"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-288"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-289"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-289"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-290">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-290">-or-</span></span> 
 <span data-ttu-id="7df4d-291"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-291"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-292">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-292">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-293">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-293">-or-</span></span> 
 <span data-ttu-id="7df4d-294"><paramref name="method" /> n’est pas une méthode statique, et la version du .NET Framework est 1.0 ou 1.1.</span><span class="sxs-lookup"><span data-stu-id="7df4d-294"><paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span></span>  
  
<span data-ttu-id="7df4d-295">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-295">-or-</span></span> 
 <span data-ttu-id="7df4d-296"><paramref name="method" /> ne peut pas être liée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-296"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="7df4d-297">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-297">-or-</span></span> 
 <span data-ttu-id="7df4d-298"><paramref name="method" /> n'est pas un <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-298"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="7df4d-299">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-299">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-300">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-300">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-301">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-301">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-302">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-302">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-303">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-304"><see cref="T:System.Type" /> de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-304">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="7df4d-305">Objet auquel le délégué est lié, ou <see langword="null" /> si <paramref name="method" /> est traitée comme <see langword="static" /> (<see langword="Shared" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7df4d-305">The object to which the delegate is bound, or <see langword="null" /> to treat <paramref name="method" /> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-306"><see cref="T:System.Reflection.MethodInfo" /> décrivant la méthode statique ou d’instance que le délégué doit représenter.</span><span class="sxs-lookup"><span data-stu-id="7df4d-306">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="7df4d-307">Crée un délégué du type spécifié qui représente la méthode statique ou méthode d'instance spécifiée, avec le premier argument spécifié.</span><span class="sxs-lookup"><span data-stu-id="7df4d-307">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span></span></summary>
        <returns><span data-ttu-id="7df4d-308">Délégué du type spécifié qui représente la méthode statique ou méthode d’instance spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-308">A delegate of the specified type that represents the specified static or instance method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-309">Appel de cette surcharge de méthode revient à appeler le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> surcharge de méthode et en spécifiant `true` pour `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-309">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="7df4d-310">Ces deux surcharges offrent le moyen le plus simple pour créer des délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-310">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="7df4d-311">Vous pouvez les utiliser pour créer des délégués pour statiques ou des méthodes d’instance et éventuellement pour spécifier le premier argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-311">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-312">Si vous ne fournissez pas un premier argument, utilisez le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> surcharge de méthode pour de meilleures performances.</span><span class="sxs-lookup"><span data-stu-id="7df4d-312">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="7df4d-313">Le type de délégué et la méthode doivent avoir des types de retournés compatibles.</span><span class="sxs-lookup"><span data-stu-id="7df4d-313">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="7df4d-314">Autrement dit, le type de retour de `method` doit être assignable au type de retour de `type`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-314">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="7df4d-315">Si `firstArgument` est fourni, il est passé à `method` chaque fois que le délégué est appelé ; `firstArgument` est considéré comme lié au délégué, et le délégué est dit être fermé sur son premier argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-315">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="7df4d-316">Si `method` est `static` (`Shared` en Visual Basic), l’argument fourni lorsque vous appelez le délégué de liste inclut tous les paramètres sauf la première ; si `method` est une méthode d’instance, puis `firstArgument` est passée à l’instance masquée paramètre (représenté par `this` dans c#, ou par `Me` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7df4d-316">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="7df4d-317">Si `firstArgument` est fourni, le premier paramètre de `method` doit être un type référence, et `firstArgument` doit être compatible avec ce type.</span><span class="sxs-lookup"><span data-stu-id="7df4d-317">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7df4d-318">Si `method` est `static` (`Shared` en Visual Basic) et son premier paramètre est de type <xref:System.Object> ou <xref:System.ValueType>, puis `firstArgument` peut être un type valeur.</span><span class="sxs-lookup"><span data-stu-id="7df4d-318">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="7df4d-319">Dans ce cas `firstArgument` est automatiquement converti (boxed).</span><span class="sxs-lookup"><span data-stu-id="7df4d-319">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="7df4d-320">Boxing automatique ne se produit pas pour les autres arguments, comme il s’agissait dans une fonction c# ou Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7df4d-320">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="7df4d-321">Si `firstArgument` est une référence null et `method` est une méthode d’instance, le résultat dépend des signatures du type délégué `type` et de `method`:</span><span class="sxs-lookup"><span data-stu-id="7df4d-321">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="7df4d-322">Si la signature de `type` n’inclut pas explicitement le premier paramètre masqué de `method`, le délégué est dit représenter une méthode d’instance ouverte.</span><span class="sxs-lookup"><span data-stu-id="7df4d-322">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="7df4d-323">Lorsque le délégué est appelé, le premier argument de la liste d’arguments est passé au paramètre d’instance masqué `method`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-323">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="7df4d-324">Si les signatures de `method` et `type` correspond à (autrement dit, tous les types de paramètre sont compatibles), le délégué est dit être fermé sur une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-324">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="7df4d-325">Appel du délégué est à l’appel d’une méthode d’instance sur une instance null, ce qui n’est pas une chose particulièrement utile à faire.</span><span class="sxs-lookup"><span data-stu-id="7df4d-325">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="7df4d-326">Si `firstArgument` est une référence null et `method` est statique, le résultat dépend des signatures du type délégué `type` et de `method`:</span><span class="sxs-lookup"><span data-stu-id="7df4d-326">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="7df4d-327">Si la signature de `method` et `type` correspond à (autrement dit, tous les types de paramètre sont compatibles), le délégué est dit représenter une méthode statique ouverte.</span><span class="sxs-lookup"><span data-stu-id="7df4d-327">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="7df4d-328">Il s’agit du cas le plus courant pour les méthodes statiques.</span><span class="sxs-lookup"><span data-stu-id="7df4d-328">This is the most common case for static methods.</span></span> <span data-ttu-id="7df4d-329">Dans ce cas, vous pouvez obtenir des performances légèrement meilleures en utilisant la <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-329">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="7df4d-330">Si la signature de `type` commence par le deuxième paramètre de `method` le reste des types de paramètres sont compatibles, puis le délégué est dit être fermé sur une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-330">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="7df4d-331">Lorsque le délégué est appelé, une référence null est passée au premier paramètre de `method`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-331">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-332">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-332">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-333">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-333">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-334">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-334">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="7df4d-335">Types de paramètre compatibles et Type de retour</span><span class="sxs-lookup"><span data-stu-id="7df4d-335">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="7df4d-336">Les types de paramètre et le type de retour d’un délégué doivent être compatibles avec les types de paramètre et le type de retour de la méthode que le délégué représente ; les types n’ont pas à correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-336">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-337">Dans la version 1.0 et 1.1 du .NET Framework, les types doivent correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-337">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="7df4d-338">Le paramètre d'un délégué est compatible avec le paramètre correspondant d'une méthode si le type de paramètre du délégué est plus restrictif que le type de paramètre de la méthode. En effet, cela garantit qu'un argument transmis au délégué peut être transmis à la méthode en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="7df4d-338">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="7df4d-339">De même, le type de retour d'un délégué est compatible avec le type de retour d'une méthode si le type de retour de la méthode est plus restrictif que le type de retour du délégué, car cela garantit que le cast de la valeur de retour de la méthode peut être effectué sans risque au type de retour du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-339">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="7df4d-340">Par exemple, un délégué avec un paramètre de type <xref:System.Collections.Hashtable> et un type de retour <xref:System.Object> peut représenter une méthode avec un paramètre de type <xref:System.Object> et une valeur de retour de type <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="7df4d-340">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="7df4d-341">Déterminer les méthodes d’un délégué peut représenter.</span><span class="sxs-lookup"><span data-stu-id="7df4d-341">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="7df4d-342">Une autre façon utile de penser à la souplesse de cette surcharge de <xref:System.Delegate.CreateDelegate%2A> est qu’un délégué donné peut représenter quatre combinaisons différentes de signature de méthode et le type de méthode (statique contre instance).</span><span class="sxs-lookup"><span data-stu-id="7df4d-342">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="7df4d-343">Considérez un type délégué `D` avec un argument de type `C`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-343">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="7df4d-344">La section suivante décrit les méthodes `D` peuvent représenter, en ignorant le type de retour dans la mesure où il doit correspondre dans tous les cas :</span><span class="sxs-lookup"><span data-stu-id="7df4d-344">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="7df4d-345">`D` peut représenter n’importe quelle méthode d’instance qui a exactement un argument de type `C`, quel que soit le type auquel appartient la méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-345">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="7df4d-346">Lorsque <xref:System.Delegate.CreateDelegate%2A> est appelée, `firstArgument` est une instance du type `method` appartient, et le délégué résultant est dit être fermé sur cette instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-346">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="7df4d-347">(Plus simplement, `D` peut aussi être fermé sur une référence null si `firstArgument` est une référence null.)</span><span class="sxs-lookup"><span data-stu-id="7df4d-347">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="7df4d-348">`D` peut représenter une méthode d’instance de `C` qui n’a aucun argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-348">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="7df4d-349">Lorsque <xref:System.Delegate.CreateDelegate%2A> est appelée, `firstArgument` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-349">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="7df4d-350">Le délégué résultant représente une méthode d’instance ouverte et une instance de `C` doit être fourni à chaque fois qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-350">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="7df4d-351">`D` peut représenter une méthode statique qui prend un argument de type `C`, et cette méthode peut appartenir à n’importe quel type.</span><span class="sxs-lookup"><span data-stu-id="7df4d-351">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="7df4d-352">Lorsque <xref:System.Delegate.CreateDelegate%2A> est appelée, `firstArgument` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-352">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="7df4d-353">Le délégué résultant représente une méthode statique ouverte et une instance de `C` doit être fourni à chaque fois qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-353">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="7df4d-354">`D` peut représenter une méthode statique appartenant au type `F` et a deux arguments de type `F` et type `C`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-354">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="7df4d-355">Lorsque <xref:System.Delegate.CreateDelegate%2A> est appelée, `firstArgument` est une instance de `F`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-355">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="7df4d-356">Le délégué résultant représente une méthode statique qui est fermée sur cette instance de `F`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-356">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="7df4d-357">Notez que dans le cas où `F` et `C` sont du même type, la méthode statique a deux arguments de ce type.</span><span class="sxs-lookup"><span data-stu-id="7df4d-357">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="7df4d-358">(Dans ce cas, `D` est fermé sur une référence null si `firstArgument` est une référence null.)</span><span class="sxs-lookup"><span data-stu-id="7df4d-358">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7df4d-359">Cette section contient trois exemples de code.</span><span class="sxs-lookup"><span data-stu-id="7df4d-359">This section contains three code examples.</span></span> <span data-ttu-id="7df4d-360">Le premier exemple illustre les quatre types de délégués qui peuvent être créés : fermé sur une méthode d’instance, ouverte sur une méthode d’instance, ouverte sur une méthode statique et fermé sur une méthode statique.</span><span class="sxs-lookup"><span data-stu-id="7df4d-360">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="7df4d-361">Le deuxième exemple de code illustre les types de paramètre compatibles et types de retour.</span><span class="sxs-lookup"><span data-stu-id="7df4d-361">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="7df4d-362">Le troisième exemple de code définit un type délégué simple et affiche toutes les méthodes que le type délégué peuvent représenter.</span><span class="sxs-lookup"><span data-stu-id="7df4d-362">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="7df4d-363">**Exemple 1**</span><span class="sxs-lookup"><span data-stu-id="7df4d-363">**Example 1**</span></span>  
  
 <span data-ttu-id="7df4d-364">L’exemple de code suivant montre les quatre façons un délégué peut être créé à l’aide de cette surcharge de la <xref:System.Delegate.CreateDelegate%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="7df4d-364">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-365">Il existe deux surcharges de la <xref:System.Delegate.CreateDelegate%2A> méthode spécifier `firstArgument` et un <xref:System.Reflection.MethodInfo>; leurs fonctionnalités sont identiques, sauf qu’une vous permet de spécifier s’il faut lever en cas d’échec pour lier et l’autre lève toujours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-365">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="7df4d-366">Cet exemple de code utilise les deux surcharges.</span><span class="sxs-lookup"><span data-stu-id="7df4d-366">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="7df4d-367">L’exemple déclare une classe `C` avec une méthode statique `M2` et une méthode d’instance `M1`, et trois types délégués : `D1` prend une instance de `C` et une chaîne, `D2` prend une chaîne et `D3`n’a aucun argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-367">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="7df4d-368">Une deuxième classe nommée `Example` contient le code qui crée les délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-368">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="7df4d-369">Un délégué du type `D2`, fermé sur une instance de `C`, est créé pour la méthode d’instance `M1`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-369">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="7df4d-370">Il est appelé avec différentes chaînes, pour indiquer que l’instance liée de `C` est toujours utilisé.</span><span class="sxs-lookup"><span data-stu-id="7df4d-370">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="7df4d-371">Un délégué du type `D1`, représentant une méthode d’instance ouverte, est créé pour la méthode d’instance `M1`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-371">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="7df4d-372">Une instance doit être passée lorsque le délégué est appelé.</span><span class="sxs-lookup"><span data-stu-id="7df4d-372">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="7df4d-373">Un délégué du type `D2`, représentant une méthode statique ouverte, est créé pour la méthode statique `M2`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-373">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="7df4d-374">Enfin, un délégué du type `D3`, fermé sur une chaîne, est créé pour la méthode statique `M2`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-374">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="7df4d-375">La méthode est appelée pour montrer qu’il utilise la chaîne liée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-375">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="7df4d-376">**Exemple 2**</span><span class="sxs-lookup"><span data-stu-id="7df4d-376">**Example 2**</span></span>  
  
 <span data-ttu-id="7df4d-377">L’exemple de code suivant illustre la compatibilité des types de paramètres et types de retour.</span><span class="sxs-lookup"><span data-stu-id="7df4d-377">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-378">Cet exemple de code utilise le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-378">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="7df4d-379">L’utilisation d’autres surcharges qui prennent <xref:System.Reflection.MethodInfo> est similaire.</span><span class="sxs-lookup"><span data-stu-id="7df4d-379">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="7df4d-380">L’exemple de code définit une classe de base nommée `Base` et une classe nommée `Derived` qui dérive de `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-380">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="7df4d-381">La classe dérivée a un `static` (`Shared` en Visual Basic) méthode nommée `MyMethod` avec un paramètre de type `Base` et un type de retour `Derived`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-381">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="7df4d-382">L’exemple de code définit également un délégué nommé `Example` qui a un paramètre de type `Derived` et un type de retour `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-382">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="7df4d-383">L’exemple de code montre que le délégué nommé `Example` peut être utilisé pour représenter la méthode `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-383">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="7df4d-384">La méthode peut être liée au délégué, car :</span><span class="sxs-lookup"><span data-stu-id="7df4d-384">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="7df4d-385">Le type de paramètre du délégué (`Derived`) est plus restrictif que le type de paramètre de `MyMethod` (`Base`), afin qu’il soit toujours possible de passer l’argument du délégué à `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-385">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="7df4d-386">Le type de retour de `MyMethod` (`Derived`) est plus restrictif que le type de paramètre du délégué (`Base`), afin qu’il est toujours possible de convertir le type de retour de la méthode pour le type de retour du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-386">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="7df4d-387">L’exemple de code ne produit aucune sortie.</span><span class="sxs-lookup"><span data-stu-id="7df4d-387">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="7df4d-388">**Exemple 3**</span><span class="sxs-lookup"><span data-stu-id="7df4d-388">**Example 3**</span></span>  
  
 <span data-ttu-id="7df4d-389">L’exemple de code suivant montre toutes les méthodes d’un type délégué simple peut représenter, à l’aide de la <xref:System.Delegate.CreateDelegate%2A> méthode pour créer les délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-389">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-390">Il existe deux surcharges de la <xref:System.Delegate.CreateDelegate%2A> méthode spécifier `firstArgument` et un <xref:System.Reflection.MethodInfo>; leurs fonctionnalités sont identiques, sauf qu’une vous permet de spécifier s’il faut lever en cas d’échec pour lier et l’autre lève toujours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-390">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="7df4d-391">Cet exemple de code utilise les deux surcharges.</span><span class="sxs-lookup"><span data-stu-id="7df4d-391">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="7df4d-392">L’exemple de code définit deux classes, `C` et `F`et un type délégué `D` avec un argument de type `C`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-392">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="7df4d-393">Les classes ont la mise en correspondance statique et méthodes d’instance `M1`, `M3`, et `M4`et classe `C` a également une méthode d’instance `M2` qui n’a aucun argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-393">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="7df4d-394">Une troisième classe nommée `Example` contient le code qui crée les délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-394">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="7df4d-395">Les délégués sont créés pour instance méthode `M1` de type `C` et type `F`; chacun est fermé sur une instance du type respectif.</span><span class="sxs-lookup"><span data-stu-id="7df4d-395">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="7df4d-396">Méthode `M1` de type `C` affiche le `ID` propriétés de l’instance liée et de l’argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-396">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="7df4d-397">Un délégué est créé pour la méthode `M2` de type `C`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-397">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="7df4d-398">Il s’agit d’un délégué d’ouvrir une instance, dans laquelle l’argument du délégué représente le premier argument masqué sur la méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-398">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="7df4d-399">La méthode ne possède aucun autre argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-399">The method has no other arguments.</span></span> <span data-ttu-id="7df4d-400">Elle est appelée comme s’il s’agissait d’une méthode statique.</span><span class="sxs-lookup"><span data-stu-id="7df4d-400">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="7df4d-401">Les délégués sont créés pour la méthode statique `M3` de type `C` et type `F`; il s’agit des délégués statiques ouverts.</span><span class="sxs-lookup"><span data-stu-id="7df4d-401">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="7df4d-402">Enfin, les délégués sont créés pour la méthode statique `M4` de type `C` et type `F`; chaque méthode a le type déclarant comme premier argument, et une instance du type est fournie, les délégués sont fermés sur leurs premiers arguments .</span><span class="sxs-lookup"><span data-stu-id="7df4d-402">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="7df4d-403">Méthode `M4` de type `C` affiche le `ID` propriétés de l’instance liée et de l’argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-403">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-404"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-404"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-405">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-405">-or-</span></span> 
 <span data-ttu-id="7df4d-406"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-406"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-407"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-407"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-408">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-408">-or-</span></span> 
 <span data-ttu-id="7df4d-409"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-409"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-410">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-410">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-411">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-411">-or-</span></span> 
 <span data-ttu-id="7df4d-412"><paramref name="method" /> ne peut pas être liée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-412"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="7df4d-413">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-413">-or-</span></span> 
 <span data-ttu-id="7df4d-414"><paramref name="method" /> n'est pas un <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-414"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="7df4d-415">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-415">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-416">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-416">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-417">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-417">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-418">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-418">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-419">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-419">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-420"><see cref="T:System.Type" /> de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-420">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="7df4d-421">Instance de classe sur laquelle la méthode <paramref name="method" /> est appelée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-421">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-422">Nom de la méthode d’instance que doit représenter le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-422">The name of the instance method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="7df4d-423">Crée un délégué du type spécifié qui représente la méthode d'instance spécifiée à appeler sur l'instance de classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-423">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></summary>
        <returns><span data-ttu-id="7df4d-424">Délégué du type spécifié qui représente la méthode d'instance spécifiée à appeler sur l'instance de classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-424">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-425">Cette méthode crée des délégués par exemple uniquement des méthodes.</span><span class="sxs-lookup"><span data-stu-id="7df4d-425">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="7df4d-426">Une méthode d’instance est une méthode qui est associée à une instance d’une classe ; une méthode statique est une méthode qui est associée à la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="7df4d-426">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="7df4d-427">Cette surcharge de méthode revient à appeler le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> surcharge de méthode, en spécifiant `false` pour `ignoreCase` et `true` pour `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-427">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-428">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-428">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-429">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-429">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-430">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-430">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-431"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-431"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-432">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-432">-or-</span></span> 
 <span data-ttu-id="7df4d-433"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-433"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-434">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-434">-or-</span></span> 
 <span data-ttu-id="7df4d-435"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-435"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-436"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-436"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-437">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-437">-or-</span></span> 
 <span data-ttu-id="7df4d-438"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-438"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-439">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-439">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-440">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-440">-or-</span></span> 
 <span data-ttu-id="7df4d-441"><paramref name="method" /> n’est pas une méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-441"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="7df4d-442">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-442">-or-</span></span> 
 <span data-ttu-id="7df4d-443"><paramref name="method" /> ne peut pas être lié, ce qui peut arriver s’il est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-443"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-444">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-444">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-445">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-445">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-446">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-446">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-447">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-447">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-448"><see cref="T:System.Type" /> de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-448">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-449"><see cref="T:System.Reflection.MethodInfo" /> décrivant la méthode statique ou d’instance que le délégué doit représenter.</span><span class="sxs-lookup"><span data-stu-id="7df4d-449">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="7df4d-450"><see langword="true" /> pour lever une exception si <paramref name="method" /> ne peut pas être lié ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-450"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7df4d-451">Crée un délégué du type spécifié pour représenter la méthode statique spécifiée, avec le comportement spécifié en cas d'échec de la liaison.</span><span class="sxs-lookup"><span data-stu-id="7df4d-451">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="7df4d-452">Délégué du type spécifié pour représenter la méthode statique spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-452">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-453">Cette surcharge de méthode peut créer des délégués de méthode statique ouverte et méthode délégués d’instance ouverts - autrement dit, les délégués qui exposent le premier argument masqué des méthodes d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-453">This method overload can create open static method delegates and open instance method delegates - that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="7df4d-454">Pour obtenir une explication détaillée, consultez le plus général <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> surcharge de méthode, qui vous permet de créer toutes les combinaisons de délégués ouverts ou fermés par l’instance ou les méthodes statiques.</span><span class="sxs-lookup"><span data-stu-id="7df4d-454">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-455">Cette surcharge de méthode doit être utilisée lorsque le délégué n’est pas fermé sur son premier argument, car il est un peu plus rapide dans ce cas.</span><span class="sxs-lookup"><span data-stu-id="7df4d-455">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-456">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-456">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-457">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-457">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-458">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-458">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="7df4d-459">Types de paramètre compatibles et Type de retour</span><span class="sxs-lookup"><span data-stu-id="7df4d-459">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="7df4d-460">Les types de paramètre et le type de retour d’un délégué doivent être compatibles avec les types de paramètre et le type de retour de la méthode que le délégué représente ; les types n’ont pas à correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-460">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-461">Dans la version 1.0 et 1.1 du .NET Framework, les types doivent correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-461">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="7df4d-462">Le paramètre d'un délégué est compatible avec le paramètre correspondant d'une méthode si le type de paramètre du délégué est plus restrictif que le type de paramètre de la méthode. En effet, cela garantit qu'un argument transmis au délégué peut être transmis à la méthode en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="7df4d-462">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="7df4d-463">De même, le type de retour d'un délégué est compatible avec le type de retour d'une méthode si le type de retour de la méthode est plus restrictif que le type de retour du délégué, car cela garantit que le cast de la valeur de retour de la méthode peut être effectué sans risque au type de retour du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-463">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="7df4d-464">Par exemple, un délégué avec un paramètre de type <xref:System.Collections.Hashtable> et un type de retour <xref:System.Object> peut représenter une méthode avec un paramètre de type <xref:System.Object> et une valeur de retour de type <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="7df4d-464">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7df4d-465">Cette section contient deux exemples de code.</span><span class="sxs-lookup"><span data-stu-id="7df4d-465">This section contains two code examples.</span></span> <span data-ttu-id="7df4d-466">Le premier exemple montre les deux types délégués qui peuvent être créés avec cette surcharge de méthode : ouvrir sur une méthode d’instance et ouvert sur une méthode statique.</span><span class="sxs-lookup"><span data-stu-id="7df4d-466">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="7df4d-467">Le deuxième exemple de code illustre les types de paramètre compatibles et types de retour.</span><span class="sxs-lookup"><span data-stu-id="7df4d-467">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="7df4d-468">**Exemple 1**</span><span class="sxs-lookup"><span data-stu-id="7df4d-468">**Example 1**</span></span>  
  
 <span data-ttu-id="7df4d-469">L’exemple de code suivant montre deux façons un délégué peut être créé à l’aide de cette surcharge de la <xref:System.Delegate.CreateDelegate%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="7df4d-469">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-470">Il existe deux surcharges de la <xref:System.Delegate.CreateDelegate%2A> méthode qui spécifient un <xref:System.Reflection.MethodInfo> mais pas dans un premier argument ; leurs fonctionnalités sont identiques, sauf qu’une vous permet de spécifier s’il faut lever en cas d’échec pour lier et l’autre lève toujours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-470">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="7df4d-471">Cet exemple de code utilise les deux surcharges.</span><span class="sxs-lookup"><span data-stu-id="7df4d-471">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="7df4d-472">L’exemple déclare une classe `C` avec une méthode statique `M2` et une méthode d’instance `M1`, et deux types délégués : `D1` prend une instance de `C` et une chaîne, et `D2` prend une chaîne.</span><span class="sxs-lookup"><span data-stu-id="7df4d-472">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="7df4d-473">Une deuxième classe nommée `Example` contient le code qui crée les délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-473">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="7df4d-474">Un délégué du type `D1`, représentant une méthode d’instance ouverte, est créé pour la méthode d’instance `M1`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-474">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="7df4d-475">Une instance doit être passée lorsque le délégué est appelé.</span><span class="sxs-lookup"><span data-stu-id="7df4d-475">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="7df4d-476">Un délégué du type `D2`, représentant une méthode statique ouverte, est créé pour la méthode statique `M2`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-476">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="7df4d-477">**Exemple 2**</span><span class="sxs-lookup"><span data-stu-id="7df4d-477">**Example 2**</span></span>  
  
 <span data-ttu-id="7df4d-478">L’exemple de code suivant illustre la compatibilité des types de paramètres et types de retour.</span><span class="sxs-lookup"><span data-stu-id="7df4d-478">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-479">Cet exemple de code utilise le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-479">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="7df4d-480">L’utilisation d’autres surcharges qui prennent <xref:System.Reflection.MethodInfo> est similaire.</span><span class="sxs-lookup"><span data-stu-id="7df4d-480">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="7df4d-481">L’exemple de code définit une classe de base nommée `Base` et une classe nommée `Derived` qui dérive de `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-481">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="7df4d-482">La classe dérivée a un `static` (`Shared` en Visual Basic) méthode nommée `MyMethod` avec un paramètre de type `Base` et un type de retour `Derived`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-482">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="7df4d-483">L’exemple de code définit également un délégué nommé `Example` qui a un paramètre de type `Derived` et un type de retour `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-483">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="7df4d-484">L’exemple de code montre que le délégué nommé `Example` peut être utilisé pour représenter la méthode `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-484">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="7df4d-485">La méthode peut être liée au délégué, car :</span><span class="sxs-lookup"><span data-stu-id="7df4d-485">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="7df4d-486">Le type de paramètre du délégué (`Derived`) est plus restrictif que le type de paramètre de `MyMethod` (`Base`), afin qu’il soit toujours possible de passer l’argument du délégué à `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-486">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="7df4d-487">Le type de retour de `MyMethod` (`Derived`) est plus restrictif que le type de paramètre du délégué (`Base`), afin qu’il est toujours possible de convertir le type de retour de la méthode pour le type de retour du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-487">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="7df4d-488">L’exemple de code ne produit aucune sortie.</span><span class="sxs-lookup"><span data-stu-id="7df4d-488">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-489"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-489"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-490">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-490">-or-</span></span> 
 <span data-ttu-id="7df4d-491"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-491"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-492"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-492"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-493">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-493">-or-</span></span> 
 <span data-ttu-id="7df4d-494"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-494"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-495">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-495">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-496">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-496">-or-</span></span> 
 <span data-ttu-id="7df4d-497"><paramref name="method" /> ne peut pas être lié et <paramref name="throwOnBindFailure" /> a la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-497"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="7df4d-498">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-498">-or-</span></span> 
 <span data-ttu-id="7df4d-499"><paramref name="method" /> n'est pas un <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-499"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="7df4d-500">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-500">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-501">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-501">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-502">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-502">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-503">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-503">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-504">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-504">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-505"><see cref="T:System.Type" /> de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-505">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="7df4d-506"><see cref="T:System.Type" /> représentant la classe qui implémente <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-506">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-507">Nom de la méthode statique que doit représenter le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-507">The name of the static method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="7df4d-508">Crée un délégué du type spécifié qui représente la méthode statique spécifiée de la classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-508">Creates a delegate of the specified type that represents the specified static method of the specified class.</span></span></summary>
        <returns><span data-ttu-id="7df4d-509">Délégué du type spécifié qui représente la méthode statique spécifiée de la classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-509">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-510">Cette méthode crée des délégués pour les méthodes statiques uniquement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-510">This method creates delegates for static methods only.</span></span> <span data-ttu-id="7df4d-511">Une méthode d’instance est une méthode qui est associée à une instance d’une classe ; une méthode statique est une méthode qui est associée à la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="7df4d-511">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="7df4d-512">Cette surcharge de méthode revient à appeler le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> surcharge de méthode, en spécifiant `false` pour `ignoreCase` et `true` pour `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-512">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-513">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-513">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-514">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-514">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-515">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-515">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-516"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-516"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-517">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-517">-or-</span></span> 
 <span data-ttu-id="7df4d-518"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-518"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-519">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-519">-or-</span></span> 
 <span data-ttu-id="7df4d-520"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-520"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-521"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-521"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-522">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-522">-or-</span></span> 
 <span data-ttu-id="7df4d-523"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-523"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-524">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-524">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-525">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-525">-or-</span></span> 
 <span data-ttu-id="7df4d-526"><paramref name="target" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-526"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="7df4d-527">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-527">-or-</span></span> 
 <span data-ttu-id="7df4d-528"><paramref name="target" /> est un type générique ouvert.</span><span class="sxs-lookup"><span data-stu-id="7df4d-528"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="7df4d-529">Autrement dit, sa propriété <see cref="P:System.Type.ContainsGenericParameters" /> a la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-529">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="7df4d-530">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-530">-or-</span></span> 
 <span data-ttu-id="7df4d-531"><paramref name="method" /> n’est pas une méthode <see langword="static" /> (méthode <see langword="Shared" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7df4d-531"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="7df4d-532">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-532">-or-</span></span> 
 <span data-ttu-id="7df4d-533"><paramref name="method" /> ne peut pas être lié, par exemple car elle est introuvable, et <paramref name="throwOnBindFailure" /> a la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-533"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-534">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-534">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-535">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-535">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-536">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-536">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-537">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-537">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-538"><see cref="T:System.Type" /> représentant le type de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-538">A <see cref="T:System.Type" /> representing the type of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="7df4d-539"><see cref="T:System.Object" /> correspondant au premier argument de la méthode que le délégué représente.</span><span class="sxs-lookup"><span data-stu-id="7df4d-539">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span></span> <span data-ttu-id="7df4d-540">Pour les méthodes d'instance, il doit être compatible avec le type d'instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-540">For instance methods, it must be compatible with the instance type.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-541"><see cref="T:System.Reflection.MethodInfo" /> décrivant la méthode statique ou d’instance que le délégué doit représenter.</span><span class="sxs-lookup"><span data-stu-id="7df4d-541">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="7df4d-542"><see langword="true" /> pour lever une exception si <paramref name="method" /> ne peut pas être lié ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-542"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7df4d-543">Crée un délégué du type spécifié qui représente la méthode statique ou d'instance spécifiée, avec le premier argument spécifié et le comportement spécifié en cas d'échec de la liaison.</span><span class="sxs-lookup"><span data-stu-id="7df4d-543">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="7df4d-544">Délégué du type spécifié qui représente la méthode statique ou d’instance spécifiée, ou <see langword="null" /> si <paramref name="throwOnBindFailure" /> a la valeur <see langword="false" /> et que le délégué ne peut pas être lié à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-544">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-545">Cette surcharge de méthode et la <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> surcharge de méthode qui lève toujours une exception en cas d’échec à lier, le moyen le plus flexible pour créer des délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-545">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="7df4d-546">Vous pouvez les utiliser pour créer des délégués pour statiques ou des méthodes d’instance, avec ou sans un premier argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-546">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-547">Si vous ne fournissez pas un premier argument, utilisez le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> surcharge de méthode pour de meilleures performances.</span><span class="sxs-lookup"><span data-stu-id="7df4d-547">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="7df4d-548">Le type de délégué et la méthode doivent avoir des types de retournés compatibles.</span><span class="sxs-lookup"><span data-stu-id="7df4d-548">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="7df4d-549">Autrement dit, le type de retour de `method` doit être assignable au type de retour de `type`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-549">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="7df4d-550">Si `firstArgument` est fourni, il est passé à `method` chaque fois que le délégué est appelé ; `firstArgument` est considéré comme lié au délégué, et le délégué est dit être fermé sur son premier argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-550">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="7df4d-551">Si `method` est `static` (`Shared` en Visual Basic), l’argument fourni lorsque vous appelez le délégué de liste inclut tous les paramètres sauf la première ; si `method` est une méthode d’instance, puis `firstArgument` est passée à l’instance masquée paramètre (représenté par `this` dans c#, ou par `Me` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7df4d-551">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="7df4d-552">Si `firstArgument` est fourni, le premier paramètre de `method` doit être un type référence, et `firstArgument` doit être compatible avec ce type.</span><span class="sxs-lookup"><span data-stu-id="7df4d-552">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7df4d-553">Si `method` est `static` (`Shared` en Visual Basic) et son premier paramètre est de type <xref:System.Object> ou <xref:System.ValueType>, puis `firstArgument` peut être un type valeur.</span><span class="sxs-lookup"><span data-stu-id="7df4d-553">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="7df4d-554">Dans ce cas `firstArgument` est automatiquement converti (boxed).</span><span class="sxs-lookup"><span data-stu-id="7df4d-554">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="7df4d-555">Boxing automatique ne se produit pas pour les autres arguments, comme il s’agissait dans une fonction c# ou Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7df4d-555">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="7df4d-556">Si `firstArgument` est une référence null et `method` est une méthode d’instance, le résultat dépend des signatures du type délégué `type` et de `method`:</span><span class="sxs-lookup"><span data-stu-id="7df4d-556">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="7df4d-557">Si la signature de `type` n’inclut pas explicitement le premier paramètre masqué de `method`, le délégué est dit représenter une méthode d’instance ouverte.</span><span class="sxs-lookup"><span data-stu-id="7df4d-557">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="7df4d-558">Lorsque le délégué est appelé, le premier argument de la liste d’arguments est passé au paramètre d’instance masqué `method`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-558">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="7df4d-559">Si les signatures de `method` et `type` correspond à (autrement dit, tous les types de paramètre sont compatibles), le délégué est dit être fermé sur une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-559">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="7df4d-560">Appel du délégué est à l’appel d’une méthode d’instance sur une instance null, ce qui n’est pas une chose particulièrement utile à faire.</span><span class="sxs-lookup"><span data-stu-id="7df4d-560">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="7df4d-561">Si `firstArgument` est une référence null et `method` est statique, le résultat dépend des signatures du type délégué `type` et de `method`:</span><span class="sxs-lookup"><span data-stu-id="7df4d-561">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="7df4d-562">Si la signature de `method` et `type` correspond à (autrement dit, tous les types de paramètre sont compatibles), le délégué est dit représenter une méthode statique ouverte.</span><span class="sxs-lookup"><span data-stu-id="7df4d-562">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="7df4d-563">Il s’agit du cas le plus courant pour les méthodes statiques.</span><span class="sxs-lookup"><span data-stu-id="7df4d-563">This is the most common case for static methods.</span></span> <span data-ttu-id="7df4d-564">Dans ce cas, vous pouvez obtenir des performances légèrement meilleures en utilisant la <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-564">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="7df4d-565">Si la signature de `type` commence par le deuxième paramètre de `method` le reste des types de paramètres sont compatibles, puis le délégué est dit être fermé sur une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-565">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="7df4d-566">Lorsque le délégué est appelé, une référence null est passée au premier paramètre de `method`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-566">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-567">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-567">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-568">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-568">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-569">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-569">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="7df4d-570">Types de paramètre compatibles et Type de retour</span><span class="sxs-lookup"><span data-stu-id="7df4d-570">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="7df4d-571">Les types de paramètre et le type de retour d’un délégué doivent être compatibles avec les types de paramètre et le type de retour de la méthode que le délégué représente ; les types n’ont pas à correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-571">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-572">Dans le .NET Framework version 1.0 et 1.1, les types doivent correspondre exactement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-572">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="7df4d-573">Le paramètre d'un délégué est compatible avec le paramètre correspondant d'une méthode si le type de paramètre du délégué est plus restrictif que le type de paramètre de la méthode. En effet, cela garantit qu'un argument transmis au délégué peut être transmis à la méthode en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="7df4d-573">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="7df4d-574">De même, le type de retour d'un délégué est compatible avec le type de retour d'une méthode si le type de retour de la méthode est plus restrictif que le type de retour du délégué, car cela garantit que le cast de la valeur de retour de la méthode peut être effectué sans risque au type de retour du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-574">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="7df4d-575">Par exemple, un délégué avec un paramètre de type <xref:System.Collections.Hashtable> et un type de retour <xref:System.Object> peut représenter une méthode avec un paramètre de type <xref:System.Object> et une valeur de retour de type <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="7df4d-575">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="7df4d-576">Déterminer les méthodes d’un délégué peut représenter.</span><span class="sxs-lookup"><span data-stu-id="7df4d-576">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="7df4d-577">Une autre façon utile de penser à la souplesse de cette surcharge de <xref:System.Delegate.CreateDelegate%2A> est qu’un délégué donné peut représenter quatre combinaisons différentes de signature de méthode et le type de méthode (statique contre instance).</span><span class="sxs-lookup"><span data-stu-id="7df4d-577">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="7df4d-578">Considérez un type délégué `D` avec un argument de type `C`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-578">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="7df4d-579">La section suivante décrit les méthodes `D` peuvent représenter, en ignorant le type de retour dans la mesure où il doit correspondre dans tous les cas :</span><span class="sxs-lookup"><span data-stu-id="7df4d-579">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="7df4d-580">`D` peut représenter n’importe quelle méthode d’instance qui a exactement un argument de type `C`, quel que soit le type auquel appartient la méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-580">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="7df4d-581">Lorsque <xref:System.Delegate.CreateDelegate%2A> est appelée, `firstArgument` est une instance du type `method` appartient, et le délégué résultant est dit être fermé sur cette instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-581">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="7df4d-582">(Plus simplement, `D` peut aussi être fermé sur une référence null si `firstArgument` est `null`.)</span><span class="sxs-lookup"><span data-stu-id="7df4d-582">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="7df4d-583">`D` peut représenter une méthode d’instance de `C` qui n’a aucun argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-583">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="7df4d-584">Lorsque <xref:System.Delegate.CreateDelegate%2A> est appelée, `firstArgument` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-584">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="7df4d-585">Le délégué résultant représente une méthode d’instance ouverte et une instance de `C` doit être fourni à chaque fois qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-585">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="7df4d-586">`D` peut représenter une méthode statique qui prend un argument de type `C`, et cette méthode peut appartenir à n’importe quel type.</span><span class="sxs-lookup"><span data-stu-id="7df4d-586">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="7df4d-587">Lorsque <xref:System.Delegate.CreateDelegate%2A> est appelée, `firstArgument` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-587">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="7df4d-588">Le délégué résultant représente une méthode statique ouverte et une instance de `C` doit être fourni à chaque fois qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-588">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="7df4d-589">`D` peut représenter une méthode statique appartenant au type `F` et a deux arguments de type `F` et type `C`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-589">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="7df4d-590">Lorsque <xref:System.Delegate.CreateDelegate%2A> est appelée, `firstArgument` est une instance de `F`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-590">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="7df4d-591">Le délégué résultant représente une méthode statique qui est fermée sur cette instance de `F`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-591">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="7df4d-592">Notez que dans le cas où `F` et `C` sont du même type, la méthode statique a deux arguments de ce type.</span><span class="sxs-lookup"><span data-stu-id="7df4d-592">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="7df4d-593">(Dans ce cas, `D` est fermé sur une référence null si `firstArgument` est `null`.)</span><span class="sxs-lookup"><span data-stu-id="7df4d-593">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7df4d-594">Cette section contient trois exemples de code.</span><span class="sxs-lookup"><span data-stu-id="7df4d-594">This section contains three code examples.</span></span> <span data-ttu-id="7df4d-595">Le premier exemple illustre les quatre types de délégués qui peuvent être créés : fermé sur une méthode d’instance, ouverte sur une méthode d’instance, ouverte sur une méthode statique et fermé sur une méthode statique.</span><span class="sxs-lookup"><span data-stu-id="7df4d-595">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="7df4d-596">Le deuxième exemple de code illustre les types de paramètre compatibles et types de retour.</span><span class="sxs-lookup"><span data-stu-id="7df4d-596">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="7df4d-597">Le troisième exemple de code définit un type délégué simple et affiche toutes les méthodes que le type délégué peuvent représenter.</span><span class="sxs-lookup"><span data-stu-id="7df4d-597">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="7df4d-598">**Exemple 1**</span><span class="sxs-lookup"><span data-stu-id="7df4d-598">**Example 1**</span></span>  
  
 <span data-ttu-id="7df4d-599">L’exemple de code suivant montre les quatre façons un délégué peut être créé à l’aide de cette surcharge de la <xref:System.Delegate.CreateDelegate%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="7df4d-599">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-600">Il existe deux surcharges de la <xref:System.Delegate.CreateDelegate%2A> méthode spécifier `firstArgument` et un <xref:System.Reflection.MethodInfo>; leurs fonctionnalités sont identiques, sauf qu’une vous permet de spécifier s’il faut lever en cas d’échec pour lier et l’autre lève toujours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-600">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="7df4d-601">Cet exemple de code utilise les deux surcharges.</span><span class="sxs-lookup"><span data-stu-id="7df4d-601">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="7df4d-602">L’exemple déclare une classe `C` avec une méthode statique `M2` et une méthode d’instance `M1`, et trois types délégués : `D1` prend une instance de `C` et une chaîne, `D2` prend une chaîne et `D3`n’a aucun argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-602">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="7df4d-603">Une deuxième classe nommée `Example` contient le code qui crée les délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-603">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="7df4d-604">Un délégué du type `D2`, fermé sur une instance de `C`, est créé pour la méthode d’instance `M1`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-604">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="7df4d-605">Il est appelé avec différentes chaînes, pour indiquer que l’instance liée de `C` est toujours utilisé.</span><span class="sxs-lookup"><span data-stu-id="7df4d-605">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="7df4d-606">Un délégué du type `D1`, représentant une méthode d’instance ouverte, est créé pour la méthode d’instance `M1`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-606">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="7df4d-607">Une instance doit être passée lorsque le délégué est appelé.</span><span class="sxs-lookup"><span data-stu-id="7df4d-607">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="7df4d-608">Un délégué du type `D2`, représentant une méthode statique ouverte, est créé pour la méthode statique `M2`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-608">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="7df4d-609">Enfin, un délégué du type `D3`, fermé sur une chaîne, est créé pour la méthode statique `M2`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-609">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="7df4d-610">La méthode est appelée pour montrer qu’il utilise la chaîne liée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-610">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="7df4d-611">**Exemple 2**</span><span class="sxs-lookup"><span data-stu-id="7df4d-611">**Example 2**</span></span>  
  
 <span data-ttu-id="7df4d-612">L’exemple de code suivant illustre la compatibilité des types de paramètres et types de retour.</span><span class="sxs-lookup"><span data-stu-id="7df4d-612">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-613">Cet exemple de code utilise le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-613">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="7df4d-614">L’utilisation d’autres surcharges qui prennent <xref:System.Reflection.MethodInfo> est similaire.</span><span class="sxs-lookup"><span data-stu-id="7df4d-614">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="7df4d-615">L’exemple de code définit une classe de base nommée `Base` et une classe nommée `Derived` qui dérive de `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-615">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="7df4d-616">La classe dérivée a un `static` (`Shared` en Visual Basic) méthode nommée `MyMethod` avec un paramètre de type `Base` et un type de retour `Derived`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-616">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="7df4d-617">L’exemple de code définit également un délégué nommé `Example` qui a un paramètre de type `Derived` et un type de retour `Base`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-617">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="7df4d-618">L’exemple de code montre que le délégué nommé `Example` peut être utilisé pour représenter la méthode `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-618">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="7df4d-619">La méthode peut être liée au délégué, car :</span><span class="sxs-lookup"><span data-stu-id="7df4d-619">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="7df4d-620">Le type de paramètre du délégué (`Derived`) est plus restrictif que le type de paramètre de `MyMethod` (`Base`), afin qu’il soit toujours possible de passer l’argument du délégué à `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-620">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="7df4d-621">Le type de retour de `MyMethod` (`Derived`) est plus restrictif que le type de paramètre du délégué (`Base`), afin qu’il est toujours possible de convertir le type de retour de la méthode pour le type de retour du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-621">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="7df4d-622">L’exemple de code ne produit aucune sortie.</span><span class="sxs-lookup"><span data-stu-id="7df4d-622">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="7df4d-623">**Exemple 3**</span><span class="sxs-lookup"><span data-stu-id="7df4d-623">**Example 3**</span></span>  
  
 <span data-ttu-id="7df4d-624">L’exemple de code suivant montre toutes les méthodes de qu'un type délégué simple peut représenter.</span><span class="sxs-lookup"><span data-stu-id="7df4d-624">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-625">Il existe deux surcharges de la <xref:System.Delegate.CreateDelegate%2A> méthode spécifier `firstArgument` et un <xref:System.Reflection.MethodInfo>; leurs fonctionnalités sont identiques, sauf qu’une vous permet de spécifier s’il faut lever en cas d’échec pour lier et l’autre lève toujours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-625">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="7df4d-626">Cet exemple de code utilise les deux surcharges.</span><span class="sxs-lookup"><span data-stu-id="7df4d-626">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="7df4d-627">L’exemple de code définit deux classes, `C` et `F`et un type délégué `D` avec un argument de type `C`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-627">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="7df4d-628">Les classes ont la mise en correspondance statique et méthodes d’instance `M1`, `M3`, et `M4`et classe `C` a également une méthode d’instance `M2` qui n’a aucun argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-628">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="7df4d-629">Une troisième classe nommée `Example` contient le code qui crée les délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-629">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="7df4d-630">Les délégués sont créés pour instance méthode `M1` de type `C` et type `F`; chacun est fermé sur une instance du type respectif.</span><span class="sxs-lookup"><span data-stu-id="7df4d-630">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="7df4d-631">Méthode `M1` de type `C` affiche le `ID` propriétés de l’instance liée et de l’argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-631">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="7df4d-632">Un délégué est créé pour la méthode `M2` de type `C`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-632">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="7df4d-633">Il s’agit d’un délégué d’ouvrir une instance, dans laquelle l’argument du délégué représente le premier argument masqué sur la méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-633">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="7df4d-634">La méthode ne possède aucun autre argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-634">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="7df4d-635">Les délégués sont créés pour la méthode statique `M3` de type `C` et type `F`; il s’agit des délégués statiques ouverts.</span><span class="sxs-lookup"><span data-stu-id="7df4d-635">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="7df4d-636">Enfin, les délégués sont créés pour la méthode statique `M4` de type `C` et type `F`; chaque méthode a le type déclarant comme premier argument, et une instance du type est fournie, les délégués sont fermés sur leurs premiers arguments .</span><span class="sxs-lookup"><span data-stu-id="7df4d-636">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="7df4d-637">Méthode `M4` de type `C` affiche le `ID` propriétés de l’instance liée et de l’argument.</span><span class="sxs-lookup"><span data-stu-id="7df4d-637">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-638"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-638"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-639">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-639">-or-</span></span> 
 <span data-ttu-id="7df4d-640"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-640"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-641"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-641"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-642">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-642">-or-</span></span> 
 <span data-ttu-id="7df4d-643"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-643"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-644">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-644">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-645">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-645">-or-</span></span> 
 <span data-ttu-id="7df4d-646"><paramref name="method" /> ne peut pas être lié et <paramref name="throwOnBindFailure" /> a la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-646"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="7df4d-647">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-647">-or-</span></span> 
 <span data-ttu-id="7df4d-648"><paramref name="method" /> n'est pas un <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-648"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="7df4d-649">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-649">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-650">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-650">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-651">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-651">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-652">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-652">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-653">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-653">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-654"><see cref="T:System.Type" /> de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-654">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="7df4d-655">Instance de classe sur laquelle la méthode <paramref name="method" /> est appelée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-655">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-656">Nom de la méthode d’instance que doit représenter le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-656">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7df4d-657">Valeur booléenne indiquant si la casse doit être ignorée pendant la comparaison du nom de la méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-657">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="7df4d-658">Crée un délégué du type spécifié qui représente la méthode d'instance spécifiée à appeler sur l'instance de classe spécifiée, avec le respect de la casse spécifié.</span><span class="sxs-lookup"><span data-stu-id="7df4d-658">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="7df4d-659">Délégué du type spécifié qui représente la méthode d'instance spécifiée à appeler sur l'instance de classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-659">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-660">Cette méthode crée des délégués par exemple uniquement des méthodes.</span><span class="sxs-lookup"><span data-stu-id="7df4d-660">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="7df4d-661">Une méthode d’instance est une méthode qui est associée à une instance d’une classe ; une méthode statique est une méthode qui est associée à la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="7df4d-661">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="7df4d-662">Cette surcharge de méthode revient à appeler le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> surcharge de méthode, en spécifiant `true` pour `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-662">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-663">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-663">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-664">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-664">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-665">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-665">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-666"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-666"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-667">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-667">-or-</span></span> 
 <span data-ttu-id="7df4d-668"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-668"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-669">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-669">-or-</span></span> 
 <span data-ttu-id="7df4d-670"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-670"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-671"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-671"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-672">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-672">-or-</span></span> 
 <span data-ttu-id="7df4d-673"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-673"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-674">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-674">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-675">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-675">-or-</span></span> 
 <span data-ttu-id="7df4d-676"><paramref name="method" /> n’est pas une méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-676"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="7df4d-677">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-677">-or-</span></span> 
 <span data-ttu-id="7df4d-678"><paramref name="method" /> ne peut pas être lié, ce qui peut arriver s’il est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-678"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-679">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-679">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-680">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-680">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-681">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-681">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-682">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-682">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-683"><see cref="T:System.Type" /> de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-683">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="7df4d-684"><see cref="T:System.Type" /> représentant la classe qui implémente <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-684">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-685">Nom de la méthode statique que doit représenter le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-685">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7df4d-686">Valeur booléenne indiquant si la casse doit être ignorée pendant la comparaison du nom de la méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-686">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="7df4d-687">Crée un délégué du type spécifié qui représente la méthode statique spécifiée de la classe spécifiée, avec le respect de la casse spécifié.</span><span class="sxs-lookup"><span data-stu-id="7df4d-687">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="7df4d-688">Délégué du type spécifié qui représente la méthode statique spécifiée de la classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-688">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-689">Cette méthode crée des délégués pour les méthodes statiques uniquement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-689">This method creates delegates for static methods only.</span></span> <span data-ttu-id="7df4d-690">Une méthode d’instance est une méthode qui est associée à une instance d’une classe ; une méthode statique est une méthode qui est associée à la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="7df4d-690">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="7df4d-691">Cette surcharge de méthode revient à appeler le <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> surcharge de méthode, en spécifiant `true` pour `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-691">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-692">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-692">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-693">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-693">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-694">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-694">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-695"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-695"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-696">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-696">-or-</span></span> 
 <span data-ttu-id="7df4d-697"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-697"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-698">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-698">-or-</span></span> 
 <span data-ttu-id="7df4d-699"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-699"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-700"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-700"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-701">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-701">-or-</span></span> 
 <span data-ttu-id="7df4d-702"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-702"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-703">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-703">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-704">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-704">-or-</span></span> 
 <span data-ttu-id="7df4d-705"><paramref name="target" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-705"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="7df4d-706">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-706">-or-</span></span> 
 <span data-ttu-id="7df4d-707"><paramref name="target" /> est un type générique ouvert.</span><span class="sxs-lookup"><span data-stu-id="7df4d-707"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="7df4d-708">Autrement dit, sa propriété <see cref="P:System.Type.ContainsGenericParameters" /> a la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-708">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="7df4d-709">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-709">-or-</span></span> 
 <span data-ttu-id="7df4d-710"><paramref name="method" /> n’est pas une méthode <see langword="static" /> (méthode <see langword="Shared" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7df4d-710"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="7df4d-711">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-711">-or-</span></span> 
 <span data-ttu-id="7df4d-712"><paramref name="method" /> ne peut pas être lié, ce qui peut arriver s’il est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-712"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-713">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-713">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-714">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-714">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-715">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-715">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-716">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-716">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-717"><see cref="T:System.Type" /> de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-717">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="7df4d-718">Instance de classe sur laquelle la méthode <paramref name="method" /> est appelée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-718">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-719">Nom de la méthode d’instance que doit représenter le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-719">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7df4d-720">Valeur booléenne indiquant si la casse doit être ignorée pendant la comparaison du nom de la méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-720">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="7df4d-721"><see langword="true" /> pour lever une exception si <paramref name="method" /> ne peut pas être lié ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-721"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7df4d-722">Crée un délégué du type spécifié qui représente la méthode d'instance spécifiée à appeler sur l'instance de classe spécifiée, avec le respect de la casse spécifié et le comportement spécifié en cas d'échec de la liaison.</span><span class="sxs-lookup"><span data-stu-id="7df4d-722">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="7df4d-723">Délégué du type spécifié qui représente la méthode d'instance spécifiée à appeler sur l'instance de classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-723">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-724">Cette méthode crée des délégués par exemple uniquement des méthodes.</span><span class="sxs-lookup"><span data-stu-id="7df4d-724">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="7df4d-725">Une méthode d’instance est une méthode qui est associée à une instance d’une classe ; une méthode statique est une méthode qui est associée à la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="7df4d-725">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-726">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-726">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-727">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-727">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-728">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-728">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-729"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-729"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-730">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-730">-or-</span></span> 
 <span data-ttu-id="7df4d-731"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-731"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-732">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-732">-or-</span></span> 
 <span data-ttu-id="7df4d-733"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-733"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-734"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-734"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-735">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-735">-or-</span></span> 
 <span data-ttu-id="7df4d-736"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-736"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-737">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-737">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-738">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-738">-or-</span></span> 
 <span data-ttu-id="7df4d-739"><paramref name="method" /> n’est pas une méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-739"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="7df4d-740">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-740">-or-</span></span> 
 <span data-ttu-id="7df4d-741"><paramref name="method" /> ne peut pas être lié, par exemple car elle est introuvable, et <paramref name="throwOnBindFailure" /> a la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-741"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-742">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-742">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-743">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-743">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-744">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-744">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-745">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-745">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7df4d-746"><see cref="T:System.Type" /> de délégué à créer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-746">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="7df4d-747"><see cref="T:System.Type" /> représentant la classe qui implémente <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-747">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="7df4d-748">Nom de la méthode statique que doit représenter le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-748">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7df4d-749">Valeur booléenne indiquant si la casse doit être ignorée pendant la comparaison du nom de la méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-749">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="7df4d-750"><see langword="true" /> pour lever une exception si <paramref name="method" /> ne peut pas être lié ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-750"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7df4d-751">Crée un délégué du type spécifié qui représente la méthode statique spécifiée de la classe spécifiée, avec le respect de la casse spécifié et le comportement spécifié en cas d'échec de la liaison.</span><span class="sxs-lookup"><span data-stu-id="7df4d-751">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="7df4d-752">Délégué du type spécifié qui représente la méthode statique spécifiée de la classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-752">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-753">Cette méthode crée des délégués pour les méthodes statiques uniquement.</span><span class="sxs-lookup"><span data-stu-id="7df4d-753">This method creates delegates for static methods only.</span></span> <span data-ttu-id="7df4d-754">Une méthode d’instance est une méthode qui est associée à une instance d’une classe ; une méthode statique est une méthode qui est associée à la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="7df4d-754">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7df4d-755">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode peut être utilisée pour accéder à des méthodes non publiques si l’appelant a été accordé <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur et si le jeu d’autorisations des méthodes non publiques est limité à l’appelant accorder ensemble ou un sous-ensemble son.</span><span class="sxs-lookup"><span data-stu-id="7df4d-755">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="7df4d-756">(Consultez [considérations de sécurité pour la réflexion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="7df4d-756">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7df4d-757">Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="7df4d-757">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7df4d-758"><paramref name="type" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-758"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-759">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-759">-or-</span></span> 
 <span data-ttu-id="7df4d-760"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-760"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-761">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-761">-or-</span></span> 
 <span data-ttu-id="7df4d-762"><paramref name="method" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-762"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-763"><paramref name="type" /> n’hérite pas de <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-763"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="7df4d-764">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-764">-or-</span></span> 
 <span data-ttu-id="7df4d-765"><paramref name="type" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-765"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="7df4d-766">Consultez [Types au moment de l’exécution dans la réflexion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="7df4d-766">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="7df4d-767">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-767">-or-</span></span> 
 <span data-ttu-id="7df4d-768"><paramref name="target" /> n'est pas un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-768"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="7df4d-769">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-769">-or-</span></span> 
 <span data-ttu-id="7df4d-770"><paramref name="target" /> est un type générique ouvert.</span><span class="sxs-lookup"><span data-stu-id="7df4d-770"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="7df4d-771">Autrement dit, sa propriété <see cref="P:System.Type.ContainsGenericParameters" /> a la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-771">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="7df4d-772">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-772">-or-</span></span> 
 <span data-ttu-id="7df4d-773"><paramref name="method" /> n’est pas une méthode <see langword="static" /> (méthode <see langword="Shared" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7df4d-773"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="7df4d-774">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-774">-or-</span></span> 
 <span data-ttu-id="7df4d-775"><paramref name="method" /> ne peut pas être lié, par exemple car elle est introuvable, et <paramref name="throwOnBindFailure" /> a la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-775"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="7df4d-776">La méthode <see langword="Invoke" /> de <paramref name="type" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-776">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="7df4d-777">L’appelant ne dispose pas des autorisations nécessaires pour accéder à <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-777">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-778">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-778">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-779">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-779">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="7df4d-780">Tableau d’objets correspondants aux arguments à passer à la méthode représentée par le délégué actuel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-780">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="7df4d-781">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-781">-or-</span></span> 
 <span data-ttu-id="7df4d-782"><see langword="null" />, si la méthode représentée par le délégué en cours ne requiert pas d'arguments.</span><span class="sxs-lookup"><span data-stu-id="7df4d-782"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="7df4d-783">Appelle de manière dynamique (avec liaison tardive) la méthode représentée par le délégué actuel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-783">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-784">Objet retourné par la méthode représentée par le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-784">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-785">Cette méthode appelle la méthode <xref:System.Delegate.DynamicInvokeImpl%2A>.</span><span class="sxs-lookup"><span data-stu-id="7df4d-785">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7df4d-786">L’appelant n’a pas accès à la méthode représentée par le délégué (par exemple, si la méthode est privée).</span><span class="sxs-lookup"><span data-stu-id="7df4d-786">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="7df4d-787">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-787">-or-</span></span> 
<span data-ttu-id="7df4d-788">Le nombre, l'ordre ou le type des paramètres répertoriés dans <paramref name="args" /> n'est pas valide.</span><span class="sxs-lookup"><span data-stu-id="7df4d-788">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-789">La méthode représentée par le délégué est appelée sur un objet ou une classe qui ne la prend pas en charge.</span><span class="sxs-lookup"><span data-stu-id="7df4d-789">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="7df4d-790">La méthode représentée par ce délégué est une méthode d'instance et l'objet cible est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-790">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-791">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-791">-or-</span></span> 
<span data-ttu-id="7df4d-792">L'une des méthodes encapsulées lève une exception.</span><span class="sxs-lookup"><span data-stu-id="7df4d-792">One of the encapsulated methods throws an exception.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-793">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-793">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-794">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-794">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="7df4d-795">Tableau d’objets correspondants aux arguments à passer à la méthode représentée par le délégué actuel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-795">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="7df4d-796">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-796">-or-</span></span> 
 <span data-ttu-id="7df4d-797"><see langword="null" />, si la méthode représentée par le délégué en cours ne requiert pas d'arguments.</span><span class="sxs-lookup"><span data-stu-id="7df4d-797"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="7df4d-798">Appelle de manière dynamique (avec liaison tardive) la méthode représentée par le délégué actuel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-798">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-799">Objet retourné par la méthode représentée par le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-799">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-800">Cette méthode implémente la méthode <xref:System.Delegate.DynamicInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="7df4d-800">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7df4d-801">L’appelant n’a pas accès à la méthode représentée par le délégué (par exemple, si la méthode est privée).</span><span class="sxs-lookup"><span data-stu-id="7df4d-801">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="7df4d-802">ou</span><span class="sxs-lookup"><span data-stu-id="7df4d-802">-or-</span></span> 
<span data-ttu-id="7df4d-803">Le nombre, l'ordre ou le type des paramètres répertoriés dans <paramref name="args" /> n'est pas valide.</span><span class="sxs-lookup"><span data-stu-id="7df4d-803">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-804">La méthode représentée par le délégué est appelée sur un objet ou une classe qui ne la prend pas en charge.</span><span class="sxs-lookup"><span data-stu-id="7df4d-804">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="7df4d-805">La méthode représentée par ce délégué est une méthode d'instance et l'objet cible est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-805">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="7df4d-806">- ou -</span><span class="sxs-lookup"><span data-stu-id="7df4d-806">-or-</span></span> 
<span data-ttu-id="7df4d-807">L'une des méthodes encapsulées lève une exception.</span><span class="sxs-lookup"><span data-stu-id="7df4d-807">One of the encapsulated methods throws an exception.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-808">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-808">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-809">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-809">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7df4d-810">L’objet à comparer avec le délégué actuel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-810">The object to compare with the current delegate.</span></span></param>
        <summary><span data-ttu-id="7df4d-811">Détermine si l'objet spécifié et le délégué actuel sont du même type et partagent les mêmes cibles, méthodes et liste d'appel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-811">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span></span></summary>
        <returns><span data-ttu-id="7df4d-812"><see langword="true" /> si <paramref name="obj" /> et le délégué actuel ont les mêmes cibles, méthodes et liste d’appel ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-812"><see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-813">Si les deux délégués ne sont pas du même type, ils ne sont pas considérés égaux.</span><span class="sxs-lookup"><span data-stu-id="7df4d-813">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7df4d-814">Dans la version 1.0 et 1.1 du .NET Framework, deux délégués ont été considérés comme égaux si leurs cibles, méthodes et liste d’appel sont égales, même si les délégués sont de types différents.</span><span class="sxs-lookup"><span data-stu-id="7df4d-814">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="7df4d-815">Les méthodes et les cibles sont comparées pour l’égalité, comme suit :</span><span class="sxs-lookup"><span data-stu-id="7df4d-815">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="7df4d-816">Si les deux méthodes comparées toutes deux sont statiques et la même méthode sur la même classe, les méthodes sont considérées comme égales et les cibles sont également considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-816">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="7df4d-817">Si les deux méthodes comparés sont des méthodes d’instance et la même méthode sur le même objet, les méthodes sont considérées comme égales et les cibles sont également considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-817">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="7df4d-818">Sinon, les méthodes ne sont pas considérés comme égal et les cibles sont également pas considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-818">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="7df4d-819">Deux listes d’appel sont considérés comme identiques uniquement si elles ont le même ordre et les éléments correspondants dans les deux listes représentent la même méthode et la cible.</span><span class="sxs-lookup"><span data-stu-id="7df4d-819">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7df4d-820">L’appelant n’a pas accès à la méthode représentée par le délégué (par exemple, si la méthode est privée).</span><span class="sxs-lookup"><span data-stu-id="7df4d-820">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-821">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-821">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-822">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-822">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7df4d-823">Retourne un code de hachage pour le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-823">Returns a hash code for the delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-824">Code de hachage du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-824">A hash code for the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-825">La valeur de retour de cette méthode ne doit pas être persistante pour deux raisons.</span><span class="sxs-lookup"><span data-stu-id="7df4d-825">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="7df4d-826">Tout d’abord, la fonction de hachage d’une classe peut être modifiée pour générer une meilleure distribution, toutes les valeurs à partir de l’ancienne fonction de hachage de rendu inutilisable.</span><span class="sxs-lookup"><span data-stu-id="7df4d-826">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="7df4d-827">Deuxièmement, l’implémentation par défaut de cette classe ne garantit pas que la même valeur sera retournée par différentes instances.</span><span class="sxs-lookup"><span data-stu-id="7df4d-827">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-828">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-828">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-829">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-829">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7df4d-830">Retourne la liste d'appel du délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-830">Returns the invocation list of the delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-831">Tableau de délégués représentant la liste d'appel du délégué actuel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-831">An array of delegates representing the invocation list of the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-832">Chaque délégué dans le tableau représente exactement une méthode.</span><span class="sxs-lookup"><span data-stu-id="7df4d-832">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="7df4d-833">L’ordre des délégués dans le tableau est le même ordre que celui dans lequel le délégué actuel appelle les méthodes qui représentent ces délégués.</span><span class="sxs-lookup"><span data-stu-id="7df4d-833">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7df4d-834">L’exemple suivant affecte les trois méthodes à un délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-834">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="7df4d-835">Il appelle ensuite la <xref:System.Delegate.GetInvocationList%2A> méthode pour obtenir le nombre total des méthodes assignée au délégué, d’exécuter les délégués dans l’ordre inverse et pour exécuter les méthodes dont le nom n’incluent pas la sous-chaîne « Fichier ».</span><span class="sxs-lookup"><span data-stu-id="7df4d-835">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-836">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-836">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-837">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-837">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7df4d-838">Obtient la méthode statique représentée par le délégué actuel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-838">Gets the static method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-839"><see cref="T:System.Reflection.MethodInfo" /> décrivant la méthode statique représentée par le délégué en cours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-839">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-840">Cette méthode s’applique uniquement si le délégué actuel représente une méthode statique.</span><span class="sxs-lookup"><span data-stu-id="7df4d-840">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7df4d-841">L’appelant n’a pas accès à la méthode représentée par le délégué (par exemple, si la méthode est privée).</span><span class="sxs-lookup"><span data-stu-id="7df4d-841">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-842">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-842">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-843">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-843">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="7df4d-844">Non pris en charge.</span><span class="sxs-lookup"><span data-stu-id="7df4d-844">Not supported.</span></span></param>
        <param name="context"><span data-ttu-id="7df4d-845">Non pris en charge.</span><span class="sxs-lookup"><span data-stu-id="7df4d-845">Not supported.</span></span></param>
        <summary><span data-ttu-id="7df4d-846">Non pris en charge.</span><span class="sxs-lookup"><span data-stu-id="7df4d-846">Not supported.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7df4d-847">Cette méthode n'est pas prise en charge.</span><span class="sxs-lookup"><span data-stu-id="7df4d-847">This method is not supported.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="7df4d-848">requiert une confiance totale pour l’appelant immédiat.</span><span class="sxs-lookup"><span data-stu-id="7df4d-848">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="7df4d-849">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span><span class="sxs-lookup"><span data-stu-id="7df4d-849">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7df4d-850">Obtient la méthode représentée par le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-850">Gets the method represented by the delegate.</span></span></summary>
        <value><span data-ttu-id="7df4d-851"><see cref="T:System.Reflection.MethodInfo" /> décrivant la méthode représentée par le délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-851">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7df4d-852">L’appelant n’a pas accès à la méthode représentée par le délégué (par exemple, si la méthode est privée).</span><span class="sxs-lookup"><span data-stu-id="7df4d-852">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-853">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-853">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-854">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-854">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="7df4d-855">Premier délégué à comparer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-855">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="7df4d-856">Second délégué à comparer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-856">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="7df4d-857">Détermine si les délégués spécifiés sont égaux.</span><span class="sxs-lookup"><span data-stu-id="7df4d-857">Determines whether the specified delegates are equal.</span></span></summary>
        <returns><span data-ttu-id="7df4d-858"><see langword="true" /> si <paramref name="d1" /> est égal à <paramref name="d2" /> ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-858"><see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-859">Deux délégués du même type avec les mêmes cibles, les méthodes et les listes d’appel sont considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-859">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="7df4d-860">Si les deux délégués ne sont pas du même type, ils ne sont pas considérés égaux.</span><span class="sxs-lookup"><span data-stu-id="7df4d-860">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7df4d-861">Dans la version 1.0 et 1.1 du .NET Framework, deux délégués ont été considérés comme égaux si leurs cibles, méthodes et liste d’appel sont égales, même si les délégués sont de types différents.</span><span class="sxs-lookup"><span data-stu-id="7df4d-861">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="7df4d-862">Les méthodes et les cibles sont comparées pour l’égalité, comme suit :</span><span class="sxs-lookup"><span data-stu-id="7df4d-862">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="7df4d-863">Si les deux méthodes comparées toutes deux sont statiques et la même méthode sur la même classe, les méthodes sont considérées comme égales et les cibles sont également considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-863">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="7df4d-864">Si les deux méthodes comparés sont des méthodes d’instance et la même méthode sur le même objet, les méthodes sont considérées comme égales et les cibles sont également considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-864">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="7df4d-865">Sinon, les méthodes ne sont pas considérés comme égal et les cibles sont également pas considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-865">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="7df4d-866">Deux listes d’appel sont considérés comme identiques si elles ont le même ordre et les éléments correspondants dans les deux listes représentent la même méthode et la cible.</span><span class="sxs-lookup"><span data-stu-id="7df4d-866">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="7df4d-867">La méthode équivalente pour cet opérateur est <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="7df4d-867">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-868">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-868">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-869">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-869">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="7df4d-870">Premier délégué à comparer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-870">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="7df4d-871">Second délégué à comparer.</span><span class="sxs-lookup"><span data-stu-id="7df4d-871">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="7df4d-872">Détermine si les délégués spécifiés ne sont pas égaux.</span><span class="sxs-lookup"><span data-stu-id="7df4d-872">Determines whether the specified delegates are not equal.</span></span></summary>
        <returns><span data-ttu-id="7df4d-873"><see langword="true" /> si <paramref name="d1" /> n'est pas égal à <paramref name="d2" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-873"><see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-874">Deux délégués ne sont pas considérés égaux s’ils sont de types différents, ou ont différentes méthodes, les différentes cibles ou les listes d’appel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-874">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="7df4d-875">Si les deux délégués ne sont pas du même type, ils ne sont pas considérés égaux.</span><span class="sxs-lookup"><span data-stu-id="7df4d-875">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7df4d-876">Dans la version 1.0 et 1.1 du .NET Framework, deux délégués sont considérés comme égaux si leurs cibles, méthodes et liste d’appel sont égales, même si les délégués sont de types différents.</span><span class="sxs-lookup"><span data-stu-id="7df4d-876">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="7df4d-877">Les méthodes et les cibles sont comparées pour l’égalité, comme suit :</span><span class="sxs-lookup"><span data-stu-id="7df4d-877">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="7df4d-878">Si les deux méthodes comparées toutes deux sont statiques et la même méthode sur la même classe, les méthodes sont considérées comme égales et les cibles sont également considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-878">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="7df4d-879">Si les deux méthodes comparés sont des méthodes d’instance et la même méthode sur le même objet, les méthodes sont considérées comme égales et les cibles sont également considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-879">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="7df4d-880">Sinon, les méthodes ne sont pas considérés comme égal et les cibles sont également pas considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="7df4d-880">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="7df4d-881">Deux listes d’appel ne sont pas égaux s’ils ont différentes tailles, si elles sont organisées différemment, ou si au moins un élément d’une liste représente une méthode ou une cible qui est différente de celle représentée par l’élément correspondant dans la liste des autres.</span><span class="sxs-lookup"><span data-stu-id="7df4d-881">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="7df4d-882">La méthode équivalente pour cet opérateur est <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="7df4d-882">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-883">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-883">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-884">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-884">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="7df4d-885">Délégué dans lequel supprimer la liste d'appel de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-885">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="7df4d-886">Délégué qui fournit la liste d'appel à supprimer de la liste d'appel de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-886">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="7df4d-887">Supprime la dernière occurrence de la liste d'appel d'un délégué dans la liste d'appel d'un autre délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-887">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-888">Nouveau délégué avec une liste d'appel générée à partir de la liste d'appel de <paramref name="source" /> de laquelle est supprimée la dernière occurrence de la liste d'appel de <paramref name="value" />, si la liste d'appel de <paramref name="value" /> figure dans la liste d'appel de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-888">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="7df4d-889">Retourne <paramref name="source" />, si <paramref name="value" /> est <see langword="null" />, ou si la liste d'appel de <paramref name="value" /> ne figure pas dans la liste d'appel de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-889">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="7df4d-890">Retourne une référence null si la liste d'appel de <paramref name="value" /> est égale à la liste d'appel de <paramref name="source" />, ou si <paramref name="source" /> est une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-890">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-891">Si la liste d’appel `value` correspond à un ensemble contigu d’éléments dans la liste d’appel `source`, puis la liste d’appel `value` apparaît dans la liste d’appel de `source`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-891">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="7df4d-892">Si la liste d’appel `value` apparaît plusieurs fois dans la liste d’appel `source`, la dernière occurrence est supprimée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-892">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7df4d-893">L’appelant n’a pas accès à la méthode représentée par le délégué (par exemple, si la méthode est privée).</span><span class="sxs-lookup"><span data-stu-id="7df4d-893">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-894">Les types délégués ne correspondent pas.</span><span class="sxs-lookup"><span data-stu-id="7df4d-894">The delegate types do not match.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-895">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-895">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-896">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-896">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="7df4d-897">Délégué dans lequel supprimer la liste d'appel de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-897">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="7df4d-898">Délégué qui fournit la liste d'appel à supprimer de la liste d'appel de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-898">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="7df4d-899">Supprime toutes les occurrences de la liste d'appel d'un délégué dans la liste d'appel d'un autre délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-899">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-900">Nouveau délégué avec une liste d'appel générée à partir de la liste d'appel de <paramref name="source" /> de laquelle est supprimée toutes les occurrences de la liste d'appel de <paramref name="value" />, si la liste d'appel de <paramref name="value" /> figure dans la liste d'appel de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-900">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="7df4d-901">Retourne <paramref name="source" />, si <paramref name="value" /> est <see langword="null" />, ou si la liste d'appel de <paramref name="value" /> ne figure pas dans la liste d'appel de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-901">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="7df4d-902">Retourne une référence null si la liste d'appel de <paramref name="value" /> est égale à la liste d'appel de <paramref name="source" />, si <paramref name="source" /> contient uniquement une série de listes d'appel égales à la liste d'appel de <paramref name="value" />, ou si <paramref name="source" /> est une référence null.</span><span class="sxs-lookup"><span data-stu-id="7df4d-902">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-903">Si la liste d’appel `value` correspond à un ensemble contigu d’éléments dans la liste d’appel `source`, puis la liste d’appel `value` apparaît dans la liste d’appel de `source`.</span><span class="sxs-lookup"><span data-stu-id="7df4d-903">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="7df4d-904">Si la liste d’appel `value` apparaît plusieurs fois dans la liste d’appel `source`, toutes les occurrences sont supprimées.</span><span class="sxs-lookup"><span data-stu-id="7df4d-904">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7df4d-905">L’appelant n’a pas accès à la méthode représentée par le délégué (par exemple, si la méthode est privée).</span><span class="sxs-lookup"><span data-stu-id="7df4d-905">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7df4d-906">Les types délégués ne correspondent pas.</span><span class="sxs-lookup"><span data-stu-id="7df4d-906">The delegate types do not match.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-907">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-907">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-908">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-908">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="7df4d-909">Délégué fournissant la liste d'appel à supprimer de la liste d'appel du délégué en cours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-909">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span></span></param>
        <summary><span data-ttu-id="7df4d-910">Supprime la liste d'appel d'un délégué de la liste d'appel d'un autre délégué.</span><span class="sxs-lookup"><span data-stu-id="7df4d-910">Removes the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="7df4d-911">Nouveau délégué dont la liste d'appel est générée à partir de la liste d'appel du délégué en cours, de laquelle est supprimée la liste d'appel de <paramref name="value" />, si la liste d'appel de <paramref name="value" /> figure dans la liste d'appel du délégué en cours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-911">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span></span> <span data-ttu-id="7df4d-912">Retourne le délégué en cours, si <paramref name="value" /> est <see langword="null" />, ou si la liste d'appel de <paramref name="value" /> ne figure pas dans la liste d'appel du délégué en cours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-912">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span></span> <span data-ttu-id="7df4d-913">Retourne <see langword="null" /> si la liste d'appel de <paramref name="value" /> est égale à la liste d'appel du délégué en cours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-913">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-914">Si la liste d’appel `value` correspond à un ensemble contigu d’éléments dans la liste d’appel du délégué en cours, puis la liste d’appel `value` est considéré comme se produisent dans la liste d’appel du délégué en cours.</span><span class="sxs-lookup"><span data-stu-id="7df4d-914">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="7df4d-915">Si la liste d’appel `value` se produit plusieurs fois dans la liste d’appel du délégué en cours, la dernière occurrence est supprimée.</span><span class="sxs-lookup"><span data-stu-id="7df4d-915">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7df4d-916">L’appelant n’a pas accès à la méthode représentée par le délégué (par exemple, si la méthode est privée).</span><span class="sxs-lookup"><span data-stu-id="7df4d-916">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-917">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-917">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-918">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-918">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7df4d-919">Obtient l'instance de classe sur laquelle le délégué actuel appelle la méthode d'instance.</span><span class="sxs-lookup"><span data-stu-id="7df4d-919">Gets the class instance on which the current delegate invokes the instance method.</span></span></summary>
        <value><span data-ttu-id="7df4d-920">Objet sur lequel le délégué en cours appelle la méthode d'instance, si le délégué représente une méthode d'instance ; <see langword="null" /> si le délégué représente une méthode statique.</span><span class="sxs-lookup"><span data-stu-id="7df4d-920">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7df4d-921">Une méthode d’instance est une méthode qui est associée à une instance d’une classe ; une méthode statique est une méthode qui est associée à la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="7df4d-921">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="7df4d-922">Si le délégué appelle une ou plusieurs méthodes d’instance, cette propriété retourne la cible de la dernière méthode d’instance dans la liste d’appel.</span><span class="sxs-lookup"><span data-stu-id="7df4d-922">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="7df4d-923">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="7df4d-923">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="7df4d-924">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="7df4d-924">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>