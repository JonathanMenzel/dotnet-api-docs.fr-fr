<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MarshalByRefObject.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac583acfa54440d5b5ba0c4eb247332f63cbe45d467.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83acfa54440d5b5ba0c4eb247332f63cbe45d467</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Enables access to objects across application domain boundaries in applications that support remoting.</source>
          <target state="translated">Permet l’accès aux objets au-delà des limites du domaine d’application dans les applications qui prennent en charge l’accès distant.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>An application domain is a partition in an operating system process where one or more applications reside.</source>
          <target state="translated">Un domaine d’application est une partition dans un processus de système d’exploitation sur lequel une ou plusieurs applications résident.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in the same application domain communicate directly.</source>
          <target state="translated">Objets dans le même domaine d’application communiquent directement.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in different application domains communicate either by transporting copies of objects across application domain boundaries, or by using a proxy to exchange messages.</source>
          <target state="translated">Objets dans différents domaines d’application communiquent par le transport des copies des objets entre les limites du domaine d’application, ou à l’aide d’un proxy pour échanger des messages.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> is the base class for objects that communicate across application domain boundaries by exchanging messages using a proxy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> la classe de base pour les objets communiquer à travers les limites du domaine d’application en échangeant des messages utilise un proxy.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects that do not inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> are implicitly marshal by value.</source>
          <target state="translated">Les objets qui n’héritent pas de <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> sont implicitement marshaler par valeur.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When a remote application references a marshal by value object, a copy of the object is passed across application domain boundaries.</source>
          <target state="translated">Lorsqu’une application distante fait référence à un marshal par un objet de valeur, une copie de l’objet est passée à travers les limites du domaine d’application.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objects are accessed directly within the boundaries of the local application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> accès à des objets directement dans les limites du domaine d’application local.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first time an application in a remote application domain accesses a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, a proxy is passed to the remote application.</source>
          <target state="translated">Accède au domaine d’application de la première fois une application dans un à distance un <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, un proxy est passé à l’application distante.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Subsequent calls on the proxy are marshaled back to the object residing in the local application domain.</source>
          <target state="translated">Les appels suivants sur le proxy sont marshalées vers l’objet qui réside dans le domaine d’application local.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Types must inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> when the type is used across application domain boundaries, and the state of the object must not be copied because the members of the object are not usable outside the application domain where they were created.</source>
          <target state="translated">Doivent hériter de types <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> lorsque le type est utilisé dans les limites du domaine d’application, et l’état de l’objet ne doit pas être copié, car les membres de l’objet ne sont pas utilisables en dehors du domaine d’application dans lequel ils ont été créés.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When you derive an object from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> for use across application domain boundaries, you should not override any of its members, nor should you call its methods directly.</source>
          <target state="translated">Lorsque vous dérivez un objet à partir de <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> pour une utilisation dans les limites du domaine d’application, vous ne devez pas remplacer un de ses membres, ni vous devez appeler ses méthodes directement.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The runtime recognizes that classes derived from  <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> should be marshaled across app domain boundaries.</source>
          <target state="translated">Le runtime reconnaît que les classes dérivées de <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> doivent être marshalés entre des limites de domaine d’application.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>This section contains two code examples.</source>
          <target state="translated">Cette section contient deux exemples de code.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first code example shows how to create an instance of a class in another application domain.</source>
          <target state="translated">Le premier exemple de code montre comment créer une instance d’une classe dans un autre domaine d’application.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The second code example shows a simple class that can be used for remoting.</source>
          <target state="translated">Le deuxième exemple de code montre une classe simple qui peut être utilisée pour la communication à distance.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemple 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following code example shows the simplest way to execute code in another application domain.</source>
          <target state="translated">L’exemple de code suivant montre la façon la plus simple d’exécuter du code dans un autre domaine d’application.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example defines a class named <ph id="ph1">`Worker`</ph> that inherits <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, with a method that displays the name of the application domain in which it is executing.</source>
          <target state="translated">L’exemple définit une classe nommée <ph id="ph1">`Worker`</ph> qui hérite de <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, avec une méthode qui affiche le nom du domaine d’application dans lequel elle s’exécute.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example creates instances of <ph id="ph1">`Worker`</ph> in the default application domain and in a new application domain.</source>
          <target state="translated">L’exemple crée des instances de <ph id="ph1">`Worker`</ph> dans le domaine d’application par défaut et dans un domaine d’application.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The assembly that contains <ph id="ph1">`Worker`</ph> must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.</source>
          <target state="translated">L’assembly qui contient <ph id="ph1">`Worker`</ph> doit être chargé dans les deux domaines d’application, mais il pourrait charger d’autres assemblys qui existent uniquement dans le nouveau domaine d’application.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemple 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following example demonstrates a class derived from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> that is used later in remoting.</source>
          <target state="translated">L’exemple suivant illustre une classe dérivée de <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> qui est utilisé ultérieurement dans remoting.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the object that the new <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph> will reference.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> de l'objet auquel le nouveau <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph> fera référence.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</source>
          <target state="translated">Crée un objet contenant toutes les informations appropriées requises pour générer un proxy permettant de communiquer avec un objet distant.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Information required to generate a proxy.</source>
          <target state="translated">Informations requises pour générer un proxy.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> method is called by remote object creation methods such as <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> méthode est appelée par les méthodes de création d’objet distant tel que <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> et <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>In most cases, there is no need to override this method.</source>
          <target state="translated">Dans la plupart des cas, il est inutile de substituer cette méthode.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This instance is not a valid remoting object.</source>
          <target state="translated">Cette instance n'est pas un objet de communication à distance valide.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">L'appelant immédiat n'a pas d'autorisation d'accès à l'infrastructure.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</source>
          <target state="translated">Récupère l'objet de service de durée de vie en cours qui contrôle la stratégie de durée de vie de cette instance.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated">Objet de type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> utilisé pour contrôler la stratégie de durée de vie de cette instance.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">Pour plus d’informations sur les services de durée de vie, consultez la <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">L'appelant immédiat n'a pas d'autorisation d'accès à l'infrastructure.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>Obtains a lifetime service object to control the lifetime policy for this instance.</source>
          <target state="translated">Obtient un objet de service de durée de vie pour contrôler la stratégie de durée de vie de cette instance.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated">Objet de type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> utilisé pour contrôler la stratégie de durée de vie de cette instance.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph> property.</source>
          <target state="translated">Il s'agit de l'objet de service de durée de vie en cours de cette instance s'il existe ; sinon, il s'agit d'un nouvel objet de service de durée de vie initialisé en utilisant la valeur de la propriété <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">Pour plus d’informations sur les services de durée de vie, consultez la <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The following code example demonstrates creating a lease.</source>
          <target state="translated">L’exemple de code suivant illustre la création d’un bail.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">L'appelant immédiat n'a pas d'autorisation d'accès à l'infrastructure.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Creates a shallow copy of the current object.</source>
          <target state="translated">Crée une copie superficielle de l'objet actuel.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> to delete the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> pour supprimer l'identité de l'objet <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> actuel, ce qui provoque l'assignation d'une nouvelle identité à l'objet lorsqu'il est marshalé au-delà d'une limite de communication à distance.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A value of <ph id="ph1">&lt;see langword="false" /&gt;</ph> is usually appropriate.</source>
          <target state="translated">La valeur <ph id="ph1">&lt;see langword="false" /&gt;</ph> est généralement appropriée.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to copy the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity to its clone, which will cause remoting client calls to be routed to the remote server object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour copier l'identité de l'objet <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> actuel vers son clone, ce qui entraîne le routage des appels de clients de communication à distance vers l'objet serveur distant.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Creates a shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated">Crée une copie superficielle de l'objet <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated">Copie superficielle de l'objet <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method creates a shallow copy by creating a new <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> object, and then copying the nonstatic fields of the current <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object to the new object.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> méthode crée une copie superficielle en créant un <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> de l’objet, puis en copiant les champs non statiques d’actuel <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> objet vers le nouvel objet.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a value type, a bit-by-bit copy of the field is performed.</source>
          <target state="translated">Si un champ est un type valeur, une copie bit par bit du champ est effectuée.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</source>
          <target state="translated">Si un champ est un type référence, la référence est copiée, mais l’objet référencé n’est pas. Par conséquent, l’objet d’origine et son clone font référence au même objet.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>For example, consider a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy C. Use a class that implements the <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> interface to perform a deep or shallow copy of an object.</source>
          <target state="translated">Par exemple, considérez un <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objet appelé X qui fait référence à des objets A et B, à son tour, fait référence à l’objet C. Une copie superficielle de X crée l’objet X2 qui fait également référence à des objets A et B. En revanche, une copie complète de X crée un nouvel objet X2 qui fait référence à nouveaux objets A2 et B2, qui sont des copies de A et B. B2 référence à son tour, le nouvel objet C2, qui est une copie de C. Utilisez une classe qui implémente le <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> interface pour effectuer un c complète ou superficiel z d’un objet.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The identity of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object is defined as the remote server object that is the target of a remoting client call.</source>
          <target state="translated">L’identité d’un <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objet est défini comme l’objet serveur distant qui est la cible d’un appel du client distant.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>By default, the memberwise clone of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object has the same identity as the original object, which is typically not the correct behavior for clones of server-side objects that are marshaled across a remoting boundary to the client side.</source>
          <target state="translated">Par défaut, le clone de type membre d’un <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objet a la même identité que l’objet d’origine, ce qui n’est généralement pas le comportement correct des clones d’objets côté serveur marshalés sur une limite de communication à distance vers le côté client.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Specify <ph id="ph1">`false`</ph>, which is usually appropriate, to delete the identity of the clone and cause a new identity to be assigned when the clone is marshaled across a remoting boundary, or <ph id="ph2">`true`</ph> to cause the clone to retain the identity of the original <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object.</source>
          <target state="translated">Spécifiez <ph id="ph1">`false`</ph>, qui est habituellement approprié, pour supprimer l’identité du clone et de provoquer une nouvelle identité soit assignée lors du marshaling du clone sur une limite de communication à distance, ou <ph id="ph2">`true`</ph> pour que le clone conserve l’identité de l’original <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method is intended to be used by developers implementing remote server objects.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> méthode est destinée à être utilisée par les développeurs qui implémentent des objets de serveur distant.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>