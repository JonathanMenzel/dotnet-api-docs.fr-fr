<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="20ef4ce10ae7d883f64127d17e5c321125ea4a32" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51896545" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit un mécanisme pour libérer des ressources non gérées.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La principale utilisation de cette interface est de libérer les ressources non managées. Le garbage collector libère automatiquement la mémoire allouée à un objet managé lorsque cet objet n’est plus utilisé. Toutefois, il n’est pas possible de prédire quand le garbage collection se produit. En outre, le garbage collector n’a aucune connaissance des ressources non managées, telles que les handles de fenêtre, ou ouvrir des fichiers et flux.  
  
 Utilisez le <xref:System.IDisposable.Dispose%2A> méthode de cette interface pour libérer explicitement les ressources non managées conjointement avec le garbage collector. Le consommateur d’un objet peut appeler cette méthode lorsque l’objet n’est plus nécessaire.  
  
> [!WARNING]
>  Il s’agit d’une modification avec rupture pour ajouter le <xref:System.IDisposable> interface à une classe existante. Étant donné que préexistant les consommateurs de votre type ne peut pas appeler <xref:System.IDisposable.Dispose%2A>, vous ne peut pas être certains que les ressources non managées détenues par votre type seront disponible.  
  
 Étant donné que le <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation est appelée par le consommateur d’un type lorsque les ressources détenues par une instance ne sont plus nécessaires, vous devez soit encapsuler l’objet managé dans un <xref:System.Runtime.InteropServices.SafeHandle> (l’alternative recommandée), ou vous devez substituer <xref:System.Object.Finalize%2A?displayProperty=nameWithType>pour libérer les ressources non managées dans le cas où le consommateur oublie d’appeler <xref:System.IDisposable.Dispose%2A>.  
  
> [!IMPORTANT]
>  Dans le .NET Framework, le compilateur C++ prend en charge de la suppression déterminable de ressources et n’autorise pas l’implémentation directe de la <xref:System.IDisposable.Dispose%2A> (méthode).  
  
 Pour une présentation détaillée sur la façon cette interface et la <xref:System.Object.Finalize%2A?displayProperty=nameWithType> méthode sont utilisées, consultez le [Garbage Collection](~/docs/standard/garbage-collection/index.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) rubriques.  
  
## <a name="using-an-object-that-implements-idisposable"></a>À l’aide d’un objet qui implémente IDisposable  
 Si votre application utilise simplement un objet qui implémente le <xref:System.IDisposable> interface, vous devez appeler l’objet <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation lorsque vous avez fini de l’utiliser. Selon votre langage de programmation, procéder de deux manières :  
  
-   En utilisant un langage de construction tels que le `using` instruction en c# et Visual Basic.  
  
-   En encapsulant l’appel à la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation dans une `try` / `finally` bloc.  
  
> [!NOTE]
>  Documentation pour les types qui implémentent <xref:System.IDisposable> Notez ce fait et inclure un rappel à appeler son <xref:System.IDisposable.Dispose%2A> implémentation.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>L’instruction c# et Visual Basic à l’aide  
 Si votre langage prend en charge une construction tels que le [à l’aide de](~/docs/csharp/language-reference/keywords/using.md) instruction en langage c# et le [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) instruction en Visual Basic, vous pouvez l’utiliser au lieu d’appeler explicitement <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> vous-même. L’exemple suivant utilise cette approche dans la définition d’un `WordCount` classe qui préserve les informations sur un fichier et le nombre de mots qu’il contient.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 La `using` instruction est réellement une commodité syntaxique. Au moment de la compilation, le compilateur de langage implémente le langage intermédiaire (IL) pour un `try` / `finally` bloc.  
  
 Pour plus d’informations sur la `using` instruction, consultez la [Using, instruction](~/docs/visual-basic/language-reference/statements/using-statement.md) ou [à l’aide d’instruction](~/docs/csharp/language-reference/keywords/using-statement.md) rubriques.  
  
### <a name="the-tryfinally-block"></a>Le bloc Try/Finally  
 Si votre langage de programmation ne prend pas en charge une construction comme les `using` instruction en c# ou Visual Basic, ou si vous préférez ne pas l’utiliser, vous pouvez appeler la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation à partir de la `finally` bloquer d’un `try` / `finally` instruction. L’exemple suivant remplace le `using` bloquer dans l’exemple précédent avec une `try` / `finally` bloc.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 Pour plus d’informations sur la `try` / `finally` de modèle, consultez [essayez... Catch... Instruction finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), ou [instruction try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).  
  
## <a name="implementing-idisposable"></a>Implémentation de IDisposable  
 Vous devez implémenter <xref:System.IDisposable> uniquement si votre type utilise directement les ressources non managées. Les consommateurs de votre type peuvent appeler votre <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation pour libérer des ressources lorsque l’instance n’est plus nécessaire. Pour gérer les cas dans lesquels ils n’appelez pas <xref:System.IDisposable.Dispose%2A>, vous devez utiliser une classe dérivée de <xref:System.Runtime.InteropServices.SafeHandle> pour encapsuler les ressources non managées, ou vous devez substituer la <xref:System.Object.Finalize%2A?displayProperty=nameWithType> méthode pour un type référence. Dans les deux cas, vous utilisez la <xref:System.IDisposable.Dispose%2A> méthode pour effectuer le nettoyage est nécessaire après avoir utilisé les ressources non managées, telles que la libération ou à la redéfinition des ressources non managées.  
  
> [!IMPORTANT]
>  Si vous définissez une classe de base qui utilise des ressources non managées et qui a, ou est susceptible d’avoir des sous-classes qui doivent être supprimés, vous devez implémenter le <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> méthode et fournir une deuxième surcharge de `Dispose`, comme indiqué dans la prochaine section.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable et la hiérarchie d’héritage  
 Une classe de base avec des sous-classes doivent être supprimables doit implémenter <xref:System.IDisposable> comme suit. Vous devez utiliser ce modèle chaque fois que vous implémentez <xref:System.IDisposable> sur n’importe quel type qui n’est pas `sealed` (`NotInheritable` en Visual Basic).  
  
-   Il doit fournir un, non virtuelle publique <xref:System.IDisposable.Dispose> (méthode) et un document protégé virtuel `Dispose(Boolean disposing)` (méthode).  
  
-   Le <xref:System.IDisposable.Dispose> méthode doit appeler `Dispose(true)` et doit supprimer la finalisation pour les performances.  
  
-   Le type de base ne doit pas inclure de finaliseurs.  
  
 Le fragment de code suivant reflète le modèle de suppression pour les classes de base. Il suppose que votre type ne remplace pas le <xref:System.Object.Finalize%2A?displayProperty=nameWithType> (méthode).  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 Si vous substituez le <xref:System.Object.Finalize%2A?displayProperty=nameWithType> (méthode), votre classe doit implémenter le modèle suivant.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 Les sous-classes doivent implémenter le modèle supprimable comme suit :  
  
-   Elles doivent substituer `Dispose(Boolean)` et appeler l'implémentation `Dispose(Boolean)` de la classe de base.  
  
-   Elles peuvent fournir un finaliseur, si nécessaire. Le finaliseur doit appeler `Dispose(false)`.  
  
 Notez que les classes dérivées ne pas eux-mêmes implémentent les <xref:System.IDisposable> interface et n’incluent pas un sans paramètre <xref:System.IDisposable.Dispose%2A> (méthode). Ils uniquement substituent à la classe de base `Dispose(Boolean)` (méthode).  
  
 Le fragment de code suivant reflète le modèle de suppression pour les classes dérivées. Il suppose que votre type ne remplace pas le <xref:System.Object.Finalize%2A?displayProperty=nameWithType> (méthode).  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 L’exemple suivant montre comment créer une classe de ressource qui implémente le <xref:System.IDisposable> interface.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Implémentation d'une méthode Dispose</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute les tâches définies par l’application associées à la libération ou à la redéfinition des ressources non managées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour fermer ou libérer les ressources non managées, telles que des fichiers, des flux et des handles détenus par une instance de la classe qui implémente cette interface. Par convention, cette méthode est utilisée pour toutes les tâches associées à la libération des ressources détenues par un objet, ou de la préparation d’un objet pour une réutilisation.  
  
> [!WARNING]
>  Si vous utilisez une classe qui implémente le <xref:System.IDisposable> interface, vous devez appeler son <xref:System.IDisposable.Dispose%2A> implémentation lorsque vous avez terminé à l’aide de la classe. Pour plus d’informations, consultez la section « Utilisation d’un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique.  
  
 Lorsque vous implémentez cette méthode, assurez-vous que toutes les ressources détenues soient libérées en propageant l’appel dans la hiérarchie de relation contenant-contenu. Par exemple, si un objet A alloue un objet B, et l’objet B alloue un objet C, puis A <xref:System.IDisposable.Dispose%2A> implémentation doit appeler <xref:System.IDisposable.Dispose%2A> sur B, qui doit appeler ensuite <xref:System.IDisposable.Dispose%2A> sur C.  
  
> [!IMPORTANT]
>  Le compilateur C++ prend en charge de la suppression déterminable de ressources et n’autorise pas l’implémentation directe de la <xref:System.IDisposable.Dispose%2A> (méthode).  
  
 Un objet doit également appeler le <xref:System.IDisposable.Dispose%2A> méthode de sa classe de base si la classe de base implémente <xref:System.IDisposable>. Pour plus d’informations sur l’implémentation <xref:System.IDisposable> sur une classe de base et ses sous-classes, consultez la section « IDisposable et la hiérarchie d’héritage » dans la <xref:System.IDisposable> rubrique.  
  
 Si un objet <xref:System.IDisposable.Dispose%2A> est appelée plusieurs fois, l’objet doit ignorer tous les appels après la première. L’objet ne doit pas lever une exception si son <xref:System.IDisposable.Dispose%2A> méthode est appelée plusieurs fois. Méthodes d’instance autres que <xref:System.IDisposable.Dispose%2A> peut lever une <xref:System.ObjectDisposedException> lorsque les ressources sont déjà supprimées.  
  
 Les utilisateurs peuvent attendre d’un type de ressource à utiliser une convention particulière pour dénoter un état alloué par rapport à un état libéré. Un exemple de ceci est les classes de flux, qui sont traditionnellement considérés comme ouvert ou fermés. L’implémenteur d’une classe qui a une telle convention peut choisir d’implémenter une méthode publique avec un nom personnalisé, tel que `Close`, qui appelle le <xref:System.IDisposable.Dispose%2A> (méthode).  
  
 Étant donné que le <xref:System.IDisposable.Dispose%2A> méthode doit être appelée explicitement, il existe toujours un risque que les ressources non managées ne sera pas publié, étant donné que le consommateur d’un objet ne parvient pas à appeler son <xref:System.IDisposable.Dispose%2A> (méthode). Il existe deux façons d’éviter ce problème :  
  
-   Encapsuler la ressource managée dans un objet dérivé <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>. Votre <xref:System.IDisposable.Dispose%2A> implémentation appelle alors la <xref:System.IDisposable.Dispose%2A> méthode de la <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances. Pour plus d’informations, consultez la section « L’alternative de SafeHandle » dans le <xref:System.Object.Finalize%2A?displayProperty=nameWithType> rubrique.  
  
-   Implémenter un finaliseur pour libérer des ressources lorsque <xref:System.IDisposable.Dispose%2A> n’est pas appelée. Par défaut, le garbage collector appelle automatiquement un finaliseur d’objet avant de libérer sa mémoire. Toutefois, si le <xref:System.IDisposable.Dispose%2A> méthode a été appelée, il est généralement inutile que le garbage collector d’appeler le finaliseur de l’objet supprimé. Pour éviter la Finalisation automatique, <xref:System.IDisposable.Dispose%2A> implémentations peuvent appeler le <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> (méthode).  
  
 Lorsque vous utilisez un objet qui accède à des ressources non managées, comme un <xref:System.IO.StreamWriter>, une bonne pratique consiste à créer l’instance avec un `using` instruction. Le `using` instruction ferme automatiquement le flux et les appels <xref:System.IDisposable.Dispose%2A> sur l’objet lorsque le code qui l’utilise est terminée. Pour obtenir un exemple, consultez la <xref:System.IO.StreamWriter> classe.  
  
   
  
## Examples  
 L’exemple suivant montre comment vous pouvez implémenter la <xref:System.IDisposable.Dispose%2A> (méthode).  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Implémentation d'une méthode Dispose</related>
      </Docs>
    </Member>
  </Members>
</Type>