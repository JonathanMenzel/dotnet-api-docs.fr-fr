<Type Name="IDisposable" FullName="System.IDisposable">
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8ebb0-101">Fournit un mécanisme pour libérer des ressources non gérées.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebb0-102">La principale utilisation de cette interface est de libérer les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="8ebb0-103">Le garbage collector libère automatiquement la mémoire allouée à un objet managé lorsque cet objet n’est plus utilisé.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="8ebb0-104">Toutefois, il n’est pas possible de prédire quand le garbage collection se produit.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="8ebb0-105">En outre, le garbage collector n’a aucune connaissance des ressources non managées, telles que les handles de fenêtre, ou ouvrir des fichiers et des flux de données.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="8ebb0-106">Utilisez la <xref:System.IDisposable.Dispose%2A> méthode de cette interface pour libérer explicitement les ressources non managées en association avec le garbage collector.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="8ebb0-107">Le consommateur d’un objet peut appeler cette méthode lorsque l’objet n’est plus nécessaire.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="8ebb0-108">Il s’agit d’une modification avec rupture pour ajouter le <xref:System.IDisposable> interface à une classe existante.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="8ebb0-109">Étant donné que les consommateurs existants de votre type ne peut pas appeler <xref:System.IDisposable.Dispose%2A>, vous n’êtes pas certain que les ressources non managées détenues par votre type seront libérés.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="8ebb0-110">Étant donné que la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation est appelée par le consommateur d’un type lorsque les ressources détenues par une instance ne sont plus nécessaires, vous devez encapsuler soit l’objet managé dans un <xref:System.Runtime.InteropServices.SafeHandle> (l’alternative recommandée), ou vous devez substituer <xref:System.Object.Finalize%2A?displayProperty=nameWithType>pour libérer les ressources non managées dans le cas où le consommateur oublie d’appeler <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8ebb0-111">Dans le .NET Framework, le compilateur C++ prend en charge la suppression déterministe de ressources et n’autorise pas l’implémentation directe de la <xref:System.IDisposable.Dispose%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="8ebb0-112">Pour plus d’informations sur la façon de cette interface et la <xref:System.Object.Finalize%2A?displayProperty=nameWithType> méthode sont utilisées, consultez la [Garbage Collection](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9) et [implémentant une méthode de suppression](~/docs/standard/garbage-collection/implementing-dispose.md) rubriques.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="8ebb0-113">À l’aide d’un objet qui implémente IDisposable</span><span class="sxs-lookup"><span data-stu-id="8ebb0-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="8ebb0-114">Si votre application utilise simplement un objet qui implémente le <xref:System.IDisposable> interface, vous devez appeler l’objet <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation lorsque vous avez fini de l’utiliser.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="8ebb0-115">Selon votre langage de programmation, vous pouvez faire de deux manières :</span><span class="sxs-lookup"><span data-stu-id="8ebb0-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="8ebb0-116">En utilisant un langage de construction tels que le `using` instruction en c# et Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="8ebb0-117">En encapsulant l’appel à la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> mise en œuvre dans un `try` / `finally` bloc.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ebb0-118">Documentation pour les types qui implémentent <xref:System.IDisposable> Notez que les et inclure un rappel à appeler son <xref:System.IDisposable.Dispose%2A> implémentation.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="8ebb0-119">L’instruction c# et Visual Basic à l’aide</span><span class="sxs-lookup"><span data-stu-id="8ebb0-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="8ebb0-120">Si votre langage prend en charge une construction tels que le [à l’aide de](~/docs/csharp/language-reference/keywords/using.md) instruction en c# et la [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) instruction en Visual Basic, vous pouvez l’utiliser au lieu d’appeler explicitement <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> vous-même.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="8ebb0-121">L’exemple suivant utilise cette approche dans la définition d’un `WordCount` classe qui conserve les informations sur un fichier et le nombre de mots qu’il contient.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="8ebb0-122">La `using` instruction est réellement une commodité syntaxique.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="8ebb0-123">Au moment de la compilation, le compilateur de langage implémente le langage intermédiaire (IL) pour un `try` / `finally` bloc.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="8ebb0-124">Pour plus d’informations sur la `using` instruction, consultez la [à l’aide de l’instruction](~/docs/visual-basic/language-reference/statements/using-statement.md) ou [à l’aide d’instruction](~/docs/csharp/language-reference/keywords/using-statement.md) rubriques.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="8ebb0-125">Le bloc Try/Finally</span><span class="sxs-lookup"><span data-stu-id="8ebb0-125">The Try/Finally block</span></span>  
 <span data-ttu-id="8ebb0-126">Si votre langage de programmation ne prend pas en charge une construction comme le `using` instruction en c# ou Visual Basic, ou si vous préférez ne pas l’utiliser, vous pouvez appeler la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation à partir de la `finally` bloquer d’un `try` / `finally` instruction.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="8ebb0-127">L’exemple suivant remplace le `using` bloquer dans l’exemple précédent, avec un `try` / `finally` bloc.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="8ebb0-128">Pour plus d’informations sur la `try` / `finally` de modèle, consultez [essayez... Catch... Instruction finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), ou [try-finally, instruction](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="8ebb0-129">Implémentation de IDisposable</span><span class="sxs-lookup"><span data-stu-id="8ebb0-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="8ebb0-130">Vous devez implémenter <xref:System.IDisposable> uniquement si votre type utilise directement les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="8ebb0-131">Les consommateurs de votre type peuvent appeler votre <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implémentation de libérer des ressources lors de l’instance n’est plus nécessaire.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="8ebb0-132">Pour gérer les cas dans lesquels ils échouent à appeler <xref:System.IDisposable.Dispose%2A>, vous devez utiliser une classe dérivée de <xref:System.Runtime.InteropServices.SafeHandle> pour encapsuler les ressources non managées, ou vous devez substituer la <xref:System.Object.Finalize%2A?displayProperty=nameWithType> méthode pour un type référence.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="8ebb0-133">Dans les deux cas, vous utilisez la <xref:System.IDisposable.Dispose%2A> méthode pour effectuer le nettoyage est nécessaire après l’utilisation de ressources non managées, telles que la libération ou à la redéfinition des ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8ebb0-134">Si vous définissez une classe de base qui utilise des ressources non managées et qui a, ou est susceptible d’avoir les sous-classes doivent être supprimés, vous devez implémenter la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> méthode et fournir une deuxième surcharge de `Dispose`, comme indiqué dans la prochaine section.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="8ebb0-135">IDisposable et la hiérarchie d’héritage</span><span class="sxs-lookup"><span data-stu-id="8ebb0-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="8ebb0-136">Classe de base avec les sous-classes doivent être supprimables doit implémenter <xref:System.IDisposable> comme suit.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="8ebb0-137">Vous devez utiliser ce modèle chaque fois que vous implémentez <xref:System.IDisposable> sur n’importe quel type qui n’est pas `sealed` (`NotInheritable` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="8ebb0-138">Il doit fournir un, non virtuelle publique <xref:System.IDisposable.Dispose> (méthode) et un document protégé virtuel `Dispose(Boolean disposing)` (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="8ebb0-139">Le <xref:System.IDisposable.Dispose> méthode doit appeler `Dispose(true)` et doit supprimer la finalisation de performances.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="8ebb0-140">Le type de base ne doit pas inclure de finaliseurs.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="8ebb0-141">Le fragment de code suivant indique le modèle de suppression pour les classes de base.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="8ebb0-142">Il part du principe que votre type ne remplace pas le <xref:System.Object.Finalize%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="8ebb0-143">Si vous ne substituez pas la <xref:System.Object.Finalize%2A?displayProperty=nameWithType> (méthode), votre classe doit implémenter le modèle suivant.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="8ebb0-144">Les sous-classes doivent implémenter le modèle supprimable comme suit :</span><span class="sxs-lookup"><span data-stu-id="8ebb0-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="8ebb0-145">Elles doivent substituer `Dispose(Boolean)` et appeler l'implémentation `Dispose(Boolean)` de la classe de base.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="8ebb0-146">Elles peuvent fournir un finaliseur, si nécessaire.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="8ebb0-147">Le finaliseur doit appeler `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="8ebb0-148">Notez que les classes dérivées n’eux-mêmes implémentent pas la <xref:System.IDisposable> interface et n’incluez pas un sans paramètre <xref:System.IDisposable.Dispose%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="8ebb0-149">Ils ne peuvent remplacer la classe de base `Dispose(Boolean)` (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="8ebb0-150">Le fragment de code suivant indique le modèle de suppression pour les classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="8ebb0-151">Il part du principe que votre type ne remplace pas le <xref:System.Object.Finalize%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="8ebb0-152">L’exemple suivant montre comment créer une classe de ressource qui implémente le <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ebb0-153">Exécute les tâches définies par l’application associées à la libération ou à la redéfinition des ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-153">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebb0-154">Utilisez cette méthode pour fermer ou libérer les ressources non managées, telles que des fichiers, flux de données et les handles détenus par une instance de la classe qui implémente cette interface.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-154">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="8ebb0-155">Par convention, cette méthode est utilisée pour toutes les tâches associées à la libération des ressources détenues par un objet, ou de la préparation d’un objet pour une réutilisation.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-155">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="8ebb0-156">Si vous utilisez une classe qui implémente le <xref:System.IDisposable> interface, vous devez appeler sa <xref:System.IDisposable.Dispose%2A> implémentation lorsque vous avez terminé à l’aide de la classe.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-156">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="8ebb0-157">Pour plus d’informations, consultez la section « Utilisation d’un objet qui implémente IDisposable » dans la <xref:System.IDisposable> rubrique.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-157">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="8ebb0-158">Lorsque vous implémentez cette méthode, assurez-vous que toutes les ressources détenues soient libérées par l’appel dans la hiérarchie de relation contenant-contenu.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-158">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="8ebb0-159">Par exemple, si un objet A alloue un objet B, et l’objet B alloue un objet C, alors <xref:System.IDisposable.Dispose%2A> implémentation doit appeler <xref:System.IDisposable.Dispose%2A> sur B, qui doit appeler ensuite <xref:System.IDisposable.Dispose%2A> sur C.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-159">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8ebb0-160">Le compilateur C++ prend en charge la suppression déterministe de ressources et n’autorise pas l’implémentation directe de la <xref:System.IDisposable.Dispose%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-160">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="8ebb0-161">Un objet doit également appeler le <xref:System.IDisposable.Dispose%2A> méthode de sa classe de base si la classe de base implémente <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-161">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="8ebb0-162">Pour plus d’informations sur l’implémentation de <xref:System.IDisposable> sur une classe de base et de ses sous-classes, consultez la section « IDisposable et la hiérarchie d’héritage » dans la <xref:System.IDisposable> rubrique.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-162">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="8ebb0-163">Si un objet <xref:System.IDisposable.Dispose%2A> est appelée plusieurs fois, l’objet doit ignorer tous les appels après le premier.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-163">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="8ebb0-164">L’objet ne doit pas lever une exception si son <xref:System.IDisposable.Dispose%2A> méthode est appelée plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-164">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="8ebb0-165">Méthodes d’instance autres que <xref:System.IDisposable.Dispose%2A> peut lever une <xref:System.ObjectDisposedException> lorsque les ressources sont déjà supprimées.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-165">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="8ebb0-166">Les utilisateurs peuvent attendre d’un type de ressource à utiliser une convention particulière pour dénoter un état alloué par rapport à un état libéré.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-166">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="8ebb0-167">Un exemple est les classes de flux de données, qui sont traditionnellement considérés comme ouvert ou fermés.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-167">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="8ebb0-168">L’implémenteur d’une classe qui a une telle convention peut choisir d’implémenter une méthode publique avec un nom personnalisé, tel que `Close`, qui appelle la <xref:System.IDisposable.Dispose%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-168">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="8ebb0-169">Étant donné que la <xref:System.IDisposable.Dispose%2A> méthode doit être appelée explicitement, il existe toujours un danger les ressources non managées ne sera pas publié, car le consommateur d’un objet ne parvient pas à appeler son <xref:System.IDisposable.Dispose%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-169">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="8ebb0-170">Il existe deux façons d’éviter ce problème :</span><span class="sxs-lookup"><span data-stu-id="8ebb0-170">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="8ebb0-171">Retour à la ligne la ressource managée dans un objet dérivé de <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-171">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ebb0-172">Votre <xref:System.IDisposable.Dispose%2A> implémentation appelle alors la <xref:System.IDisposable.Dispose%2A> méthode de la <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-172">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="8ebb0-173">Pour plus d’informations, consultez la section « L’alternative de SafeHandle » dans la <xref:System.Object.Finalize%2A?displayProperty=nameWithType> rubrique.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-173">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="8ebb0-174">Implémenter un finaliseur pour libérer des ressources lorsque <xref:System.IDisposable.Dispose%2A> n’est pas appelée.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-174">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="8ebb0-175">Par défaut, le garbage collector appelle automatiquement le finaliseur d’un objet avant de libérer sa mémoire.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-175">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="8ebb0-176">Toutefois, si le <xref:System.IDisposable.Dispose%2A> méthode a été appelée, il est généralement inutile que le garbage collector d’appeler le finaliseur de l’objet supprimé.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-176">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="8ebb0-177">Pour éviter la Finalisation automatique, <xref:System.IDisposable.Dispose%2A> implémentations peuvent appeler le <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-177">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8ebb0-178">Lorsque vous utilisez un objet qui accède à des ressources non managées, comme un <xref:System.IO.StreamWriter>, la meilleure pratique consiste à créer l’instance avec un `using` instruction.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-178">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="8ebb0-179">Le `using` instruction ferme automatiquement le flux de données et les appels <xref:System.IDisposable.Dispose%2A> sur l’objet lorsque le code qui l’utilise est terminé.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-179">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="8ebb0-180">Pour obtenir un exemple, consultez la <xref:System.IO.StreamWriter> classe.</span><span class="sxs-lookup"><span data-stu-id="8ebb0-180">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ebb0-181">L’exemple suivant montre comment vous pouvez implémenter la <xref:System.IDisposable.Dispose%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ebb0-181">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>