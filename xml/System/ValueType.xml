<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b756fc1621dab1597966503a0af93b3c8478663" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728753" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit la classe de base pour les types valeur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> substitue les méthodes virtuelles à partir de <xref:System.Object> des implémentations plus appropriées pour les types valeur. Voir aussi <xref:System.Enum>, qui hérite de <xref:System.ValueType>.  
  
 Types de données sont divisés en types valeur et les types référence. Types valeur sont alloués à la pile ou alloués inline dans une structure. Les types référence sont alloués par tas. Les types de référence et de valeur sont dérivés de la classe de base fondamentale parmi <xref:System.Object>. Dans les cas où il n’est nécessaire pour un type valeur se comporte comme un objet, un wrapper qui rend le type de valeur ressemble pas à un objet de référence est alloué sur le tas et valeur la valeur du type d’est copié. Le wrapper est marqué pour que le système sache qu’il contient un type valeur. Ce processus est appelé conversion boxing et le processus inverse est appelé conversion unboxing. Conversion boxing et unboxing permettent à n’importe quel type d’être traité comme un objet.  
  
 Bien que <xref:System.ValueType> est la classe de base implicite pour les types valeur, vous ne peut pas créer une classe qui hérite de <xref:System.ValueType> directement. Au lieu de cela, les compilateurs individuels fournissent un mot clé de langage ou construire (tel que `struct` en c# et `Structure`...`End Structure` en Visual Basic) pour prendre en charge la création de types de valeur.  
  
 En plus de servir de la classe de base pour les types de valeur dans le .NET Framework, le <xref:System.ValueType> structure n’est généralement pas utilisée directement dans le code. Toutefois, il peut être utilisé en tant que paramètre dans les appels de méthode pour restreindre les arguments possibles pour les types de valeur au lieu de tous les objets, ou autoriser une méthode pour gérer un nombre de types de valeur différents. L’exemple suivant illustre comment <xref:System.ValueType> empêche que des types de référence passés aux méthodes. Il définit une classe nommée `Utility` qui contient quatre méthodes : `IsNumeric`, qui indique si son argument est un nombre ; `IsInteger`, qui indique si son argument est un entier. `IsFloat`, qui indique si son argument est un nombre à virgule flottante et `Compare`, ce qui indique la relation entre deux valeurs numériques. Dans chaque cas, les paramètres de méthode sont de type <xref:System.ValueType>, et les types référence ne peuvent pas être passés aux méthodes.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 L’exemple suivant illustre des appels aux méthodes de la `Utility` classe.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ValueType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objet à comparer à l'instance actuelle.</param>
        <summary>Indique si cette instance et un objet spécifié sont égaux.</summary>
        <returns>
          <see langword="true" /> si <paramref name="obj" /> et cette instance sont du même type et représentent la même valeur ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> substitutions de méthode <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> et fournit l’implémentation par défaut de l’égalité des valeurs pour tous les types de valeur dans le .NET Framework.  
  
 Si aucun des champs de l’instance actuelle et `obj` sont des types référence, la <xref:System.ValueType.Equals%2A> méthode effectue une comparaison octet par octet des deux objets en mémoire. Sinon, il utilise la réflexion pour comparer les champs correspondants de `obj` et cette instance.  
  
> [!TIP]
>  En particulier si votre type de valeur contient des champs qui sont des types référence, vous devez substituer la <xref:System.ValueType.Equals%28System.Object%29> (méthode). Cela peut améliorer les performances et vous permettent de mieux représentent la signification d’égalité pour le type.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Notes pour le [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Lorsque vous appelez le <xref:System.ValueType.Equals%2A> méthode sur un [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, il fournit le comportement par défaut pour les types de valeur ne remplacent pas <xref:System.ValueType.Equals%2A>. Cela fait partie de la prise en charge le .NET Framework fournit pour les [!INCLUDE[wrt](~/includes/wrt-md.md)] (consultez [.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] les structures ne peuvent pas substituer <xref:System.ValueType.Equals%2A>, même si elles sont écrites avec c# ou Visual Basic, car ils ne peuvent pas avoir de méthodes. (En outre, les structures dans le [!INCLUDE[wrt](~/includes/wrt-md.md)] lui-même n’héritent pas <xref:System.ValueType>.) Toutefois, ils semblent avoir <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, et <xref:System.ValueType.GetHashCode%2A> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.  
  
   
  
## Examples  
 L’exemple suivant montre comment la <xref:System.ValueType.Equals%2A> méthode peut être substituée par un type valeur dérivée.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le code de hachage de cette instance.</summary>
        <returns>Entier signé 32 bits qui est le code de hachage pour cette instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ValueType.GetHashCode%2A> méthode s’applique aux types dérivés de <xref:System.ValueType>. Un ou plusieurs champs du type dérivé est utilisé pour calculer la valeur de retour. Si vous appelez la méthode du type dérivé `GetHashCode` (méthode), la valeur de retour n’est pas susceptible d’être adapté pour une utilisation en tant que clé dans une table de hachage. En outre, si la valeur d’un ou plusieurs de ces champs change, la valeur de retour peut devenir illisible pour une utilisation en tant que clé dans une table de hachage. Dans les deux cas, envisagez d’écrire votre propre implémentation de le <xref:System.ValueType.GetHashCode%2A> plus étroitement représente le concept d’un code de hachage pour le type de méthode.  
  
 Pour plus d'informations, consultez <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> et <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Notes pour le [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Lorsque vous appelez le <xref:System.ValueType.GetHashCode%2A> méthode sur un [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, il fournit le comportement par défaut pour les types de valeur ne remplacent pas <xref:System.ValueType.GetHashCode%2A>. Cela fait partie de la prise en charge le .NET Framework fournit pour les [!INCLUDE[wrt](~/includes/wrt-md.md)] (consultez [.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] les structures ne peuvent pas substituer <xref:System.ValueType.GetHashCode%2A>, même si elles sont écrites avec c# ou Visual Basic, car ils ne peuvent pas avoir de méthodes. (En outre, les structures dans le [!INCLUDE[wrt](~/includes/wrt-md.md)] lui-même n’héritent pas <xref:System.ValueType>.) Toutefois, ils semblent avoir <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, et <xref:System.ValueType.GetHashCode%2A> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.  
  
   
  
## Examples  
 L’exemple suivant montre comment la <xref:System.ValueType.GetHashCode%2A> méthode peut être substituée par un type valeur dérivée.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le nom de type qualifié complet de cette instance.</summary>
        <returns>Nom complet du type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> substitutions de méthode le <xref:System.Object.ToString%2A?displayProperty=nameWithType> (méthode) et fournit l’implémentation par défaut de la `ToString` méthode pour les types valeur. (Les types valeur sont des types définis par le `struct` mot clé en c# et par le `Structure`... `End Structure` construire en Visual Basic.) Point de vue fonctionnel, toutefois, l’implémentation est ce même que celui de <xref:System.Object.ToString%2A?displayProperty=nameWithType>: la méthode retourne le nom de type qualifié complet.  
  
 Valeur des types définis par le `struct` mot clé en c# et `Structure`... `End Structure` construction en Visual Basic en général remplacent la <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> méthode pour fournir une représentation de chaîne plus explicite du type valeur. L'exemple suivant illustre la différence. Il définit deux types de valeur, `EmployeeA` et `EmployeeB`, crée une instance de chaque et appelle son `ToString` (méthode). Étant donné que la `EmployeeA` structure ne remplace pas le <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> (méthode), il affiche uniquement le nom de type qualifié complet. Le `EmployeeB.ToString` (méthode), en revanche, fournit des informations explicites sur l’objet.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Notez que, bien que les types énumération sont également des types valeur, ils dérivent de la <xref:System.Enum> classe, qui substitue <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-windows-runtime"></a>Notes pour le Windows Runtime  
 Lorsque vous appelez le <xref:System.ValueType.ToString%2A> méthode sur un [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, il fournit le comportement par défaut pour les types de valeur ne remplacent pas <xref:System.ValueType.ToString%2A>. Cela fait partie de la prise en charge le .NET Framework fournit pour les [!INCLUDE[wrt](~/includes/wrt-md.md)] (consultez [.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] les structures ne peuvent pas substituer <xref:System.ValueType.ToString%2A>, même si elles sont écrites avec c# ou Visual Basic, car ils ne peuvent pas avoir de méthodes. (En outre, les structures dans le [!INCLUDE[wrt](~/includes/wrt-md.md)] lui-même n’héritent pas <xref:System.ValueType>.) Toutefois, ils semblent avoir <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, et <xref:System.ValueType.GetHashCode%2A> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>