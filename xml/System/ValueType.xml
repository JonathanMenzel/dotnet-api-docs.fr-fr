<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ValueType.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53b756fc1621dab1597966503a0af93b3c8478663.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b756fc1621dab1597966503a0af93b3c8478663</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ValueType">
          <source>Provides the base class for value types.</source>
          <target state="translated">Fournit la classe de base pour les types valeur.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source><ph id="ph1">&lt;xref:System.ValueType&gt;</ph> overrides the virtual methods from <ph id="ph2">&lt;xref:System.Object&gt;</ph> with more appropriate implementations for value types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType&gt;</ph> substitue les méthodes virtuelles à partir de <ph id="ph2">&lt;xref:System.Object&gt;</ph> des implémentations plus appropriées pour les types valeur.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>See also <ph id="ph1">&lt;xref:System.Enum&gt;</ph>, which inherits from <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</source>
          <target state="translated">Voir aussi <ph id="ph1">&lt;xref:System.Enum&gt;</ph>, qui hérite de <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Data types are separated into value types and reference types.</source>
          <target state="translated">Types de données sont divisés en types valeur et les types référence.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Value types are either stack-allocated or allocated inline in a structure.</source>
          <target state="translated">Types valeur sont alloués à la pile ou alloués inline dans une structure.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Reference types are heap-allocated.</source>
          <target state="translated">Les types référence sont alloués par tas.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Both reference and value types are derived from the ultimate base class <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Les types de référence et de valeur sont dérivés de la classe de base fondamentale parmi <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</source>
          <target state="translated">Dans les cas où il n’est nécessaire pour un type valeur se comporte comme un objet, un wrapper qui rend le type de valeur ressemble pas à un objet de référence est alloué sur le tas et valeur la valeur du type d’est copié.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>The wrapper is marked so the system knows that it contains a value type.</source>
          <target state="translated">Le wrapper est marqué pour que le système sache qu’il contient un type valeur.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>This process is known as boxing, and the reverse process is known as unboxing.</source>
          <target state="translated">Ce processus est appelé conversion boxing et le processus inverse est appelé conversion unboxing.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Boxing and unboxing allow any type to be treated as an object.</source>
          <target state="translated">Conversion boxing et unboxing permettent à n’importe quel type d’être traité comme un objet.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Although <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> is the implicit base class for value types, you cannot create a class that inherits from <ph id="ph2">&lt;xref:System.ValueType&gt;</ph> directly.</source>
          <target state="translated">Bien que <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> est la classe de base implicite pour les types valeur, vous ne peut pas créer une classe qui hérite de <ph id="ph2">&lt;xref:System.ValueType&gt;</ph> directement.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Instead, individual compilers provide a language keyword or construct (such as <ph id="ph1">`struct`</ph> in C# and <ph id="ph2">`Structure`</ph>…<ph id="ph3">`End Structure`</ph></source>
          <target state="translated">Au lieu de cela, les compilateurs individuels fournissent un mot clé de langage ou construire (tel que <ph id="ph1">`struct`</ph> en c# et <ph id="ph2">`Structure`</ph>...<ph id="ph3">`End Structure`</ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>in Visual Basic) to support the creation of value types.</source>
          <target state="translated">en Visual Basic) pour prendre en charge la création de types de valeur.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Aside from serving as the base class for value types in the .NET Framework, the <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> structure is generally not used directly in code.</source>
          <target state="translated">En plus de servir de la classe de base pour les types de valeur dans le .NET Framework, le <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> structure n’est généralement pas utilisée directement dans le code.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</source>
          <target state="translated">Toutefois, il peut être utilisé en tant que paramètre dans les appels de méthode pour restreindre les arguments possibles pour les types de valeur au lieu de tous les objets, ou autoriser une méthode pour gérer un nombre de types de valeur différents.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>The following example illustrates how <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> prevents reference types from being passed to methods.</source>
          <target state="translated">L’exemple suivant illustre comment <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> empêche que des types de référence passés aux méthodes.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>It defines a class named <ph id="ph1">`Utility`</ph> that contains four methods: <ph id="ph2">`IsNumeric`</ph>, which indicates whether its argument is a number; <ph id="ph3">`IsInteger`</ph>, which indicates whether its argument is an integer; <ph id="ph4">`IsFloat`</ph>, which indicates whether its argument is a floating-point number; and <ph id="ph5">`Compare`</ph>, which indicates the relationship between two numeric values.</source>
          <target state="translated">Il définit une classe nommée <ph id="ph1">`Utility`</ph> qui contient quatre méthodes : <ph id="ph2">`IsNumeric`</ph>, qui indique si son argument est un nombre ; <ph id="ph3">`IsInteger`</ph>, qui indique si son argument est un entier. <ph id="ph4">`IsFloat`</ph>, qui indique si son argument est un nombre à virgule flottante et <ph id="ph5">`Compare`</ph>, ce qui indique la relation entre deux valeurs numériques.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>In each case, the method parameters are of type <ph id="ph1">&lt;xref:System.ValueType&gt;</ph>, and reference types are prevented from being passed to the methods.</source>
          <target state="translated">Dans chaque cas, les paramètres de méthode sont de type <ph id="ph1">&lt;xref:System.ValueType&gt;</ph>, et les types référence ne peuvent pas être passés aux méthodes.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>The following example illustrates calls to the methods of the <ph id="ph1">`Utility`</ph> class.</source>
          <target state="translated">L’exemple suivant illustre des appels aux méthodes de la <ph id="ph1">`Utility`</ph> classe.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ValueType.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ValueType" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.ValueType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ValueType.Equals(System.Object)">
          <source>The object to compare with the current instance.</source>
          <target state="translated">Objet à comparer à l'instance actuelle.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ValueType.Equals(System.Object)">
          <source>Indicates whether this instance and a specified object are equal.</source>
          <target state="translated">Indique si cette instance et un objet spécifié sont égaux.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ValueType.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> and this instance are the same type and represent the same value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> et cette instance sont du même type et représentent la même valeur ; sinon <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method overrides <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> and provides the default implementation of value equality for all value types in the .NET Framework.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> substitutions de méthode <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> et fournit l’implémentation par défaut de l’égalité des valeurs pour tous les types de valeur dans le .NET Framework.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>If none of the fields of the current instance and <ph id="ph1">`obj`</ph> are reference types, the <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph> method performs a byte-by-byte comparison of the two objects in memory.</source>
          <target state="translated">Si aucun des champs de l’instance actuelle et <ph id="ph1">`obj`</ph> sont des types référence, la <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph> méthode effectue une comparaison octet par octet des deux objets en mémoire.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>Otherwise, it uses reflection to compare the corresponding fields of <ph id="ph1">`obj`</ph> and this instance.</source>
          <target state="translated">Sinon, il utilise la réflexion pour comparer les champs correspondants de <ph id="ph1">`obj`</ph> et cette instance.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>Particularly if your value type contains fields that are reference types, you should override the <ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">En particulier si votre type de valeur contient des champs qui sont des types référence, vous devez substituer la <ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>This can improve performance and enable you to more closely represent the meaning of equality for the type.</source>
          <target state="translated">Cela peut améliorer les performances et vous permettent de mieux représentent la signification d’égalité pour le type.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>Notes for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></source>
          <target state="translated">Notes pour le <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>When you call the <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> method on a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, it provides the default behavior for value types that don’t override <ph id="ph3">&lt;xref:System.ValueType.Equals%2A&gt;</ph>.</source>
          <target state="translated">Lorsque vous appelez le <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> méthode sur un <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, il fournit le comportement par défaut pour les types de valeur ne remplacent pas <ph id="ph3">&lt;xref:System.ValueType.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>This is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</source>
          <target state="translated">Cela fait partie de la prise en charge le .NET Framework fournit pour les <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (consultez <bpt id="p1">[</bpt>.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structures can’t override <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, even if they’re written with C# or Visual Basic, because they can’t have methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> les structures ne peuvent pas substituer <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, même si elles sont écrites avec c# ou Visual Basic, car ils ne peuvent pas avoir de méthodes.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>(In addition, structures in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> itself don’t inherit <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) However, they appear to have <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</source>
          <target state="translated">(En outre, les structures dans le <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> lui-même n’héritent pas <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) Toutefois, ils semblent avoir <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, et <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> method can be overridden by a derived value type.</source>
          <target state="translated">L’exemple suivant montre comment la <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> méthode peut être substituée par un type valeur dérivée.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ValueType.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Retourne le code de hachage de cette instance.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ValueType.GetHashCode">
          <source>A 32-bit signed integer that is the hash code for this instance.</source>
          <target state="translated">Entier signé 32 bits qui est le code de hachage pour cette instance.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>The <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method applies to types derived from <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> méthode s’applique aux types dérivés de <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>One or more fields of the derived type is used to calculate the return value.</source>
          <target state="translated">Un ou plusieurs champs du type dérivé est utilisé pour calculer la valeur de retour.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>If you call the derived type's <ph id="ph1">`GetHashCode`</ph> method, the return value is not likely to be suitable for use as a key in a hash table.</source>
          <target state="translated">Si vous appelez la méthode du type dérivé <ph id="ph1">`GetHashCode`</ph> (méthode), la valeur de retour n’est pas susceptible d’être adapté pour une utilisation en tant que clé dans une table de hachage.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</source>
          <target state="translated">En outre, si la valeur d’un ou plusieurs de ces champs change, la valeur de retour peut devenir illisible pour une utilisation en tant que clé dans une table de hachage.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>In either case, consider writing your own implementation of the <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method that more closely represents the concept of a hash code for the type.</source>
          <target state="translated">Dans les deux cas, envisagez d’écrire votre propre implémentation de le <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> plus étroitement représente le concept d’un code de hachage pour le type de méthode.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph2">&lt;xref:System.Collections.Hashtable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour plus d'informations, consultez <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.Hashtable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>Notes for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></source>
          <target state="translated">Notes pour le <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>When you call the <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method on a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, it provides the default behavior for value types that don’t override <ph id="ph3">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>.</source>
          <target state="translated">Lorsque vous appelez le <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> méthode sur un <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, il fournit le comportement par défaut pour les types de valeur ne remplacent pas <ph id="ph3">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>This is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</source>
          <target state="translated">Cela fait partie de la prise en charge le .NET Framework fournit pour les <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (consultez <bpt id="p1">[</bpt>.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structures can’t override <ph id="ph2">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>, even if they’re written with C# or Visual Basic, because they can’t have methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> les structures ne peuvent pas substituer <ph id="ph2">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>, même si elles sont écrites avec c# ou Visual Basic, car ils ne peuvent pas avoir de méthodes.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>(In addition, structures in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> itself don’t inherit <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) However, they appear to have <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</source>
          <target state="translated">(En outre, les structures dans le <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> lui-même n’héritent pas <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) Toutefois, ils semblent avoir <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, et <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method can be overridden by a derived value type.</source>
          <target state="translated">L’exemple suivant montre comment la <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> méthode peut être substituée par un type valeur dérivée.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ValueType.ToString">
          <source>Returns the fully qualified type name of this instance.</source>
          <target state="translated">Retourne le nom de type qualifié complet de cette instance.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ValueType.ToString">
          <source>The fully qualified type name.</source>
          <target state="translated">Nom complet du type.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>The <ph id="ph1">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> method overrides the <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method and provides the default implementation of the <ph id="ph3">`ToString`</ph> method for value types.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> substitutions de méthode le <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> (méthode) et fournit l’implémentation par défaut de la <ph id="ph3">`ToString`</ph> méthode pour les types valeur.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>(Value types are types defined by the <ph id="ph1">`struct`</ph> keyword in C#, and by the <ph id="ph2">`Structure`</ph>...<ph id="ph3">`End Structure`</ph> construct in Visual Basic.) Functionally, however, the implementation is that same as that of <ph id="ph4">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>: the method returns the fully qualified type name.</source>
          <target state="translated">(Les types valeur sont des types définis par le <ph id="ph1">`struct`</ph> mot clé en c# et par le <ph id="ph2">`Structure`</ph>... <ph id="ph3">`End Structure`</ph> construire en Visual Basic.) Point de vue fonctionnel, toutefois, l’implémentation est ce même que celui de <ph id="ph4">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>: la méthode retourne le nom de type qualifié complet.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Value types defined by the <ph id="ph1">`struct`</ph> keyword in C# and the <ph id="ph2">`Structure`</ph>...<ph id="ph3">`End Structure`</ph> construct in Visual Basic typically override the <ph id="ph4">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> method to provide a more meaningful string representation of the value type.</source>
          <target state="translated">Valeur des types définis par le <ph id="ph1">`struct`</ph> mot clé en c# et <ph id="ph2">`Structure`</ph>... <ph id="ph3">`End Structure`</ph> construction en Visual Basic en général remplacent la <ph id="ph4">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> méthode pour fournir une représentation de chaîne plus explicite du type valeur.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>The following example illustrates the difference.</source>
          <target state="translated">L'exemple suivant illustre la différence.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>It defines two value types, <ph id="ph1">`EmployeeA`</ph> and <ph id="ph2">`EmployeeB`</ph>, creates an instance of each, and calls its <ph id="ph3">`ToString`</ph> method.</source>
          <target state="translated">Il définit deux types de valeur, <ph id="ph1">`EmployeeA`</ph> et <ph id="ph2">`EmployeeB`</ph>, crée une instance de chaque et appelle son <ph id="ph3">`ToString`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Because the <ph id="ph1">`EmployeeA`</ph> structure does not override the <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> method, it displays only the fully qualified type name.</source>
          <target state="translated">Étant donné que la <ph id="ph1">`EmployeeA`</ph> structure ne remplace pas le <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> (méthode), il affiche uniquement le nom de type qualifié complet.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>The <ph id="ph1">`EmployeeB.ToString`</ph> method, on the other hand, provides meaningful information about the object.</source>
          <target state="translated">Le <ph id="ph1">`EmployeeB.ToString`</ph> (méthode), en revanche, fournit des informations explicites sur l’objet.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Note that, although enumeration types are also value types, they derive from the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class, which overrides  <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Notez que, bien que les types énumération sont également des types valeur, ils dérivent de la <ph id="ph1">&lt;xref:System.Enum&gt;</ph> classe, qui substitue <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Notes for the Windows Runtime</source>
          <target state="translated">Notes pour le Windows Runtime</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>When you call the <ph id="ph1">&lt;xref:System.ValueType.ToString%2A&gt;</ph> method on a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, it provides the default behavior for value types that don’t override <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>.</source>
          <target state="translated">Lorsque vous appelez le <ph id="ph1">&lt;xref:System.ValueType.ToString%2A&gt;</ph> méthode sur un <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, il fournit le comportement par défaut pour les types de valeur ne remplacent pas <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>This is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</source>
          <target state="translated">Cela fait partie de la prise en charge le .NET Framework fournit pour les <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (consultez <bpt id="p1">[</bpt>.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structures can’t override <ph id="ph2">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, even if they’re written with C# or Visual Basic, because they can’t have methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> les structures ne peuvent pas substituer <ph id="ph2">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, même si elles sont écrites avec c# ou Visual Basic, car ils ne peuvent pas avoir de méthodes.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>(In addition, structures in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> itself don’t inherit <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) However, they appear to have <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</source>
          <target state="translated">(En outre, les structures dans le <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> lui-même n’héritent pas <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) Toutefois, ils semblent avoir <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, et <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>