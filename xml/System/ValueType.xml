<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33378379d2e91ec17aa2980f5a53aa8e59d1b2bd" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36427333" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b0121-101">Fournit la classe de base pour les types valeur.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0121-101">Provides the base class for value types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0121-102"><xref:System.ValueType> substitue les méthodes virtuelles à partir de <xref:System.Object> des implémentations plus appropriées pour les types valeur.</span><span class="sxs-lookup"><span data-stu-id="b0121-102"><xref:System.ValueType> overrides the virtual methods from <xref:System.Object> with more appropriate implementations for value types.</span></span> <span data-ttu-id="b0121-103">Voir aussi <xref:System.Enum>, qui hérite de <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="b0121-103">See also <xref:System.Enum>, which inherits from <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="b0121-104">Types de données sont divisés en types valeur et les types référence.</span><span class="sxs-lookup"><span data-stu-id="b0121-104">Data types are separated into value types and reference types.</span></span> <span data-ttu-id="b0121-105">Types valeur sont alloués à la pile ou alloués inline dans une structure.</span><span class="sxs-lookup"><span data-stu-id="b0121-105">Value types are either stack-allocated or allocated inline in a structure.</span></span> <span data-ttu-id="b0121-106">Les types référence sont alloués par tas.</span><span class="sxs-lookup"><span data-stu-id="b0121-106">Reference types are heap-allocated.</span></span> <span data-ttu-id="b0121-107">Les types de référence et de valeur sont dérivés de la classe de base fondamentale parmi <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="b0121-107">Both reference and value types are derived from the ultimate base class <xref:System.Object>.</span></span> <span data-ttu-id="b0121-108">Dans les cas où il n’est nécessaire pour un type valeur se comporte comme un objet, un wrapper qui rend le type de valeur ressemble pas à un objet de référence est alloué sur le tas et valeur la valeur du type d’est copié.</span><span class="sxs-lookup"><span data-stu-id="b0121-108">In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</span></span> <span data-ttu-id="b0121-109">Le wrapper est marqué pour que le système sache qu’il contient un type valeur.</span><span class="sxs-lookup"><span data-stu-id="b0121-109">The wrapper is marked so the system knows that it contains a value type.</span></span> <span data-ttu-id="b0121-110">Ce processus est appelé conversion boxing et le processus inverse est appelé conversion unboxing.</span><span class="sxs-lookup"><span data-stu-id="b0121-110">This process is known as boxing, and the reverse process is known as unboxing.</span></span> <span data-ttu-id="b0121-111">Conversion boxing et unboxing permettent à n’importe quel type d’être traité comme un objet.</span><span class="sxs-lookup"><span data-stu-id="b0121-111">Boxing and unboxing allow any type to be treated as an object.</span></span>  
  
 <span data-ttu-id="b0121-112">Bien que <xref:System.ValueType> est la classe de base implicite pour les types valeur, vous ne peut pas créer une classe qui hérite de <xref:System.ValueType> directement.</span><span class="sxs-lookup"><span data-stu-id="b0121-112">Although <xref:System.ValueType> is the implicit base class for value types, you cannot create a class that inherits from <xref:System.ValueType> directly.</span></span> <span data-ttu-id="b0121-113">Au lieu de cela, les compilateurs individuels fournissent un mot clé de langage ou construire (tel que `struct` en c# et `Structure`...`End Structure`</span><span class="sxs-lookup"><span data-stu-id="b0121-113">Instead, individual compilers provide a language keyword or construct (such as `struct` in C# and `Structure`…`End Structure`</span></span> <span data-ttu-id="b0121-114">en Visual Basic) pour prendre en charge la création de types de valeur.</span><span class="sxs-lookup"><span data-stu-id="b0121-114">in Visual Basic) to support the creation of value types.</span></span>  
  
 <span data-ttu-id="b0121-115">En plus de servir de la classe de base pour les types de valeur dans le .NET Framework, le <xref:System.ValueType> structure n’est généralement pas utilisée directement dans le code.</span><span class="sxs-lookup"><span data-stu-id="b0121-115">Aside from serving as the base class for value types in the .NET Framework, the <xref:System.ValueType> structure is generally not used directly in code.</span></span> <span data-ttu-id="b0121-116">Toutefois, il peut être utilisé en tant que paramètre dans les appels de méthode pour restreindre les arguments possibles pour les types de valeur au lieu de tous les objets, ou autoriser une méthode pour gérer un nombre de types de valeur différents.</span><span class="sxs-lookup"><span data-stu-id="b0121-116">However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</span></span> <span data-ttu-id="b0121-117">L’exemple suivant illustre comment <xref:System.ValueType> empêche que des types de référence passés aux méthodes.</span><span class="sxs-lookup"><span data-stu-id="b0121-117">The following example illustrates how <xref:System.ValueType> prevents reference types from being passed to methods.</span></span> <span data-ttu-id="b0121-118">Il définit une classe nommée `Utility` qui contient quatre méthodes : `IsNumeric`, qui indique si son argument est un nombre ; `IsInteger`, qui indique si son argument est un entier. `IsFloat`, qui indique si son argument est un nombre à virgule flottante et `Compare`, ce qui indique la relation entre deux valeurs numériques.</span><span class="sxs-lookup"><span data-stu-id="b0121-118">It defines a class named `Utility` that contains four methods: `IsNumeric`, which indicates whether its argument is a number; `IsInteger`, which indicates whether its argument is an integer; `IsFloat`, which indicates whether its argument is a floating-point number; and `Compare`, which indicates the relationship between two numeric values.</span></span> <span data-ttu-id="b0121-119">Dans chaque cas, les paramètres de méthode sont de type <xref:System.ValueType>, et les types référence ne peuvent pas être passés aux méthodes.</span><span class="sxs-lookup"><span data-stu-id="b0121-119">In each case, the method parameters are of type <xref:System.ValueType>, and reference types are prevented from being passed to the methods.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 <span data-ttu-id="b0121-120">L’exemple suivant illustre des appels aux méthodes de la `Utility` classe.</span><span class="sxs-lookup"><span data-stu-id="b0121-120">The following example illustrates calls to the methods of the `Utility` class.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0121-121">Initialise une nouvelle instance de la classe <see cref="T:System.ValueType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0121-121">Initializes a new instance of the <see cref="T:System.ValueType" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="b0121-122">Objet à comparer à l'instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0121-122">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0121-123">Indique si cette instance et un objet spécifié sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0121-123">Indicates whether this instance and a specified object are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0121-124">
            <see langword="true" /> si <paramref name="obj" /> et cette instance sont du même type et représentent la même valeur ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0121-124">
              <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0121-125">Le <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> substitutions de méthode <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> et fournit l’implémentation par défaut de l’égalité des valeurs pour tous les types de valeur dans le .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="b0121-125">The <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> and provides the default implementation of value equality for all value types in the .NET Framework.</span></span>  
  
 <span data-ttu-id="b0121-126">Si aucun des champs de l’instance actuelle et `obj` sont des types référence, la <xref:System.ValueType.Equals%2A> méthode effectue une comparaison octet par octet des deux objets en mémoire.</span><span class="sxs-lookup"><span data-stu-id="b0121-126">If none of the fields of the current instance and `obj` are reference types, the <xref:System.ValueType.Equals%2A> method performs a byte-by-byte comparison of the two objects in memory.</span></span> <span data-ttu-id="b0121-127">Sinon, il utilise la réflexion pour comparer les champs correspondants de `obj` et cette instance.</span><span class="sxs-lookup"><span data-stu-id="b0121-127">Otherwise, it uses reflection to compare the corresponding fields of `obj` and this instance.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="b0121-128">En particulier si votre type de valeur contient des champs qui sont des types référence, vous devez substituer la <xref:System.ValueType.Equals%28System.Object%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b0121-128">Particularly if your value type contains fields that are reference types, you should override the <xref:System.ValueType.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="b0121-129">Cela peut améliorer les performances et vous permettent de mieux représentent la signification d’égalité pour le type.</span><span class="sxs-lookup"><span data-stu-id="b0121-129">This can improve performance and enable you to more closely represent the meaning of equality for the type.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="b0121-130">Notes pour le [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="b0121-130">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="b0121-131">Lorsque vous appelez le <xref:System.ValueType.Equals%2A> méthode sur un [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, il fournit le comportement par défaut pour les types de valeur ne remplacent pas <xref:System.ValueType.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="b0121-131">When you call the <xref:System.ValueType.Equals%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.Equals%2A>.</span></span> <span data-ttu-id="b0121-132">Cela fait partie de la prise en charge le .NET Framework fournit pour les [!INCLUDE[wrt](~/includes/wrt-md.md)] (consultez [.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="b0121-132">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="b0121-133"> les structures ne peuvent pas substituer <xref:System.ValueType.Equals%2A>, même si elles sont écrites avec c# ou Visual Basic, car ils ne peuvent pas avoir de méthodes.</span><span class="sxs-lookup"><span data-stu-id="b0121-133"> structures can’t override <xref:System.ValueType.Equals%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="b0121-134">(En outre, les structures dans le [!INCLUDE[wrt](~/includes/wrt-md.md)] lui-même n’héritent pas <xref:System.ValueType>.) Toutefois, ils semblent avoir <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, et <xref:System.ValueType.GetHashCode%2A> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="b0121-134">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0121-135">L’exemple suivant montre comment la <xref:System.ValueType.Equals%2A> méthode peut être substituée par un type valeur dérivée.</span><span class="sxs-lookup"><span data-stu-id="b0121-135">The following example demonstrates how the <xref:System.ValueType.Equals%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0121-136">Retourne le code de hachage de cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0121-136">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0121-137">Entier signé 32 bits qui est le code de hachage pour cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0121-137">A 32-bit signed integer that is the hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0121-138">Le <xref:System.ValueType.GetHashCode%2A> méthode s’applique aux types dérivés de <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="b0121-138">The <xref:System.ValueType.GetHashCode%2A> method applies to types derived from <xref:System.ValueType>.</span></span> <span data-ttu-id="b0121-139">Un ou plusieurs champs du type dérivé est utilisé pour calculer la valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="b0121-139">One or more fields of the derived type is used to calculate the return value.</span></span> <span data-ttu-id="b0121-140">Si vous appelez la méthode du type dérivé `GetHashCode` (méthode), la valeur de retour n’est pas susceptible d’être adapté pour une utilisation en tant que clé dans une table de hachage.</span><span class="sxs-lookup"><span data-stu-id="b0121-140">If you call the derived type's `GetHashCode` method, the return value is not likely to be suitable for use as a key in a hash table.</span></span> <span data-ttu-id="b0121-141">En outre, si la valeur d’un ou plusieurs de ces champs change, la valeur de retour peut devenir illisible pour une utilisation en tant que clé dans une table de hachage.</span><span class="sxs-lookup"><span data-stu-id="b0121-141">Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</span></span> <span data-ttu-id="b0121-142">Dans les deux cas, envisagez d’écrire votre propre implémentation de le <xref:System.ValueType.GetHashCode%2A> plus étroitement représente le concept d’un code de hachage pour le type de méthode.</span><span class="sxs-lookup"><span data-stu-id="b0121-142">In either case, consider writing your own implementation of the <xref:System.ValueType.GetHashCode%2A> method that more closely represents the concept of a hash code for the type.</span></span>  
  
 <span data-ttu-id="b0121-143">Pour plus d'informations, consultez <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> et <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="b0121-143">For more information, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, and <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="b0121-144">Notes pour le [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="b0121-144">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="b0121-145">Lorsque vous appelez le <xref:System.ValueType.GetHashCode%2A> méthode sur un [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, il fournit le comportement par défaut pour les types de valeur ne remplacent pas <xref:System.ValueType.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="b0121-145">When you call the <xref:System.ValueType.GetHashCode%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.GetHashCode%2A>.</span></span> <span data-ttu-id="b0121-146">Cela fait partie de la prise en charge le .NET Framework fournit pour les [!INCLUDE[wrt](~/includes/wrt-md.md)] (consultez [.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="b0121-146">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="b0121-147"> les structures ne peuvent pas substituer <xref:System.ValueType.GetHashCode%2A>, même si elles sont écrites avec c# ou Visual Basic, car ils ne peuvent pas avoir de méthodes.</span><span class="sxs-lookup"><span data-stu-id="b0121-147"> structures can’t override <xref:System.ValueType.GetHashCode%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="b0121-148">(En outre, les structures dans le [!INCLUDE[wrt](~/includes/wrt-md.md)] lui-même n’héritent pas <xref:System.ValueType>.) Toutefois, ils semblent avoir <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, et <xref:System.ValueType.GetHashCode%2A> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="b0121-148">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0121-149">L’exemple suivant montre comment la <xref:System.ValueType.GetHashCode%2A> méthode peut être substituée par un type valeur dérivée.</span><span class="sxs-lookup"><span data-stu-id="b0121-149">The following example demonstrates how the <xref:System.ValueType.GetHashCode%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0121-150">Retourne le nom de type qualifié complet de cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0121-150">Returns the fully qualified type name of this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0121-151">Nom complet du type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0121-151">The fully qualified type name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0121-152">Le <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> substitutions de méthode le <xref:System.Object.ToString%2A?displayProperty=nameWithType> (méthode) et fournit l’implémentation par défaut de la `ToString` méthode pour les types valeur.</span><span class="sxs-lookup"><span data-stu-id="b0121-152">The <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method and provides the default implementation of the `ToString` method for value types.</span></span> <span data-ttu-id="b0121-153">(Les types valeur sont des types définis par le `struct` mot clé en c# et par le `Structure`... `End Structure` construire en Visual Basic.) Point de vue fonctionnel, toutefois, l’implémentation est ce même que celui de <xref:System.Object.ToString%2A?displayProperty=nameWithType>: la méthode retourne le nom de type qualifié complet.</span><span class="sxs-lookup"><span data-stu-id="b0121-153">(Value types are types defined by the `struct` keyword in C#, and by the `Structure`...`End Structure` construct in Visual Basic.) Functionally, however, the implementation is that same as that of <xref:System.Object.ToString%2A?displayProperty=nameWithType>: the method returns the fully qualified type name.</span></span>  
  
 <span data-ttu-id="b0121-154">Valeur des types définis par le `struct` mot clé en c# et `Structure`... `End Structure` construction en Visual Basic en général remplacent la <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> méthode pour fournir une représentation de chaîne plus explicite du type valeur.</span><span class="sxs-lookup"><span data-stu-id="b0121-154">Value types defined by the `struct` keyword in C# and the `Structure`...`End Structure` construct in Visual Basic typically override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method to provide a more meaningful string representation of the value type.</span></span> <span data-ttu-id="b0121-155">L'exemple suivant illustre la différence.</span><span class="sxs-lookup"><span data-stu-id="b0121-155">The following example illustrates the difference.</span></span> <span data-ttu-id="b0121-156">Il définit deux types de valeur, `EmployeeA` et `EmployeeB`, crée une instance de chaque et appelle son `ToString` (méthode).</span><span class="sxs-lookup"><span data-stu-id="b0121-156">It defines two value types, `EmployeeA` and `EmployeeB`, creates an instance of each, and calls its `ToString` method.</span></span> <span data-ttu-id="b0121-157">Étant donné que la `EmployeeA` structure ne remplace pas le <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> (méthode), il affiche uniquement le nom de type qualifié complet.</span><span class="sxs-lookup"><span data-stu-id="b0121-157">Because the `EmployeeA` structure does not override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method, it displays only the fully qualified type name.</span></span> <span data-ttu-id="b0121-158">Le `EmployeeB.ToString` (méthode), en revanche, fournit des informations explicites sur l’objet.</span><span class="sxs-lookup"><span data-stu-id="b0121-158">The `EmployeeB.ToString` method, on the other hand, provides meaningful information about the object.</span></span>  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 <span data-ttu-id="b0121-159">Notez que, bien que les types énumération sont également des types valeur, ils dérivent de la <xref:System.Enum> classe, qui substitue <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="b0121-159">Note that, although enumeration types are also value types, they derive from the <xref:System.Enum> class, which overrides  <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-windows-runtime"></a><span data-ttu-id="b0121-160">Notes pour le Windows Runtime</span><span class="sxs-lookup"><span data-stu-id="b0121-160">Notes for the Windows Runtime</span></span>  
 <span data-ttu-id="b0121-161">Lorsque vous appelez le <xref:System.ValueType.ToString%2A> méthode sur un [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, il fournit le comportement par défaut pour les types de valeur ne remplacent pas <xref:System.ValueType.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="b0121-161">When you call the <xref:System.ValueType.ToString%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.ToString%2A>.</span></span> <span data-ttu-id="b0121-162">Cela fait partie de la prise en charge le .NET Framework fournit pour les [!INCLUDE[wrt](~/includes/wrt-md.md)] (consultez [.NET Framework prend en charge pour les applications du Windows Store et Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="b0121-162">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="b0121-163"> les structures ne peuvent pas substituer <xref:System.ValueType.ToString%2A>, même si elles sont écrites avec c# ou Visual Basic, car ils ne peuvent pas avoir de méthodes.</span><span class="sxs-lookup"><span data-stu-id="b0121-163"> structures can’t override <xref:System.ValueType.ToString%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="b0121-164">(En outre, les structures dans le [!INCLUDE[wrt](~/includes/wrt-md.md)] lui-même n’héritent pas <xref:System.ValueType>.) Toutefois, ils semblent avoir <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, et <xref:System.ValueType.GetHashCode%2A> méthodes lorsque vous les utilisez dans votre code c# ou Visual Basic et le .NET Framework fournit le comportement par défaut pour ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="b0121-164">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>