<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="72cb02fe2746be503bf9919aceba71c44b50108a" /><Meta Name="ms.sourcegitcommit" Value="d2dc7b29150110865ef8f199ee7463d9568fc696" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/25/2019" /><Meta Name="ms.locfileid" Value="58413980" /></Metadata><TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" />
  <TypeSignature Language="F#" Value="type OutOfMemoryException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exception levée quand il n'y a pas suffisamment de mémoire pour poursuivre l'exécution d'un programme.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.OutOfMemoryException> utilise le HRESULT `COR_E_OUTOFMEMORY`, qui a la valeur 0x8007000E.  
  
Pour obtenir la liste des valeurs initiales des propriétés d’une instance de <xref:System.OutOfMemoryException>, consultez le <xref:System.OutOfMemoryException.%23ctor%2A> constructeurs.  
  
> [!NOTE]
>  La valeur de l’élément hérité <xref:System.Exception.Data%2A> propriété est toujours `null`.  
  
Un <xref:System.OutOfMemoryException> exception a deux raisons principales :  
  
-   Vous essayez de développer un <xref:System.Text.StringBuilder> objet au-delà de la longueur définie par ses <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> propriété.  
  
-   Le common language runtime ne peut pas allouer suffisamment de mémoire contiguë pour effectuer une opération. Cette exception peut être levée par un appel de méthode ou d’attribution de propriété nécessitant une allocation de mémoire. Pour plus d’informations sur la cause de le <xref:System.OutOfMemoryException> exception, consultez [« mémoire insuffisante » ne fait pas référence à la mémoire physique](https://blogs.msdn.com/b/ericlippert/archive/2009/06/08/out-of-memory-does-not-refer-to-physical-memory.aspx).  
  
     Ce type de <xref:System.OutOfMemoryException> exception représente une défaillance catastrophique. Si vous choisissez de gérer l’exception, vous devez inclure un `catch` bloc qui appelle le <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> méthode pour mettre fin à votre application et ajouter une entrée au journal des événements système, comme dans l’exemple suivant.  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 Certaines des conditions sous lesquelles l’exception est levée et les actions que vous pouvez prendre pour éliminer incluent les éléments suivants :  
  
**Vous appelez le <xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType> (méthode).**  

Vous essayez d’augmenter la durée d’un <xref:System.Text.StringBuilder> objet au-delà de la taille spécifiée par son <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> propriété. L’exemple suivant illustre la <xref:System.OutOfMemoryException> exception levée par un appel à la <xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> méthode lors de l’exemple tente d’insérer une chaîne qui provoquerait l’objet <xref:System.Text.StringBuilder.Length%2A> propriété à dépasser sa capacité maximale.  
  
[!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
[!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
Vous pouvez effectuer l’une des opérations suivantes pour résoudre l’erreur :  
  
-   Remplacez l’appel à la <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> constructeur avec un appel de n’importe quel autre <xref:System.Text.StringBuilder> surcharge de constructeur. La capacité maximale de votre <xref:System.Text.StringBuilder> objet définira sa valeur par défaut, qui est <xref:System.Int32.MaxValue?displayProperty=nameWithType>.  

-   Appelez le <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> constructeur avec un `maxCapacity` valeur qui est assez grand pour contenir toute expansion à la <xref:System.Text.StringBuilder> objet.  
  
**Votre application s’exécute comme un processus 32 bits.**

processus 32 bits peuvent allouer un maximum de 2 Go de mémoire virtuelle en mode utilisateur sur les systèmes 32 bits et 4 Go de mémoire virtuelle en mode utilisateur sur les systèmes 64 bits. Cela peut rendre plus difficile pour le common language runtime allouer suffisamment de mémoire contiguë quand une allocation volumineuse est nécessaire. En revanche, les processus 64 bits peuvent allouer jusqu'à 8 To de mémoire virtuelle. Pour résoudre cette exception, recompilez votre application pour cibler une plateforme 64 bits. Pour plus d’informations sur le ciblage de plateformes spécifiques dans Visual Studio, consultez [Comment : Configurer des projets pour des plateformes cibles](https://msdn.microsoft.com/library/845302fc-273d-4f81-820a-7296ce91bd76).  
  
**Votre application présente une fuite de ressources non managées** 

Bien que le garbage collector est en mesure de libérer de la mémoire allouée aux types managés, il ne gère pas la mémoire allouée pour les ressources non managées, telles que le système d’exploitation gère (y compris les handles de fichiers, les fichiers mappés en mémoire, les canaux, les clés de Registre et les handles d’attente) et les blocs de mémoire alloués directement par les appels d’API de Windows ou par des appels aux fonctions d’allocation de mémoire comme `malloc`. Les types qui consomment des ressources non managées implémentent le <xref:System.IDisposable> interface.  

Si vous consommez un type qui utilise des ressources non managées, vous devez être sûr d’appeler ses <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> méthode lorsque vous avez terminé. (Certains types implémentent également un `Close` méthode est identique dans une fonction à un `Dispose` (méthode).) Pour plus d’informations, consultez le [à l’aide d’objets qu’implémenter IDisposable](~/docs/standard/garbage-collection/using-objects.md) rubrique.  

Si vous avez créé un type qui utilise des ressources non managées, assurez-vous que vous avez implémenté le modèle Dispose et, si nécessaire, fournir un finaliseur. Pour plus d’informations, consultez [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) et <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.  
  
**Vous essayez de créer un grand tableau dans un processus 64 bits**

Par défaut, le common language runtime dans .NET Framework n’autorise pas les objets uniques dont la taille est supérieure à 2 Go. Pour remplacer cette valeur par défaut, vous pouvez utiliser la [ \<gcAllowVeryLargeObjects >](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) paramètre de fichier de configuration pour activer des tableaux dont la taille totale dépasse 2 Go. Sur .NET Core, prend en charge pour les tableaux de supérieure à 2 Go est activée par défaut. 
  
**Vous travaillez avec très grands ensembles de données (par exemple, les tableaux, les collections ou les jeux de données de base de données) dans la mémoire.**

Lorsque les structures de données ou les jeux de données qui résident en mémoire sont tellement important que le common language runtime est impossible d’allouer suffisamment de mémoire contiguë pour eux, un <xref:System.OutOfMemoryException> résultats de l’exception.  

Pour empêcher le <xref:System.OutOfMemoryException> exceptions, vous devez modifier votre application afin que moins de données réside en mémoire, ou les données sont divisées en segments qui nécessitent des allocations de mémoire plus petites. Par exemple :  

-   Si vous êtes toutes les données de récupération à partir d’une base de données et puis le filtrage dans votre application afin de réduire les allers-retours au serveur, vous devez modifier vos requêtes pour retourner uniquement le sous-ensemble de données dont votre application a besoin. Lorsque vous travaillez avec de grandes tables, plusieurs requêtes sont presque toujours plus efficace que la récupération de toutes les données dans une seule table et puis de le manipuler.  

-   Si vous exécutez des requêtes que les utilisateurs créent dynamiquement, vous devez vous assurer que le nombre d’enregistrements renvoyés par la requête est limité.  

-   Si vous utilisez des grands tableaux ou autres collection objets dont les résultats taille dans un <xref:System.OutOfMemoryException> exception, vous devez modifier votre application pour utiliser les données en sous-ensembles plutôt que pour l’utiliser à la fois.  
  
L’exemple suivant obtient un tableau qui se compose de valeurs à virgule flottante de 200 millions, puis calcule leur moyenne. La sortie de l’exemple montre que, étant donné que l’exemple stocke l’intégralité du tableau dans la mémoire avant qu’il calcule la moyenne, un <xref:System.OutOfMemoryException> est levée.  

[!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
[!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
L’exemple suivant supprime le <xref:System.OutOfMemoryException> exception en traitant les données entrantes sans stocker l’ensemble de données en mémoire, sérialiser les données dans un fichier afin d’autoriser la poursuite du traitement (ces lignes doivent être commentées dans l’exemple, si nécessaire Étant donné que dans ce cas qu’ils produisent un fichier dont la taille est supérieure à 1 Go) et en retournant la moyenne calculée et le nombre de cas à la routine d’appel.  

[!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
[!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
**Vous concaténez des chaînes de grande taille à plusieurs reprises.** 

Étant donné que les chaînes sont immuables, chaque opération de concaténation de chaînes crée une nouvelle chaîne. L’impact pour les petites chaînes, ou pour un petit nombre d’opérations de concaténation, est négligeable. Mais pour les chaînes de grande taille ou un très grand nombre d’opérations de concaténation, concaténation de chaînes peut entraîner un grand nombre d’allocations de mémoire et de fragmentation de la mémoire, des performances médiocres et éventuellement <xref:System.OutOfMemoryException> exceptions.  

Lorsque la concaténation de chaînes de grande taille ou effectuer un grand nombre d’opérations de concaténation, vous devez utiliser le <xref:System.Text.StringBuilder> classe au lieu du <xref:System.String> classe. Lorsque vous avez terminé de manipulation de la chaîne, de convertir le <xref:System.Text.StringBuilder> instance vers une chaîne en appelant le <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> (méthode).  
  
**Vous épinglez un grand nombre d’objets en mémoire.**  
 
Épinglage d’un grand nombre d’objets dans la mémoire pendant de longues périodes peut rendre difficile pour le RÉCUPÉRATEUR de mémoire à allouer des blocs contigus de mémoire. Si vous avez épinglé un grand nombre d’objets en mémoire, par exemple à l’aide de la `fixed` instruction en c# ou en appelant le <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> méthode avec un type de handle de <xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>, vous pouvez procéder à l’adresse le <xref:System.OutOfMemoryException> exception.  
  
-   Déterminer si chaque objet doit vraiment être épinglé,  

-   Assurez-vous que chaque objet est désépinglé dès que possible.  

-   Assurez-vous que chaque appel à la <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> méthode vers la mémoire de code confidentiel a un appel correspondant à la <xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType> méthode détacher cette mémoire.  

L’instructions Microsoft suivantes intermédiaires (MSIL) lèvent une <xref:System.OutOfMemoryException> exception :  
  
-   [box](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx)  
-   [newarr](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx)  

-   [newobj](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx)newobj  


 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Gestion et levée des exceptions</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OutOfMemoryException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OutOfMemoryException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Exception.Message%2A> propriété de la nouvelle instance à un message système décrivant l’erreur, tel que « mémoire insuffisante pour continuer l’exécution du programme. ». Ce message prend en compte la culture système en cours.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.OutOfMemoryException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur localisé.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message décrivant l'erreur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OutOfMemoryException" /> avec un message d'erreur spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le contenu du paramètre `message` doit être compréhensible par les utilisateurs. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.OutOfMemoryException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Référence Null (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
        <param name="context">Informations contextuelles sur la source ou la destination.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OutOfMemoryException" /> avec des données sérialisées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur est appelé lors de la désérialisation pour reconstituer l’objet exception transmis sur un flux. Pour plus d’informations, consultez [sérialisation XML et SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">Sérialisation XML et SOAP</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string * Exception -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
        <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas une référence null (<see langword="Nothing" /> en Visual Basic), l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OutOfMemoryException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une exception qui est levée en conséquence directe d'une exception précédente peut contenir une référence à l'exception précédente dans la propriété <xref:System.Exception.InnerException%2A>. La propriété <xref:System.Exception.InnerException%2A> retourne la même valeur que celle qui a été passée dans le constructeur ou une référence Null (`Nothing` en Visual Basic), si la propriété <xref:System.Exception.InnerException%2A> ne fournit pas la valeur de l'exception interne au constructeur.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.OutOfMemoryException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|La référence à l'exception interne.|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Gestion et levée des exceptions</related>
      </Docs>
    </Member>
  </Members>
</Type>