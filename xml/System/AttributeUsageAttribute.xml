<Type Name="AttributeUsageAttribute" FullName="System.AttributeUsageAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26912982a56d71f0f38a05b7ede7327988b3b43a" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56374607" /></Metadata><TypeSignature Language="C#" Value="public sealed class AttributeUsageAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit AttributeUsageAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.AttributeUsageAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AttributeUsageAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AttributeUsageAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type AttributeUsageAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Spécifie l'utilisation d'une autre classe d'attributs. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous définissez votre propre classe d’attributs, vous pouvez contrôler la manière dans lequel elle est utilisée en plaçant un <xref:System.AttributeUsageAttribute> sur votre classe d’attributs. La classe d’attributs indiquée doit dériver de <xref:System.Attribute>, directement ou indirectement.  
  
 Classes d’attributs ont des paramètres nommés et positionnels. Chaque constructeur public par une classe d’attributs définit une séquence valide de paramètres positionnels pour cette classe. Paramètres nommés sont définis par les champs non statique, publiques et en lecture-écriture ou propriétés de la classe d’attributs.  
  
 Les trois propriétés de <xref:System.AttributeUsageAttribute> sont définies en définissant les paramètres suivants :  
  
-   <xref:System.AttributeUsageAttribute.ValidOn%2A>  
  
 Ce paramètre positionnel spécifie les éléments de programme qui l’attribut indiqué peut être placé sur. L’ensemble de tous les éléments possibles que vous pouvez placer un attribut sur est répertorié dans le <xref:System.AttributeTargets> énumération. Vous pouvez combiner plusieurs <xref:System.AttributeTargets> des valeurs en utilisant une opération OR au niveau du bit pour obtenir la combinaison souhaitée d’éléments de programme valides.  
  
-   <xref:System.AttributeUsageAttribute.AllowMultiple%2A>  
  
 Ce paramètre nommé Spécifie si l’attribut indiqué peut être spécifié plusieurs fois pour un élément de programme donné.  
  
-   <xref:System.AttributeUsageAttribute.Inherited%2A>  
  
 Ce paramètre nommé Spécifie si l’attribut indiqué peut être hérité par les classes dérivées et les membres de substitution.  
  
 Pour plus d’informations sur l’utilisation d’attributs, consultez <xref:System.Attribute> et [attributs](~/docs/standard/attributes/index.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.AttributeTargets" />
    <related type="Article" href="~/docs/standard/attributes/index.md">Extension des métadonnées à l'aide des attributs</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttributeUsageAttribute (AttributeTargets validOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.AttributeTargets validOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (validOn As AttributeTargets)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AttributeUsageAttribute(AttributeTargets validOn);" />
      <MemberSignature Language="F#" Value="new AttributeUsageAttribute : AttributeTargets -&gt; AttributeUsageAttribute" Usage="new System.AttributeUsageAttribute validOn" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="validOn" Type="System.AttributeTargets" />
      </Parameters>
      <Docs>
        <param name="validOn">Ensemble de valeurs combinées à l'aide d'une opération de bits OR pour indiquer les éléments de programme valides.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.AttributeUsageAttribute" /> avec la liste spécifiée de <see cref="T:System.AttributeTargets" />, la valeur <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> et la valeur <see cref="P:System.AttributeUsageAttribute.Inherited" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez combiner plusieurs <xref:System.AttributeTargets> des valeurs en utilisant une opération OR au niveau du bit pour obtenir la combinaison souhaitée d’éléments de programme valides.  
  
 Pour les valeurs de propriété par défaut, consultez le <xref:System.AttributeUsageAttribute.ValidOn%2A>, <xref:System.AttributeUsageAttribute.AllowMultiple%2A>, et <xref:System.AttributeUsageAttribute.Inherited%2A> propriétés.  
  
   
  
## Examples  
 La définition de l’attribut DispId illustre l’utilisation d’une opération OR au niveau du bit pour combiner plusieurs <xref:System.AttributeTargets> valeurs.  
  
 [!code-cpp[Classic AttributeUsageAttribute.AttributeUsageAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic AttributeUsageAttribute.AttributeUsageAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic AttributeUsageAttribute.AttributeUsageAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic AttributeUsageAttribute.AttributeUsageAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic AttributeUsageAttribute.AttributeUsageAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic AttributeUsageAttribute.AttributeUsageAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.AttributeTargets" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.AttributeUsageAttribute.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultiple : bool with get, set" Usage="System.AttributeUsageAttribute.AllowMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur Boolean indiquant si plusieurs instances de l'attribut indiqué peuvent être spécifiées pour un seul élément de programme.</summary>
        <value><see langword="true" /> si la spécification de plusieurs instances est autorisée ; sinon <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un attribut qui peut être spécifié plusieurs fois pour un élément de programme est appelé un attribut à usages multiples. Un attribut qui peut être spécifié qu’une seule fois est appelé un attribut à usage unique.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName="Inherited">
      <MemberSignature Language="C#" Value="public bool Inherited { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherited" />
      <MemberSignature Language="DocId" Value="P:System.AttributeUsageAttribute.Inherited" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherited As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherited { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherited : bool with get, set" Usage="System.AttributeUsageAttribute.Inherited" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui détermine si l’attribut indiqué est hérité par les classes dérivées et les membres de substitution.</summary>
        <value><see langword="true" /> si l’attribut peut être hérité par les classes dérivées et les membres de substitution ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.AttributeUsageAttribute.Inherited%2A> propriété détermine :  
  
-   Si les classes dérivées à partir d’une classe de base marqués avec l’attribut auquel la <xref:System.AttributeUsageAttribute> attribut est appliqué héritent de cet attribut.  
  
-   Indique si les méthodes de classes dérivées qui substituent une méthode de classe de base marqués avec l’attribut auquel la <xref:System.AttributeUsageAttribute> attribut est appliqué héritent de cet attribut.  (Si une classe hérite d’un membre de classe de base, il hérite également des attributs appliqués à ce membre.)  
  
   
  
## Examples  
 L’exemple suivant illustre la différence entre un attribut auquel une <xref:System.AttributeUsageAttribute> attribut avec une <xref:System.AttributeUsageAttribute.Inherited%2A> valeur de propriété de `true` est appliquée et l’autre pour lequel <xref:System.AttributeUsageAttribute> attribut avec un <xref:System.AttributeUsageAttribute.Inherited%2A> valeur de propriété de `false` est appliqué. L’exemple définit deux attributs, `InheritedAttribute` et `NotInheritedAttribute`. Les deux attributs peuvent appliquer aux classes et méthodes. Étant donné que le <xref:System.AttributeUsageAttribute.Inherited%2A> propriété de la <xref:System.AttributeUsageAttribute> attribut appliqué à `InheritedAttribute` est `true`, elle est héritée par les classes dérivées et les membres de classes dérivées qui substituent la méthode de classe de base.  En revanche, étant donné que le <xref:System.AttributeUsageAttribute.Inherited%2A> propriété de la <xref:System.AttributeUsageAttribute> attribut appliqué à `NotInheritedAttribute` est `false`, il n’est pas hérité par les classes dérivées et les membres de classes dérivées qui substituent la méthode de classe de base.  
  
 [!code-csharp[System.AttributeUsageAttribute.Inherited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AttributeUsageAttribute.Inherited/cs/Inherited1.cs#1)]
 [!code-vb[System.AttributeUsageAttribute.Inherited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AttributeUsageAttribute.Inherited/vb/Inherited1.vb#1)]  
  
 L’exemple définit ensuite les deux classes de base. La première, `BaseA`, a une méthode unique, `MethodA`.  La seconde, `BaseB`, a une méthode unique, `MethodB`. `BaseA` et `MethodA` sont marqués avec le `InheritedAttribute` attribut, et `BaseB` et `MethodB` sont marqués avec le `NotInheritedAttribute` attribut. `DerivedA` hérite de `BaseA` et remplace son `MethodA` (méthode). `DerivedB` hérite de `BaseB` et remplace son `MethodB` (méthode).  
  
 [!code-csharp[System.AttributeUsageAttribute.Inherited#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AttributeUsageAttribute.Inherited/cs/Inherited1.cs#2)]
 [!code-vb[System.AttributeUsageAttribute.Inherited#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AttributeUsageAttribute.Inherited/vb/Inherited1.vb#2)]  
  
 Comme la sortie de l’exemple, `DerivedA` et `DerivedA.MethodA` héritent le `InheritedAttribute` attribut, mais `DerivedB` et `DerivedB.MethodB` n’héritent pas les `NotInheritedAttribute` attribut.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName="ValidOn">
      <MemberSignature Language="C#" Value="public AttributeTargets ValidOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AttributeTargets ValidOn" />
      <MemberSignature Language="DocId" Value="P:System.AttributeUsageAttribute.ValidOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidOn As AttributeTargets" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AttributeTargets ValidOn { AttributeTargets get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidOn : AttributeTargets" Usage="System.AttributeUsageAttribute.ValidOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AttributeTargets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un ensemble de valeurs identifiant les éléments de programme auxquels l'attribut indiqué peut être appliqué.</summary>
        <value>Une ou plusieurs valeurs <see cref="T:System.AttributeTargets" />. La valeur par défaut est <see langword="All" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.AttributeTargets" />
      </Docs>
    </Member>
  </Members>
</Type>