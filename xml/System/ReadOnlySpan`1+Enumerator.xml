<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21d3a84923de729b6e13f9da922c7da81ff2c0c2" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52736279" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit un énumérateur pour les éléments d’un <see cref="T:System.ReadOnlySpan`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) du langage c# et le [pour chaque... Suivant](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) construction dans Visual Basic masque la complexité des énumérateurs. Plutôt que de manipuler directement l’énumérateur à l’aide de `foreach` ou `For Each...Next` est recommandé. 

Initialement, l’énumérateur est positionné avant le premier élément dans le <xref:System.ReadOnlySpan`1>. À cette position, <xref:System.ReadOnlySpan`1.Enumerator.Current> n'est pas défini. Vous devez appeler <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> pour avancer l’énumérateur vers le premier élément dans le <xref:System.ReadOnlySpan`1> avant de lire la valeur de <xref:System.ReadOnlySpan`1.Enumerator.Current>.

<xref:System.ReadOnlySpan`1.Enumerator.Current> Retourne la même valeur jusqu'à ce que <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> est appelée. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> définit <xref:System.ReadOnlySpan`1.Enumerator.Current> à l’élément suivant dans le <xref:System.ReadOnlySpan`1>.

Si <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> passe la fin de la <xref:System.ReadOnlySpan`1>, <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> retourne `false`. Lorsque l’énumérateur se trouve à cet état, les appels suivants à <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> également retourner `false` et <xref:System.ReadOnlySpan`1.Enumerator.Current> n’est pas défini. Vous ne pouvez pas définir <xref:System.ReadOnlySpan`1.Enumerator.Current> vers le premier élément dans le <xref:System.ReadOnlySpan`1> à nouveau ; vous devez créer une nouvelle instance de l’énumérateur à la place. 

Bien que le <xref:System.ReadOnlySpan`1> est allouée sur la pile, les données sous-jacentes sur lesquelles le <xref:System.ReadOnlySpan`1> points, ne peuvent pas être. Par conséquent, l’énumération d’un <xref:System.ReadOnlySpan`1> n’est pas intrinsèquement une procédure thread-safe. Pour garantir la sécurité des threads pendant l’énumération, vous devez implémenter votre propre synchronisation.

Contrairement à certains autres structures d’énumérateur dans .NET, le <xref:System.ReadOnlySpan`1.Enumerator>:

- N’implémente pas le <xref:System.Collections.IEnumerator> ou <xref:System.Collections.Generic.IEnumerator`1> interface. Il s’agit, car <xref:System.ReadOnlySpan`1.Enumerator> est un [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) et ne peut pas être converti (boxed).

- N’inclut pas un `Reset` (méthode), qui peut l’énumérateur à sa position initiale avant le premier élément dans l’étendue. (Le <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> méthode doit être implémentée en tant que partie de l’interface, mais la plupart des implémenteurs lever une exception ou ne fournir aucune implémentation.)]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T&amp; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une référence à l’élément à la position actuelle de l’énumérateur.</summary>
        <value>Élément situé dans le <see cref="T:System.ReadOnlySpan`1" /> à la position actuelle de l'énumérateur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[`Current` n’est pas définie dans une des conditions suivantes : 

- Immédiatement après la création de l’énumérateur, l’énumérateur est positionné avant le premier élément dans l’étendue. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> doit être appelée pour avancer l’énumérateur vers le premier élément de l’étendue avant de lire la valeur de `Current`.

- Le dernier appel à <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> retourné `false`, ce qui indique la fin de l’étendue. 

`Current` Retourne la même valeur jusqu'à ce que <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> est appelée. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> définit `Current` à l’élément suivant dans l’étendue.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avance l’énumérateur à l’élément suivant de <see cref="System.ReadOnlySpan`1" />.</summary>
        <returns>`true` si l’énumérateur a avancé jusqu’à l’élément suivant ; `false` si la fin de l’étendue a été dépassée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Une fois un énumérateur est créé, il est positionné avant le premier élément dans l’étendue et le premier appel à `MoveNext` avance l’énumérateur au premier élément dans l’étendue. 

Si `MoveNext` passe la fin de l’étendue, `MoveNext` retourne `false`. Lorsque l’énumérateur se trouve à cet état, les appels suivants à `MoveNext` également retourner `false`.]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>