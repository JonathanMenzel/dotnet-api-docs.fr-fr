<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="380cd37c1402c4dcf42f0e57f7d4df8be500b69c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430872" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit un mécanisme pour récupérer un objet afin de contrôler la mise en forme.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IFormatProvider> interface fournit un objet qui fournit des informations de mise en forme pour la mise en forme et d’opérations d’analyse. Opérations de mise en forme convertissent la valeur d’un type en la représentation sous forme de chaîne de cette valeur. Les méthodes de mise en forme typiques sont les `ToString` méthodes d’un type, ainsi que <xref:System.String.Format%2A>. Opérations d’analyse de convertir la représentation sous forme de chaîne d’une valeur à un type ayant cette valeur. Méthodes d’analyse typiques sont `Parse` et `TryParse`.  
  
 Le <xref:System.IFormatProvider> interface se compose d’une méthode unique, <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>. <xref:System.IFormatProvider.GetFormat%2A> est une méthode de rappel : l’analyse ou mise en forme de la méthode appelle et transmet un <xref:System.Type> objet qui représente le type d’objet qui attend de la mise en forme ou la méthode d’analyse fournit des informations de mise en forme. Le <xref:System.IFormatProvider.GetFormat%2A> méthode est chargée de retourner un objet de ce type.  
  
 <xref:System.IFormatProvider> les implémentations sont souvent utilisées implicitement par la mise en forme et de méthodes d’analyse. Par exemple, le <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> méthode utilise implicitement une <xref:System.IFormatProvider> implémentation qui représente la culture du système en cours. <xref:System.IFormatProvider> les implémentations peuvent également être spécifiées explicitement par les méthodes qui ont un paramètre de type <xref:System.IFormatProvider>, tel que <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> et <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Le .NET Framework inclut les trois suivantes prédéfinies <xref:System.IFormatProvider> implémentations pour fournir des informations spécifiques à la culture qui sont utilisées dans la mise en forme ou l’analyse des valeurs numériques, de date et d’heure :  
  
-   Le <xref:System.Globalization.NumberFormatInfo> (classe), qui fournit des informations qui sont utilisées pour mettre en forme des nombres, comme la devise, des milliers séparateur et des symboles de séparateur décimal pour une culture particulière. Pour plus d’informations sur les chaînes de format prédéfinis reconnus par un <xref:System.Globalization.NumberFormatInfo> de l’objet et utilisées dans les opérations de mise en forme numérique, consultez [des chaînes de Format numériques Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) et [chaînes de Format numériques personnalisées](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Le <xref:System.Globalization.DateTimeFormatInfo> (classe), qui fournit des informations qui sont utilisées pour formater les dates et heures, tels que les symboles de séparateur de date et d’heure pour une culture particulière ou l’ordre et le format de l’année, mois et les composants de jour d’une date. Pour plus d’informations sur les chaînes de format prédéfinis reconnus par un <xref:System.Globalization.DateTimeFormatInfo> de l’objet et utilisées dans les opérations de mise en forme numérique, consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Date personnalisée et les chaînes de Format d’heure ](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Le <xref:System.Globalization.CultureInfo> (classe), qui représente une culture particulière. Son <xref:System.IFormatProvider.GetFormat%2A> méthode retourne une culture spécifique <xref:System.Globalization.NumberFormatInfo> ou <xref:System.Globalization.DateTimeFormatInfo> objet, selon que le <xref:System.Globalization.CultureInfo> objet est utilisé dans une mise en forme ou de l’analyse d’opération qui implique des nombres ou des dates et heures.  
  
 Le .NET Framework prend également en charge la mise en forme personnalisée. Cela implique généralement de la création d’une classe mise en forme qui implémente à la fois <xref:System.IFormatProvider> et <xref:System.ICustomFormatter>. Une instance de cette classe est ensuite passée en tant que paramètre à une méthode qui effectue une opération de mise en forme personnalisée, tel que <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> l’exemple fournit une illustration de ce type une implémentation personnalisée qui met en forme un nombre comme un numéro de compte à 12 chiffres.  
  
   
  
## Examples  
 L’exemple suivant illustre comment une <xref:System.IFormatProvider> implémentation peut modifier la représentation d’une valeur de date et d’heure. Dans ce cas, une date unique est affichée à l’aide de <xref:System.Globalization.CultureInfo> objets qui représentent quatre cultures différentes.  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 L’exemple suivant illustre l’utilisation d’une classe qui implémente le <xref:System.IFormatProvider> interface et le <xref:System.IFormatProvider.GetFormat%2A> (méthode). Le `AcctNumberFormat` classe convertit un <xref:System.Int64> valeur qui représente un numéro de compte à un numéro de compte à 12 chiffres mis en forme. Son `GetFormat` méthode retourne une référence à le `AcctNumberFormat` de l’instance si le `formatType` paramètre fait référence à une classe qui implémente <xref:System.ICustomFormatter>; sinon, `GetFormat` retourne `null`.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 La classe qui implémente <xref:System.IFormatProvider> peut ensuite être utilisé dans un appel à une mise en forme et l’opération d’analyse. Par exemple, le code suivant appelle la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> méthode permettant de générer une chaîne qui contient un numéro de compte à 12 chiffres mis en forme.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Objet qui spécifie le type d'objet de format à retourner.</param>
        <summary>Retourne un objet qui assure des services de mise en forme pour le type spécifié.</summary>
        <returns>Une instance de l'objet spécifié par <paramref name="formatType" />, si l'implémentation <see cref="T:System.IFormatProvider" /> peut fournir ce type d'objet ; sinon, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A> est une méthode de rappel qui appellent des méthodes d’analyse et de mise en forme pour récupérer des informations sur le format de la chaîne d’entrée, opérations d’analyse ou le format de la chaîne de sortie dans les opérations de mise en forme. Dans la `formatType` paramètre, la mise en forme ou analyse de méthode passe le type d’objet, elle a besoin pour effectuer son opération. Si le <xref:System.IFormatProvider> implémentation peut fournir cette mise en forme ou l’objet d’analyse, elle retourne cet objet. Si non, elle retourne `null`.  
  
 Par exemple, dans l’appel à la <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> , l’argument de la méthode est un <xref:System.IFormatProvider> objet qui fournit des informations sur la mise en forme de la représentation sous forme de chaîne de l’instance actuelle de nombre entier. Lorsque le runtime exécute la méthode, il appelle la <xref:System.IFormatProvider> l’objet <xref:System.IFormatProvider.GetFormat%2A> (méthode) et lui passe un <xref:System.Type> objet qui représente le <xref:System.Globalization.NumberFormatInfo> type. Si le <xref:System.IFormatProvider> objet peut fournir un <xref:System.Globalization.NumberFormatInfo> de l’objet, elle retourne cet objet. Si elle ne peut pas fournir un objet de ce type, elle retourne `null`.  
  
 Vous pouvez implémenter la <xref:System.IFormatProvider> interface et <xref:System.IFormatProvider.GetFormat%2A> méthode dans les classes qui fournissent la mise en forme et d’analyse personnalisés services. Le <xref:System.IFormatProvider> implémentation est ensuite transmise en tant qu’argument à aucune surcharge de méthode qui a un paramètre de type de mise en forme ou d’une analyse <xref:System.IFormatProvider>, tel que <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation d’une classe qui implémente le <xref:System.IFormatProvider> interface et le <xref:System.IFormatProvider.GetFormat%2A> (méthode). Le `AcctNumberFormat` classe convertit un <xref:System.Int64> valeur qui représente un numéro de compte à un numéro de compte à 12 chiffres mis en forme. Son `GetFormat` méthode retourne une référence à elle-même si le `formatType` paramètre fait référence à une classe qui implémente <xref:System.ICustomFormatter>; sinon, `GetFormat` retourne `null`.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Une instance de la `AcctNumberFormat` classe peut ensuite être passée en tant qu’argument à une méthode qui fournit la mise en forme ou d’analyse des services. Par exemple, le code suivant passe un `AcctNumberFormat` classe la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> méthode pour générer un numéro de compte à 12 chiffres mis en forme.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>