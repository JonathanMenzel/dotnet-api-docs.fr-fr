<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="25e19b7d157dbe922506010b94767d4a672e028c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58709143" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un fuseau horaire dans le monde.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un fuseau horaire est une région géographique dans laquelle la même heure est utilisée.  
  
 Le <xref:System.TimeZoneInfo> classe offre des améliorations significatives par rapport le <xref:System.TimeZone> classe, qui fournit des fonctionnalités limitées.  
  
 Le <xref:System.TimeZone> classe reconnaît uniquement le fuseau horaire local et peut convertir les heures entre le temps universel coordonné (UTC) et l’heure locale. Un <xref:System.TimeZoneInfo> objet peut représenter n’importe quel fuseau horaire et les méthodes de la <xref:System.TimeZoneInfo> classe peut être utilisée pour convertir l’heure dans un fuseau horaire à l’heure correspondant à un autre fuseau horaire. Les membres de la <xref:System.TimeZoneInfo> classe prend en charge les opérations suivantes :  
  
-   Récupération d’un fuseau horaire qui est déjà défini par le système d’exploitation.  
  
-   Énumérer les fuseaux horaires disponibles sur un système.  
  
-   Conversion d’heures entre fuseaux horaires différents.  
  
-   Création d’un nouveau fuseau horaire qui n’est pas déjà défini par le système d’exploitation.  
  
-   Sérialisation d’un fuseau horaire pour une récupération ultérieure.  
  
> [!NOTE]
>  Une instance de la <xref:System.TimeZoneInfo> classe est immuable. Une fois qu’un objet a été instancié, ses valeurs ne sont pas modifiables.  
  
 Vous ne pouvez pas instancier un <xref:System.TimeZoneInfo> à l’aide de l’objet le `new` mot clé. Au lieu de cela, vous devez appeler un des membres statiques de la <xref:System.TimeZoneInfo> classe illustrée dans le tableau suivant.  
  
|Nom de membre statique|Description |  
|------------------------|-----------------|  
|Méthode <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>|Crée un fuseau horaire personnalisé à partir de données fournie par l’application.|  
|Méthode <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>|Instancie un fuseau horaire en fonction de son identificateur.|  
|Méthode <xref:System.TimeZoneInfo.FromSerializedString%2A>|Désérialise une valeur de chaîne pour recréer un précédemment sérialisé <xref:System.TimeZoneInfo> objet.|  
|Méthode <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>|Retourne un énumérable <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.TimeZoneInfo> objets qui représente tous les fuseaux horaires qui sont disponibles sur le système local.|  
|Propriété<xref:System.TimeZoneInfo.Local%2A> |Instancie un <xref:System.TimeZoneInfo> objet qui représente le fuseau horaire local.|  
|Propriété<xref:System.TimeZoneInfo.Utc%2A> |Instancie un <xref:System.TimeZoneInfo> objet qui représente le fuseau horaire UTC.|  
  
 Vous pouvez utiliser la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> méthode pour créer un fuseau horaire qui n’est pas défini dans le Registre système local sur les systèmes Windows ou par les classes de fuseau horaire dans le [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux ou macOS. Vous pouvez ensuite utiliser le <xref:System.TimeZoneInfo.ToSerializedString%2A> propriété pour enregistrer les informations de l’objet de fuseau horaire en tant que chaîne, qui peut être stockée dans une forme qui est accessible à l’application. Vous pouvez utiliser la <xref:System.TimeZoneInfo.FromSerializedString%2A> retour de méthode pour convertir une chaîne sérialisée à une <xref:System.TimeZoneInfo> objet.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la différence de temps entre l'heure d'hiver du fuseau horaire actuel et le temps universel coordonné (UTC, Universal Time Coordinated).</summary>
        <value>Objet qui indique la différence de temps entre l'heure d'hiver du fuseau horaire actuel et le temps universel coordonné.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’intervalle de temps retourné par la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriété peut varier de 14 heures (pour un fuseau horaire de 14 heures avant le temps universel coordonné (UTC)) à-14 heures (pour un fuseau horaire de 14 heures après l’heure UTC). Fuseaux horaires qui sont avant l’heure UTC ont un décalage positif ; fuseaux horaires qui se trouvent derrière UTC ont un offset négatif.  
  
 Le <xref:System.TimeZoneInfo.BaseUtcOffset%2A> valeur est représentée comme un nombre entier de minutes. Il ne peut pas inclure un nombre fractionnaire de minutes.  
  
> [!NOTE]
>  Étant donné que <xref:System.TimeZoneInfo.BaseUtcOffset%2A> est une propriété de la <xref:System.TimeZoneInfo> objet plutôt que la <xref:System.TimeZoneInfo.AdjustmentRule> objet, le <xref:System.TimeZoneInfo> classe applique un offset unique à l’heure UTC à tous les réglages d’un fuseau horaire. Pour refléter un fuseau horaire qui a modifié son décalage à l’heure UTC, vous devez créer un nouveau fuseau horaire à l’aide du <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> (méthode).  
  
 Le <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriété diffère de la <xref:System.TimeZoneInfo.GetUtcOffset%2A> méthode comme suit :  
  
-   Le <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriété retourne la différence entre l’heure UTC et l’heure du fuseau horaire ; le <xref:System.TimeZoneInfo.GetUtcOffset%2A> méthode retourne la différence entre l’heure UTC et l’horaire heure du fuseau à un moment précis dans le temps.  
  
-   Le <xref:System.TimeZoneInfo.GetUtcOffset%2A> méthode reflète l’application de règles d’ajustement du fuseau horaire ; le <xref:System.TimeZoneInfo.BaseUtcOffset%2A> n’est pas le cas de propriété.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriété pour afficher la différence entre l’heure locale et le temps universel coordonné (UTC).  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Efface les données de fuseau horaire mises en cache.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Données de fuseau horaire mises en cache incluent des données sur le fuseau horaire local et la zone de temps universel coordonné (UTC).  
  
 Vous pouvez appeler la `ClearCachedData` méthode pour réduire la mémoire consacrée au cache de l’application des informations de fuseau horaire ou pour refléter le fait que le fuseau horaire du système local a changé.  
  
 Stockage des références aux fuseaux horaires UTC et local n’est pas recommandé. Après l’appel à la `ClearCachedData` (méthode), ces variables d’objet ne seront pas définis <xref:System.TimeZoneInfo> les objets qui ne sont plus références à <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> ou <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Par exemple, dans le code suivant, le deuxième appel à la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> méthode lève une exception une <xref:System.ArgumentException> , car le `local` variable n’est plus considérée égale à <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit une heure en heure d'un fuseau horaire particulier.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure à convertir.</param>
        <param name="destinationTimeZone">Fuseau horaire vers lequel convertir <paramref name="dateTime" />.</param>
        <summary>Convertit une heure en heure d'un fuseau horaire particulier.</summary>
        <returns>Date et heure dans le fuseau horaire de destination.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous effectuez la conversion, le <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> méthode s’applique les règles d’ajustement en vigueur dans le `destinationTimeZone` fuseau horaire.  
  
 Cette surcharge de la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> méthode détermine le fuseau horaire source à partir de la valeur de la `dateTime` du paramètre <xref:System.DateTime.Kind%2A> propriété, comme le tableau suivant.  
  
|Valeur de propriété de type|Fuseau horaire source|Comportement de la méthode|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Convertit l’heure locale en heure de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Convertit le temps universel coordonné (UTC) à la fois dans `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Censé pour être <xref:System.TimeZoneInfo.Local%2A>.|Convertit l’heure locale en heure de `destinationTimeZone`.|  
  
 Le <xref:System.DateTime.Kind%2A> propriété de retourné <xref:System.DateTime> a la valeur comme indiqué dans le tableau suivant.  
  
|Condition|A retourné la valeur de propriété de type|  
|---------------|----------------------------------|  
|`destinationTimeZone` a la valeur <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` a la valeur <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Toutes les autres valeurs de date et heure et fuseaux horaires de destination.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Si la valeur de la `dateTime` paramètre est une heure locale ambiguë, il est interprété comme une heure. Si le `dateTime` paramètre est une heure locale non valide, cette méthode lève un <xref:System.ArgumentException>.  
  
 Si la conversion de `dateTime` aboutit à une valeur de date et l’heure est antérieure à <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou une version <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, cette méthode retourne <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivement.  
  
 Vous pouvez également convertir vers ou à l’heure UTC en appelant le <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> et <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> méthodes.  
  
   
  
## Examples  
 L’exemple suivant convertit un tableau de valeurs de date et heure en heures dans le fuseau horaire est des États-Unis et du Canada. Il montre que le fuseau horaire source dépend de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriété de la source <xref:System.DateTime> valeur. Il montre également que le <xref:System.TimeZoneInfo.ConvertTime%2A> méthode accepte des ajustements de fuseau horaire en compte, car un ajustement de fuseau horaire se produit dans la source et la destination des fuseaux horaires à 2 h 00 le 7 novembre 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur du paramètre <paramref name="dateTime" /> représente une heure non valide.</exception>
        <exception cref="T:System.ArgumentNullException">La valeur du paramètre <paramref name="destinationTimeZone" /> est <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Date et heure à convertir.</param>
        <param name="destinationTimeZone">Fuseau horaire vers lequel convertir <paramref name="dateTime" />.</param>
        <summary>Convertit une heure en heure d'un fuseau horaire particulier.</summary>
        <returns>Date et heure dans le fuseau horaire de destination.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous effectuez la conversion, le <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> méthode s’applique les règles d’ajustement en vigueur dans le `destinationTimeZone` fuseau horaire.  
  
 Cette surcharge diffère des autres surcharges de la <xref:System.TimeZoneInfo.ConvertTime%2A> méthode en acceptant un <xref:System.DateTimeOffset> valeur en tant que son premier paramètre. Cela identifie la date et l’heure en tant qu’offset par rapport au temps universel coordonné (UTC) plutôt que comme la date et l’heure dans un fuseau horaire particulier. Par conséquent, le `dateTimeOffset` paramètre ne peut pas représenter une heure ambiguë ou une heure non valide.  
  
 Pour convertir le `dateTimeOffset` valeur à la fois dans le fuseau horaire de destination, cette méthode prend en compte les règles d’ajustement en vigueur dans le fuseau horaire de destination.  
  
 Si la conversion de `dateTimeOffset` aboutit à une valeur de date et l’heure est antérieure à <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> ou une version <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, cette méthode retourne <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectivement.  
  
   
  
## Examples  
 L’exemple suivant convertit un tableau de <xref:System.DateTimeOffset> valeurs à la fois dans le fuseau horaire est des États-Unis et du Canada. Il montre que le <xref:System.TimeZoneInfo.ConvertTime%2A> méthode accepte des ajustements de fuseau horaire en compte, car un ajustement de fuseau horaire se produit dans la source et la destination des fuseaux horaires à 2 h 00 le 7 novembre 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur du paramètre <paramref name="destinationTimeZone" /> est <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure à convertir.</param>
        <param name="sourceTimeZone">Fuseau horaire de <paramref name="dateTime" />.</param>
        <param name="destinationTimeZone">Fuseau horaire vers lequel convertir <paramref name="dateTime" />.</param>
        <summary>Convertit une heure d'un fuseau horaire vers une autre.</summary>
        <returns>Date et l'heure dans le fuseau horaire de destination qui correspond au paramètre <paramref name="dateTime" /> dans le fuseau horaire source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous effectuez la conversion, le <xref:System.TimeZoneInfo.ConvertTime%2A> méthode s’applique les règles d’ajustement en vigueur dans le `destinationTimeZone` fuseau horaire.  
  
 La valeur de la <xref:System.DateTime.Kind%2A> propriété de la `dateTime` paramètre doit correspondre à la `sourceTimeZone` paramètre, comme le tableau suivant.  
  
|Valeur DateTime.Kind|valeur sourceTimeZone|Comportement de la méthode|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Est égal à <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Convertit `dateTime` à l’heure du fuseau horaire de la destination.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|N’est pas égal <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Lève une <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Est égal à <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Convertit `dateTime` à l’heure du fuseau horaire de la destination.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|N’est pas égal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Lève une <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|N’importe quel.|Convertit `dateTime` à l’heure du fuseau horaire de la destination.|  
  
 Vous pouvez également convertir vers ou à partir du temps universel coordonné (UTC) en appelant le <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> et <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> méthodes.  
  
 Le <xref:System.DateTime.Kind%2A> propriété de retourné <xref:System.DateTime> a la valeur comme indiqué dans le tableau suivant.  
  
|Condition|A retourné la valeur de propriété de type|  
|---------------|----------------------------------|  
|L'argument `destinationTimeZone` a la valeur <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|L'argument `destinationTimeZone` a la valeur <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Tous les autres date et valeurs d’heure, fuseaux horaires source et fuseaux horaires de destination.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Si la valeur de la `dateTime` paramètre est une heure ambiguë dans le fuseau horaire source, il est interprété comme une heure. Si le `dateTime` paramètre est une heure non valide dans le fuseau horaire source, cette méthode lève un <xref:System.ArgumentException>.  
  
 Si la conversion de `dateTime` aboutit à une valeur de date et l’heure est antérieure à <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou une version <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, cette méthode retourne <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivement.  
  
 Le <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> méthode lève une exception une <xref:System.ArgumentException> exception si le <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriété de la `dateTime` argument est <xref:System.DateTimeKind.Local?displayProperty=nameWithType> mais le `sourceTimeZone` argument n’est pas <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Pour déterminer si le fuseau horaire source est le fuseau horaire local ou la zone de temps universel, la méthode teste l’égalité des références plutôt que de tester l’égalité des valeurs avec le <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> (méthode). Notez que <xref:System.TimeZoneInfo> objets qui représentent le fuseau horaire local et qui sont récupérées en appelant le <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> (méthode) n’ont pas de l’égalité des références avec <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. En outre, <xref:System.TimeZoneInfo> objets qui représentent le groupe local ou zone de temps universel et qui sont récupérés en effectuant une itération de la collection retournée par la <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> (méthode) n’ont pas de l’égalité des références avec <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> ou <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Comme alternative, vous pouvez appeler la <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> (méthode).  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> méthode pour convertir l’heure Standard d’Hawaï en heure locale.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.DateTime.Kind" /> du paramètre <paramref name="dateTime" /> est <see cref="F:System.DateTimeKind.Local" />, mais le paramètre <paramref name="sourceTimeZone" /> n’est pas égal à <see cref="F:System.DateTimeKind.Local" />.  
  
ou 
La propriété <see cref="P:System.DateTime.Kind" /> du paramètre <paramref name="dateTime" /> est <see cref="F:System.DateTimeKind.Utc" />, mais le paramètre <paramref name="sourceTimeZone" /> n’est pas égal à <see cref="P:System.TimeZoneInfo.Utc" />.  
  
ou 
Le paramètre <paramref name="dateTime" /> est une heure non valide (elle représente une heure qui n’existe pas en vertu des règles d’ajustement d’un fuseau horaire).</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="sourceTimeZone" /> a la valeur <see langword="null" />.  
  
ou 
Le paramètre <paramref name="destinationTimeZone" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit une heure en heure d'un autre fuseau horaire selon un identificateur de fuseau horaire.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure à convertir.</param>
        <param name="destinationTimeZoneId">Identificateur du fuseau horaire de destination.</param>
        <summary>Convertit une heure en heure d'un autre fuseau horaire selon l'identificateur du fuseau horaire.</summary>
        <returns>Date et heure dans le fuseau horaire de destination.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous effectuez la conversion, le <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> méthode s’applique les règles d’ajustement en vigueur dans le `destinationTimeZoneId` fuseau horaire.  
  
 Cette surcharge est en grande partie identique à l’appel le <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> (méthode), à ceci près qu’elle vous permet de spécifier le fuseau horaire de destination par son identificateur plutôt que par une référence d’objet. Cette méthode est particulièrement utile lorsque vous devez convertir une heure sans récupérer l’objet de fuseau horaire qui correspond à ce dernier et que vous n’avez pas besoin de savoir si l’heure convertie est standard ou l’heure d’été.  
  
 Le <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> méthode détermine le fuseau horaire source à partir de la valeur de la `dateTime` du paramètre <xref:System.DateTime.Kind%2A> propriété, comme le tableau suivant.  
  
|Valeur de propriété de type|Fuseau horaire source|Comportement de la méthode|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Convertit l’heure locale en heure de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Convertit le temps universel coordonné (UTC) à la fois dans `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Censé pour être <xref:System.TimeZoneInfo.Local%2A>.|Convertit l’heure locale en heure de `destinationTimeZone`.|  
  
 Le <xref:System.DateTime.Kind%2A> propriété de retourné <xref:System.DateTime> a la valeur comme indiqué dans le tableau suivant.  
  
|Condition|A retourné la valeur de propriété de type|  
|---------------|----------------------------------|  
|`destinationTimeZone` a la valeur `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|N’importe quel autre `destinationTimeZone` valeur.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Si la valeur de la `dateTime` paramètre est une heure locale ambiguë, il est interprété comme une heure. Si le `dateTime` paramètre est une heure locale non valide, cette méthode lève un <xref:System.ArgumentException>.  
  
 Si la conversion de `dateTime` aboutit à une valeur de date et l’heure est antérieure à <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou une version <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, cette méthode retourne <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivement.  
  
 Cette méthode extrait des informations sur le fuseau horaire dont l’identificateur est spécifié par le `destinationTimeZoneId` paramètre à partir du Registre sur les systèmes Windows et à partir de la [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux et macOS. Il ne peut pas récupérer un objet de fuseau horaire qui est créé à l’aide de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> (méthode). Le `destinationTimeZoneId` paramètre doit correspondre exactement à l’identificateur du fuseau horaire de longueur, mais pas dans les cas, pour une correspondance réussie ; autrement dit, la comparaison de `destinationTimeZoneId` avec fuseau horaire identificateurs respecte la casse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">L’identificateur de fuseau horaire a été trouvé, mais les données du Registre sont endommagées.</exception>
        <exception cref="T:System.Security.SecurityException">Le processus n’a pas les autorisations nécessaires pour lire la clé de Registre qui contient les informations sur le fuseau horaire.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">L’identificateur <paramref name="destinationTimeZoneId" /> est introuvable sur le système local.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Date et heure à convertir.</param>
        <param name="destinationTimeZoneId">Identificateur du fuseau horaire de destination.</param>
        <summary>Convertit une heure en heure d'un autre fuseau horaire selon l'identificateur du fuseau horaire.</summary>
        <returns>Date et heure dans le fuseau horaire de destination.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous effectuez la conversion, le <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> méthode s’applique les règles d’ajustement en vigueur dans le `destinationTimeZoneId` fuseau horaire.  
  
 Cette surcharge est identique à l’appel le <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> (méthode), à ceci près qu’elle vous permet de spécifier le fuseau horaire de destination par son identificateur plutôt que par une référence d’objet. Cette méthode est particulièrement utile lorsque vous devez convertir une heure sans récupérer l’objet de fuseau horaire qui correspond à ce dernier et que vous n’avez pas besoin de savoir si l’heure convertie est standard ou l’heure d’été.  
  
 Étant donné que le `dateTimeOffset` paramètre représente une date et décalage horaire ainsi que cette heure par rapport à partir du temps universel coordonné (UTC), il ne peut pas représenter une heure ambiguë ou une heure non valide.  
  
 Cette méthode récupère le fuseau horaire dont l’identificateur est spécifié par le `destinationTimeZoneId` paramètre à partir du Registre sur les systèmes Windows et à partir de la [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux et macOS. Il ne peut pas récupérer un objet de fuseau horaire qui est créé à l’aide de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> (méthode). Le `destinationTimeZoneId` paramètre doit correspondre exactement à l’identificateur du fuseau horaire de longueur, mais pas dans les cas, pour une correspondance réussie ; autrement dit, la comparaison de `destinationTimeZoneId` avec fuseau horaire identificateurs respecte la casse.  
  
 Pour convertir le `dateTimeOffset` valeur à la fois dans le fuseau horaire de destination, la méthode prend en compte les règles d’ajustement en vigueur dans le fuseau horaire de destination.  
  
 Si la conversion de `dateTimeOffset` aboutit à une valeur de date et l’heure est antérieure à <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> ou une version <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, cette méthode retourne <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectivement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">L'identificateur de fuseau horaire a été trouvé, mais les données de Registre sont endommagées.</exception>
        <exception cref="T:System.Security.SecurityException">Le processus n’a pas les autorisations nécessaires pour lire la clé de Registre qui contient les informations de fuseau horaire.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">L’identificateur <paramref name="destinationTimeZoneId" /> est introuvable sur le système local.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure à convertir.</param>
        <param name="sourceTimeZoneId">Identificateur du fuseau horaire source.</param>
        <param name="destinationTimeZoneId">Identificateur du fuseau horaire de destination.</param>
        <summary>Convertit une heure d'un fuseau horaire vers une autre selon les identificateurs de fuseau horaire.</summary>
        <returns>Date et l'heure dans le fuseau horaire de destination qui correspond au paramètre <paramref name="dateTime" /> dans le fuseau horaire source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous effectuez la conversion, le <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> méthode s’applique les règles d’ajustement en vigueur dans le `destinationTimeZoneId` fuseau horaire.  
  
 Bien qu’il soit similaire à la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> (méthode), vous pouvez utiliser <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> pour spécifier les fuseaux horaires source et de destination à l’aide de leurs identificateurs au lieu de leur <xref:System.TimeZoneInfo> objets. Cette méthode est particulièrement utile lorsque vous devez convertir une heure sans récupérer l’objet de fuseau horaire qui correspond à ce dernier et que vous n’avez pas besoin de savoir si l’heure convertie est standard ou l’heure d’été.  
  
 Cette méthode récupère les fuseaux horaires dont les identificateurs sont les `sourceTimeZoneId` et `destinationTimeZoneId` paramètres à partir du Registre sur les systèmes Windows et à partir de la [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux et macOS. Il ne peut pas récupérer des objets de fuseau horaire qui sont créés à l’aide de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> (méthode).  
  
 La valeur de la <xref:System.DateTime.Kind%2A> propriété de la `dateTime` paramètre doit correspondre à la `sourceTimeZoneId` paramètre, comme le tableau suivant.  
  
|Valeur DateTime.Kind|valeur sourceTimeZone|Comportement de la méthode|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Est égal à `TimeZoneInfo.Utc.Id`.|Convertit `dateTime` à l’heure du fuseau horaire de la destination.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|N’est pas égal `TimeZoneInfo.Utc.Id`.|Lève une <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Est égal à `TimeZoneInfo.Local.Id`.|Convertit `dateTime` à l’heure du fuseau horaire de la destination.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|N’est pas égal `TimeZoneInfo.Local.Id`.|Lève une <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|N’importe quel.|Convertit `dateTime` à l’heure du fuseau horaire de la destination.|  
  
 Car elle s’appuie sur les appels à la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> (méthode), le <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> méthode effectue une recherche respectant la casse pour localiser les fuseaux horaires qui correspondent aux `sourceTimeZoneId` et `destinationTimeZoneId`.  
  
 Si la valeur de la `dateTime` paramètre est une heure ambiguë dans le fuseau horaire source, il est interprété comme une heure. Si le `dateTime` paramètre est une heure non valide dans le fuseau horaire source, cette méthode lève un <xref:System.ArgumentException>.  
  
 Le <xref:System.DateTime.Kind%2A> propriété de retourné <xref:System.DateTime> a la valeur <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , sauf si le fuseau horaire de destination est le temps universel coordonné (UTC), auquel cas il est défini sur <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> méthode pour afficher l’heure qui correspond à l’heure système locale dans huit villes du monde.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.DateTime.Kind" /> du paramètre <paramref name="dateTime" /> ne correspond pas au fuseau horaire source.  
  
ou 
 <paramref name="dateTime" /> est une heure non valide dans le fuseau horaire source.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="destinationTimeZoneId" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Les identificateurs de fuseau horaire ont été trouvés, mais les données du Registre sont endommagées.</exception>
        <exception cref="T:System.Security.SecurityException">L’utilisateur n’a pas les autorisations nécessaires pour lire les clés de Registre qui contiennent les données de fuseau horaire.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">L’identificateur <paramref name="sourceTimeZoneId" /> est introuvable sur le système local.  
  
ou 
L’identificateur <paramref name="destinationTimeZoneId" /> est introuvable sur le système local.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Temps universel coordonné (UTC, Universal Time Coordinated).</param>
        <param name="destinationTimeZone">Fuseau horaire vers lequel convertir <paramref name="dateTime" />.</param>
        <summary>Convertit le temps universel coordonné (UTC, Universal Time Coordinated) en heure d'un fuseau horaire spécifié.</summary>
        <returns>Date et heure dans le fuseau horaire de destination. Sa propriété <see cref="P:System.DateTime.Kind" /> a la valeur <see cref="F:System.DateTimeKind.Utc" /> si <paramref name="destinationTimeZone" /> a la valeur <see cref="P:System.TimeZoneInfo.Utc" /> ; sinon, sa propriété <see cref="P:System.DateTime.Kind" /> a la valeur <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous effectuez la conversion, le <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> méthode s’applique les règles d’ajustement en vigueur dans le `destinationTimeZone` fuseau horaire.  
  
 Le comportement précis de cette méthode dépend de la valeur de la <xref:System.DateTime.Kind%2A> propriété de le `dateTime` paramètre, comme le tableau suivant.  
  
|Propriété DateTime.Kind|Conversion|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Lève une <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convertit à partir du temps universel coordonné (UTC).|  
  
 Si la conversion de `dateTime` aboutit à une valeur de date et l’heure est antérieure à <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou une version <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, cette méthode retourne <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivement.  
  
   
  
## Examples  
 L’exemple suivant convertit le temps universel coordonné (UTC) en heure du centre.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.DateTime.Kind" /> de <paramref name="dateTime" /> a la valeur <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> est <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit une date et une heure en temps universel coordonné (UTC, Universal Time Coordinated).</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure à convertir.</param>
        <summary>Convertit la date et l'heure spécifiées en temps universel coordonné (UTC, Universal Time Coordinated).</summary>
        <returns>Temps universel coordonné qui correspond au paramètre <paramref name="dateTime" />. La propriété <see cref="T:System.DateTime" /> de la valeur <see cref="P:System.DateTime.Kind" /> a toujours la valeur <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La conversion exacte effectuée dépend de la valeur de la <xref:System.DateTime.Kind%2A> propriété de le `dateTime` paramètre, comme le tableau suivant.  
  
|Propriété DateTime.Kind|Conversion|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Convertit de l’heure locale en temps universel coordonné (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Suppose que `dateTime` est l’heure locale et convertit de l’heure locale en heure UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Retourne `dateTime` inchangé.|  
  
 Si `dateTime` correspond à une heure locale ambiguë, cette méthode suppose qu’il est l’heure locale d’hiver. Si `dateTime` correspond à une heure locale non valide, la méthode lève une exception une <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Si l’actuel de l’ordinateur local fuseau horaire inclut plusieurs règles d’ajustement, cette surcharge de la <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> méthode peut retourner des résultats différents de ceux du <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> et <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> méthodes. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> s’applique toujours la règle d’ajustement actuelle à la conversion de fuseau horaire, ou non `dateTime` se trouve dans sa plage de dates. Lors de son exécution sur [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> s’applique également la règle d’ajustement actuelle à la conversion de fuseau horaire, ou non `dateTime` se trouve dans sa plage de dates.  
  
 Si l’UTC équivalente `dateTime` est antérieure à <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou version ultérieure qui <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, cette méthode retourne <xref:System.DateTime.MinValue> ou <xref:System.DateTime.MaxValue>, respectivement.  
  
   
  
## Examples  
 L’exemple suivant illustre la conversion de valeurs d’heure dont la propriété <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, et <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, respectivement. Il illustre également la conversion des heures ambiguës et non valides.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> retourne <see langword="true" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure à convertir.</param>
        <param name="sourceTimeZone">Fuseau horaire de <paramref name="dateTime" />.</param>
        <summary>Convertit l'heure d'un fuseau horaire spécifié en temps universel coordonné (UTC, Universal Time Coordinated).</summary>
        <returns>Temps universel coordonné qui correspond au paramètre <paramref name="dateTime" />. La propriété <see cref="T:System.DateTime" /> de l'objet <see cref="P:System.DateTime.Kind" /> a toujours la valeur <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.DateTime.Kind%2A> propriété de la `dateTime` paramètre est égal à <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> et `sourceTimeZone` paramètre est égal à <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, cette méthode retourne `dateTime` sans exécuter de conversion.  
  
 Si `dateTime` correspond à une heure ambiguë, cette méthode suppose qu’il est l’heure standard du fuseau horaire source. Si `dateTime` correspond à une heure non valide, cette méthode lève un <xref:System.ArgumentException>.  
  
 Si l’équivalent du temps universel coordonné (UTC) de `dateTime` est antérieure à <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou version ultérieure qui <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, cette méthode retourne <xref:System.DateTime.MinValue> ou <xref:System.DateTime.MaxValue>, respectivement.  
  
   
  
## Examples  
 L’exemple suivant récupère la date actuelle du système local et il convertit en temps universel coordonné (UTC), puis il convertit l’heure d’hiver à Tokyo et enfin convertit heure Standard de Tokyo en UTC. Notez que les deux heures UTC sont identiques.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> a la valeur <see cref="F:System.DateTimeKind.Utc" /> et <paramref name="sourceTimeZone" /> n’est pas égal à <see cref="P:System.TimeZoneInfo.Utc" />.  
  
ou 
 <paramref name="dateTime" />.<see langword="Kind" /> a la valeur <see cref="F:System.DateTimeKind.Local" /> et <paramref name="sourceTimeZone" /> n’est pas égal à <see cref="P:System.TimeZoneInfo.Local" />.  
  
ou 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> retourne <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> est <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Conversion d'heures entre fuseaux horaires</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Définit un fuseau horaire qui est introuvable sur l'ordinateur local.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Identificateur du fuseau horaire.</param>
        <param name="baseUtcOffset">Objet qui représente la différence d'heure entre ce fuseau horaire et le temps universel coordonné.</param>
        <param name="displayName">Nom d'affichage du nouveau fuseau horaire.</param>
        <param name="standardDisplayName">Nom de l'heure d'hiver du nouveau fuseau horaire.</param>
        <summary>Crée un fuseau horaire personnalisé avec un identificateur spécifié, un offset de temps universel coordonné (UTC, Universal Time Coordinated), un nom d'affichage et un nom d'affichage de l'heure d'hiver.</summary>
        <returns>Nouveau fuseau horaire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> méthode convient pour la création d’un fuseau horaire qui n’a aucun réglages (autrement dit, un fuseau horaire qui ne prend pas en charge l’heure d’été). Pour définir un fuseau horaire qui comprend les ajustements pour l’heure d’été, utilisez la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> ou <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> (méthode).  
  
 Le tableau suivant montre la relation entre les paramètres qui sont fournies à la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> (méthode) et les propriétés de la <xref:System.TimeZoneInfo> objet sont retournées par l’appel de méthode.  
  
|Paramètre CreateCustomTimeZone|Propriété TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 En règle générale, nom d’heure d’hiver du fuseau horaire et de son identificateur sont les mêmes. Toutefois, la longueur de l’identificateur du fuseau horaire ne doit pas dépasser 32 caractères. La chaîne passée à la `displayName` paramètre suit un format relativement standard. La première partie du nom complet est l’offset de base du fuseau horaire à partir de l’heure UTC, ce qui est indiqué par l’acronyme GMT (Greenwich Mean Time), placé entre parenthèses. Elle est suivie d’une chaîne qui identifie le fuseau horaire lui-même, ou un ou plusieurs villes, des régions ou des pays dans le fuseau horaire, ou les deux. Par exemple :  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 L’exemple suivant crée un fuseau horaire personnalisé pour les régions de Mawson et de la baie de Holme (Antarctique). Il affiche ensuite le résultat de la conversion de l’heure locale en heure du nouveau fuseau horaire.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="id" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="id" /> est une chaîne vide ("").  
  
ou 
Le paramètre <paramref name="baseUtcOffset" /> ne représente pas un nombre entier de minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="baseUtcOffset" /> est supérieur à 14 heures ou inférieur à -14 heures.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Procédure : Créer des fuseaux horaires sans règles d’ajustement</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Identificateur du fuseau horaire.</param>
        <param name="baseUtcOffset">Objet qui représente la différence d'heure entre ce fuseau horaire et le temps universel coordonné.</param>
        <param name="displayName">Nom d'affichage du nouveau fuseau horaire.</param>
        <param name="standardDisplayName">Nom de l'heure d'hiver du nouveau fuseau horaire.</param>
        <param name="daylightDisplayName">Nom de l'heure d'été du nouveau fuseau horaire.</param>
        <param name="adjustmentRules">Tableau qui augmente l'offset UTC de base pour une période particulière.</param>
        <summary>Crée un fuseau horaire personnalisé avec un identificateur spécifié, un offset de temps universel coordonné (UTC, Universal Time Coordinated), un nom d'affichage, un nom d'heure d'hiver, un nom d'heure d'été et des règles d'heure d'été.</summary>
        <returns>Objet <see cref="T:System.TimeZoneInfo" /> qui représente le nouveau fuseau horaire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> méthode convient pour la création d’un fuseau horaire qui prend en charge de l’heure d’été. Pour définir un fuseau horaire qui ne prend pas en charge l’heure d’été, utilisez la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> ou <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> (méthode).  
  
 Le tableau suivant montre la relation entre les paramètres qui sont fournies à la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> (méthode) et les membres de la <xref:System.TimeZoneInfo> objet sont retournées par l’appel de méthode.  
  
|Paramètre CreateCustomTimeZone|TimeZoneInfo member|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Un tableau de <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> objets retournés par le <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> (méthode).|  
  
 En règle générale, nom d’heure d’hiver du fuseau horaire et de son identificateur sont les mêmes. Toutefois, la longueur de l’identificateur du fuseau horaire ne doit pas dépasser 32 caractères. La chaîne passée à la `displayName` paramètre suit un format relativement standard. La première partie du nom complet est l’offset de base du fuseau horaire à partir de l’heure UTC, ce qui est indiqué par l’acronyme GMT (Greenwich Mean Time), placé entre parenthèses. Elle est suivie d’une chaîne qui identifie le fuseau horaire lui-même, ou un ou plusieurs villes, des régions ou des pays dans le fuseau horaire, ou les deux. Par exemple :  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Le `baseUtcOffset` paramètre définit le décalage de fuseau horaire personnalisé à partir du temps universel coordonné (UTC) pour toutes les règles d’ajustement du fuseau horaire. En d’autres termes, le <xref:System.TimeZoneInfo> modèle objet part du principe que décalage du fuseau horaire à l’heure UTC est constant pour toute la durée de vie du fuseau horaire et existe indépendamment de règles d’ajustement particulier. Pour refléter un fuseau horaire qui a modifié son offset à l’heure UTC, vous devez créer un nouvel objet de fuseau horaire.  
  
 Règles d’ajustement d’un fuseau horaire sont définies en procédant comme suit :  
  
1.  Appelant le <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> ou <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> méthode pour définir le début et fin des temps de transition pour chaque règle d’ajustement.  
  
2.  Appel de la <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> méthode pour chaque règle d’ajustement.  
  
3.  Assigner les règles d’ajustement à un tableau qui peut être passé en tant que le `adjustmentRules` paramètre.  
  
   
  
## Examples  
 L’exemple suivant crée un fuseau horaire personnalisé pour la station Palmer et l’île d’Anvers en Antarctique. Ensuite, elle convertit l’heure locale en heure du nouveau fuseau horaire et affiche le résultat.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="id" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="id" /> est une chaîne vide ("").  
  
ou 
Le paramètre <paramref name="baseUtcOffset" /> ne représente pas un nombre entier de minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="baseUtcOffset" /> est supérieur à 14 heures ou inférieur à -14 heures.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Les règles d’ajustement spécifiées dans le paramètre <paramref name="adjustmentRules" /> se chevauchent.  
  
ou 
Les règles d’ajustement spécifiées dans le paramètre <paramref name="adjustmentRules" /> ne sont pas dans l’ordre chronologique.  
  
ou 
Un ou plusieurs éléments dans <paramref name="adjustmentRules" /> sont <see langword="null" />.  
  
ou 
Plusieurs règles d’ajustement peuvent être appliquées à une date.  
  
ou 
La somme du paramètre <paramref name="baseUtcOffset" /> et de la valeur <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> d’un ou plusieurs objets dans le tableau <paramref name="adjustmentRules" /> est supérieure à 14 heures ou inférieure à -14 heures.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Procédure : Créer des fuseaux horaires avec des règles d’ajustement</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Identificateur du fuseau horaire.</param>
        <param name="baseUtcOffset">Objet <see cref="T:System.TimeSpan" /> qui représente le décalage entre ce fuseau horaire et le temps universel coordonné (UTC, Universal Time Coordinated).</param>
        <param name="displayName">Nom d'affichage du nouveau fuseau horaire.</param>
        <param name="standardDisplayName">Nom de l'heure d'hiver du nouveau fuseau horaire.</param>
        <param name="daylightDisplayName">Nom de l'heure d'été du nouveau fuseau horaire.</param>
        <param name="adjustmentRules">Tableau d'objets <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> qui augmentent l'offset UTC de base pour une période particulière.</param>
        <param name="disableDaylightSavingTime"><see langword="true" /> pour ignorer les informations relatives à l'heure d'été contenues dans <paramref name="adjustmentRules" /> avec le nouvel objet ; sinon, <see langword="false" />.</param>
        <summary>Crée un fuseau horaire personnalisé avec un identificateur spécifié, un offset de temps universel coordonné (UTC, Universal Time Coordinated), un nom d'affichage, un nom d'heure d'hiver, un nom d'heure d'été, des règles d'heure d'été et une valeur qui indique si l'objet retourné reflète les informations d'heure d'été.</summary>
        <returns>Nouveau fuseau horaire. Si le paramètre <paramref name="disableDaylightSavingTime" /> a la valeur <see langword="true" />, l'objet retourné ne contient pas de données d'heure d'été.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette surcharge de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> méthode pour créer un fuseau horaire personnalisé dont prise en charge de l’heure d’été peut être déterminée par les conditions au moment de l’exécution.  
  
 Le tableau suivant montre la relation entre les paramètres qui sont fournies à la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> (méthode) et les membres de la <xref:System.TimeZoneInfo> objet sont retournées par l’appel de méthode.  
  
|Paramètre CreateCustomTimeZone|Propriété TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Si `disableDaylightSavingTime` est `false`; <xref:System.String.Empty?displayProperty=nameWithType> si `disableDaylightSavingTime` est `true`.|  
|`adjustmentRules`|Un tableau de <xref:System.TimeZoneInfo.AdjustmentRule> objets retournés par le <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> méthode si `disableDaylightSavingTime` est `false`; un tableau vide est retourné par la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> méthode si `disableDaylightSavingTime` est `true`.|  
|`disableDaylightSavingTime`|Pas <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 En règle générale, nom d’heure d’hiver du fuseau horaire et de son identificateur sont les mêmes. Toutefois, la longueur de l’identificateur du fuseau horaire ne doit pas dépasser 32 caractères. La chaîne passée à la `displayName` paramètre suit un format relativement standard. La première partie du nom complet est l’offset de base du fuseau horaire à partir de l’heure UTC, ce qui est indiqué par l’acronyme GMT (Greenwich Mean Time), placé entre parenthèses. Elle est suivie d’une chaîne qui identifie le fuseau horaire lui-même, ou un ou plusieurs villes, des régions ou des pays dans le fuseau horaire, ou les deux. Par exemple :  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Règles d’ajustement d’un fuseau horaire sont définies en procédant comme suit :  
  
1.  Appelant le <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> ou <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> méthode pour définir le début et fin des règles de transition pour chaque règle d’ajustement.  
  
2.  Appel de la <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> méthode pour chaque règle d’ajustement.  
  
3.  Assigner les règles d’ajustement à un tableau qui peut être passé en tant que le `adjustmentRules` paramètre.  
  
 Si `disableDaylightSavingTime` paramètre est `false`, l’opération de cette méthode est identique à la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> de surcharge. Si `disableDaylightSavingTime` est `true`, l’objet retourné inclut des règles d’ajustement et un <xref:System.TimeZoneInfo.DaylightName%2A> propriété dont la valeur est une chaîne vide.  
  
   
  
## Examples  
 L’exemple suivant crée un fuseau horaire personnalisé pour la station Palmer et l’île d’Anvers en Antarctique. Il définit le `disableDaylightSavingTime` paramètre dans l’appel à la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> méthode `true`. Il affiche ensuite le nom de l’heure d’été du nouveau fuseau horaire, s’il en existe et le nombre de règles d’ajustement pour confirmer ne qu’aucune information de l’heure d’été du nouveau fuseau horaire.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="id" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="id" /> est une chaîne vide ("").  
  
ou 
Le paramètre <paramref name="baseUtcOffset" /> ne représente pas un nombre entier de minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="baseUtcOffset" /> est supérieur à 14 heures ou inférieur à -14 heures.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Les règles d’ajustement spécifiées dans le paramètre <paramref name="adjustmentRules" /> se chevauchent.  
  
ou 
Les règles d’ajustement spécifiées dans le paramètre <paramref name="adjustmentRules" /> ne sont pas dans l’ordre chronologique.  
  
ou 
Un ou plusieurs éléments dans <paramref name="adjustmentRules" /> sont <see langword="null" />.  
  
ou 
Plusieurs règles d’ajustement peuvent être appliquées à une date.  
  
ou 
La somme du paramètre <paramref name="baseUtcOffset" /> et de la valeur <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> d’un ou plusieurs objets dans le tableau <paramref name="adjustmentRules" /> est supérieure à 14 heures ou inférieure à -14 heures.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Procédure : Créer des fuseaux horaires sans règles d’ajustement</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Procédure : Créer des fuseaux horaires avec des règles d’ajustement</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom d'affichage pour l'heure d'été du fuseau horaire actuel.</summary>
        <value>Nom d'affichage pour l'heure d'été du fuseau horaire.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom d’affichage est localisé en fonction de la culture installée avec le système d’exploitation Windows.  
  
 Un <xref:System.TimeZoneInfo.DaylightName%2A> propriété dont la valeur n’est pas <xref:System.String.Empty?displayProperty=nameWithType> ou `null` n’indique pas nécessairement que le fuseau horaire prend en charge l’heure d’été. Pour déterminer si le fuseau horaire prend en charge l’heure d’été, vérifiez la valeur de son <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propriété.  
  
 Dans la plupart des cas, le `DaylightName` propriété des fuseaux horaires définis par le système n’est pas <xref:System.String.Empty?displayProperty=nameWithType> ou `null`. Toutefois, le <xref:System.TimeZoneInfo.DaylightName%2A> propriété de fuseaux horaires personnalisés peut être définie sur <xref:System.String.Empty?displayProperty=nameWithType>. Cela se produit lorsque des fuseaux horaires personnalisés sont créés par le <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> ou <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> surcharge et la `disableDaylightSavingTime` paramètre est `true`. Par conséquent, votre code ne doit jamais supposer que la valeur de la <xref:System.TimeZoneInfo.DaylightName%2A> propriété n’est pas `null` ou vide.  
  
 Le <xref:System.TimeZoneInfo.DaylightName%2A> propriété est équivalente à la <xref:System.TimeZone.DaylightName%2A> propriété de la <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 L’exemple suivant définit une méthode nommée `DisplayDateWithTimeZoneName` qui utilise le <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> méthode pour déterminer s’il faut afficher le nom de l’heure d’hiver ou le nom de l’heure d’un fuseau horaire.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom d'affichage général qui représente le fuseau horaire.</summary>
        <value>Nom d'affichage général du fuseau horaire.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom d’affichage est localisé en fonction de la culture installée avec le système d’exploitation Windows.  
  
 Les noms complets pour les fuseaux horaires de système Windows respectent un format relativement standard. La première partie du nom complet est l’offset de base du fuseau horaire à partir de l’heure UTC, ce qui est indiqué par l’acronyme GMT (Greenwich Mean Time), placé entre parenthèses. Pour le temps universel coordonné, l’acronyme GMT sans décalage est placée entre parenthèses.  Elle est suivie d’une chaîne qui identifie le fuseau horaire ou un ou plusieurs villes, des régions ou des pays dans le fuseau horaire. Par exemple :  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 L’exemple suivant récupère un <xref:System.TimeZoneInfo> objet qui représente le fuseau horaire local et qui affiche son nom complet, le nom de l’heure d’hiver et le nom de l’heure d’été. La sortie s’affiche pour un système situé dans le fuseau horaire horaire Pacifique (É.-U.).  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Détermine si deux objets <see cref="T:System.TimeZoneInfo" /> sont identiques.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj">Deuxième objet à comparer avec l'objet actuel.</param>
        <summary>Détermine si l'objet <see cref="T:System.TimeZoneInfo" /> en cours et un deuxième objet sont égaux.</summary>
        <returns><see langword="true" /> si <paramref name="obj" /> est un objet <see cref="T:System.TimeZoneInfo" /> qui est égal à l'instance actuelle ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode convertit ou effectue un cast `obj` à un <xref:System.TimeZoneInfo> de l’objet et la compare à l’instance actuelle. Le test d’égalité est basé sur une comparaison de valeurs. Actuel <xref:System.TimeZoneInfo> instance et `obj` sont considérées comme égales dans les conditions suivantes :  
  
-   Le type au moment de l’exécution de `obj` est <xref:System.TimeZoneInfo>.  
  
-   Les deux objets ont le même <xref:System.TimeZoneInfo.Id%2A> valeur de propriété.  
  
-   Les deux objets ont les mêmes règles d’ajustement.  
  
 Si `obj` est `null`, cette méthode retourne `false`.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.TimeZoneInfo.Equals%28System.Object%29> méthode pour déterminer si le fuseau horaire local est pst ou l’heure.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">Deuxième objet à comparer avec l'objet actuel.</param>
        <summary>Détermine si l'objet <see cref="T:System.TimeZoneInfo" /> en cours et un deuxième objet <see cref="T:System.TimeZoneInfo" /> sont égaux.</summary>
        <returns><see langword="true" /> si les deux objets <see cref="T:System.TimeZoneInfo" /> sont égaux ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’égalité est basée sur une comparaison de valeurs. Deux <xref:System.TimeZoneInfo> objets sont considérées comme égales dans les conditions suivantes :  
  
-   La valeur de leur <xref:System.TimeZoneInfo.Id%2A> propriété est identique.  
  
-   Ils ont les mêmes règles d’ajustement.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Retourne la valeur booléenne qui résulte de l’évaluation de l’expression suivante :  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Si le `other` paramètre est non initialisé <xref:System.TimeZoneInfo> de l’objet, cette méthode retourne `false`.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> méthode pour déterminer si le fuseau horaire local est pst ou l’heure.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">Identificateur de fuseau horaire, qui correspond à la propriété <see cref="P:System.TimeZoneInfo.Id" />.</param>
        <summary>Instancie un nouvel objet <see cref="T:System.TimeZoneInfo" /> en fonction de son identificateur.</summary>
        <returns>Objet dont l'identificateur est la valeur du paramètre <paramref name="id" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `id` paramètre doit correspondre exactement à l’identificateur du fuseau horaire de longueur, mais pas dans les cas, pour une correspondance réussie ; autrement dit, la comparaison de `id` avec fuseau horaire identificateurs respecte la casse. Si vous souhaitez récupérer des objets de fuseau horaire selon des correspondances partielles, vous pouvez écrire des procédures personnalisées qui fonctionnent avec la collection en lecture seule de <xref:System.TimeZoneInfo> objets retournés par le <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> (méthode).  
  
 Sur les systèmes Windows, `FindSystemTimeZoneById` tente de faire correspondre `id` pour le nom des sous-clés de la branche HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones du Registre. Sur Linux et macOS, il utilise les informations de fuseau horaire disponibles dans le [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone). Si le Registre ou la bibliothèque n’a pas les informations pour le fuseau horaire que vous le souhaitez, vous pouvez créer un fuseau horaire particulier en appelant une des surcharges de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> méthode ou en appelant <xref:System.TimeZoneInfo.FromSerializedString%2A> pour désérialiser un <xref:System.TimeZoneInfo> de l’objet qui représente le fuseau horaire requis. Toutefois, les fuseaux horaires créés par ces appels de méthode ne sont pas définies par le système le temps et ne peut pas être récupérées à l’aide de la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> (méthode). Ces fuseaux horaires personnalisés sont accessibles uniquement par le biais de la référence d’objet retournée par la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> ou <xref:System.TimeZoneInfo.FromSerializedString%2A> appel de méthode.  
  
Cette méthode retourne un nouvel <xref:System.TimeZoneInfo> pour chaque appel de méthode d’instance ; elle ne retourne pas les objets mis en cache. Cela peut affecter les performances dans les applications qui appellent le `FindSystemTimeZoneById` méthode à plusieurs reprises avec le même identificateur.   
  
## Examples  
 L’exemple suivant utilise la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> méthode pour récupérer le fuseau horaire de Tokyo. Cela <xref:System.TimeZoneInfo> objet est ensuite utilisé pour convertir l’heure locale à l’heure de Tokyo et pour déterminer s’il s’agit d’heure d’hiver Tokyo ou l’heure d’été de Tokyo.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Le système n'a pas assez de mémoire pour conserver les informations à propos du fuseau horaire.</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="id" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">L'identificateur de fuseau horaire spécifié par <paramref name="id" /> est introuvable. Cela signifie qu’un identificateur de fuseau horaire dont le nom correspond à <paramref name="id" /> n’existe pas ou qu’il existe mais ne contient pas de données de fuseau horaire.</exception>
        <exception cref="T:System.Security.SecurityException">Le processus n’a pas les autorisations nécessaires pour lire la clé de Registre qui contient les informations de fuseau horaire.</exception>
        <exception cref="T:System.InvalidTimeZoneException">L’identificateur de fuseau horaire a été trouvé, mais les données du Registre sont endommagées.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">Procédure : Instancier un objet TimeZoneInfo</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Chaîne représentant l'objet <see cref="T:System.TimeZoneInfo" /> sérialisé en cours.</param>
        <summary>Désérialise une chaîne pour recréer un objet <see cref="T:System.TimeZoneInfo" /> sérialisé d'origine.</summary>
        <returns>Objet sérialisé d'origine.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il existe une alternative à la fourniture de tout le code nécessaire pour créer un fuseau horaire qui est introuvable dans le Registre sur Windows ou dans le [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux et macOS. Vous pouvez définir un fuseau horaire personnalisé et soit utiliser le <xref:System.TimeZoneInfo.ToSerializedString%2A> méthode dans un exécutable autonome ou en utilisant le programme d’installation d’une application de programme pour enregistrer le fuseau horaire sous forme de chaîne. L’application peut ensuite récupérer cette chaîne à partir de son emplacement de stockage et l’instancier à l’aide de la <xref:System.TimeZoneInfo.FromSerializedString%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant essaie de récupérer le Pôle Sud Antarctique/du fuseau horaire du système local. En cas d’échec, le code tente de récupérer des informations sur le fuseau horaire à partir d’un fichier texte dans le répertoire de l’application. Si cette tentative échoue, le code crée le fuseau horaire et écrit les informations sur le fuseau horaire dans le fichier texte.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="source" /> a la valeur <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="source" /> est une chaîne nulle.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Le paramètre source ne peut pas être désérialisé de nouveau dans un objet <see cref="T:System.TimeZoneInfo" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">Procédure : Restaurer des fuseaux horaires dans une ressource incorporée</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Récupère un tableau d'objets <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> qui s'appliquent à l'objet <see cref="T:System.TimeZoneInfo" /> en cours.</summary>
        <returns>Tableau d'objets pour ce fuseau horaire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> méthode récupère un tableau de <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> objets. Chaque objet dans le tableau définit la date de début et de fin effective de cet ajustement de fuseau horaire, ainsi que son delta (le montant exact par lequel le réglage provoque le temps de le modifier). En outre, deux propriétés retournent <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> les objets qui se définissent à chaque transition annuelle vers et à partir de l’heure d’hiver.  
  
 Si un fuseau horaire a plusieurs règles d’ajustement, ils sont généralement classés de plus ancienne (à l’index 0) à la plus récente (à l’index <xref:System.Array.Length%2A> - 1).  
  
 Si un fuseau horaire ne possède aucune règle d’ajustement, le <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> méthode retourne un tableau vide (un tableau dont <xref:System.Array.Length%2A> est égal à zéro).  
  
 Les modifications apportées aux éléments du tableau retourné par la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> méthode ne sont pas répercutées dans les règles d’ajustement qui appartiennent à un fuseau horaire particulier. Pour modifier les règles d’ajustement d’un fuseau horaire (telle que refléter sa transition historique vers et à partir de l’heure d’été) vous devez créer un nouveau fuseau horaire avec les règles d’ajustement approprié, au lieu de modifier un existant.  
  
   
  
## Examples  
 L’exemple suivant récupère tous les fuseaux horaires définis sur les locales système et affiche complète des informations à propos de leurs règles d’ajustement à la console.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Le système n'a pas assez de mémoire pour faire une copie en mémoire des règles d'ajustement.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne des informations sur les dates et heures possibles auxquelles une date et heure ambiguë peut être mappée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure.</param>
        <summary>Retourne des informations sur les dates et heures possibles auxquelles une date et heure ambiguë peut être mappée.</summary>
        <returns>Tableau d'objets qui représente des offsets de temps universel coordonné possibles auxquels une date et une heure particulières peuvent être mappées.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le comportement précis de cette méthode dépend de la relation entre la <xref:System.DateTime.Kind%2A> propriété et le <xref:System.TimeZoneInfo> objet, comme le tableau suivant.  
  
|Type d’objet TimeZoneInfo|Valeur de propriété de type|Comportement|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Heure ambiguë retourne des offsets pour `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convertit `dateTime` à l’heure locale, puis retourne des offsets d’heure ambiguë pour cette heure.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Toute valeur.|Lève une <xref:System.ArgumentException>.|  
|Tout autre fuseau horaire.|<xref:System.DateTimeKind.Local> ou <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convertit `dateTime` pour le fuseau horaire spécifié, puis détermine si cette heure est ambiguë.|  
|Tout autre fuseau horaire.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Détermine si `dateTime` est ambigu dans le fuseau horaire spécifié.|  
  
 L’ordre des <xref:System.TimeSpan> objets dans le tableau retourné par cette méthode n’est pas défini. Toutefois, vous pouvez déterminer quel élément représente un offset à partir de l’heure d’hiver du fuseau horaire en comparant sa valeur avec le fuseau horaire <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriété. Pour mapper une heure ambiguë à l’heure d’hiver d’un fuseau horaire, consultez [Comment : Résoudre des heures ambiguës](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 L’exemple suivant définit une méthode nommée `ShowPossibleUtcTimes` qui utilise le <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> méthode pour mapper une heure ambiguë à sa possible fois correspondante temps universel coordonné (UTC).  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 La méthode peut ensuite être appelée à l’aide de code semblable au suivant :  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> n'est pas une heure ambiguë.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Procédure : Résoudre des heures ambiguës</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Procédure : Permettre aux utilisateurs de résoudre des heures ambiguës</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Date et heure.</param>
        <summary>Retourne des informations sur les dates et heures possibles auxquelles une date et heure ambiguë peut être mappée.</summary>
        <returns>Tableau d'objets qui représente des offsets de temps universel coordonné possibles auxquels une date et une heure particulières peuvent être mappées.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le comportement précis de cette méthode dépend de la relation entre la <xref:System.DateTimeOffset.Offset%2A> propriété de la `dateTimeOffset` paramètre et le <xref:System.TimeZoneInfo> objet. Si la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété correspond aux offsets possibles du fuseau horaire actuel à partir du temps universel coordonné (UTC) pour que date et l’heure, la méthode retourne les décalages possibles. Sinon, elle convertit `dateTimeOffset` à la fois dans le fuseau horaire actuel, puis retourne les offsets possibles de cette date et heure.  
  
 L’ordre des <xref:System.TimeSpan> objets dans le tableau retourné par cette méthode n’est pas défini. Toutefois, vous pouvez déterminer quel élément représente un offset à partir de l’heure d’hiver du fuseau horaire en comparant sa valeur avec le fuseau horaire <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriété. Pour mapper une heure ambiguë à l’heure d’hiver d’un fuseau horaire, consultez [Comment : Résoudre des heures ambiguës](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> n'est pas une heure ambiguë.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Procédure : Résoudre des heures ambiguës</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Procédure : Permettre aux utilisateurs de résoudre des heures ambiguës</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sert de fonction de hachage pour les algorithmes de hachage et les structures de données telles que les tables de hachage.</summary>
        <returns>Entier 32 bits signé qui sert de code de hachage pour cet objet <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la <xref:System.TimeZoneInfo.GetHashCode%2A> (méthode), consultez <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une collection triée de tous les fuseaux horaires pour lesquels des informations sont disponibles sur le système local.</summary>
        <returns>Collection d'objets <see cref="T:System.TimeZoneInfo" /> en lecture seule.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> méthode récupère toutes les informations de fuseau horaire disponibles à partir des sous-clés de la clé de Registre HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones sur les systèmes Windows et à partir de la [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux et macOS. S’il est impossible de récupérer et d’analyser les valeurs des propriétés de chaîne particulière d’individu <xref:System.TimeZoneInfo> objets, cette méthode définit leur valeur sur une chaîne vide ( » »).  
  
> [!IMPORTANT]
>  Le <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> méthode retourne une collection de <xref:System.TimeZoneInfo> objets uniquement pour les fuseaux horaires définis dans l’ou bibliothèque ICU. Il n’inclut pas les fuseaux horaires créés à l’aide de surcharges de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> (méthode). Ils sont accessibles uniquement par le biais de la référence d’objet retournée par la méthode de création de fuseau horaire.  
  
 La collection retournée par cette méthode est triée par décalage UTC et, pour les fuseaux horaires qui ont le même décalage UTC, par le nom complet à l’aide de la culture actuelle. Pour plus d’informations sur le nom d’affichage, consultez <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 Le <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objet retourné par cette méthode prend en charge la <xref:System.Collections.Generic.IEnumerable%601> interface, ce qui signifie qu’il peut être itéré à l’aide de la `foreach` (en C#) ou `For Each…Next` (en Visual Basic) instructions. Chaque itération de la boucle fournit la prochaine <xref:System.TimeZoneInfo> objet dans la collection.  
  
 La collection de <xref:System.TimeZoneInfo> objets représente les fuseaux horaires définis sur l’ordinateur local ; il ne fournit pas nécessairement des informations complètes pour tous les fuseaux horaires pendant toutes les périodes de temps. Si votre application requiert des fuseaux horaires introuvables sur l’ordinateur local, vous pouvez créer des fuseaux horaires personnalisés à l’aide de surcharges de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> (méthode). Pour plus d'informations, voir [Procédure : Créer des fuseaux horaires sans règles d’ajustement](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) et [Comment : Créer des fuseaux horaires avec des règles d’ajustement](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 Vous pouvez également déterminer si un fuseau horaire individuel est défini sur l’ordinateur local en appelant le <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> méthode et fournir l’identificateur du fuseau horaire que vous souhaitez récupérer en tant que paramètre.  
  
   
  
## Examples  
 L’exemple suivant récupère une collection d’objets de fuseau horaire qui représentent les fuseaux horaires définis sur un ordinateur et écrit les informations les concernant dans un fichier texte.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour stocker toutes les informations de fuseau horaire.</exception>
        <exception cref="T:System.Security.SecurityException">L'utilisateur ne dispose des autorisations requises pour lire les clés de Registre qui contiennent des informations de fuseau horaire.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Calcule l'offset ou la différence entre l'heure de ce fuseau horaire et le temps universel (UTC, Universal Time Coordinated) pour une date et une heure spécifiques.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure pour lesquelles déterminer l'offset.</param>
        <summary>Calcule l'offset ou la différence entre l'heure de ce fuseau horaire et le temps universel (UTC, Universal Time Coordinated) pour une date et une heure spécifiques.</summary>
        <returns>Objet qui indique la différence d'heure entre les deux fuseaux horaires.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’intervalle de temps retourné inclut toutes les différences en raison de l’application de règles d’ajustement pour le fuseau horaire actuel. Il diffère de la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriété, qui retourne la différence entre le temps universel coordonné (UTC) et l’heure d’hiver du fuseau horaire et, par conséquent, ne prend pas en compte les règles d’ajustement.  
  
 Si le `dateTime` du paramètre <xref:System.DateTime.Kind%2A> propriété ne correspond pas à l’objet de fuseau horaire, cette méthode effectue la conversion nécessaire avant de retourner un résultat. Par exemple, cela peut se produire si le <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType> mais l’objet de fuseau horaire n’est pas le fuseau horaire local. Si `dateTime` est ambigu, ou si l’heure convertie est ambiguë, cette méthode interprète l’heure ambiguë comme une heure d’hiver. Si `dateTime` n’est pas valide, cette méthode retourne un <xref:System.TimeSpan> objet qui reflète la différence entre l’heure UTC et l’heure d’hiver du fuseau horaire.  
  
 Le <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> méthode est similaire dans une opération pour le <xref:System.TimeZone.GetUtcOffset%2A> méthode de la <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de la <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> méthode avec des fuseaux horaires différents et avec les valeurs de date qui ont différentes <xref:System.DateTime.Kind%2A> les valeurs de propriété.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Date et heure pour lesquelles déterminer l'offset.</param>
        <summary>Calcule l'offset ou la différence entre l'heure de ce fuseau horaire et le temps universel (UTC, Universal Time Coordinated) pour une date et une heure spécifiques.</summary>
        <returns>Objet qui indique la différence d'heure entre le temps universel coordonné et le fuseau horaire actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’intervalle de temps retourné inclut toutes les différences en raison de l’application de règles d’ajustement pour le fuseau horaire actuel. Il diffère de la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriété, qui retourne la différence entre le temps universel coordonné (UTC) et l’heure d’hiver du fuseau horaire et, par conséquent, ne prend pas en compte les règles d’ajustement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="other">Deuxième objet à comparer à l'objet <see cref="T:System.TimeZoneInfo" />actuel.</param>
        <summary>Indique si l'objet actuel et un autre objet <see cref="T:System.TimeZoneInfo" /> sont soumis aux mêmes règles d'ajustement.</summary>
        <returns><see langword="true" /> si les deux fuseaux horaires comportent les mêmes règles d'ajustement et un offset de base identique ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Comme le <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> (méthode), le <xref:System.TimeZoneInfo.HasSameRules%2A> méthode indique si deux fuseaux horaires ont le même offset de base (tel que défini par le <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriété) et les mêmes règles d’ajustement. Contrairement à la <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> (méthode), <xref:System.TimeZoneInfo.HasSameRules%2A> ne compare pas les identificateurs de fuseau horaire (tel que défini par le <xref:System.TimeZoneInfo.Id%2A> propriété).  
  
   
  
## Examples  
 En règle générale, un nombre de fuseaux horaires définis dans le Registre sur Windows et le [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux et macOS ont le même offset de temps universel coordonné (UTC) et les mêmes règles d’ajustement. L’exemple suivant affiche une liste de ces fuseaux horaires dans la console.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'identificateur du fuseau horaire.</summary>
        <value>Identificateur du fuseau horaire.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’identificateur de fuseau horaire est une chaîne clé qui identifie de façon unique un fuseau horaire particulier. Sur les systèmes Windows, il correspond aux sous-clés de la branche HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones du Registre sur les systèmes Windows et à partir de la [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux et macOS. Elle peut être passée en tant que paramètre à la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> méthode pour instancier un <xref:System.TimeZoneInfo> objet qui représente un fuseau horaire particulier.  
  
> [!IMPORTANT]
>  Bien qu’un nom de clé dans le Registre Windows peut être un maximum de 255 caractères, nous recommandons un identificateur que vous attribuez à un fuseau horaire personnalisé 32 caractères ou moins. L’identificateur de plus, plus la probabilité qu’un nom incorrect de la clé sera fournie lors de leur récupération.  
  
 La valeur de la <xref:System.TimeZoneInfo.Id%2A> propriété est généralement, mais pas toujours, identique à celle de la <xref:System.TimeZoneInfo.StandardName%2A> propriété. L’identificateur de la zone de temps universel coordonné est UTC.  
  
   
  
## Examples  
 L’exemple suivant répertorie l’identificateur de chacun des fuseaux horaires définis sur l’ordinateur local.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Détermine si une valeur de date et d'heure particulière pour un fuseau horaire particulier est ambiguë et s'il est possible de la mapper en deux heures ou plus au temps universel (UTC, Universal Time Coordinated).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Valeur de date et heure.</param>
        <summary>Détermine si une valeur de date et d'heure particulière pour un fuseau horaire particulier est ambiguë et s'il est possible de la mapper en deux heures ou plus au temps universel (UTC, Universal Time Coordinated).</summary>
        <returns><see langword="true" /> si le paramètre <paramref name="dateTime" /> est ambigu ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une heure ambiguë se situe dans une plage d’heures pour le fuseau horaire actuel. Cela signifie qu’il peut être une heure d’hiver ou une heure qui résulte de l’application d’une règle d’ajustement. En règle générale, des heures ambiguës entraînent lorsque l’horloge a la valeur à retourner à l’heure d’hiver à partir de l’heure d’été. Consultez la section exemple pour obtenir une illustration.  
  
 Temps universel coordonné (UTC) n’a aucune heure ambiguë ; ni les fuseaux horaires qui ne prennent pas en charge l’heure d’été. Ces fuseaux horaires ne donc aucune des règles d’ajustement et les appels à la <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> méthode retournent toujours `false`.  
  
 Pour les fuseaux horaires qui observent l’heure d’été, le comportement précis de cette méthode dépend de la relation entre la <xref:System.DateTime.Kind%2A> propriété et le <xref:System.TimeZoneInfo> objet, comme le tableau suivant.  
  
|Type d’objet TimeZoneInfo|Valeur de propriété de type|Comportement|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Détermine si le `dateTime` paramètre est ambigu.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convertit `dateTime` à l’heure locale, puis détermine si cette heure est ambiguë.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|retourne `false` ;|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Si `dateTime` est ambigu, il part du principe qu’il est une heure, il convertit en heure UTC et retourne `false`.|  
|Tout autre fuseau horaire.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convertit `dateTime` en une heure dans le fuseau horaire spécifié, puis détermine si cette heure est ambiguë.|  
|Tout autre fuseau horaire.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Détermine si `dateTime` est ambigu.|  
  
   
  
## Examples  
 Dans le fuseau horaire Pacifique, l’heure d’été se termine à 2 h 00 sur le 4 novembre 2007. L’exemple suivant passe l’heure à intervalles d’une minute à partir de 12:59 du matin. sur le 4 novembre 2007, à 2 h 01. sur le 4 novembre 2007, à la <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> méthode d’un <xref:System.TimeZoneInfo> objet qui représente le fuseau horaire Pacifique. La sortie de console indique que toutes les heures de 1 h 00 le 4 novembre 2007, à 1:59 du matin. sur le 4 novembre 2007 sont ambiguës.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.DateTime.Kind" /> de la valeur <paramref name="dateTime" /> est <see cref="F:System.DateTimeKind.Local" /> et <paramref name="dateTime" /> est une date/heure non valide.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Date et heure.</param>
        <summary>Détermine si une valeur de date et d'heure particulière pour un fuseau horaire particulier est ambiguë et s'il est possible de la mapper en deux heures ou plus au temps universel (UTC, Universal Time Coordinated).</summary>
        <returns><see langword="true" /> si le paramètre <paramref name="dateTimeOffset" /> est ambigu dans le fuseau horaire actuel ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une heure ambiguë se situe dans une plage d’heures pour le fuseau horaire actuel. Cela signifie qu’il peut être une heure d’hiver ou une heure qui résulte de l’application d’une règle d’ajustement. En règle générale, des heures ambiguës entraînent lorsque l’horloge a la valeur à retourner à l’heure d’hiver à partir de l’heure d’été. Temps universel coordonné (UTC) n’a aucune heure ambiguë ; ni les fuseaux horaires qui ne prennent pas en charge l’heure d’été.  
  
 Le comportement précis de la méthode dépend de la relation entre la <xref:System.DateTimeOffset.Offset%2A> propriété de le `dateTimeOffset` paramètre et le fuseau horaire actuel. Si la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété est un offset possible de l’heure UTC du fuseau horaire actuel, la méthode détermine si ces date et heure est ambiguë. Sinon, elle convertit `dateTimeOffset` en une heure dans le fuseau horaire actuel, puis détermine si ces date et heure est ambiguë.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indique si la date et l'heure spécifiées se trouvent dans la plage d'heures d'été pour le fuseau horaire de l'objet <see cref="T:System.TimeZoneInfo" /> en cours.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Valeur de date et heure.</param>
        <summary>Indique si la date et l'heure spécifiées se trouvent dans la plage d'heure d'été du fuseau horaire de l'objet <see cref="T:System.TimeZoneInfo" /> actuel.</summary>
        <returns><see langword="true" /> si le paramètre <paramref name="dateTime" /> est une heure d'été ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour de <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> est affectée par la relation entre le fuseau horaire représenté par le <xref:System.TimeZoneInfo> objet et le <xref:System.DateTime.Kind%2A> propriété de le `dateTime` paramètre, comme le tableau suivant.  
  
|Objet TimeZoneInfo|Propriété DateTime.Kind|Résultat|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Détermine si `dateTime` est l’heure d’été.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Convertit `dateTime` à partir du temps universel coordonné (UTC) en heure locale et détermine s’il s’agit de l’heure d’été.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Suppose que `dateTime` représente l’heure locale et détermine s’il s’agit de l’heure d’été.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`ou `DateTimeKind.Utc`|Retourne `false` (UTC ne prend pas en charge l’heure d’été).|  
|N’importe quel autre <xref:System.TimeZoneInfo> objet.|`DateTimeKind.Local`|Convertit l’heure locale en heure équivalente de le <xref:System.TimeZoneInfo> de l’objet et détermine ensuite si ce dernier est l’heure d’été.|  
|N’importe quel autre <xref:System.TimeZoneInfo> objet.|`DateTimeKind.Utc`|Convertit UTC en heure équivalente de le <xref:System.TimeZoneInfo> de l’objet et détermine ensuite si ce dernier est l’heure d’été.|  
|N’importe quel autre <xref:System.TimeZoneInfo> objet.|`DateTimeKind.Unspecified`|Détermine si `dateTime` est l’heure d’été.|  
  
 Si le fuseau horaire est représenté par le <xref:System.TimeZoneInfo> objet ne prend pas en charge l’heure d’été, la méthode retourne toujours `false`. Un nombre de fuseaux horaires, y compris <xref:System.TimeZoneInfo.Utc%2A>, ne tiennent pas compte de l’heure d’été.  Pour déterminer si un fuseau horaire prend en charge l’heure d’été, récupérez la valeur de son <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propriété.  
  
 Si le `dateTime` paramètre spécifie une heure ambiguë dans le fuseau horaire de l’objet en cours, le <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> méthode interprète `dateTime` comme heure d’hiver et retourne `false` si son <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si le <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, cette méthode sélectionne l’heure ambiguë correcte et indiquer s’il s’agit d’une heure.  
  
 Étant donné que le <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> méthode peut retourner `false` pour une date et une heure qui est ambigu (autrement dit, une date et une heure qui peut représenter une heure d’hiver ou une heure dans un fuseau horaire particulier), la <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> méthode peut être associée à la <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> méthode pour déterminer si une heure peut être une heure. Étant donné une heure ambiguë peut être une heure et une heure, la <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> méthode peut être appelée en premier pour déterminer si une date et une heure peuvent être une heure. Si la méthode retourne `false`, le <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> méthode peut être appelée pour déterminer si le <xref:System.DateTime> valeur est une heure. L’exemple suivant illustre cette technique.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Si le `dateTime` paramètre spécifie une heure non valide, l’appel de méthode lève un <xref:System.ArgumentException> si la valeur de la `dateTime` du paramètre <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; sinon, retourne la méthode `false`.  
  
 Appelez le <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> méthode pour déterminer s’il faut utiliser un fuseau horaire <xref:System.TimeZoneInfo.StandardName%2A> valeur ou sa <xref:System.TimeZoneInfo.DaylightName%2A> valeur lors de l’affichage du nom du fuseau horaire. Consultez la section exemple pour obtenir une illustration.  
  
   
  
## Examples  
 L’exemple suivant définit une méthode nommée `DisplayDateWithTimeZoneName` qui utilise le <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> méthode pour déterminer s’il faut afficher le nom de l’heure d’hiver ou le nom de l’heure d’un fuseau horaire.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.DateTime.Kind" /> de la valeur <paramref name="dateTime" /> est <see cref="F:System.DateTimeKind.Local" /> et <paramref name="dateTime" /> est une date/heure non valide.</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Valeur de date et heure.</param>
        <summary>Indique si la date et l'heure spécifiées se trouvent dans la plage d'heure d'été du fuseau horaire de l'objet <see cref="T:System.TimeZoneInfo" /> actuel.</summary>
        <returns><see langword="true" /> si le paramètre <paramref name="dateTimeOffset" /> est une heure d'été ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour de <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> est affectée par la relation entre le fuseau horaire représenté par le <xref:System.TimeZoneInfo> objet et le <xref:System.DateTimeOffset.Offset%2A> propriété de le `dateTimeOffset` paramètre. Si `dateTimeOffset` ne correspond pas au décalage du fuseau horaire actuel à partir de temps universel coordonné (UTC), la méthode convertit cette heure en heure dans le fuseau horaire actuel. Il détermine ensuite si ces date et heure est une heure.  
  
 Si le fuseau horaire est représenté par le <xref:System.TimeZoneInfo> objet ne prend pas en charge l’heure d’été, la méthode retourne toujours `false`. Pour déterminer si un fuseau horaire prend en charge l’heure d’été, récupérez la valeur de son <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Valeur de date et heure.</param>
        <summary>Indique si une valeur de date et d'heure particulière n'est pas valide.</summary>
        <returns><see langword="true" /> si <paramref name="dateTime" /> n'est pas valide ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une heure non valide se situe dans une plage d’heures pour le fuseau horaire actuel qui ne peut pas être mappé au temps universel coordonné (UTC) en raison de l’application d’une règle d’ajustement. En règle générale, heures non valides se produisent lors de l’avancement de l’heure d’été. Consultez la section exemple pour obtenir une illustration.  
  
 La valeur de la <xref:System.DateTime.Kind%2A> propriété de la `dateTime` paramètre affecte si `dateTime` représente une heure non valide, comme le tableau suivant.  
  
|Propriété DateTime.Kind|Objet TimeZoneInfo (le cas échéant)|Comportement|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Détermine si l’heure n’est pas valide.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> ou un fuseau horaire non local.|Convertit `dateTime` à l’heure de la <xref:System.TimeZoneInfo> objet et retourne `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Non applicable.|Suppose que `dateTime` est l’heure de la <xref:System.TimeZoneInfo> de l’objet et détermine s’il est non valide.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Non applicable.|retourne `false` ;|  
  
   
  
## Examples  
 Dans le fuseau horaire Pacifique, l’heure d’été commence à 2 h 00 le 2 avril 2006. Le code suivant passe l’heure à intervalles d’une minute à partir de 1:59 du matin. sur le 2 avril 2006 à 3 h 01. le 2 avril 2006, à la <xref:System.TimeZoneInfo.IsInvalidTime%2A> méthode d’un <xref:System.TimeZoneInfo> objet qui représente le fuseau horaire Pacifique. La sortie de console indique que toutes les heures à partir de 2 h 00. sur le 2 avril 2006 à 2:59 du matin. le 2 avril 2006, ne sont pas valides.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.TimeZoneInfo" /> qui représente le fuseau horaire local.</summary>
        <value>Objet qui représente le fuseau horaire local.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le fuseau horaire local est le fuseau horaire sur l’ordinateur où l’exécution du code.  
  
> [!IMPORTANT]
>  Vous devez toujours accéder au fuseau horaire local via le <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriété plutôt qu’en affectant l’heure locale de la zone à une <xref:System.TimeZoneInfo> variable objet. Cela empêche le <xref:System.TimeZoneInfo> variable objet d’être invalidée par un appel à la <xref:System.TimeZoneInfo.ClearCachedData%2A> (méthode).  
  
 Sur les systèmes Windows, le <xref:System.TimeZoneInfo> objet retourné par la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriété reflète le paramètre de la **ajuster l’horloge pour l’heure d’été** case à cocher dans le panneau de configuration **Date et heure**  application. Si la case à cocher est désactivée, la copie mise en cache du fuseau horaire local ne contient aucune information de l’heure d’été. Cela signifie que :  
  
-   Le fuseau horaire local <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> méthode retourne un tableau dont la longueur est égale à zéro.  
  
-   Le fuseau horaire local <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> retourne de la propriété `false`.  
  
-   Le fuseau horaire local n’a aucune heure ambiguë ou non valide (tous les appels à <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> ou <xref:System.TimeZoneInfo.IsInvalidTime%2A> retourner `false`).  
  
-   Tous les appels à <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> avec les heures locales individuelles retournent false.  
  
 Cela ne vaut pas, toutefois, si une référence dans le fuseau horaire local est récupérée à l’aide de la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> (méthode).  
  
 Le <xref:System.TimeZoneInfo.Local%2A> propriété correspond à la <xref:System.TimeZone.CurrentTimeZone%2A> propriété de la <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 L’exemple suivant récupère un <xref:System.TimeZoneInfo> objet qui représente le fuseau horaire local et qui affiche son nom complet, le nom de l’heure d’hiver et le nom de l’heure d’été.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Procédure : Accéder aux objets UTC et prédéfinis des objets de fuseau horaire Local</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom complet pour l'heure d'hiver du fuseau horaire.</summary>
        <value>Nom complet de l'heure d'hiver du fuseau horaire.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom d’affichage est localisé en fonction de la culture installée avec le système d’exploitation Windows.  
  
 Le <xref:System.TimeZoneInfo.StandardName%2A> propriété est identique à la <xref:System.TimeZone.StandardName%2A> propriété de la <xref:System.TimeZone> classe.  
  
 Si la langue du système d’exploitation est l’anglais, la valeur de la <xref:System.TimeZoneInfo.StandardName%2A> propriété est généralement, mais pas toujours, identique à celle de la <xref:System.TimeZoneInfo.Id%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant définit une méthode nommée `DisplayDateWithTimeZoneName` qui utilise le <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> méthode pour déterminer s’il faut afficher le nom de l’heure d’hiver ou le nom de l’heure d’un fuseau horaire.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le fuseau horaire a des règles d'heure d'été.</summary>
        <value><see langword="true" /> si le fuseau horaire prend en charge l'heure d'été ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propriété pour le fuseau horaire local retourné par la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriété reflète le paramètre du Panneau de configuration **Date et heure** case à cocher de l’application qui définit si le système automatiquement ajuste pour l’heure d’été. Si elle est désactivée ou si aucune case à cocher n’est affichée pour un fuseau horaire, la valeur de cette propriété est `false`.  
  
   
  
## Examples  
 L’exemple suivant récupère une collection de tous les fuseaux horaires disponibles sur un système local et affiche les noms de ceux qui ne prennent pas en charge l’heure d’été.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">Objet qui a initié le rappel. La fonctionnalité pour ce paramètre n'est pas implémentée actuellement.</param>
        <summary>S'exécute quand la désérialisation d'un objet a été effectuée.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">L’objet <see cref="T:System.TimeZoneInfo" /> contient des données non valides ou endommagées.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à remplir avec des données.</param>
        <param name="context">Destination pour cette sérialisation (consultez <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Remplit un objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> des données nécessaires à la sérialisation de l'objet <see cref="T:System.TimeZoneInfo" /> actuel.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="info" /> a la valeur <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiert une confiance totale pour l’appelant immédiat. Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit l'objet <see cref="T:System.TimeZoneInfo" /> en cours en chaîne sérialisée.</summary>
        <returns>Chaîne qui représente l'objet <see cref="T:System.TimeZoneInfo" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les applications qui s’appuient sur les fuseaux horaires qui ne sont pas généralement définies dans le Registre du système de Windows ou le [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux et macOScan peuvent utiliser le <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> méthode pour instancier les fuseaux horaires nécessaires en tant que <xref:System.TimeZoneInfo>objets. L’application peut ensuite appeler la <xref:System.TimeZoneInfo.ToSerializedString%2A> méthode pour convertir l’objet de fuseau horaire vers une chaîne.  
  
 Le <xref:System.TimeZoneInfo> objet doit également être stocké dans un emplacement où l’application peut récupérer en cas de besoin. Emplacements possibles sont les suivantes :  
  
-   Le Registre sur les systèmes Windows.  
  
-   Un fichier de ressources d’application.  
  
-   Un fichier externe, tel qu’un fichier texte.  
  
   
  
## Examples  
 L’exemple suivant essaie de récupérer le Pôle Sud Antarctique/du fuseau horaire du système local. En cas d’échec, le code tente de récupérer des informations sur le fuseau horaire à partir d’un fichier texte dans le répertoire de l’application. Si cette tentative échoue, le code crée le fuseau horaire et écrit des informations le concernant dans le fichier de texte.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">Procédure : Enregistrer des fuseaux horaires dans une ressource incorporée</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Renvoie le nom complet de l'objet <see cref="T:System.TimeZoneInfo" /> en cours.</summary>
        <returns>Valeur de la propriété <see cref="P:System.TimeZoneInfo.DisplayName" /> de l'objet <see cref="T:System.TimeZoneInfo" /> en cours.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque l’assignation d’une collection qui contient <xref:System.TimeZoneInfo> objets à un contrôle de liste, tels que le <xref:System.Windows.Forms.ListBox> contrôle, le contrôle appelle automatiquement la <xref:System.TimeZoneInfo.ToString%2A> méthode pour extraire une chaîne qui décrit chaque objet à représenter dans la liste. Par conséquent, vous n’avez pas besoin de stocker une description explicite de l’objet sous forme de chaîne, et l’utilisateur n’a pas besoin d’utiliser cette chaîne pour extraire l’objet de la collection. Voir [Guide pratique pour Énumérer les fuseaux horaires présents sur un ordinateur](~/docs/standard/datetime/enumerate-time-zones.md) pour plus de détails.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.TimeZoneInfo" /> qui représente la zone de temps universel (UTC, Universal Time Coordinated).</summary>
        <value>Objet qui représente la zone de temps universel coordonné.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit d’un objet intégré ; informations à ce sujet <xref:System.TimeZoneInfo> objet n’est pas récupéré à partir du Registre sur les systèmes Windows et à partir de la [bibliothèque ICU](http://userguide.icu-project.org/datetime/timezone) sur Linux et macOS.  
  
> [!IMPORTANT]
>  Vous devez toujours accéder à la zone de temps universel coordonné (UTC) via le <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> propriété plutôt qu’en affectant le fuseau horaire UTC à un <xref:System.TimeZoneInfo> variable objet. Cela empêche le <xref:System.TimeZoneInfo> variable objet d’être invalidée par un appel à la <xref:System.TimeZoneInfo.ClearCachedData%2A> (méthode).  
  
 Temps universel coordonné a été précédemment connu en tant qu’heure de Greenwich (GMT).  
  
   
  
## Examples  
 L’exemple suivant récupère un <xref:System.TimeZoneInfo> objet qui représente le temps universel coordonné (UTC) et renvoie son nom complet, le nom de l’heure d’hiver et le nom de l’heure d’été.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Procédure : Accéder aux objets UTC et prédéfinis des objets de fuseau horaire Local</related>
      </Docs>
    </Member>
  </Members>
</Type>