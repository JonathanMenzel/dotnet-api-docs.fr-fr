<Type Name="StringComparer" FullName="System.StringComparer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ced8061de4befeb24104a02f855267ba0a712033" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39809505" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <TypeSignature Language="F#" Value="type StringComparer = class&#xA;    interface IComparer&#xA;    interface IEqualityComparer&#xA;    interface IComparer&lt;string&gt;&#xA;    interface IEqualityComparer&lt;string&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a8ab4-101">Représente une opération de comparaison de chaînes qui utilise des règles de tri spécifiques basées sur la casse et la culture ou des règles de comparaison ordinale.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a8ab4-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-102">Objet dérivé de la <xref:System.StringComparer> classe représente basé sur chaîne de comparaison, d’égalité et les opérations de code de hachage qui prennent en compte les règles de comparaison spécifiques à la culture et de casse.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="a8ab4-103">Vous pouvez utiliser la <xref:System.StringComparer> classe pour créer une comparaison spécifique au type pour trier les éléments dans une collection générique.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="a8ab4-104">Classes telles que <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, et <xref:System.Collections.Generic.SortedList%602> utiliser le <xref:System.StringComparer> classe pour le tri.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="a8ab4-105">Une opération de comparaison qui est représentée par la <xref:System.StringComparer> classe est définie à la casse ou non, et à utiliser des mots (dépendantes de la culture) ou des règles de comparaison (indépendantes de la culture) ordinale.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="a8ab4-106">Pour plus d’informations sur word et les règles de comparaison ordinale, consultez <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
## <a name="implemented-properties"></a><span data-ttu-id="a8ab4-107">Propriétés implémentées</span><span class="sxs-lookup"><span data-stu-id="a8ab4-107">Implemented Properties</span></span>  
 <span data-ttu-id="a8ab4-108">Vous serez peut-être ne sais pas comment utiliser le <xref:System.StringComparer> propriétés de classe en raison d’une contradiction apparente.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-108">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="a8ab4-109">Le <xref:System.StringComparer> classe est déclarée `abstract` (`MustInherit` en Visual Basic), ce qui signifie que ses membres peut être appelée uniquement sur un objet d’une classe dérivée à partir de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-109">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a8ab4-110">La contradiction est que chaque propriété de la <xref:System.StringComparer> classe est déclarée `static` (`Shared` en Visual Basic), ce qui signifie que la propriété peut être appelée sans d’abord créer une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-110">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="a8ab4-111">Vous pouvez appeler un <xref:System.StringComparer> propriété directement, car chaque propriété retourne une instance d’une classe anonyme qui est dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-111">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a8ab4-112">Par conséquent, le type de chaque valeur de propriété est <xref:System.StringComparer>, qui n’est pas la classe de base de la classe anonyme, le type de l’anonyme classe lui-même.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-112">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="a8ab4-113">Chaque <xref:System.StringComparer> classe de propriété retourne un <xref:System.StringComparer> objet qui prend en charge les règles de casse et de comparaison prédéfinies.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-113">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8ab4-114">L’exemple suivant illustre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-114">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a8ab4-115">L’exemple illustre comment les différents <xref:System.StringComparer> objets tri trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-115">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-116">Initialise une nouvelle instance de la classe <see cref="T:System.StringComparer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-116">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-117">Compare deux objets ou chaînes et retourne une indication de leur ordre de tri relatif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-117">Compares two objects or strings and returns an indication of their relative sort order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : obj * obj -&gt; int&#xA;override this.Compare : obj * obj -&gt; int" Usage="stringComparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="a8ab4-118">Objet à comparer à <c>y</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-118">An object to compare to <c>y</c>.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="a8ab4-119">Objet à comparer à <c>x</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-119">An object to compare to <c>x</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a8ab4-120">En cas de substitution dans une classe dérivée, compare deux objets et retourne une indication de leur ordre de tri relatif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-120">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a8ab4-121">Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-121">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="a8ab4-122">
            <list type="table">
              <listheader>
                <term> Valeur  </term>
                <description> Signification  </description>
              </listheader>
              <item>
                <term> Inférieur à zéro  </term>
                <description>
                  <paramref name="x" /> précède  <paramref name="y" /> dans l’ordre de tri.  -ou-  <paramref name="x" /> est <see langword="null" /> et <paramref name="y" /> n’est pas <see langword="null" />.  </description>
              </item>
              <item>
                <term> Zéro  </term>
                <description>
                  <paramref name="x" /> est égal à <paramref name="y" />.  - ou - <paramref name="x" /> et <paramref name="y" /> sont tous les deux <see langword="null" />.  </description>
              </item>
              <item>
                <term> Supérieur à zéro  </term>
                <description>
                  <paramref name="x" /> suit <paramref name="y" /> dans l’ordre de tri.  -ou-  <paramref name="y" /> est <see langword="null" /> et <paramref name="x" /> n’est pas <see langword="null" />.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-122">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description>
                    <paramref name="x" /> precedes  <paramref name="y" /> in the sort order.  -or-  <paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <paramref name="x" /> is equal to <paramref name="y" />.  -or-  <paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description>
                    <paramref name="x" /> follows <paramref name="y" /> in the sort order.  -or-  <paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-123">Le <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> méthode est légèrement plus efficace que le <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> (méthode), car aucune conversion de la `x` et `y` arguments est nécessaire pour effectuer la comparaison.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-123">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a8ab4-124">Ni <paramref name="x" /> ni <paramref name="y" /> n'est un objet <see cref="T:System.String" /> et ni <paramref name="x" /> ni <paramref name="y" /> n'implémente l'interface <see cref="T:System.IComparable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-124">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int" Usage="stringComparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="a8ab4-125">Chaîne à comparer à <c>y</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-125">A string to compare to <c>y</c>.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="a8ab4-126">Chaîne à comparer à <c>x</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-126">A string to compare to <c>x</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a8ab4-127">En cas de substitution dans une classe dérivée, compare deux chaînes et retourne une indication de leur ordre de tri relatif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-127">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a8ab4-128">Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-128">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="a8ab4-129">
            <list type="table">
              <listheader>
                <term> Valeur  </term>
                <description> Signification  </description>
              </listheader>
              <item>
                <term> Inférieur à zéro  </term>
                <description>
                  <paramref name="x" /> précède <paramref name="y" /> dans l’ordre de tri.  -ou-  <paramref name="x" /> est <see langword="null" /> et <paramref name="y" /> n’est pas <see langword="null" />.  </description>
              </item>
              <item>
                <term> Zéro  </term>
                <description>
                  <paramref name="x" /> est égal à <paramref name="y" />.  - ou - <paramref name="x" /> et <paramref name="y" /> sont tous les deux <see langword="null" />.  </description>
              </item>
              <item>
                <term> Supérieur à zéro  </term>
                <description>
                  <paramref name="x" /> suit <paramref name="y" /> dans l’ordre de tri.  -ou-  <paramref name="y" /> est <see langword="null" /> et <paramref name="x" /> n’est pas <see langword="null" />.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-129">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description>
                    <paramref name="x" /> precedes <paramref name="y" /> in the sort order.  -or-  <paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <paramref name="x" /> is equal to <paramref name="y" />.  -or-  <paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description>
                    <paramref name="x" /> follows <paramref name="y" /> in the sort order.  -or-  <paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-130">Le <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> méthode est légèrement plus efficace que le <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> (méthode), car aucune conversion de la `x` et `y` arguments est nécessaire pour effectuer la comparaison.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-130">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Create : System.Globalization.CultureInfo * bool -&gt; StringComparer" Usage="System.StringComparer.Create (culture, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="a8ab4-131">Culture dont les règles linguistiques servent à effectuer une comparaison de chaînes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-131">A culture whose linguistic rules are used to perform a string comparison.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="a8ab4-132">
            <see langword="true" /> pour spécifier que les opérations de comparaison ne doivent pas respecter la casse ; <see langword="false" /> pour spécifier que les opérations de comparaison doivent respecter la casse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-132">
              <see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a8ab4-133">Crée un objet <see cref="T:System.StringComparer" /> qui compare des chaînes d'après les règles d'une culture spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-133">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a8ab4-134">Un nouvel objet <see cref="T:System.StringComparer" /> qui effectue des comparaisons de chaînes d'après les règles de comparaison utilisées par le paramètre <paramref name="culture" /> et la règle de casse spécifiée par le paramètre <paramref name="ignoreCase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-134">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a8ab4-135">L’exemple de code suivant montre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-135">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a8ab4-136">L’exemple illustre comment les différents <xref:System.StringComparer> objets tri trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-136">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a8ab4-137">
            <paramref name="culture" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-137">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, options As CompareOptions) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Create : System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; StringComparer" Usage="System.StringComparer.Create (culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="culture">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : StringComparer" Usage="System.StringComparer.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-138">Obtient un objet <see cref="T:System.StringComparer" /> qui exécute une comparaison de chaînes respectant la casse à l'aide des règles de comparaison de mots de la culture actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-138">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a8ab4-139">Nouvel objet <see cref="T:System.StringComparer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-139">A new <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-140">Le <xref:System.StringComparer> retourné par la <xref:System.StringComparer.CurrentCulture%2A> propriété peut être utilisée lorsque les chaînes sont linguistiquement pertinentes.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-140">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="a8ab4-141">Par exemple, si les chaînes sont affichées à l’utilisateur, ou si les chaînes sont le résultat d’interaction utilisateur, comparaison de chaînes dépendantes de la culture doit servir à classer les données de chaîne.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-141">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="a8ab4-142">La culture actuelle est le <xref:System.Globalization.CultureInfo> objet associé au thread actuel.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-142">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="a8ab4-143">Le <xref:System.StringComparer.CurrentCulture%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-143">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="a8ab4-144">Chaque appel à la <xref:System.StringComparer.CurrentCulture%2A> propriété `get` accesseur retourne un nouvel <xref:System.StringComparer> objet, comme le montre le code suivant.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-144">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="a8ab4-145">Pour améliorer les performances, vous pouvez stocker le <xref:System.StringComparer> de l’objet dans une variable locale plutôt que de récupérer la valeur de la <xref:System.StringComparer.CurrentCulture%2A> propriété plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-145">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8ab4-146">L’exemple de code suivant montre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-146">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a8ab4-147">L’exemple illustre comment les différents <xref:System.StringComparer> objets tri trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-147">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCultureIgnoreCase : StringComparer" Usage="System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-148">Obtient un objet <see cref="T:System.StringComparer" /> qui effectue des comparaisons de chaînes ne respectant pas la casse à l'aide des règles de comparaison de mots de la culture actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-148">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a8ab4-149">Nouvel objet <see cref="T:System.StringComparer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-149">A new <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-150">La culture actuelle est le <xref:System.Globalization.CultureInfo> objet associé au thread actuel.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-150">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="a8ab4-151">Le <xref:System.StringComparer> retourné par la <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriété peut être utilisée lorsque les chaînes sont linguistiquement pertinentes, mais pas leur casse.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-151">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="a8ab4-152">Par exemple, si les chaînes sont affichées à l’utilisateur, mais le cas est sans importance, la culture, comparaison de chaînes respectant la casse doit être utilisée pour classer les données de chaîne.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-152">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="a8ab4-153">Le <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-153">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="a8ab4-154">Chaque appel à la <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriété `get` accesseur retourne un nouvel <xref:System.StringComparer> objet, comme le montre le code suivant.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-154">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="a8ab4-155">Pour améliorer les performances, vous pouvez stocker le <xref:System.StringComparer> de l’objet dans une variable locale plutôt que de récupérer la valeur de la <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriété plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-155">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-156">En cas de substitution dans une classe dérivée, indique si deux objets ou chaînes sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-156">When overridden in a derived class, indicates whether two objects or strings are equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj * obj -&gt; bool" Usage="stringComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="a8ab4-157">Objet à comparer à <c>y</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-157">An object to compare to <c>y</c>.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="a8ab4-158">Objet à comparer à <c>x</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-158">An object to compare to <c>x</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a8ab4-159">En cas de substitution dans une classe dérivée, indique si deux objets sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-159">When overridden in a derived class, indicates whether two objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a8ab4-160">
            <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> font référence au même objet ou <paramref name="x" /> et <paramref name="y" /> sont le même type d'objet et que ces objets sont égaux ou <paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-160">
              <see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-161">Étant donné que le runtime ne devra pas effectuer une conversion unboxing `x` ou `y` s’ils sont des types valeur ou que vous essayez d’effectuer un downcast à `x` ou `y` en chaînes si elles sont des types de référence, le <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> méthode peut être légèrement plus efficace que le <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="a8ab4-161">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : string * string -&gt; bool" Usage="stringComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="a8ab4-162">Chaîne à comparer à <c>y</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-162">A string to compare to <c>y</c>.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="a8ab4-163">Chaîne à comparer à <c>x</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-163">A string to compare to <c>x</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a8ab4-164">En cas de substitution dans une classe dérivée, indique si deux chaînes sont égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-164">When overridden in a derived class, indicates whether two strings are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a8ab4-165">
            <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> font référence au même objet ou <paramref name="x" /> et <paramref name="y" /> sont égaux ou <paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-165">
              <see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-166">Étant donné que le runtime ne devra pas effectuer une conversion unboxing `x` ou `y` s’ils sont des types valeur ou que vous essayez d’effectuer un downcast à `x` ou `y` en chaînes si elles sont des types de référence, le <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> méthode peut être légèrement plus efficace que le <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="a8ab4-166">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member FromComparison : StringComparison -&gt; StringComparer" Usage="System.StringComparer.FromComparison comparisonType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-167">En cas de substitution dans une classe dérivée, obtient le code de hachage pour l'objet <see cref="T:System.StringComparer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-167">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : obj -&gt; int" Usage="stringComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="a8ab4-168">Objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-168">An object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a8ab4-169">En cas de substitution dans une classe dérivée, obtient le code de hachage pour l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-169">When overridden in a derived class, gets the hash code for the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a8ab4-170">Code de hachage signé de 32 bits calculé à partir de la valeur du paramètre <paramref name="obj" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-170">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-171">Le <xref:System.StringComparer.GetHashCode%28System.String%29> méthode est plus efficace que le <xref:System.StringComparer.GetHashCode%2A> (méthode), car le `obj` paramètre ne doit pas être unboxed pour effectuer l’opération.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-171">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="a8ab4-172">Le <xref:System.StringComparer.GetHashCode%28System.Object%29> méthode alloue une quantité de mémoire est proportionnelle à la taille de `obj` pour calculer le code de hachage de `obj`.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-172">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="a8ab4-173">Dans le cas de longues chaînes, tentez de récupérer le code de hachage peut lever une <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-173">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="a8ab4-174">Au lieu de cela, vous pouvez utiliser un autre algorithme qui alloue une quantité fixe de mémoire lors du calcul des codes de hachage.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-174">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="a8ab4-175">Pour utiliser cet algorithme, ajoutez le [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) élément à la [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section du fichier de configuration de votre application.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-175">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a8ab4-176">Il n’y a pas assez de mémoire disponible pour allouer la mémoire tampon nécessaire au calcul du code de hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-176">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a8ab4-177">
            <paramref name="obj" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-177">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="  &#xA;            T:System.ArgumentException">
          <span data-ttu-id="a8ab4-178">Il n’y a pas assez de mémoire disponible pour allouer la mémoire tampon nécessaire au calcul du code de hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-178">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string -&gt; int" Usage="stringComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="a8ab4-179">Chaîne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-179">A string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a8ab4-180">En cas de substitution dans une classe dérivée, obtient le code de hachage pour la chaîne spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-180">When overridden in a derived class, gets the hash code for the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a8ab4-181">Code de hachage signé de 32 bits calculé à partir de la valeur du paramètre <paramref name="obj" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-181">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-182">Le <xref:System.StringComparer.GetHashCode%28System.String%29> méthode est plus efficace que le <xref:System.StringComparer.GetHashCode%28System.Object%29> (méthode), car le `obj` paramètre ne doit pas être unboxed pour effectuer l’opération.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-182">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="a8ab4-183">Le <xref:System.StringComparer.GetHashCode%28System.String%29> méthode alloue une quantité de mémoire est proportionnelle à la taille de `obj` pour calculer le code de hachage de `obj`.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-183">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="a8ab4-184">Dans le cas de longues chaînes, tentez de récupérer le code de hachage peut lever une <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-184">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="a8ab4-185">Au lieu de cela, vous pouvez utiliser un autre algorithme qui alloue une quantité fixe de mémoire lors du calcul des codes de hachage.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-185">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="a8ab4-186">Pour utiliser cet algorithme, ajoutez le [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) élément à la [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section du fichier de configuration de votre application.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-186">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a8ab4-187">Il n’y a pas assez de mémoire disponible pour allouer la mémoire tampon nécessaire au calcul du code de hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-187">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a8ab4-188">
            <paramref name="obj" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-188">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="  &#xA;            T:System.ArgumentException">
          <span data-ttu-id="a8ab4-189">Il n’y a pas assez de mémoire disponible pour allouer la mémoire tampon nécessaire au calcul du code de hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-189">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : StringComparer" Usage="System.StringComparer.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-190">Obtient un objet <see cref="T:System.StringComparer" /> qui exécute une comparaison de chaînes respectant la casse à l'aide des règles de comparaison de mots de la culture indifférente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-190">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a8ab4-191">Nouvel objet <see cref="T:System.StringComparer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-191">A new <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-192">Le <xref:System.StringComparer> retourné par la <xref:System.StringComparer.InvariantCulture%2A> propriété compare les chaînes d’une manière linguistiquement pertinente, mais il n’est pas approprié pour l’affichage dans une culture particulière.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-192">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="a8ab4-193">Sa principale application est de classer des chaînes d’une manière qui sera identique dans toutes les cultures.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-193">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="a8ab4-194">La culture dite indifférente est la <xref:System.Globalization.CultureInfo> objet retourné par la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-194">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="a8ab4-195">Le <xref:System.StringComparer.InvariantCulture%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-195">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8ab4-196">L’exemple de code suivant montre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-196">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a8ab4-197">L’exemple illustre comment les différents <xref:System.StringComparer> objets tri trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-197">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCultureIgnoreCase : StringComparer" Usage="System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-198">Obtient un objet <see cref="T:System.StringComparer" /> qui exécute une comparaison de chaînes ne respectant pas la casse à l'aide des règles de comparaison de mots de la culture indifférente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-198">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a8ab4-199">Nouvel objet <see cref="T:System.StringComparer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-199">A new <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-200">Le <xref:System.StringComparer> retourné par la <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> propriété compare les chaînes d’une manière linguistiquement pertinente qui ignore la casse, mais il n’est pas approprié pour l’affichage dans une culture particulière.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-200">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="a8ab4-201">Sa principale application est de classer des chaînes d’une manière qui sera identique dans toutes les cultures.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-201">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="a8ab4-202">La culture dite indifférente est la <xref:System.Globalization.CultureInfo> objet retourné par la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-202">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="a8ab4-203">Le <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-203">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Ordinal : StringComparer" Usage="System.StringComparer.Ordinal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-204">Obtient un objet <see cref="T:System.StringComparer" /> qui effectue une comparaison de chaînes ordinale respectant la casse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-204">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a8ab4-205">Objet <see cref="T:System.StringComparer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-205">A <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-206">Le <xref:System.StringComparer> retourné par la <xref:System.StringComparer.Ordinal%2A> propriété effectue une simple comparaison d’octets qui est indépendante du langage.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-206">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="a8ab4-207">Cela est plus approprié lors de la comparaison de chaînes qui sont générées par programmation ou lorsque la comparaison qui respecte la casse ressources telles que les mots de passe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-207">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="a8ab4-208">Le <xref:System.StringComparer.Ordinal%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-208">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8ab4-209">L’exemple de code suivant montre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-209">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a8ab4-210">L’exemple illustre comment les différents <xref:System.StringComparer> objets tri trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-210">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrdinalIgnoreCase : StringComparer" Usage="System.StringComparer.OrdinalIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a8ab4-211">Obtient un objet <see cref="T:System.StringComparer" /> qui effectue une comparaison de chaînes ordinale ne respectant pas la casse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-211">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a8ab4-212">Objet <see cref="T:System.StringComparer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8ab4-212">A <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8ab4-213">Le <xref:System.StringComparer> retourné par la <xref:System.StringComparer.OrdinalIgnoreCase%2A> propriété traite les caractères dans les chaînes à comparer comme s’ils ont été convertis en majuscules, en respectant les conventions de la culture dite indifférente, puis effectue une simple comparaison d’octets qui est indépendante de langage.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-213">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="a8ab4-214">Cela est plus approprié lors de la comparaison de chaînes qui sont générées par programme ou lorsque la comparaison des ressources non-respect de la casse, telles que les chemins d’accès et noms de fichiers.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-214">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="a8ab4-215">Le <xref:System.StringComparer.OrdinalIgnoreCase%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-215">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8ab4-216">L’exemple de code suivant montre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-216">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a8ab4-217">L’exemple illustre comment les différents <xref:System.StringComparer> objets tri trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="a8ab4-217">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>