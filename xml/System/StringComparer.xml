<Type Name="StringComparer" FullName="System.StringComparer">
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4bd50-101">Représente une opération de comparaison de chaînes qui utilise des règles de tri spécifiques basées sur la casse et la culture ou des règles de comparaison ordinale.</span><span class="sxs-lookup"><span data-stu-id="4bd50-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-102">Objet dérivé de la <xref:System.StringComparer> classe représente la comparaison basée sur une chaîne, d’égalité et les opérations de code de hachage qui prennent en compte les règles de comparaison propres à la culture et de casse.</span><span class="sxs-lookup"><span data-stu-id="4bd50-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="4bd50-103">Vous pouvez utiliser la <xref:System.StringComparer> classe pour créer une comparaison spécifique au type pour trier les éléments dans une collection générique.</span><span class="sxs-lookup"><span data-stu-id="4bd50-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="4bd50-104">Classes telles que <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, et <xref:System.Collections.Generic.SortedList%602> utiliser le <xref:System.StringComparer> classe pour le tri.</span><span class="sxs-lookup"><span data-stu-id="4bd50-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="4bd50-105">Une opération de comparaison qui est représentée par la <xref:System.StringComparer> classe est définie à la casse ou non, et à utiliser des mots (dépendantes de la culture) ou des règles de comparaison (indépendantes de la culture) ordinale.</span><span class="sxs-lookup"><span data-stu-id="4bd50-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="4bd50-106">Pour plus d’informations sur les mots et les règles de comparaison ordinale, consultez <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
## <a name="implemented-properties"></a><span data-ttu-id="4bd50-107">Propriétés implémentées</span><span class="sxs-lookup"><span data-stu-id="4bd50-107">Implemented Properties</span></span>  
 <span data-ttu-id="4bd50-108">Vous pouvez être confondue sur l’utilisation du <xref:System.StringComparer> propriétés de classe en raison d’une contradiction apparente.</span><span class="sxs-lookup"><span data-stu-id="4bd50-108">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="4bd50-109">Le <xref:System.StringComparer> classe est déclarée `abstract` (`MustInherit` en Visual Basic), ce qui signifie que ses membres peut être appelée uniquement sur un objet d’une classe dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-109">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="4bd50-110">La contradiction est que chaque propriété de la <xref:System.StringComparer> classe est déclarée `static` (`Shared` en Visual Basic), ce qui signifie que la propriété peut être appelée sans créer au préalable une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="4bd50-110">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="4bd50-111">Vous pouvez appeler une <xref:System.StringComparer> propriété directement parce que chaque propriété retourne une instance d’une classe anonyme qui est dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-111">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="4bd50-112">Par conséquent, le type de chaque valeur de propriété est <xref:System.StringComparer>, qui n’est pas la classe de base de la classe anonyme, le type de l’anonyme classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="4bd50-112">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="4bd50-113">Chaque <xref:System.StringComparer> classe de propriété retourne un <xref:System.StringComparer> objet prenant en charge les règles de casse et de comparaison prédéfinies.</span><span class="sxs-lookup"><span data-stu-id="4bd50-113">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bd50-114">L’exemple suivant illustre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-114">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="4bd50-115">L’exemple illustre comment les différents <xref:System.StringComparer> objets trient trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="4bd50-115">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bd50-116">Initialise une nouvelle instance de la classe <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-116">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bd50-117">Compare deux objets ou chaînes et retourne une indication de leur ordre de tri relatif.</span><span class="sxs-lookup"><span data-stu-id="4bd50-117">Compares two objects or strings and returns an indication of their relative sort order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="4bd50-118">Objet à comparer à <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-118">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="4bd50-119">Objet à comparer à <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-119">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="4bd50-120">En cas de substitution dans une classe dérivée, compare deux objets et retourne une indication de leur ordre de tri relatif.</span><span class="sxs-lookup"><span data-stu-id="4bd50-120">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="4bd50-121">Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="4bd50-121">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="4bd50-122"><list type="table"><listheader><term> Valeur</span><span class="sxs-lookup"><span data-stu-id="4bd50-122"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="4bd50-123"></term><description> Signification</span><span class="sxs-lookup"><span data-stu-id="4bd50-123"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="4bd50-124"></description></listheader><item><term> Inférieur à zéro</span><span class="sxs-lookup"><span data-stu-id="4bd50-124"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="4bd50-125"></term><description><paramref name="x" /> précède <paramref name="y" /> dans l’ordre de tri.</span><span class="sxs-lookup"><span data-stu-id="4bd50-125"></term><description><paramref name="x" /> precedes  <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="4bd50-126">- ou -</span><span class="sxs-lookup"><span data-stu-id="4bd50-126">-or-</span></span>  
  
 <span data-ttu-id="4bd50-127"><paramref name="x" /> a la valeur <see langword="null" /> et <paramref name="y" /> n'a pas la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-127"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="4bd50-128"></description></item><item><term> Zéro</span><span class="sxs-lookup"><span data-stu-id="4bd50-128"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="4bd50-129"></term><description><paramref name="x" /> est égal à <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-129"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="4bd50-130">- ou -</span><span class="sxs-lookup"><span data-stu-id="4bd50-130">-or-</span></span>  
  
 <span data-ttu-id="4bd50-131"><paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-131"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="4bd50-132"></description></item><item><term> Supérieur à zéro</span><span class="sxs-lookup"><span data-stu-id="4bd50-132"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="4bd50-133"></term><description><paramref name="x" /> suit <paramref name="y" /> dans l’ordre de tri.</span><span class="sxs-lookup"><span data-stu-id="4bd50-133"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="4bd50-134">- ou -</span><span class="sxs-lookup"><span data-stu-id="4bd50-134">-or-</span></span>  
  
 <span data-ttu-id="4bd50-135"><paramref name="y" /> a la valeur <see langword="null" /> et <paramref name="x" /> n'a pas la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-135"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-136">Le <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> méthode est légèrement plus efficace que la <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> (méthode), car aucune conversion de la `x` et `y` arguments est nécessaire pour effectuer la comparaison.</span><span class="sxs-lookup"><span data-stu-id="4bd50-136">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd50-137">Ni <paramref name="x" /> ni <paramref name="y" /> n'est un objet <see cref="T:System.String" /> et ni <paramref name="x" /> ni <paramref name="y" /> n'implémente l'interface <see cref="T:System.IComparable" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-137">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="4bd50-138">Chaîne à comparer à <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-138">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="4bd50-139">Chaîne à comparer à <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-139">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="4bd50-140">En cas de substitution dans une classe dérivée, compare deux chaînes et retourne une indication de leur ordre de tri relatif.</span><span class="sxs-lookup"><span data-stu-id="4bd50-140">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="4bd50-141">Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="4bd50-141">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="4bd50-142"><list type="table"><listheader><term> Valeur</span><span class="sxs-lookup"><span data-stu-id="4bd50-142"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="4bd50-143"></term><description> Signification</span><span class="sxs-lookup"><span data-stu-id="4bd50-143"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="4bd50-144"></description></listheader><item><term> Inférieur à zéro</span><span class="sxs-lookup"><span data-stu-id="4bd50-144"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="4bd50-145"></term><description><paramref name="x" /> précède <paramref name="y" /> dans l’ordre de tri.</span><span class="sxs-lookup"><span data-stu-id="4bd50-145"></term><description><paramref name="x" /> precedes <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="4bd50-146">- ou -</span><span class="sxs-lookup"><span data-stu-id="4bd50-146">-or-</span></span>  
  
 <span data-ttu-id="4bd50-147"><paramref name="x" /> a la valeur <see langword="null" /> et <paramref name="y" /> n'a pas la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-147"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="4bd50-148"></description></item><item><term> Zéro</span><span class="sxs-lookup"><span data-stu-id="4bd50-148"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="4bd50-149"></term><description><paramref name="x" /> est égal à <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-149"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="4bd50-150">- ou -</span><span class="sxs-lookup"><span data-stu-id="4bd50-150">-or-</span></span>  
  
 <span data-ttu-id="4bd50-151"><paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-151"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="4bd50-152"></description></item><item><term> Supérieur à zéro</span><span class="sxs-lookup"><span data-stu-id="4bd50-152"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="4bd50-153"></term><description><paramref name="x" /> suit <paramref name="y" /> dans l’ordre de tri.</span><span class="sxs-lookup"><span data-stu-id="4bd50-153"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="4bd50-154">- ou -</span><span class="sxs-lookup"><span data-stu-id="4bd50-154">-or-</span></span>  
  
 <span data-ttu-id="4bd50-155"><paramref name="y" /> a la valeur <see langword="null" /> et <paramref name="x" /> n'a pas la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-155"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-156">Le <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> méthode est légèrement plus efficace que la <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> (méthode), car aucune conversion de la `x` et `y` arguments est nécessaire pour effectuer la comparaison.</span><span class="sxs-lookup"><span data-stu-id="4bd50-156">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="4bd50-157">Culture dont les règles linguistiques servent à effectuer une comparaison de chaînes.</span><span class="sxs-lookup"><span data-stu-id="4bd50-157">A culture whose linguistic rules are used to perform a string comparison.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="4bd50-158"><see langword="true" /> pour spécifier que les opérations de comparaison ne doivent pas respecter la casse ; <see langword="false" /> pour spécifier que les opérations de comparaison doivent respecter la casse.</span><span class="sxs-lookup"><span data-stu-id="4bd50-158"><see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span></span></param>
        <summary><span data-ttu-id="4bd50-159">Crée un objet <see cref="T:System.StringComparer" /> qui compare des chaînes d'après les règles d'une culture spécifiée.</span><span class="sxs-lookup"><span data-stu-id="4bd50-159">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span></span></summary>
        <returns><span data-ttu-id="4bd50-160">Un nouvel objet <see cref="T:System.StringComparer" /> qui effectue des comparaisons de chaînes d'après les règles de comparaison utilisées par le paramètre <paramref name="culture" /> et la règle de casse spécifiée par le paramètre <paramref name="ignoreCase" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-160">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4bd50-161">L’exemple de code suivant illustre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-161">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="4bd50-162">L’exemple illustre comment les différents <xref:System.StringComparer> objets trient trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="4bd50-162">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4bd50-163"><paramref name="culture" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-163"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bd50-164">Obtient un objet <see cref="T:System.StringComparer" /> qui exécute une comparaison de chaînes respectant la casse à l'aide des règles de comparaison de mots de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="4bd50-164">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="4bd50-165">Nouvel objet <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-165">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-166">Le <xref:System.StringComparer> retournée par le <xref:System.StringComparer.CurrentCulture%2A> propriété peut être utilisée lorsque les chaînes sont linguistiquement pertinentes.</span><span class="sxs-lookup"><span data-stu-id="4bd50-166">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="4bd50-167">Par exemple, si les chaînes sont affichées à l’utilisateur, ou si les chaînes sont le résultat de l’interaction utilisateur, comparaison de chaînes sensible à la culture doit utilisé pour trier les données de chaîne.</span><span class="sxs-lookup"><span data-stu-id="4bd50-167">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="4bd50-168">La culture actuelle est le <xref:System.Globalization.CultureInfo> objet associé au thread actuel.</span><span class="sxs-lookup"><span data-stu-id="4bd50-168">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="4bd50-169">Le <xref:System.StringComparer.CurrentCulture%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-169">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="4bd50-170">Chaque appel à la <xref:System.StringComparer.CurrentCulture%2A> propriété `get` accesseur retourne un nouveau <xref:System.StringComparer> objet, comme le montre le code suivant.</span><span class="sxs-lookup"><span data-stu-id="4bd50-170">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="4bd50-171">Pour améliorer les performances, vous pouvez stocker le <xref:System.StringComparer> de l’objet dans une variable locale au lieu de récupérer la valeur de la <xref:System.StringComparer.CurrentCulture%2A> propriété plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="4bd50-171">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bd50-172">L’exemple de code suivant illustre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-172">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="4bd50-173">L’exemple illustre comment les différents <xref:System.StringComparer> objets trient trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="4bd50-173">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bd50-174">Obtient un objet <see cref="T:System.StringComparer" /> qui effectue des comparaisons de chaînes ne respectant pas la casse à l'aide des règles de comparaison de mots de la culture actuelle.</span><span class="sxs-lookup"><span data-stu-id="4bd50-174">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="4bd50-175">Nouvel objet <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-175">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-176">La culture actuelle est le <xref:System.Globalization.CultureInfo> objet associé au thread actuel.</span><span class="sxs-lookup"><span data-stu-id="4bd50-176">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="4bd50-177">Le <xref:System.StringComparer> retournée par le <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriété peut être utilisée lorsque les chaînes sont linguistiquement pertinentes, mais pas leur casse.</span><span class="sxs-lookup"><span data-stu-id="4bd50-177">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="4bd50-178">Par exemple, si les chaînes sont affichées à l’utilisateur mais cas est sans importance, dépendante de la culture, comparaison de chaînes de pas la casse doit être utilisée pour classer les données de chaîne.</span><span class="sxs-lookup"><span data-stu-id="4bd50-178">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="4bd50-179">Le <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-179">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="4bd50-180">Chaque appel à la <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriété `get` accesseur retourne un nouveau <xref:System.StringComparer> objet, comme le montre le code suivant.</span><span class="sxs-lookup"><span data-stu-id="4bd50-180">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="4bd50-181">Pour améliorer les performances, vous pouvez stocker le <xref:System.StringComparer> de l’objet dans une variable locale au lieu de récupérer la valeur de la <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriété plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="4bd50-181">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bd50-182">En cas de substitution dans une classe dérivée, indique si deux objets ou chaînes sont égaux.</span><span class="sxs-lookup"><span data-stu-id="4bd50-182">When overridden in a derived class, indicates whether two objects or strings are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="4bd50-183">Objet à comparer à <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-183">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="4bd50-184">Objet à comparer à <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-184">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="4bd50-185">En cas de substitution dans une classe dérivée, indique si deux objets sont égaux.</span><span class="sxs-lookup"><span data-stu-id="4bd50-185">When overridden in a derived class, indicates whether two objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="4bd50-186"><see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> font référence au même objet ou <paramref name="x" /> et <paramref name="y" /> sont le même type d'objet et que ces objets sont égaux ou <paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-186"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-187">Car le runtime n’a pas à effectuer une conversion unboxing `x` ou `y` s’ils sont des types valeur ou essayez de cast aval `x` ou `y` en chaînes si elles sont des types référence, la <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> méthode peut être légèrement plus efficace que le <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4bd50-187">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="4bd50-188">Chaîne à comparer à <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-188">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="4bd50-189">Chaîne à comparer à <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-189">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="4bd50-190">En cas de substitution dans une classe dérivée, indique si deux chaînes sont égales.</span><span class="sxs-lookup"><span data-stu-id="4bd50-190">When overridden in a derived class, indicates whether two strings are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="4bd50-191"><see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> font référence au même objet ou <paramref name="x" /> et <paramref name="y" /> sont égaux ou <paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-191"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-192">Car le runtime n’a pas à effectuer une conversion unboxing `x` ou `y` s’ils sont des types valeur ou essayez de cast aval `x` ou `y` en chaînes si elles sont des types référence, la <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> méthode peut être légèrement plus efficace que le <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="4bd50-192">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bd50-193">En cas de substitution dans une classe dérivée, obtient le code de hachage pour l'objet <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-193">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="4bd50-194">Objet.</span><span class="sxs-lookup"><span data-stu-id="4bd50-194">An object.</span></span></param>
        <summary><span data-ttu-id="4bd50-195">En cas de substitution dans une classe dérivée, obtient le code de hachage pour l'objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="4bd50-195">When overridden in a derived class, gets the hash code for the specified object.</span></span></summary>
        <returns><span data-ttu-id="4bd50-196">Code de hachage signé de 32 bits calculé à partir de la valeur du paramètre <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-196">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-197">Le <xref:System.StringComparer.GetHashCode%28System.String%29> méthode est plus efficace que la <xref:System.StringComparer.GetHashCode%2A> (méthode), car le `obj` paramètre n’a pas à être unboxed pour effectuer l’opération.</span><span class="sxs-lookup"><span data-stu-id="4bd50-197">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="4bd50-198">Le <xref:System.StringComparer.GetHashCode%28System.Object%29> méthode alloue une quantité de mémoire qui est proportionnelle à la taille de `obj` pour calculer le code de hachage de `obj`.</span><span class="sxs-lookup"><span data-stu-id="4bd50-198">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="4bd50-199">Dans le cas de longues chaînes, essayez de récupérer le code de hachage peut lever une <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-199">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="4bd50-200">Au lieu de cela, vous pouvez utiliser un autre algorithme qui alloue une quantité fixe de mémoire lors du calcul des codes de hachage.</span><span class="sxs-lookup"><span data-stu-id="4bd50-200">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="4bd50-201">Pour utiliser cet algorithme, ajoutez le [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) élément à la [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section du fichier de configuration de votre application.</span><span class="sxs-lookup"><span data-stu-id="4bd50-201">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd50-202">Il n’y a pas assez de mémoire disponible pour allouer la mémoire tampon nécessaire au calcul du code de hachage.</span><span class="sxs-lookup"><span data-stu-id="4bd50-202">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4bd50-203"><paramref name="obj" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-203"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="4bd50-204">Il n’y a pas assez de mémoire disponible pour allouer la mémoire tampon nécessaire au calcul du code de hachage.</span><span class="sxs-lookup"><span data-stu-id="4bd50-204">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="4bd50-205">Chaîne.</span><span class="sxs-lookup"><span data-stu-id="4bd50-205">A string.</span></span></param>
        <summary><span data-ttu-id="4bd50-206">En cas de substitution dans une classe dérivée, obtient le code de hachage pour la chaîne spécifiée.</span><span class="sxs-lookup"><span data-stu-id="4bd50-206">When overridden in a derived class, gets the hash code for the specified string.</span></span></summary>
        <returns><span data-ttu-id="4bd50-207">Code de hachage signé de 32 bits calculé à partir de la valeur du paramètre <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-207">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-208">Le <xref:System.StringComparer.GetHashCode%28System.String%29> méthode est plus efficace que la <xref:System.StringComparer.GetHashCode%28System.Object%29> (méthode), car le `obj` paramètre n’a pas à être unboxed pour effectuer l’opération.</span><span class="sxs-lookup"><span data-stu-id="4bd50-208">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="4bd50-209">Le <xref:System.StringComparer.GetHashCode%28System.String%29> méthode alloue une quantité de mémoire qui est proportionnelle à la taille de `obj` pour calculer le code de hachage de `obj`.</span><span class="sxs-lookup"><span data-stu-id="4bd50-209">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="4bd50-210">Dans le cas de longues chaînes, essayez de récupérer le code de hachage peut lever une <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="4bd50-210">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="4bd50-211">Au lieu de cela, vous pouvez utiliser un autre algorithme qui alloue une quantité fixe de mémoire lors du calcul des codes de hachage.</span><span class="sxs-lookup"><span data-stu-id="4bd50-211">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="4bd50-212">Pour utiliser cet algorithme, ajoutez le [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) élément à la [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section du fichier de configuration de votre application.</span><span class="sxs-lookup"><span data-stu-id="4bd50-212">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd50-213">Il n’y a pas assez de mémoire disponible pour allouer la mémoire tampon nécessaire au calcul du code de hachage.</span><span class="sxs-lookup"><span data-stu-id="4bd50-213">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4bd50-214"><paramref name="obj" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-214"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="4bd50-215">Il n’y a pas assez de mémoire disponible pour allouer la mémoire tampon nécessaire au calcul du code de hachage.</span><span class="sxs-lookup"><span data-stu-id="4bd50-215">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bd50-216">Obtient un objet <see cref="T:System.StringComparer" /> qui exécute une comparaison de chaînes respectant la casse à l'aide des règles de comparaison de mots de la culture indifférente.</span><span class="sxs-lookup"><span data-stu-id="4bd50-216">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="4bd50-217">Nouvel objet <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-217">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-218">Le <xref:System.StringComparer> retournée par le <xref:System.StringComparer.InvariantCulture%2A> propriété compare les chaînes d’une manière linguistiquement pertinente, mais il n’est pas approprié pour l’affichage dans une culture particulière.</span><span class="sxs-lookup"><span data-stu-id="4bd50-218">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="4bd50-219">Sa principale application est de classer des chaînes d’une manière qui sera identique dans toutes les cultures.</span><span class="sxs-lookup"><span data-stu-id="4bd50-219">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="4bd50-220">La culture dite indifférente est la <xref:System.Globalization.CultureInfo> objet retourné par la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4bd50-220">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="4bd50-221">Le <xref:System.StringComparer.InvariantCulture%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-221">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bd50-222">L’exemple de code suivant illustre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-222">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="4bd50-223">L’exemple illustre comment les différents <xref:System.StringComparer> objets trient trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="4bd50-223">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bd50-224">Obtient un objet <see cref="T:System.StringComparer" /> qui exécute une comparaison de chaînes ne respectant pas la casse à l'aide des règles de comparaison de mots de la culture indifférente.</span><span class="sxs-lookup"><span data-stu-id="4bd50-224">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="4bd50-225">Nouvel objet <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-225">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-226">Le <xref:System.StringComparer> retournée par le <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> propriété compare les chaînes d’une manière linguistiquement pertinente qui ignore la casse, mais il n’est pas approprié pour l’affichage dans une culture particulière.</span><span class="sxs-lookup"><span data-stu-id="4bd50-226">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="4bd50-227">Sa principale application est de classer des chaînes d’une manière qui sera identique dans toutes les cultures.</span><span class="sxs-lookup"><span data-stu-id="4bd50-227">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="4bd50-228">La culture dite indifférente est la <xref:System.Globalization.CultureInfo> objet retourné par la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="4bd50-228">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="4bd50-229">Le <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-229">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bd50-230">Obtient un objet <see cref="T:System.StringComparer" /> qui effectue une comparaison de chaînes ordinale respectant la casse.</span><span class="sxs-lookup"><span data-stu-id="4bd50-230">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="4bd50-231">Objet <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-231">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-232">Le <xref:System.StringComparer> retournée par le <xref:System.StringComparer.Ordinal%2A> propriété effectue une comparaison d’octets simple qui est indépendante du langage.</span><span class="sxs-lookup"><span data-stu-id="4bd50-232">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="4bd50-233">Cela est plus approprié lors de la comparaison de chaînes qui sont générés par programme ou lorsque la comparaison des ressources qui respecte la casse, telles que les mots de passe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-233">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="4bd50-234">Le <xref:System.StringComparer.Ordinal%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-234">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bd50-235">L’exemple de code suivant illustre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-235">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="4bd50-236">L’exemple illustre comment les différents <xref:System.StringComparer> objets trient trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="4bd50-236">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bd50-237">Obtient un objet <see cref="T:System.StringComparer" /> qui effectue une comparaison de chaînes ordinale ne respectant pas la casse.</span><span class="sxs-lookup"><span data-stu-id="4bd50-237">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="4bd50-238">Objet <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="4bd50-238">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bd50-239">Le <xref:System.StringComparer> retournée par le <xref:System.StringComparer.OrdinalIgnoreCase%2A> propriété traite les caractères dans les chaînes à comparer comme s’ils ont été convertis pour majuscules utilisant les conventions de la culture dite indifférente, puis effectue une comparaison d’octets simple qui est indépendante de langage.</span><span class="sxs-lookup"><span data-stu-id="4bd50-239">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="4bd50-240">Cela est plus approprié lors de la comparaison de chaînes qui sont générés par programme ou lorsque la comparaison des ressources pas la casse, telles que les chemins d’accès et les noms de fichiers.</span><span class="sxs-lookup"><span data-stu-id="4bd50-240">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="4bd50-241">Le <xref:System.StringComparer.OrdinalIgnoreCase%2A> propriété retourne une instance d’une classe anonyme dérivée de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-241">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bd50-242">L’exemple de code suivant illustre les propriétés et les <xref:System.StringComparer.Create%2A> méthode de la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="4bd50-242">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="4bd50-243">L’exemple illustre comment les différents <xref:System.StringComparer> objets trient trois versions de la Latin lettre I.</span><span class="sxs-lookup"><span data-stu-id="4bd50-243">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>