<Type Name="Converter&lt;TInput,TOutput&gt;" FullName="System.Converter&lt;TInput,TOutput&gt;">
  <TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;in TInput,out TOutput&gt;(TInput input);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;- TInput, + TOutput&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Converter`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of In TInput, Out TOutput)(input As TInput) As TOutput " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public delegate TOutput Converter(TInput input);" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="input" Type="TInput" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TOutput</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TInput"><span data-ttu-id="8137d-101">Type de l'objet à convertir.</span><span class="sxs-lookup"><span data-stu-id="8137d-101">The type of object that is to be converted.</span></span></typeparam>
    <typeparam name="TOutput"><span data-ttu-id="8137d-102">Type en lequel l'objet en entrée doit être converti.</span><span class="sxs-lookup"><span data-stu-id="8137d-102">The type the input object is to be converted to.</span></span></typeparam>
    <param name="input"><span data-ttu-id="8137d-103">Objet à convertir.</span><span class="sxs-lookup"><span data-stu-id="8137d-103">The object to convert.</span></span></param>
    <summary><span data-ttu-id="8137d-104">Représente une méthode qui convertit un objet d'un type en un autre type.</span><span class="sxs-lookup"><span data-stu-id="8137d-104">Represents a method that converts an object from one type to another type.</span></span></summary>
    <returns><span data-ttu-id="8137d-105"><typeparamref name="TOutput" /> représentant l'objet <typeparamref name="TInput" /> converti.</span><span class="sxs-lookup"><span data-stu-id="8137d-105">The <typeparamref name="TOutput" /> that represents the converted <typeparamref name="TInput" />.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8137d-106">Ce délégué est utilisé par le <xref:System.Array.ConvertAll%2A> méthode de la <xref:System.Array> classe et le <xref:System.Collections.Generic.List`1.ConvertAll*> méthode de la <xref:System.Collections.Generic.List%601> classe convertir chaque élément de la collection d’un type à un autre.</span><span class="sxs-lookup"><span data-stu-id="8137d-106">This delegate is used by the <xref:System.Array.ConvertAll%2A> method of the <xref:System.Array> class and the <xref:System.Collections.Generic.List`1.ConvertAll*> method of the <xref:System.Collections.Generic.List%601> class to convert each element of the collection from one type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8137d-107">Cette section contient deux exemples de code.</span><span class="sxs-lookup"><span data-stu-id="8137d-107">This section contains two code examples.</span></span> <span data-ttu-id="8137d-108">Le premier montre le <xref:System.Converter%602> délégué avec le <xref:System.Array.ConvertAll%2A> méthode de la <xref:System.Array> classe et le deuxième exemple présente le délégué avec le <xref:System.Collections.Generic.List`1.ConvertAll*> méthode de la <xref:System.Collections.Generic.List%601> classe générique.</span><span class="sxs-lookup"><span data-stu-id="8137d-108">The first demonstrates the <xref:System.Converter%602> delegate with the <xref:System.Array.ConvertAll%2A> method of the <xref:System.Array> class, and the second demonstrates the delegate with the <xref:System.Collections.Generic.List`1.ConvertAll*> method of the <xref:System.Collections.Generic.List%601> generic class.</span></span>  
  
 <span data-ttu-id="8137d-109">Exemple 1</span><span class="sxs-lookup"><span data-stu-id="8137d-109">Example 1</span></span>  
  
 <span data-ttu-id="8137d-110">L’exemple de code suivant définit une méthode nommée `PointFToPoint` qui convertit un <xref:System.Drawing.PointF> structure un <xref:System.Drawing.Point> structure.</span><span class="sxs-lookup"><span data-stu-id="8137d-110">The following code example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure.</span></span> <span data-ttu-id="8137d-111">L’exemple crée ensuite un tableau de <xref:System.Drawing.PointF> structures, crée un `Converter<PointF, Point>` déléguer (`Converter(Of PointF, Point)` en Visual Basic) pour représenter le `PointFToPoint` (méthode) et passe le délégué à la <xref:System.Array.ConvertAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8137d-111">The example then creates an array of <xref:System.Drawing.PointF> structures, creates a `Converter<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Array.ConvertAll%2A> method.</span></span> <span data-ttu-id="8137d-112">Le <xref:System.Array.ConvertAll%2A> méthode passe chaque élément de la liste d’entrée à la `PointFToPoint` (méthode) et met les éléments convertis dans une nouvelle liste de <xref:System.Drawing.Point> structures.</span><span class="sxs-lookup"><span data-stu-id="8137d-112">The <xref:System.Array.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="8137d-113">Les deux listes sont affichées.</span><span class="sxs-lookup"><span data-stu-id="8137d-113">Both lists are displayed.</span></span>  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 <span data-ttu-id="8137d-114">Exemple 2</span><span class="sxs-lookup"><span data-stu-id="8137d-114">Example 2</span></span>  
  
 <span data-ttu-id="8137d-115">L’exemple de code suivant définit une méthode nommée `PointFToPoint` qui convertit un <xref:System.Drawing.PointF> structure un <xref:System.Drawing.Point> structure.</span><span class="sxs-lookup"><span data-stu-id="8137d-115">The following code example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure.</span></span> <span data-ttu-id="8137d-116">L’exemple crée ensuite un <xref:System.Collections.Generic.List%601> de <xref:System.Drawing.PointF> structures, crée un `Converter\<PointF, Point>` déléguer (`Converter(Of PointF, Point)` en Visual Basic) pour représenter le `PointFToPoint` (méthode) et passe le délégué à la <xref:System.Collections.Generic.List`1.ConvertAll*> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8137d-116">The example then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Drawing.PointF> structures, creates a `Converter\<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Collections.Generic.List`1.ConvertAll*> method.</span></span> <span data-ttu-id="8137d-117">Le <xref:System.Collections.Generic.List`1.ConvertAll*> méthode passe chaque élément de la liste d’entrée à la `PointFToPoint` (méthode) et met les éléments convertis dans une nouvelle liste de <xref:System.Drawing.Point> structures.</span><span class="sxs-lookup"><span data-stu-id="8137d-117">The <xref:System.Collections.Generic.List`1.ConvertAll*> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="8137d-118">Les deux listes sont affichées.</span><span class="sxs-lookup"><span data-stu-id="8137d-118">Both lists are displayed.</span></span>  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>