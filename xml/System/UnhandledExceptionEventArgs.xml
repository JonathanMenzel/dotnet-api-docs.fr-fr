<Type Name="UnhandledExceptionEventArgs" FullName="System.UnhandledExceptionEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9811531194d62fd50310ad6baf15b7e5d3024df0" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37727020" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.UnhandledExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnhandledExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type UnhandledExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="62aea-101">Fournit des données pour l'événement déclenché en cas d'exception non gérée dans un domaine d'application.</span>
      <span class="sxs-lookup">
        <span data-stu-id="62aea-101">Provides data for the event that is raised when there is an exception that is not handled in any application domain.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62aea-102"><xref:System.UnhandledExceptionEventArgs> fournit l’accès à l’objet exception et un indicateur indiquant si le common language runtime se termine.</span><span class="sxs-lookup"><span data-stu-id="62aea-102"><xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</span></span> <span data-ttu-id="62aea-103">Le <xref:System.UnhandledExceptionEventArgs> est un des paramètres passés à <xref:System.UnhandledExceptionEventHandler> pour le <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> événement.</span><span class="sxs-lookup"><span data-stu-id="62aea-103">The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="62aea-104">Pour plus d’informations sur les délégués de gestionnaire d’événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="62aea-104">For more information about event handler delegates, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.AppDomain.UnhandledException" />
    <altmember cref="T:System.UnhandledExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnhandledExceptionEventArgs (object exception, bool isTerminating);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object exception, bool isTerminating) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As Object, isTerminating As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnhandledExceptionEventArgs(System::Object ^ exception, bool isTerminating);" />
      <MemberSignature Language="F#" Value="new UnhandledExceptionEventArgs : obj * bool -&gt; UnhandledExceptionEventArgs" Usage="new System.UnhandledExceptionEventArgs (exception, isTerminating)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Object" />
        <Parameter Name="isTerminating" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="62aea-105">Exception non gérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62aea-105">The exception that is not handled.</span>
          </span>
        </param>
        <param name="isTerminating">
          <span data-ttu-id="62aea-106">
            <see langword="true" /> si le runtime se termine ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62aea-106">
              <see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62aea-107">Initialise une nouvelle instance de la classe <see cref="T:System.UnhandledExceptionEventArgs" /> avec l'objet exception et un indicateur de fin Common Language Runtime.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62aea-107">Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionObject">
      <MemberSignature Language="C#" Value="public object ExceptionObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionObject" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionObject : obj" Usage="System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62aea-108">Obtient l'objet exception non géré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62aea-108">Gets the unhandled exception object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62aea-109">Objet exception non géré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62aea-109">The unhandled exception object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62aea-110">Cette propriété retourne un objet de type <xref:System.Object> au lieu d’un dérivé <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="62aea-110">This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>.</span></span> <span data-ttu-id="62aea-111">Bien que le Common Language Specification nécessite que tous les types d’exceptions dérivent de <xref:System.Exception>, il est possible pour les méthodes de lever des exceptions avec des objets non dérivés de <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="62aea-111">Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>.</span></span> <span data-ttu-id="62aea-112">Vous pouvez effectuer les opérations suivantes pour travailler avec cette exception :</span><span class="sxs-lookup"><span data-stu-id="62aea-112">You can do the following to work with this exception:</span></span>  
  
-   <span data-ttu-id="62aea-113">Appliquer le <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribut avec un <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> valeur `true` à l’assembly qui contient le Gestionnaire d’événements.</span><span class="sxs-lookup"><span data-stu-id="62aea-113">Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> value of `true` to the assembly that contains the event handler.</span></span> <span data-ttu-id="62aea-114">Cela inclut toutes les exceptions non dérivées de la <xref:System.Exception> classe dans un <xref:System.Runtime.CompilerServices.RuntimeWrappedException> objet.</span><span class="sxs-lookup"><span data-stu-id="62aea-114">This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.</span></span> <span data-ttu-id="62aea-115">Vous pouvez sans risque un cast (en c#) ou convertir (en Visual Basic), l’objet retourné par cette propriété pour un <xref:System.Exception> de l’objet et récupérer l’objet exception d’origine à partir de la <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="62aea-115">You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="62aea-116">Notez que certains compilateurs, tels que les compilateurs c# et Visual Basic, appliquent automatiquement cet attribut.</span><span class="sxs-lookup"><span data-stu-id="62aea-116">Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</span></span>  
  
-   <span data-ttu-id="62aea-117">Effectuer un cast de l’objet retourné par cette propriété pour un <xref:System.Exception> objet.</span><span class="sxs-lookup"><span data-stu-id="62aea-117">Cast the object returned by this property to an <xref:System.Exception> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62aea-118">L’exemple suivant montre le <xref:System.AppDomain.UnhandledException> événement.</span><span class="sxs-lookup"><span data-stu-id="62aea-118">The following example demonstrates the <xref:System.AppDomain.UnhandledException> event.</span></span> <span data-ttu-id="62aea-119">Il définit un gestionnaire d’événements, `MyHandler`, qui est appelé chaque fois qu’une exception non gérée est levée dans le domaine d’application par défaut.</span><span class="sxs-lookup"><span data-stu-id="62aea-119">It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain.</span></span> <span data-ttu-id="62aea-120">Ensuite, elle génère deux exceptions.</span><span class="sxs-lookup"><span data-stu-id="62aea-120">It then throws two exceptions.</span></span> <span data-ttu-id="62aea-121">La première est gérée par un **try/catch** bloc.</span><span class="sxs-lookup"><span data-stu-id="62aea-121">The first is handled by a **try/catch** block.</span></span> <span data-ttu-id="62aea-122">La seconde n’est pas gérée et appelle le `MyHandle` routine avant que l’application se termine.</span><span class="sxs-lookup"><span data-stu-id="62aea-122">The second is unhandled and invokes the `MyHandle` routine before the application terminates.</span></span>  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool" Usage="System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62aea-123">Indique si le Common Language Runtime se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62aea-123">Indicates whether the common language runtime is terminating.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62aea-124">
            <see langword="true" /> si le runtime se termine ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62aea-124">
              <see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62aea-125">À compter de .NET Framework version 2.0, cette propriété retourne `true` pour la plupart des exceptions non gérées, sauf si un indicateur de compatibilité d’application est utilisé pour rétablir le comportement des versions 1.0 et 1.1.</span><span class="sxs-lookup"><span data-stu-id="62aea-125">Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</span></span> <span data-ttu-id="62aea-126">La raison est que plus les exceptions non gérées dans les threads, y compris les threads du pool, sont autorisées à poursuivre naturellement, ce qui entraîne généralement l’arrêt de l’application.</span><span class="sxs-lookup"><span data-stu-id="62aea-126">The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</span></span> <span data-ttu-id="62aea-127">Pour plus d’informations, notamment une liste de cas dans lequel le runtime ne se termine pas, consultez [Exceptions dans les Threads managés](~/docs/standard/threading/exceptions-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="62aea-127">For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="62aea-128">Informations sur la version</span><span class="sxs-lookup"><span data-stu-id="62aea-128">Version Information</span></span>  
 <span data-ttu-id="62aea-129">Ce qui suit s’applique pour les versions 1.0 et 1.1 du .NET Framework : cette propriété retourne `true` quand une exception est reçue dans, mais pas gérée par un thread d’application principal.</span><span class="sxs-lookup"><span data-stu-id="62aea-129">The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread.</span></span> <span data-ttu-id="62aea-130">Cette propriété retourne également `true` si un thread non managé exécute le code managé et reçoit une exception non gérée.</span><span class="sxs-lookup"><span data-stu-id="62aea-130">This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception.</span></span> <span data-ttu-id="62aea-131">Enfin, cette propriété retourne `false` pour les threads du pool et les threads managés créés par une application, car les versions 1.0 et 1.1 interceptent des exceptions non gérées dans de tels threads et les ignorent.</span><span class="sxs-lookup"><span data-stu-id="62aea-131">Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>