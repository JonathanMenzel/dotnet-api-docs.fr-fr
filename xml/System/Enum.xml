<Type Name="Enum" FullName="System.Enum">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4922a1d1b0f0515d3bff5e3792f8a607712d05b" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55328219" /></Metadata><TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="F#" Value="type Enum = class&#xA;    inherit ValueType&#xA;    interface IComparable&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="01886-101">Fournit la classe de base pour les énumérations.</span><span class="sxs-lookup"><span data-stu-id="01886-101">Provides the base class for enumerations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-102">Une énumération est un ensemble de constantes nommées dont le type sous-jacent est un type intégral.</span><span class="sxs-lookup"><span data-stu-id="01886-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="01886-103">Si aucun type sous-jacent n’est déclaré explicitement, <xref:System.Int32> est utilisé.</span><span class="sxs-lookup"><span data-stu-id="01886-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="01886-104"><xref:System.Enum> est la classe de base pour toutes les énumérations dans le .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="01886-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="01886-105">Les types énumération sont définis par le `enum` mot clé en c# et le `Enum`... `End Enum` construire en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="01886-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="01886-106"><xref:System.Enum> Fournit des méthodes pour comparer les instances de cette classe, convertir la valeur d’une instance en sa représentation sous forme de chaîne, convertir la représentation sous forme de chaîne d’un nombre en une instance de cette classe et créer une instance d’une énumération spécifiée et une valeur.</span><span class="sxs-lookup"><span data-stu-id="01886-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="01886-107">Vous pouvez également traiter une énumération comme un champ de bits.</span><span class="sxs-lookup"><span data-stu-id="01886-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="01886-108">Pour plus d’informations, consultez le [membres Non exclusifs et l’attribut Flags](#Flags) section et le <xref:System.FlagsAttribute> rubrique.</span><span class="sxs-lookup"><span data-stu-id="01886-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="01886-109">Dans cette rubrique :</span><span class="sxs-lookup"><span data-stu-id="01886-109">In this topic:</span></span>  
  
 <span data-ttu-id="01886-110">[Création d’un type énumération](#Creating) </span><span class="sxs-lookup"><span data-stu-id="01886-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="01886-111">[Instanciation d’un type d’énumération](#Instantiating) </span><span class="sxs-lookup"><span data-stu-id="01886-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="01886-112">[Meilleures pratiques d’énumération](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="01886-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="01886-113">[Exécution d’opérations avec des énumérations](#Operations) </span><span class="sxs-lookup"><span data-stu-id="01886-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="01886-114">Exécution de conversions</span><span class="sxs-lookup"><span data-stu-id="01886-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="01886-115">L’analyse des valeurs d’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="01886-116">Mise en forme des valeurs d’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="01886-117">Itération des membres de l’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="01886-118">Membres non exclusifs et l’attribut Flags</span><span class="sxs-lookup"><span data-stu-id="01886-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="01886-119">Ajout de méthodes d’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-119">Adding enumeration methods</span></span>](#Methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="01886-120">Création d’un type énumération</span><span class="sxs-lookup"><span data-stu-id="01886-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="01886-121">Langages de programmation fournissent généralement la syntaxe pour déclarer une énumération qui se compose d’un ensemble de constantes nommées et leurs valeurs.</span><span class="sxs-lookup"><span data-stu-id="01886-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="01886-122">L’exemple suivant illustre la syntaxe utilisée par c# et Visual Basic pour définir une énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="01886-123">Il crée une énumération nommée `ArrivalStatus` qui a trois membres : `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, et `ArrivalStatus.Late`.</span><span class="sxs-lookup"><span data-stu-id="01886-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="01886-124">Notez que dans les deux cas, l’énumération n’hérite pas explicitement de <xref:System.Enum>; la relation d’héritage est contrôlée implicitement par le compilateur.</span><span class="sxs-lookup"><span data-stu-id="01886-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="01886-125">Vous ne devez jamais créer un type d’énumération dont le type sous-jacent est non intégral ou <xref:System.Char>.</span><span class="sxs-lookup"><span data-stu-id="01886-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="01886-126">Bien que vous pouvez créer un tel type d’énumération en utilisant la réflexion, les appels de méthode qui utilisent le type résultant ne sont pas fiables et peuvent également lever des exceptions supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="01886-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="01886-127">Instanciation d’un type d’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="01886-128">Vous pouvez instancier un type d’énumération comme pour tout autre type de valeur : en déclarant une variable et en affectant l’une des constantes de l’énumération à celui-ci.</span><span class="sxs-lookup"><span data-stu-id="01886-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="01886-129">L’exemple suivant instancie un `ArrivalStatus` dont la valeur est `ArrivalStatus.OnTime`.</span><span class="sxs-lookup"><span data-stu-id="01886-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="01886-130">Vous pouvez également instancier une valeur d’énumération comme suit :</span><span class="sxs-lookup"><span data-stu-id="01886-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="01886-131">En utilisant les fonctionnalités d’un langage de programmation particulier pour effectuer un cast (comme dans c#) ou de convertir une valeur entière (comme dans Visual Basic) à une valeur d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="01886-132">L’exemple suivant crée un `ArrivalStatus` objet dont la valeur est `ArrivalStatus.Early` de cette façon.</span><span class="sxs-lookup"><span data-stu-id="01886-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="01886-133">En appelant son constructeur par défaut implicite.</span><span class="sxs-lookup"><span data-stu-id="01886-133">By calling its implicit default constructor.</span></span> <span data-ttu-id="01886-134">Comme le montre l’exemple suivant, dans ce cas la valeur sous-jacente de l’instance d’énumération est 0.</span><span class="sxs-lookup"><span data-stu-id="01886-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="01886-135">Toutefois, cela n’est pas nécessairement la valeur d’une constante valide dans l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="01886-136">En appelant le <xref:System.Enum.Parse%2A> ou <xref:System.Enum.TryParse%2A> méthode pour analyser une chaîne qui contient le nom d’une constante dans l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="01886-137">Pour plus d’informations, consultez le [l’analyse de valeurs d’énumération](#parsing) section.</span><span class="sxs-lookup"><span data-stu-id="01886-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="01886-138">En appelant le <xref:System.Enum.ToObject%2A> méthode pour convertir une valeur intégrale en un type d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="01886-139">Pour plus d’informations, consultez le [exécution de Conversions](#conversions) section.</span><span class="sxs-lookup"><span data-stu-id="01886-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="01886-140">Meilleures pratiques d’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-140">Enumeration best practices</span></span>  
 <span data-ttu-id="01886-141">Nous vous recommandons d’utiliser les meilleures pratiques suivantes lorsque vous définissez des types énumération :</span><span class="sxs-lookup"><span data-stu-id="01886-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="01886-142">Si vous n’avez pas défini un membre d’énumération dont la valeur est 0, envisagez de créer un `None` constante énumérée.</span><span class="sxs-lookup"><span data-stu-id="01886-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="01886-143">Par défaut, la mémoire utilisée pour l’énumération est initialisée à zéro par le common language runtime.</span><span class="sxs-lookup"><span data-stu-id="01886-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="01886-144">Par conséquent, si vous ne définissez pas une constante dont la valeur est égale à zéro, l’énumération contiendra une valeur non conforme lorsqu’il est créé.</span><span class="sxs-lookup"><span data-stu-id="01886-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="01886-145">S’il existe un cas par défaut évident que votre application doit représenter, envisagez d’utiliser une liste énumérée constante dont la valeur est zéro pour le représenter.</span><span class="sxs-lookup"><span data-stu-id="01886-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="01886-146">S’il n’existe aucun cas par défaut, envisagez d’utiliser une constante énumérée dont la valeur est égale à zéro pour spécifier le cas qui n’est pas représenté par une des autres constantes énumérées.</span><span class="sxs-lookup"><span data-stu-id="01886-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="01886-147">Ne spécifiez pas de constantes énumérées qui sont réservés pour une utilisation ultérieure.</span><span class="sxs-lookup"><span data-stu-id="01886-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="01886-148">Lorsque vous définissez une méthode ou propriété qui prend une constante énumérée en tant que valeur, songez à valider la valeur.</span><span class="sxs-lookup"><span data-stu-id="01886-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="01886-149">La raison est que vous pouvez convertir une valeur numérique pour le type d’énumération même si cette valeur numérique n’est pas définie dans l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="01886-150">Meilleures pratiques supplémentaires pour les types énumération dont les constantes sont des champs de bits sont répertoriées dans le [membres Non exclusifs et l’attribut Flags](#Flags) section.</span><span class="sxs-lookup"><span data-stu-id="01886-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="01886-151">Exécution d’opérations avec des énumérations</span><span class="sxs-lookup"><span data-stu-id="01886-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="01886-152">Vous ne pouvez pas définir de nouvelles méthodes lorsque vous créez une énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="01886-153">Toutefois, un type d’énumération hérite un ensemble complet de statique et les méthodes d’instance à partir de la <xref:System.Enum> classe.</span><span class="sxs-lookup"><span data-stu-id="01886-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="01886-154">Les sections suivantes de l’enquête la plupart de ces méthodes, en plus de nombreuses autres méthodes qui sont couramment utilisées lors de l’utilisation des valeurs d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="01886-155">Exécution de conversions</span><span class="sxs-lookup"><span data-stu-id="01886-155">Performing conversions</span></span>  
 <span data-ttu-id="01886-156">Vous pouvez convertir entre un membre d’énumération et son type sous-jacent à l’aide d’un cast (en c#) ou un opérateur de conversion (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="01886-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="01886-157">L’exemple suivant utilise les opérateurs de conversion pour effectuer des conversions d’un entier en une valeur d’énumération et à partir d’une valeur d’énumération à un entier.</span><span class="sxs-lookup"><span data-stu-id="01886-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="01886-158">Le <xref:System.Enum> classe inclut également un <xref:System.Enum.ToObject%2A> méthode qui convertit une valeur de n’importe quel type intégral en une valeur d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="01886-159">L’exemple suivant utilise le <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> méthode pour convertir un <xref:System.Int32> à un `ArrivalStatus` valeur.</span><span class="sxs-lookup"><span data-stu-id="01886-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="01886-160">Notez que, étant donné que le <xref:System.Enum.ToObject%2A> retourne une valeur de type <xref:System.Object>, l’utilisation d’un opérateur de conversion peut toujours être nécessaire d’effectuer un cast de l’objet pour le type d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="01886-161">Lors de la conversion d’un entier à une valeur d’énumération, il est possible d’affecter une valeur qui n’est pas réellement un membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="01886-162">Pour éviter ce problème, vous pouvez passer l’entier à la <xref:System.Enum.IsDefined%2A> méthode avant d’effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="01886-163">L’exemple suivant utilise cette méthode pour déterminer si les éléments dans un tableau de valeurs entières peuvent être convertis en `ArrivalStatus` valeurs.</span><span class="sxs-lookup"><span data-stu-id="01886-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="01886-164">Bien que le <xref:System.Enum> classe fournit des implémentations d’interface explicite de la <xref:System.IConvertible> interface pour la conversion à partir d’une valeur d’énumération en un type intégral, vous devez utiliser les méthodes de la <xref:System.Convert> classe, telle que <xref:System.Convert.ToInt32%2A>, à effectuer ces conversions.</span><span class="sxs-lookup"><span data-stu-id="01886-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="01886-165">L’exemple suivant illustre comment vous pouvez utiliser la <xref:System.Enum.GetUnderlyingType%2A> méthode avec le <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> méthode pour convertir une valeur d’énumération en son type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="01886-166">Notez que cet exemple ne requiert pas le type sous-jacent de l’énumération à être connu au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="01886-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="01886-167">L’analyse des valeurs d’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="01886-168">Le <xref:System.Enum.Parse%2A> et <xref:System.Enum.TryParse%2A> méthodes permettent de convertir la représentation sous forme de chaîne d’une valeur d’énumération de cette valeur.</span><span class="sxs-lookup"><span data-stu-id="01886-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="01886-169">La représentation sous forme de chaîne peut être le nom ou la valeur sous-jacente d’une constante d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="01886-170">Notez que les méthodes d’analyse convertit correctement les représentations sous forme de chaîne de nombres qui ne sont pas membres d’une énumération particulier si les chaînes peuvent être converties en valeur de type sous-jacent de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="01886-171">Pour éviter cela, le <xref:System.Enum.IsDefined%2A> méthode peut être appelée pour vous assurer que le résultat de la méthode d’analyse est une valeur d’énumération valide.</span><span class="sxs-lookup"><span data-stu-id="01886-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="01886-172">L’exemple illustre cette approche et montre les appels à la fois à la <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> et <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> méthodes.</span><span class="sxs-lookup"><span data-stu-id="01886-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="01886-173">Notez que la méthode d’analyse non générique retourne un objet que vous devrez peut-être effectuer un cast (en c#) ou convertissez (en Visual Basic) pour le type d’énumération appropriés.</span><span class="sxs-lookup"><span data-stu-id="01886-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="01886-174">Mise en forme des valeurs d’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="01886-175">Vous pouvez convertir des valeurs d’énumération à leurs représentations sous forme de chaîne en appelant la méthode statique <xref:System.Enum.Format%2A> (méthode), ainsi que les surcharges de l’instance <xref:System.Enum.ToString%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="01886-176">Vous pouvez utiliser une chaîne de format pour contrôler précisément le mode dans lequel une valeur d’énumération est représentée sous forme de chaîne.</span><span class="sxs-lookup"><span data-stu-id="01886-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="01886-177">Pour plus d’informations, consultez [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="01886-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="01886-178">L’exemple suivant utilise chacune des chaînes de format d’énumération prise en charge (« G » ou « g », « D » ou « d », « X » ou « x » et « F » ou « f ») pour convertir un membre de la `ArrivalStatus` énumération à ses représentations sous forme de chaîne.</span><span class="sxs-lookup"><span data-stu-id="01886-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="01886-179">Itération des membres de l’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="01886-180">Le <xref:System.Enum> type n’implémente pas le <xref:System.Collections.IEnumerable> ou <xref:System.Collections.Generic.IEnumerable%601> interface, ce qui vous permet de parcourir les membres d’une collection à l’aide un `foreach` (en c#) ou `For Each` (en Visual Basic) construire.</span><span class="sxs-lookup"><span data-stu-id="01886-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="01886-181">Toutefois, vous pouvez énumérer les membres de deux manières.</span><span class="sxs-lookup"><span data-stu-id="01886-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="01886-182">Vous pouvez appeler la <xref:System.Enum.GetNames%2A> méthode pour récupérer un tableau de chaînes contenant les noms des membres de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="01886-183">Ensuite, pour chaque élément du tableau de chaînes, vous pouvez appeler la <xref:System.Enum.Parse%2A> méthode pour convertir la chaîne à sa valeur d’énumération équivalente.</span><span class="sxs-lookup"><span data-stu-id="01886-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="01886-184">L'exemple suivant illustre cette approche.</span><span class="sxs-lookup"><span data-stu-id="01886-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="01886-185">Vous pouvez appeler la <xref:System.Enum.GetValues%2A> méthode pour récupérer un tableau qui contient le sous-jacent des valeurs dans l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="01886-186">Ensuite, pour chaque élément du tableau, vous pouvez appeler la <xref:System.Enum.ToObject%2A> méthode pour convertir l’entier en sa valeur d’énumération équivalente.</span><span class="sxs-lookup"><span data-stu-id="01886-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="01886-187">L'exemple suivant illustre cette approche.</span><span class="sxs-lookup"><span data-stu-id="01886-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="01886-188">Membres non exclusifs et l’attribut Flags</span><span class="sxs-lookup"><span data-stu-id="01886-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="01886-189">Une utilisation courante d’une énumération est pour représenter un ensemble de valeurs qui s’excluent mutuellement.</span><span class="sxs-lookup"><span data-stu-id="01886-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="01886-190">Par exemple, un `ArrivalStatus` instance peut avoir une valeur de `Early`, `OnTime`, ou `Late`.</span><span class="sxs-lookup"><span data-stu-id="01886-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="01886-191">Il n’a aucun sens pour la valeur d’un `ArrivalStatus` instance afin de refléter plus d’une constante d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="01886-192">Dans d’autres cas, toutefois, la valeur d’un objet d’énumération peut inclure plusieurs membres de l’énumération, et chaque membre représente un champ de bits dans la valeur d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="01886-193">Le <xref:System.FlagsAttribute> attribut peut être utilisé pour indiquer que l’énumération se compose de champs de bits.</span><span class="sxs-lookup"><span data-stu-id="01886-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="01886-194">Par exemple, une énumération nommée `Pets` peut être utilisé pour indiquer les types d’animaux domestiques dans un foyer.</span><span class="sxs-lookup"><span data-stu-id="01886-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="01886-195">Elle peut être définie comme suit.</span><span class="sxs-lookup"><span data-stu-id="01886-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="01886-196">Le `Pets` énumération peut ensuite être utilisée comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="01886-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="01886-197">Les meilleures pratiques suivantes doivent être utilisés lors de la définition d’une opération de bits énumération et en appliquant la <xref:System.FlagsAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="01886-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="01886-198">Utilisez le <xref:System.FlagsAttribute> attribut personnalisé pour une énumération uniquement si une opération au niveau du bit (AND, OR exclusif ou) doit être effectuée sur une valeur numérique.</span><span class="sxs-lookup"><span data-stu-id="01886-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="01886-199">Définir des constantes d’énumération à la puissance de deux, autrement dit, 1, 2, 4, 8 et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="01886-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="01886-200">Cela signifie que les indicateurs individuels dans les constantes d’énumération combinées ne se chevauchent pas.</span><span class="sxs-lookup"><span data-stu-id="01886-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="01886-201">Envisagez de créer une constante énumérée pour des combinaisons d’indicateurs couramment utilisées.</span><span class="sxs-lookup"><span data-stu-id="01886-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="01886-202">Par exemple, si vous avez une énumération utilisée pour les opérations d’e/s de fichier qui contient les constantes énumérées `Read = 1` et `Write = 2`, envisagez de créer la constante énumérée `ReadWrite = Read OR Write`, qui associe le `Read` et `Write` indicateurs.</span><span class="sxs-lookup"><span data-stu-id="01886-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="01886-203">En outre, l’opération OR au niveau du bit utilisée pour combiner les indicateurs peut-être être considérées comme un concept avancé dans certains cas ne doit pas être requis pour des tâches simples.</span><span class="sxs-lookup"><span data-stu-id="01886-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="01886-204">Soyez prudent si vous définissez un nombre négatif comme constante énumérée d’indicateur, car le nombre de positions indicateur peut être défini sur 1, ce qui peut rendre votre code source de confusion et erreurs de codage.</span><span class="sxs-lookup"><span data-stu-id="01886-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="01886-205">Un moyen pratique pour tester si un indicateur est défini dans une valeur numérique consiste à appeler l’instance <xref:System.Enum.HasFlag%2A> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="01886-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="01886-206">Il est équivalent à l’exécution d’une opération AND au niveau du bit entre la valeur numérique et la constante énumérée d’indicateur qui définit tous les bits dans la valeur numérique à zéro, qui ne correspondent pas à l’indicateur, et le test si le résultat de cette opération est égal à la constante énumérée d’indicateur.</span><span class="sxs-lookup"><span data-stu-id="01886-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="01886-207">L'exemple suivant illustre cette opération.</span><span class="sxs-lookup"><span data-stu-id="01886-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="01886-208">Utilisez `None` comme le nom de l’indicateur constante énumérée dont la valeur est zéro.</span><span class="sxs-lookup"><span data-stu-id="01886-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="01886-209">Vous ne pouvez pas utiliser le `None` constante énumérée dans une opération AND au niveau du bit pour tester un indicateur, car le résultat est toujours zéro.</span><span class="sxs-lookup"><span data-stu-id="01886-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="01886-210">Toutefois, vous pouvez effectuer un opérateur logique, pas au niveau du bit, comparez la valeur numérique et le `None` constante énumérée pour déterminer si des bits de la valeur numérique sont définis.</span><span class="sxs-lookup"><span data-stu-id="01886-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="01886-211">L'exemple suivant illustre cette opération.</span><span class="sxs-lookup"><span data-stu-id="01886-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="01886-212">Ne définissez pas une valeur d’énumération uniquement pour refléter l’état de l’énumération elle-même.</span><span class="sxs-lookup"><span data-stu-id="01886-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="01886-213">Par exemple, ne définissez pas une constante énumérée qui marque simplement la fin de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="01886-214">Si vous avez besoin déterminer la dernière valeur de l’énumération, recherchez cette valeur explicitement.</span><span class="sxs-lookup"><span data-stu-id="01886-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="01886-215">En outre, vous pouvez effectuer une vérification de plage pour la première et dernière constante énumérée si toutes les valeurs dans la plage sont valides.</span><span class="sxs-lookup"><span data-stu-id="01886-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="Methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="01886-216">Ajout de méthodes d’énumération</span><span class="sxs-lookup"><span data-stu-id="01886-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="01886-217">Étant donné que les types énumération sont définis par les structures de langage, tels que `enum` (c#) et `Enum` (Visual Basic), vous ne pouvez pas définir des méthodes personnalisées pour un type d’énumération autre que ces méthodes héritées de la <xref:System.Enum> classe.</span><span class="sxs-lookup"><span data-stu-id="01886-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="01886-218">Toutefois, vous pouvez utiliser les méthodes d’extension pour ajouter des fonctionnalités à un type particulier d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="01886-219">Dans l’exemple suivant, l’énumération `Grades` représente les notes qu’un étudiant peut obtenir dans une classe.</span><span class="sxs-lookup"><span data-stu-id="01886-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="01886-220">Une méthode d’extension nommée `Passing` est ajoutée au type `Grades` pour que chaque instance de ce type « sache » maintenant si elle représente une note au-dessus de la moyenne.</span><span class="sxs-lookup"><span data-stu-id="01886-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="01886-221">Le `Extensions` classe contient également une variable statique en lecture-écriture qui définit la note minimale.</span><span class="sxs-lookup"><span data-stu-id="01886-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="01886-222">La valeur de retour de la `Passing` méthode d’extension reflète la valeur actuelle de cette variable.</span><span class="sxs-lookup"><span data-stu-id="01886-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="01886-223">L’exemple suivant montre à l’aide d’une énumération pour représenter des valeurs nommées et une autre énumération pour représenter des champs de bits nommés.</span><span class="sxs-lookup"><span data-stu-id="01886-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="01886-224">Ce type est thread-safe.</span><span class="sxs-lookup"><span data-stu-id="01886-224">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01886-225">Initialise une nouvelle instance de la classe <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="enum.CompareTo target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="01886-226">Objet à comparer ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-226">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="01886-227">Compare cette instance à un objet spécifié et retourne une indication de leurs valeurs relatives.</span><span class="sxs-lookup"><span data-stu-id="01886-227">Compares this instance to a specified object and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="01886-228">Nombre signé qui indique les valeurs relatives de cette instance et de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="01886-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="01886-229">Value</span><span class="sxs-lookup"><span data-stu-id="01886-229">Value</span></span> 
 </term><description> <span data-ttu-id="01886-230">Signification</span><span class="sxs-lookup"><span data-stu-id="01886-230">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="01886-231">Inférieure à zéro</span><span class="sxs-lookup"><span data-stu-id="01886-231">Less than zero</span></span> 
 </term><description> <span data-ttu-id="01886-232">La valeur de cette instance est inférieure à la valeur de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="01886-232">The value of this instance is less than the value of <paramref name="target" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="01886-233">Zéro</span><span class="sxs-lookup"><span data-stu-id="01886-233">Zero</span></span> 
 </term><description> <span data-ttu-id="01886-234">La valeur de cette instance est égale à la valeur de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="01886-234">The value of this instance is equal to the value of <paramref name="target" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="01886-235">Supérieure à zéro</span><span class="sxs-lookup"><span data-stu-id="01886-235">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="01886-236">La valeur de cette instance est supérieure à la valeur de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="01886-236">The value of this instance is greater than the value of <paramref name="target" />.</span></span>  
  
<span data-ttu-id="01886-237">ou</span><span class="sxs-lookup"><span data-stu-id="01886-237">-or-</span></span> 
 <span data-ttu-id="01886-238"><paramref name="target" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-238"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="01886-239">L’exemple suivant illustre l’utilisation de `CompareTo` dans le contexte de `Enum`.</span><span class="sxs-lookup"><span data-stu-id="01886-239">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-240"><paramref name="target" /> et cette instance ne sont pas du même type.</span><span class="sxs-lookup"><span data-stu-id="01886-240"><paramref name="target" /> and this instance are not the same type.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01886-241">Cette instance n'est pas du type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> ni <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="01886-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="01886-242">Cette instance est null.</span><span class="sxs-lookup"><span data-stu-id="01886-242">This instance is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="enum.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="01886-243">Objet à comparer à cette instance ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-243">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="01886-244">Retourne une valeur indiquant si cette instance équivaut à un objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="01886-244">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="01886-245"><see langword="true" /> si <paramref name="obj" /> est une valeur d’énumération du même type et avec la même valeur sous-jacente que cette instance. Sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01886-245"><see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-246">Le <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> substitutions de méthode <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> pour définir comment les membres de l’énumération sont évaluées pour l’égalité.</span><span class="sxs-lookup"><span data-stu-id="01886-246">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-247">L'exemple suivant illustre l'utilisation de la méthode <xref:System.Enum.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="01886-247">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="01886-248">L’exemple suivant définit deux types d’énumération, `SledDog` et `WorkDog`.</span><span class="sxs-lookup"><span data-stu-id="01886-248">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="01886-249">Le `SledDog` énumération a deux membres, `SledDog.AlaskanMalamute` et `SledDog.Malamute`, qui ont la même valeur sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="01886-249">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="01886-250">L’appel à la <xref:System.Enum.Equals%2A> méthode indique que ces valeurs sont égales, car leurs valeurs sous-jacentes sont les mêmes.</span><span class="sxs-lookup"><span data-stu-id="01886-250">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="01886-251">Le `SledDog.Malamute` et `WorkDog.Newfoundland` membres ont la même valeur sous-jacente, bien qu’ils représentent des types différents d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-251">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="01886-252">Un appel à la <xref:System.Enum.Equals%2A> méthode indique que ces valeurs ne sont pas égales.</span><span class="sxs-lookup"><span data-stu-id="01886-252">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberSignature Language="F#" Value="static member Format : Type * obj * string -&gt; string" Usage="System.Enum.Format (enumType, value, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-253">Type d’énumération de la valeur à convertir.</span><span class="sxs-lookup"><span data-stu-id="01886-253">The enumeration type of the value to convert.</span></span></param>
        <param name="value"><span data-ttu-id="01886-254">Valeur à convertir.</span><span class="sxs-lookup"><span data-stu-id="01886-254">The value to convert.</span></span></param>
        <param name="format"><span data-ttu-id="01886-255">Format de sortie à utiliser.</span><span class="sxs-lookup"><span data-stu-id="01886-255">The output format to use.</span></span></param>
        <summary><span data-ttu-id="01886-256">Convertit la valeur spécifiée d'un type énuméré spécifié en sa représentation sous forme de chaîne équivalente conformément au format spécifié.</span><span class="sxs-lookup"><span data-stu-id="01886-256">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span></span></summary>
        <returns><span data-ttu-id="01886-257">Représentation sous forme de chaîne de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-257">A string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-258">Le tableau suivant indique les valeurs valides pour le `format` paramètre.</span><span class="sxs-lookup"><span data-stu-id="01886-258">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="01886-259">Format</span><span class="sxs-lookup"><span data-stu-id="01886-259">Format</span></span>|<span data-ttu-id="01886-260">Description </span><span class="sxs-lookup"><span data-stu-id="01886-260">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="01886-261">"G" ou "g"</span><span class="sxs-lookup"><span data-stu-id="01886-261">"G" or "g"</span></span>|<span data-ttu-id="01886-262">Si `value` est égal à une constante énumérée nommée, le nom de cette constante est retourné ; sinon, l’équivalent décimal de `value` est retourné.</span><span class="sxs-lookup"><span data-stu-id="01886-262">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="01886-263">Par exemple, supposons que la seule constante énumérée est nommée rouge et sa valeur est 1.</span><span class="sxs-lookup"><span data-stu-id="01886-263">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="01886-264">Si `value` est spécifiée comme 1, ce format retourne « Rouge ».</span><span class="sxs-lookup"><span data-stu-id="01886-264">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="01886-265">Toutefois, si `value` est spécifié comme 2, ce format retourne « 2 ».</span><span class="sxs-lookup"><span data-stu-id="01886-265">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="01886-266">ou</span><span class="sxs-lookup"><span data-stu-id="01886-266">-or-</span></span><br /><br /> <span data-ttu-id="01886-267">Si le <xref:System.FlagsAttribute> attribut personnalisé est appliqué à l’énumération, `value` est traité comme un champ de bits qui contient un ou plusieurs indicateurs comprenant un ou plusieurs bits.</span><span class="sxs-lookup"><span data-stu-id="01886-267">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="01886-268">Si `value` est égal à une combinaison de constantes énumérées nommée, une liste séparée par délimiteur des noms de ces constantes est retournée.</span><span class="sxs-lookup"><span data-stu-id="01886-268">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="01886-269">`value` indicateurs, allant de l’indicateur avec la plus grande valeur à la plus petite valeur est recherché.</span><span class="sxs-lookup"><span data-stu-id="01886-269">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="01886-270">Pour chaque indicateur correspondant à un champ de bits dans `value`, le nom de la constante est concaténé à la liste séparée par des délimiteurs.</span><span class="sxs-lookup"><span data-stu-id="01886-270">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="01886-271">La valeur de cet indicateur est ensuite plus prise en compte, et la recherche se poursuit pour l’indicateur suivant.</span><span class="sxs-lookup"><span data-stu-id="01886-271">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="01886-272">Si `value` n’est pas égal à une combinaison de constantes énumérées nommées, l’équivalent décimal de `value` est retourné.</span><span class="sxs-lookup"><span data-stu-id="01886-272">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="01886-273">"X" ou "x"</span><span class="sxs-lookup"><span data-stu-id="01886-273">"X" or "x"</span></span>|<span data-ttu-id="01886-274">Représente `value` au format hexadécimal sans « 0 x ».</span><span class="sxs-lookup"><span data-stu-id="01886-274">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="01886-275">"D" ou "d"</span><span class="sxs-lookup"><span data-stu-id="01886-275">"D" or "d"</span></span>|<span data-ttu-id="01886-276">Représente `value` sous forme décimale.</span><span class="sxs-lookup"><span data-stu-id="01886-276">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="01886-277">"F" ou "f"</span><span class="sxs-lookup"><span data-stu-id="01886-277">"F" or "f"</span></span>|<span data-ttu-id="01886-278">Se comporte comme « G » ou « g », à ceci près que le <xref:System.FlagsAttribute> n’est pas devant être présent sur le <xref:System.Enum> déclaration.</span><span class="sxs-lookup"><span data-stu-id="01886-278">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="01886-279">L’exemple suivant illustre l’utilisation de `Format` dans le contexte de `Enum`.</span><span class="sxs-lookup"><span data-stu-id="01886-279">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-280">Le paramètre <paramref name="enumType" />, <paramref name="value" /> ou <paramref name="format" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-280">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-281">Le paramètre <paramref name="enumType" /> n'est pas un type <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-281">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span></span>  
  
<span data-ttu-id="01886-282">ou</span><span class="sxs-lookup"><span data-stu-id="01886-282">-or-</span></span> 
<span data-ttu-id="01886-283">Le <paramref name="value" /> provient d’une énumération de type différent de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-283">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span></span>  
  
<span data-ttu-id="01886-284">ou</span><span class="sxs-lookup"><span data-stu-id="01886-284">-or-</span></span> 
<span data-ttu-id="01886-285">Le type de <paramref name="value" /> n’est pas un type sous-jacent de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-285">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="01886-286">Le paramètre <paramref name="format" /> contient une valeur non valide.</span><span class="sxs-lookup"><span data-stu-id="01886-286">The <paramref name="format" /> parameter contains an invalid value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01886-287"><paramref name="format" /> égale "X", mais le type d'énumération est inconnu.</span><span class="sxs-lookup"><span data-stu-id="01886-287"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="01886-288">Mettre en forme des types dans .NET</span><span class="sxs-lookup"><span data-stu-id="01886-288">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="01886-289">Chaînes de format d'énumération</span><span class="sxs-lookup"><span data-stu-id="01886-289">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="enum.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01886-290">Retourne le code de hachage de la valeur de cette instance.</span><span class="sxs-lookup"><span data-stu-id="01886-290">Returns the hash code for the value of this instance.</span></span></summary>
        <returns><span data-ttu-id="01886-291">Code de hachage d'un entier signé 32 bits.</span><span class="sxs-lookup"><span data-stu-id="01886-291">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member GetName : Type * obj -&gt; string" Usage="System.Enum.GetName (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-292">Type énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-292">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="01886-293">Valeur d’une constante énumérée qui a un type sous-jacent particulier.</span><span class="sxs-lookup"><span data-stu-id="01886-293">The value of a particular enumerated constant in terms of its underlying type.</span></span></param>
        <summary><span data-ttu-id="01886-294">Récupère le nom de la constante dans l'énumération spécifiée associée à la valeur spécifiée.</span><span class="sxs-lookup"><span data-stu-id="01886-294">Retrieves the name of the constant in the specified enumeration that has the specified value.</span></span></summary>
        <returns><span data-ttu-id="01886-295">Chaîne contenant le nom de la constante énumérée dans <paramref name="enumType" /> dont la valeur est <paramref name="value" />, ou <see langword="null" /> si aucune constante de ce type n'est trouvée.</span><span class="sxs-lookup"><span data-stu-id="01886-295">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-296">Si plusieurs membres d’énumération ont la même valeur sous-jacente, la <xref:System.Enum.GetName%2A> méthode garantit qu’elle retournera le nom de l’un de ces membres de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-296">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="01886-297">Toutefois, il ne garantit pas qu’elle retourne toujours le nom du même membre d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-297">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="01886-298">Par conséquent, lorsque plusieurs membres d’énumération ont la même valeur, votre code d’application doit jamais dépendre la méthode retournant le nom d’un membre particulier.</span><span class="sxs-lookup"><span data-stu-id="01886-298">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-299">L’exemple suivant illustre l’utilisation de `GetName`.</span><span class="sxs-lookup"><span data-stu-id="01886-299">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-300"><paramref name="enumType" /> ou <paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-300"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-301"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-301"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="01886-302">ou</span><span class="sxs-lookup"><span data-stu-id="01886-302">-or-</span></span> 
 <span data-ttu-id="01886-303"><paramref name="value" /> n’est pas de type <paramref name="enumType" /> et n’a pas le même type sous-jacent qu’<paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-303"><paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetNames : Type -&gt; string[]" Usage="System.Enum.GetNames enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-304">Type énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-304">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="01886-305">Récupère un tableau de noms des constantes dans une énumération spécifiée.</span><span class="sxs-lookup"><span data-stu-id="01886-305">Retrieves an array of the names of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="01886-306">Tableau de chaînes contenant les noms des constantes dans <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-306">A string array of the names of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-307">Les éléments du tableau de valeur de retour sont triés par les valeurs binaires des constantes énumérées (autrement dit, par leur grandeur non signé).</span><span class="sxs-lookup"><span data-stu-id="01886-307">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="01886-308">L’exemple suivant fournit affiche des informations sur le tableau retourné par la <xref:System.Enum.GetNames%2A> méthode pour une énumération qui inclut une valeur négative, zéro et une valeur positive.</span><span class="sxs-lookup"><span data-stu-id="01886-308">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="01886-309">S’il existe des constantes énumérées avec la même valeur, l’ordre de leurs noms correspondants n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="01886-309">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-310">L'exemple suivant illustre l'utilisation de la méthode <xref:System.Enum.GetNames%2A>.</span><span class="sxs-lookup"><span data-stu-id="01886-310">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-311"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-311"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-312">Le paramètre <paramref name="enumType" /> n’est pas un <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-312"><paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="enum.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01886-313">Retourne le code du type sous-jacent de ce membre d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-313">Returns the type code of the underlying type of this enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-314">Code du type sous-jacent de cette instance.</span><span class="sxs-lookup"><span data-stu-id="01886-314">The type code of the underlying type of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01886-315">Le type énumération est inconnu.</span><span class="sxs-lookup"><span data-stu-id="01886-315">The enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetUnderlyingType : Type -&gt; Type" Usage="System.Enum.GetUnderlyingType enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-316">Énumération dont le type sous-jacent sera récupéré.</span><span class="sxs-lookup"><span data-stu-id="01886-316">The enumeration whose underlying type will be retrieved.</span></span></param>
        <summary><span data-ttu-id="01886-317">Retourne le type sous-jacent de l'énumération spécifiée.</span><span class="sxs-lookup"><span data-stu-id="01886-317">Returns the underlying type of the specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="01886-318">Type sous-jacent de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-318">The underlying type of <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-319">Le <xref:System.Enum> structure permet des valeurs à représenter en tant que constantes nommées.</span><span class="sxs-lookup"><span data-stu-id="01886-319">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="01886-320">Le type de données des valeurs de l’énumération est connu en tant que son type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-320">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="01886-321">Par exemple, le type sous-jacent de la <xref:System.DayOfWeek> énumération, qui se compose des constantes qui représentent chaque jour de la semaine (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, et ainsi de suite), est <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="01886-321">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-322">L’exemple suivant appelle la <xref:System.Enum.GetUnderlyingType%2A> méthode pour afficher le type sous-jacent de certains membres de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-322">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-323"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-323"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-324"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-324"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetValues : Type -&gt; Array" Usage="System.Enum.GetValues enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-325">Type énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-325">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="01886-326">Récupère un tableau des valeurs des constantes dans une énumération spécifiée.</span><span class="sxs-lookup"><span data-stu-id="01886-326">Retrieves an array of the values of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="01886-327">Tableau qui contient les valeurs des constantes dans <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-327">An array that contains the values of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-328">Les éléments du tableau sont triés par les valeurs binaires des constantes d’énumération (autrement dit, par leur grandeur non signé).</span><span class="sxs-lookup"><span data-stu-id="01886-328">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="01886-329">L’exemple suivant affiche des informations sur le tableau retourné par la <xref:System.Enum.GetValues%2A> méthode pour une énumération qui inclut une valeur négative, zéro et une valeur positive.</span><span class="sxs-lookup"><span data-stu-id="01886-329">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="01886-330">Le <xref:System.Enum.GetValues%2A> méthode retourne un tableau qui contient une valeur pour chaque membre de la `enumType` énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-330">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="01886-331">Si plusieurs membres ont la même valeur, le tableau retourné inclut des valeurs en double.</span><span class="sxs-lookup"><span data-stu-id="01886-331">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="01886-332">Dans ce cas, en appelant le <xref:System.Enum.GetName%2A> méthode avec chaque valeur dans le tableau retourné ne restaure pas les noms uniques attribuées aux membres qui ont des valeurs en double.</span><span class="sxs-lookup"><span data-stu-id="01886-332">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="01886-333">Pour récupérer tous les noms des membres de l’énumération avec succès, appelez le <xref:System.Enum.GetNames%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-333">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="01886-334">Le <xref:System.Enum.GetValues%2A> méthode ne peut pas être appelée à l’aide de la réflexion dans un contexte de réflexion uniquement.</span><span class="sxs-lookup"><span data-stu-id="01886-334">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="01886-335">Au lieu de cela, vous pouvez récupérer la valeur de tous les membres de l’énumération à l’aide de la <xref:System.Type.GetFields%2A?displayProperty=nameWithType> méthode pour obtenir un tableau de <xref:System.Reflection.FieldInfo> les objets qui représentent les membres de l’énumération, puis appellent le <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> méthode sur chaque élément du tableau.</span><span class="sxs-lookup"><span data-stu-id="01886-335">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="01886-336">L’exemple suivant illustre cette technique.</span><span class="sxs-lookup"><span data-stu-id="01886-336">The following example illustrates this technique.</span></span> <span data-ttu-id="01886-337">Il requiert que vous définissez l’énumération suivante dans un assembly nommé Enumerations.dll :</span><span class="sxs-lookup"><span data-stu-id="01886-337">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="01886-338">L’assembly est chargé dans un contexte de réflexion uniquement, un <xref:System.Type> objet qui représente le `Pets` énumération est instanciée, un tableau de <xref:System.Reflection.FieldInfo> objets sont récupérées et les valeurs de champ sont affichées dans la console.</span><span class="sxs-lookup"><span data-stu-id="01886-338">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="01886-339">L’exemple suivant illustre l’utilisation de <xref:System.Enum.GetValues%2A>.</span><span class="sxs-lookup"><span data-stu-id="01886-339">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-340"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-340"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-341"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-341"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01886-342">La méthode est appelée par réflexion dans un contexte de réflexion uniquement</span><span class="sxs-lookup"><span data-stu-id="01886-342">The method is invoked by reflection in a reflection-only context,</span></span> 
<span data-ttu-id="01886-343">ou</span><span class="sxs-lookup"><span data-stu-id="01886-343">-or-</span></span> 
 <span data-ttu-id="01886-344"><paramref name="enumType" /> est un type issu d’un assembly chargé dans un contexte de réflexion uniquement.</span><span class="sxs-lookup"><span data-stu-id="01886-344"><paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberSignature Language="F#" Value="member this.HasFlag : Enum -&gt; bool" Usage="enum.HasFlag flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="01886-345">Valeur d'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-345">An enumeration value.</span></span></param>
        <summary><span data-ttu-id="01886-346">Détermine si un ou plusieurs champs de bits sont définis dans l'instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="01886-346">Determines whether one or more bit fields are set in the current instance.</span></span></summary>
        <returns><span data-ttu-id="01886-347"><see langword="true" /> si le ou les champs de bits définis dans <paramref name="flag" /> sont également définis dans l’instance actuelle ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01886-347"><see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-348">Le <xref:System.Enum.HasFlag%2A> méthode retourne le résultat de l’expression booléenne suivante.</span><span class="sxs-lookup"><span data-stu-id="01886-348">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="01886-349">Si la valeur sous-jacente de `flag` est égal à zéro, la méthode retourne `true`.</span><span class="sxs-lookup"><span data-stu-id="01886-349">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="01886-350">Si ce comportement n’est pas souhaitable, vous pouvez utiliser la <xref:System.Enum.Equals%2A> méthode pour tester l’égalité avec zéro et appelez <xref:System.Enum.HasFlag%2A> uniquement si la valeur sous-jacente de `flag` est différente de zéro, comme l’illustre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="01886-350">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="01886-351">Le <xref:System.Enum.HasFlag%2A> méthode est conçue pour être utilisée avec les types énumération marqués avec le <xref:System.FlagsAttribute> d’attribut et peut être utilisé pour déterminer si plusieurs champs de bits sont définis.</span><span class="sxs-lookup"><span data-stu-id="01886-351">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="01886-352">Pour les types d’énumération qui ne sont pas marqués avec le <xref:System.FlagsAttribute> attribut, appelez le <xref:System.Enum.Equals%2A> méthode ou le <xref:System.Enum.CompareTo%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-352">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-353">L’exemple suivant définit un `ItemsOrdered` énumération qui reflète les catégories d’articles un client peut commander dans un restaurant.</span><span class="sxs-lookup"><span data-stu-id="01886-353">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="01886-354">L’exemple vérifie si le client a commandé une entrée et une boisson.</span><span class="sxs-lookup"><span data-stu-id="01886-354">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-355"><paramref name="flag" /> est un type différent de l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="01886-355"><paramref name="flag" /> is a different type than the current instance.</span></span></exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member IsDefined : Type * obj -&gt; bool" Usage="System.Enum.IsDefined (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-356">Type énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-356">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="01886-357">Valeur ou nom d’une constante dans <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-357">The value or name of a constant in <paramref name="enumType" />.</span></span></param>
        <summary><span data-ttu-id="01886-358">Retourne un Boolean indiquant si une valeur intégrale donnée, ou son nom sous forme de chaîne, existe dans une énumération spécifiée.</span><span class="sxs-lookup"><span data-stu-id="01886-358">Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="01886-359"><see langword="true" /> si une constante dans <paramref name="enumType" /> a une valeur égale à <paramref name="value" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01886-359"><see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-360">Le `value` paramètre peut être une des opérations suivantes :</span><span class="sxs-lookup"><span data-stu-id="01886-360">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="01886-361">Tout membre de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-361">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="01886-362">Une variable dont la valeur est un membre d’énumération de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-362">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="01886-363">Représentation sous forme de chaîne du nom du membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-363">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="01886-364">Les caractères dans la chaîne doivent avoir la même casse que le nom de membre d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-364">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="01886-365">Une valeur du type sous-jacent de `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-365">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="01886-366">Si l’une des constantes dans `enumType` définir un ensemble de champs de bits et `value` contient les valeurs, les noms ou les valeurs sous-jacentes de plusieurs champs de bits, le <xref:System.Enum.IsDefined%2A> retourne de la méthode `false`.</span><span class="sxs-lookup"><span data-stu-id="01886-366">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="01886-367">En d’autres termes, pour les énumérations qui définissent un ensemble de champs de bits, la méthode détermine uniquement une si un champ de bits appartient à l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-367">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="01886-368">Pour déterminer si plusieurs champs de bits sont définis dans un type d’énumération qui est marqué avec le <xref:System.FlagsAttribute> attribut, vous pouvez appeler la <xref:System.Enum.HasFlag%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-368">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-369">L’exemple suivant définit une énumération nommée `PetType` qui se compose de champs de bits individuels.</span><span class="sxs-lookup"><span data-stu-id="01886-369">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="01886-370">Il appelle ensuite la <xref:System.Enum.IsDefined%2A> méthode avec sous-jacente des valeurs d’énumération, les noms de chaîne et les valeurs composites qui résultent de la définition de plusieurs champs de bits possible.</span><span class="sxs-lookup"><span data-stu-id="01886-370">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-371"><paramref name="enumType" /> ou <paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-371"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-372"><paramref name="enumType" /> n'est pas <see langword="Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-372"><paramref name="enumType" /> is not an <see langword="Enum" />.</span></span>  
  
<span data-ttu-id="01886-373">ou</span><span class="sxs-lookup"><span data-stu-id="01886-373">-or-</span></span> 
<span data-ttu-id="01886-374">Le type de <paramref name="value" /> est une énumération, mais il ne s’agit pas d’une énumération de type <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-374">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span></span>  
  
<span data-ttu-id="01886-375">ou</span><span class="sxs-lookup"><span data-stu-id="01886-375">-or-</span></span> 
<span data-ttu-id="01886-376">Le type de <paramref name="value" /> n’est pas un type sous-jacent de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-376">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01886-377"><paramref name="value" /> n’est pas du type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, <see cref="T:System.UInt64" /> ni <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="01886-377"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="01886-378">Si <paramref name="enumType" /> est une énumération qui est définie à l’aide de la <see cref="T:System.FlagsAttribute" /> d’attribut, la méthode retourne <see langword="false" /> si les champs de bits plusieurs dans <paramref name="value" /> sont définies, mais <paramref name="value" /> ne correspond pas à une valeur d’énumération composite, ou si <paramref name="value" /> est une concaténation de chaînes des noms de plusieurs bits indicateurs.</span><span class="sxs-lookup"><span data-stu-id="01886-378">If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags.</span></span> <span data-ttu-id="01886-379">Dans l’exemple suivant, un <c>Pets</c> énumération est définie avec la <see cref="T:System.FlagsAttribute" /> attribut.</span><span class="sxs-lookup"><span data-stu-id="01886-379">In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute.</span></span> <span data-ttu-id="01886-380">Le <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> retourne de la méthode <see langword="false" /> lorsque vous le passez une valeur d’énumération qui a deux champs de bits (<c>Pets.Dog</c> et <c>Pets.Cat</c>) définie, et lorsque vous lui passez la représentation sous forme de chaîne de ce valeur d’énumération (« chien, Chat »).</span><span class="sxs-lookup"><span data-stu-id="01886-380">The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</span></span>  
  
<span data-ttu-id="01886-381">[!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)] [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="01886-381">[!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)] [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]</span></span> 
<span data-ttu-id="01886-382">Vous pouvez déterminer si plusieurs champs de bits sont définis en appelant le <see cref="M:System.Enum.HasFlag(System.Enum)" /> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-382">You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</span></span></para></block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="01886-383">Convertit la représentation sous forme de chaîne du nom ou de la valeur numérique d'une ou de plusieurs constantes énumérées en objet énuméré équivalent.</span><span class="sxs-lookup"><span data-stu-id="01886-383">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string -&gt; obj" Usage="System.Enum.Parse (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-384">Type énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-384">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="01886-385">Chaîne contenant le nom ou la valeur à convertir.</span><span class="sxs-lookup"><span data-stu-id="01886-385">A string containing the name or value to convert.</span></span></param>
        <summary><span data-ttu-id="01886-386">Convertit la représentation sous forme de chaîne du nom ou de la valeur numérique d'une ou de plusieurs constantes énumérées en objet énuméré équivalent.</span><span class="sxs-lookup"><span data-stu-id="01886-386">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="01886-387">Objet de type <paramref name="enumType" /> dont la valeur est représentée par <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-387">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-388">Le `value` paramètre contient la représentation sous forme de chaîne d’un membre d’énumération valeur sous-jacent ou constante nommée ou une liste de constantes nommées délimitées par des virgules (,).</span><span class="sxs-lookup"><span data-stu-id="01886-388">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="01886-389">Un ou plusieurs espaces vides peuvent précéder ou suivre chaque valeur, le nom ou la virgule dans `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-389">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="01886-390">Si `value` est une liste, la valeur de retour est la valeur des noms spécifiés combinée avec une opération de bits `OR` opération.</span><span class="sxs-lookup"><span data-stu-id="01886-390">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="01886-391">Si `value` est un nom qui ne correspond pas à une constante nommée de `enumType`, la méthode lève un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="01886-391">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="01886-392">Si `value` est la représentation sous forme de chaîne d’un entier qui ne représente pas une valeur sous-jacente de la `enumType` énumération, la méthode retourne un membre d’énumération dont la valeur sous-jacente est `value` converti en un type intégral.</span><span class="sxs-lookup"><span data-stu-id="01886-392">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="01886-393">Si ce comportement est indésirable, appelez le <xref:System.Enum.IsDefined%2A> pour s’assurer qu’une représentation sous forme de chaîne particulière d’un entier est réellement membre `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-393">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="01886-394">L’exemple suivant définit un `Colors` énumération, appelle le <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> méthode pour convertir des chaînes à leurs valeurs d’énumération correspondantes et appelle le <xref:System.Enum.IsDefined%2A> pour s’assurer que les valeurs intégrales particuliers sont sous-jacent des valeurs dans le `Colors` énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-394">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="01886-395">Cette opération respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="01886-395">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-396">L’exemple suivant utilise le <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> méthode pour analyser un tableau de chaînes qui sont créés en appelant le <xref:System.Enum.GetNames%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-396">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="01886-397">Il utilise également le <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> méthode pour analyser une valeur d’énumération qui se compose d’un champ de bits.</span><span class="sxs-lookup"><span data-stu-id="01886-397">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-398"><paramref name="enumType" /> ou <paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-398"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-399"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-399"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="01886-400">ou</span><span class="sxs-lookup"><span data-stu-id="01886-400">-or-</span></span> 
 <span data-ttu-id="01886-401"><paramref name="value" /> est une chaîne vide ou contient uniquement des espaces blancs.</span><span class="sxs-lookup"><span data-stu-id="01886-401"><paramref name="value" /> is either an empty string or only contains white space.</span></span>  
  
<span data-ttu-id="01886-402">ou</span><span class="sxs-lookup"><span data-stu-id="01886-402">-or-</span></span> 
 <span data-ttu-id="01886-403"><paramref name="value" /> est un nom, mais celui-ci ne fait pas partie des constantes nommées définies pour l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-403"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="01886-404"><paramref name="value" /> est en dehors de la plage du type sous-jacent <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-404"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string * bool -&gt; obj" Usage="System.Enum.Parse (enumType, value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-405">Type énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-405">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="01886-406">Chaîne contenant le nom ou la valeur à convertir.</span><span class="sxs-lookup"><span data-stu-id="01886-406">A string containing the name or value to convert.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="01886-407"><see langword="true" /> pour ignorer la casse ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01886-407"><see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span></span></param>
        <summary><span data-ttu-id="01886-408">Convertit la représentation sous forme de chaîne du nom ou de la valeur numérique d'une ou de plusieurs constantes énumérées en objet énuméré équivalent.</span><span class="sxs-lookup"><span data-stu-id="01886-408">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="01886-409">Un paramètre spécifie si l'opération ne respecte pas la casse.</span><span class="sxs-lookup"><span data-stu-id="01886-409">A parameter specifies whether the operation is case-insensitive.</span></span></summary>
        <returns><span data-ttu-id="01886-410">Objet de type <paramref name="enumType" /> dont la valeur est représentée par <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-410">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-411">Le `value` paramètre contient la représentation sous forme de chaîne d’un membre d’énumération valeur sous-jacent ou constante nommée ou une liste de constantes nommées délimitées par des virgules (,).</span><span class="sxs-lookup"><span data-stu-id="01886-411">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="01886-412">Un ou plusieurs espaces vides peuvent précéder ou suivre chaque valeur, le nom ou la virgule dans `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-412">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="01886-413">Si `value` est une liste, la valeur de retour est la valeur des noms spécifiés combinée avec une opération de bits `OR` opération.</span><span class="sxs-lookup"><span data-stu-id="01886-413">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="01886-414">Si `value` est un nom qui ne correspond pas à une constante nommée de `enumType`, la méthode lève un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="01886-414">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="01886-415">Si `value` est la représentation sous forme de chaîne d’un entier qui ne représente pas une valeur sous-jacente de la `enumType` énumération, la méthode retourne un membre d’énumération dont la valeur sous-jacente est `value` converti en un type intégral.</span><span class="sxs-lookup"><span data-stu-id="01886-415">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="01886-416">Si ce comportement est indésirable, appelez le <xref:System.Enum.IsDefined%2A> pour s’assurer qu’une représentation sous forme de chaîne particulière d’un entier est réellement membre `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-416">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="01886-417">L’exemple suivant définit un `Colors` énumération, appelle le <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> méthode pour convertir des chaînes à leurs valeurs d’énumération correspondantes et appelle le <xref:System.Enum.IsDefined%2A> pour s’assurer que les valeurs intégrales particuliers sont sous-jacent des valeurs dans le `Colors` énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-417">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="01886-418">Le `ignoreCase` paramètre spécifie si cette opération respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="01886-418">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-419">L’exemple suivant utilise le <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> méthode pour analyser un tableau de chaînes qui sont créés en appelant le <xref:System.Enum.GetNames%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-419">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="01886-420">Il utilise également le <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> méthode pour analyser une valeur d’énumération qui se compose d’un champ de bits.</span><span class="sxs-lookup"><span data-stu-id="01886-420">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-421"><paramref name="enumType" /> ou <paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-421"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-422"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-422"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="01886-423">ou</span><span class="sxs-lookup"><span data-stu-id="01886-423">-or-</span></span> 
 <span data-ttu-id="01886-424"><paramref name="value" /> est une chaîne vide ("") ou contient uniquement des espaces blancs.</span><span class="sxs-lookup"><span data-stu-id="01886-424"><paramref name="value" /> is either an empty string ("") or only contains white space.</span></span>  
  
<span data-ttu-id="01886-425">ou</span><span class="sxs-lookup"><span data-stu-id="01886-425">-or-</span></span> 
 <span data-ttu-id="01886-426"><paramref name="value" /> est un nom, mais celui-ci ne fait pas partie des constantes nommées définies pour l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-426"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="01886-427"><paramref name="value" /> est en dehors de la plage du type sous-jacent <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="01886-427"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : string * bool -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse (value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-428">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-428">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-429">Convertit la valeur actuelle en valeur booléenne basée sur le type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-429">Converts the current value to a Boolean value based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-430">Ce membre lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-430">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-431">Non implémenté actuellement.</span><span class="sxs-lookup"><span data-stu-id="01886-431">Currently not implemented.</span></span> <span data-ttu-id="01886-432">Lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-432">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="01886-433">Dans tous les cas.</span><span class="sxs-lookup"><span data-stu-id="01886-433">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-434">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-434">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-435">Convertit la valeur actuelle en entier non signé 8 bits en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-435">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-436">Valeur convertie.</span><span class="sxs-lookup"><span data-stu-id="01886-436">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-437">Utilise <xref:System.Convert> pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-437">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-438">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-438">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-439">Convertit la valeur actuelle en caractère Unicode en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-439">Converts the current value to a Unicode character based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-440">Ce membre lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-440">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-441">Non implémenté actuellement.</span><span class="sxs-lookup"><span data-stu-id="01886-441">Currently not implemented.</span></span> <span data-ttu-id="01886-442">Lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-442">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="01886-443">Dans tous les cas.</span><span class="sxs-lookup"><span data-stu-id="01886-443">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-444">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-444">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-445">Convertit la valeur actuelle en <see cref="T:System.DateTime" /> basé sur le type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-445">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-446">Ce membre lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-446">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-447">Non implémenté actuellement.</span><span class="sxs-lookup"><span data-stu-id="01886-447">Currently not implemented.</span></span> <span data-ttu-id="01886-448">Lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-448">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="01886-449">Dans tous les cas.</span><span class="sxs-lookup"><span data-stu-id="01886-449">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-450">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-450">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-451">Convertit la valeur actuelle en <see cref="T:System.Decimal" /> basé sur le type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-451">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-452">Ce membre lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-452">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-453">Non implémenté actuellement.</span><span class="sxs-lookup"><span data-stu-id="01886-453">Currently not implemented.</span></span> <span data-ttu-id="01886-454">Lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-454">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="01886-455">Dans tous les cas.</span><span class="sxs-lookup"><span data-stu-id="01886-455">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-456">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-456">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-457">Convertit la valeur actuelle en nombre à virgule flottante double précision en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-457">Converts the current value to a double-precision floating point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-458">Ce membre lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-458">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-459">Non implémenté actuellement.</span><span class="sxs-lookup"><span data-stu-id="01886-459">Currently not implemented.</span></span> <span data-ttu-id="01886-460">Lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-460">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="01886-461">Dans tous les cas.</span><span class="sxs-lookup"><span data-stu-id="01886-461">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-462">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-462">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-463">Convertit la valeur actuelle en entier signé 16 bits en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-463">Converts the current value to a 16-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-464">Valeur convertie.</span><span class="sxs-lookup"><span data-stu-id="01886-464">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-465">Utilise <xref:System.Convert> pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-465">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-466">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-466">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-467">Convertit la valeur actuelle en entier signé 32 bits en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-467">Converts the current value to a 32-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-468">Valeur convertie.</span><span class="sxs-lookup"><span data-stu-id="01886-468">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-469">Utilise <xref:System.Convert> pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-469">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-470">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-470">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-471">Convertit la valeur actuelle en entier signé 64 bits en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-471">Converts the current value to a 64-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-472">Valeur convertie.</span><span class="sxs-lookup"><span data-stu-id="01886-472">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-473">Utilise <xref:System.Convert> pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-473">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-474">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-474">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-475">Convertit la valeur actuelle en entier signé 8 bits en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-475">Converts the current value to an 8-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-476">Valeur convertie.</span><span class="sxs-lookup"><span data-stu-id="01886-476">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-477">Utilise <xref:System.Convert> pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-477">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-478">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-478">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-479">Convertit la valeur actuelle en nombre à virgule flottante simple précision en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-479">Converts the current value to a single-precision floating-point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-480">Ce membre lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-480">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-481">Non implémenté actuellement.</span><span class="sxs-lookup"><span data-stu-id="01886-481">Currently not implemented.</span></span> <span data-ttu-id="01886-482">Lève toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="01886-482">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="01886-483">Dans tous les cas.</span><span class="sxs-lookup"><span data-stu-id="01886-483">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="01886-484">Type vers lequel effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-484">The type to convert to.</span></span></param>
        <param name="provider"><span data-ttu-id="01886-485">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-485">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-486">Convertit la valeur actuelle en type spécifié en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-486">Converts the current value to a specified type based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-487">Valeur convertie.</span><span class="sxs-lookup"><span data-stu-id="01886-487">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-488">Utilise <xref:System.Convert> pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-488">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-489">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-489">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-490">Convertit la valeur actuelle en entier non signé 16 bits en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-490">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-491">Valeur convertie.</span><span class="sxs-lookup"><span data-stu-id="01886-491">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-492">Utilise <xref:System.Convert> pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-492">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-493">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-493">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-494">Convertit la valeur actuelle en entier non signé 32 bits en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-494">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-495">Valeur convertie.</span><span class="sxs-lookup"><span data-stu-id="01886-495">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-496">Utilise <xref:System.Convert> pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-496">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-497">Objet qui fournit des informations de mise en forme propres à la culture.</span><span class="sxs-lookup"><span data-stu-id="01886-497">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="01886-498">Convertit la valeur actuelle en entier non signé 64 bits en fonction du type sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="01886-498">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="01886-499">Valeur convertie.</span><span class="sxs-lookup"><span data-stu-id="01886-499">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-500">Utilise <xref:System.Convert> pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="01886-500">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="01886-501">Spécification de format.</span><span class="sxs-lookup"><span data-stu-id="01886-501">A format specification.</span></span></param>
        <param name="provider">To be added.</param>
        <summary><span data-ttu-id="01886-502">Cette surcharge de méthode est obsolète ; utilisez <see cref="M:System.Enum.ToString(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="01886-502">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="01886-503">Représentation sous forme de chaîne de la valeur de cette instance, comme indiqué par <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="01886-503">The string representation of the value of this instance, as specified by <paramref name="format" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="01886-504"><paramref name="format" /> ne contient pas une spécification de format valide.</span><span class="sxs-lookup"><span data-stu-id="01886-504"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01886-505"><paramref name="format" /> égale "X", mais le type d'énumération est inconnu.</span><span class="sxs-lookup"><span data-stu-id="01886-505"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="01886-506">Convertit la valeur d'un entier spécifié en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-506">Converts a specified integer value to an enumeration member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * byte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-507">Type énumération à retourner.</span><span class="sxs-lookup"><span data-stu-id="01886-507">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="01886-508">Valeur à convertir en membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-508">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="01886-509">Convertit l'entier non signé 8 bits spécifié en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-509">Converts the specified 8-bit unsigned integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-510">Instance de l'énumération définie à <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-510">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-511">Le <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> méthode convertit `value` à un membre d’énumération dont la valeur sous-jacente est `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-511">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="01886-512">Notez que la conversion réussit même si la valeur est en dehors des limites de `enumType` membres.</span><span class="sxs-lookup"><span data-stu-id="01886-512">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="01886-513">Pour vous assurer que `value` est une valeur sous-jacente valide de la `enumType` énumération, passez-la à la <xref:System.Enum.IsDefined%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-513">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="01886-514">Cette méthode de conversion retourne une valeur de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="01886-514">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="01886-515">Vous pouvez ensuite effectuer un cast ou convertir en un objet de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-515">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-516"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-516"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-517"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-517"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-518">Type énumération à retourner.</span><span class="sxs-lookup"><span data-stu-id="01886-518">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="01886-519">Valeur à convertir en membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-519">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="01886-520">Convertit l'entier signé 16 bits spécifié en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-520">Converts the specified 16-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-521">Instance de l'énumération définie à <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-521">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-522">Le <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> méthode convertit `value` à un membre d’énumération dont la valeur sous-jacente est `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-522">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="01886-523">Notez que la conversion réussit même si la valeur est en dehors des limites de `enumType` membres.</span><span class="sxs-lookup"><span data-stu-id="01886-523">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="01886-524">Pour vous assurer que `value` est une valeur sous-jacente valide de la `enumType` énumération, passez-la à la <xref:System.Enum.IsDefined%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-524">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="01886-525">Cette méthode de conversion retourne une valeur de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="01886-525">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="01886-526">Vous pouvez ensuite effectuer un cast ou convertir en un objet de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-526">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-527"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-527"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-528"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-528"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-529">Type énumération à retourner.</span><span class="sxs-lookup"><span data-stu-id="01886-529">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="01886-530">Valeur à convertir en membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-530">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="01886-531">Convertit l'entier signé 32 bits spécifié en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-531">Converts the specified 32-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-532">Instance de l'énumération définie à <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-532">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-533">Le <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> méthode convertit `value` à un membre d’énumération dont la valeur sous-jacente est `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-533">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="01886-534">Notez que la conversion réussit même si la valeur est en dehors des limites de `enumType` membres.</span><span class="sxs-lookup"><span data-stu-id="01886-534">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="01886-535">Pour vous assurer que `value` est une valeur sous-jacente valide de la `enumType` énumération, passez-la à la <xref:System.Enum.IsDefined%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-535">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="01886-536">Cette méthode de conversion retourne une valeur de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="01886-536">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="01886-537">Vous pouvez ensuite effectuer un cast ou convertir en un objet de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-537">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-538"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-538"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-539"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-539"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-540">Type énumération à retourner.</span><span class="sxs-lookup"><span data-stu-id="01886-540">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="01886-541">Valeur à convertir en membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-541">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="01886-542">Convertit l'entier signé 64 bits spécifié en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-542">Converts the specified 64-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-543">Instance de l'énumération définie à <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-543">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-544">Le <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> méthode convertit `value` à un membre d’énumération dont la valeur sous-jacente est `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-544">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="01886-545">Notez que la conversion réussit même si la valeur est en dehors des limites de `enumType` membres.</span><span class="sxs-lookup"><span data-stu-id="01886-545">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="01886-546">Pour vous assurer que `value` est une valeur sous-jacente valide de la `enumType` énumération, passez-la à la <xref:System.Enum.IsDefined%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-546">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="01886-547">Cette méthode de conversion retourne une valeur de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="01886-547">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="01886-548">Vous pouvez ensuite effectuer un cast ou convertir en un objet de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-548">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-549"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-549"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-550"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-550"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * obj -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-551">Type énumération à retourner.</span><span class="sxs-lookup"><span data-stu-id="01886-551">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="01886-552">Valeur à convertir en membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-552">The value convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="01886-553">Convertit l'objet spécifié avec une valeur entière en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-553">Converts the specified object with an integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-554">Objet d'énumération dont la valeur est <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-554">An enumeration object whose value is <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-555">Le <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> méthode convertit la valeur intégrale `value` à un membre d’énumération dont la valeur sous-jacente est `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-555">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="01886-556">Notez que la conversion réussit même si la valeur est en dehors des limites de `enumType` membres.</span><span class="sxs-lookup"><span data-stu-id="01886-556">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="01886-557">Pour vous assurer que `value` est une valeur sous-jacente valide de la `enumType` énumération, passez-la à la <xref:System.Enum.IsDefined%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-557">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="01886-558">Cette méthode de conversion retourne une valeur de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="01886-558">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="01886-559">Vous pouvez ensuite effectuer un cast ou convertir en un objet de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-559">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-560"><paramref name="enumType" /> ou <paramref name="value" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-560"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-561"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-561"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="01886-562">ou</span><span class="sxs-lookup"><span data-stu-id="01886-562">-or-</span></span> 
 <span data-ttu-id="01886-563"><paramref name="value" /> n’est pas du type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> ou <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="01886-563"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * sbyte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-564">Type énumération à retourner.</span><span class="sxs-lookup"><span data-stu-id="01886-564">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="01886-565">Valeur à convertir en membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-565">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="01886-566">Convertit la valeur de l'entier signé 8 bits spécifié en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-566">Converts the specified 8-bit signed integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-567">Instance de l'énumération définie à <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-567">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-568">Le <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> méthode convertit `value` à un membre d’énumération dont la valeur sous-jacente est `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-568">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="01886-569">Notez que la conversion réussit même si la valeur est en dehors des limites de `enumType` membres.</span><span class="sxs-lookup"><span data-stu-id="01886-569">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="01886-570">Pour vous assurer que `value` est une valeur sous-jacente valide de la `enumType` énumération, passez-la à la <xref:System.Enum.IsDefined%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-570">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="01886-571">Cette méthode de conversion retourne une valeur de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="01886-571">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="01886-572">Vous pouvez ensuite effectuer un cast ou convertir en un objet de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-572">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-573"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-573"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-574"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-574"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-575">Type énumération à retourner.</span><span class="sxs-lookup"><span data-stu-id="01886-575">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="01886-576">Valeur à convertir en membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-576">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="01886-577">Convertit la valeur de l'entier non signé 16 bits spécifié en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-577">Converts the specified 16-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-578">Instance de l'énumération définie à <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-578">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-579">Le <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> méthode convertit `value` à un membre d’énumération dont la valeur sous-jacente est `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-579">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="01886-580">Notez que la conversion réussit même si la valeur est en dehors des limites de `enumType` membres.</span><span class="sxs-lookup"><span data-stu-id="01886-580">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="01886-581">Pour vous assurer que `value` est une valeur sous-jacente valide de la `enumType` énumération, passez-la à la <xref:System.Enum.IsDefined%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-581">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="01886-582">Cette méthode de conversion retourne une valeur de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="01886-582">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="01886-583">Vous pouvez ensuite effectuer un cast ou convertir en un objet de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-583">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-584"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-584"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-585"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-585"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint32 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-586">Type énumération à retourner.</span><span class="sxs-lookup"><span data-stu-id="01886-586">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="01886-587">Valeur à convertir en membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-587">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="01886-588">Convertit la valeur de l'entier non signé 32 bits spécifié en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-588">Converts the specified 32-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-589">Instance de l'énumération définie à <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-589">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-590">Le <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> méthode convertit `value` à un membre d’énumération dont la valeur sous-jacente est `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-590">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="01886-591">Notez que la conversion réussit même si la valeur est en dehors des limites de `enumType` membres.</span><span class="sxs-lookup"><span data-stu-id="01886-591">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="01886-592">Pour vous assurer que `value` est une valeur sous-jacente valide de la `enumType` énumération, passez-la à la <xref:System.Enum.IsDefined%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-592">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="01886-593">Cette méthode de conversion retourne une valeur de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="01886-593">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="01886-594">Vous pouvez ensuite effectuer un cast ou convertir en un objet de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-594">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-595"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-595"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-596"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-596"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="01886-597">Type énumération à retourner.</span><span class="sxs-lookup"><span data-stu-id="01886-597">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="01886-598">Valeur à convertir en membre de l’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-598">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="01886-599">Convertit la valeur de l'entier non signé 64 bits spécifié en membre de l'énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-599">Converts the specified 64-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="01886-600">Instance de l'énumération définie à <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-600">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-601">Le <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> méthode convertit `value` à un membre d’énumération dont la valeur sous-jacente est `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-601">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="01886-602">Notez que la conversion réussit même si la valeur est en dehors des limites de `enumType` membres.</span><span class="sxs-lookup"><span data-stu-id="01886-602">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="01886-603">Pour vous assurer que `value` est une valeur sous-jacente valide de la `enumType` énumération, passez-la à la <xref:System.Enum.IsDefined%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="01886-603">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="01886-604">Cette méthode de conversion retourne une valeur de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="01886-604">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="01886-605">Vous pouvez ensuite effectuer un cast ou convertir en un objet de type `enumType`.</span><span class="sxs-lookup"><span data-stu-id="01886-605">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01886-606"><paramref name="enumType" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="01886-606"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-607"><paramref name="enumType" /> n'est pas <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="01886-607"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="01886-608">Convertit la valeur de cette instance en sa représentation sous forme de chaîne équivalente.</span><span class="sxs-lookup"><span data-stu-id="01886-608">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="01886-609">Chaînes de format d'énumération</span><span class="sxs-lookup"><span data-stu-id="01886-609">Enumeration Format Strings</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="enum.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01886-610">Convertit la valeur de cette instance en sa représentation sous forme de chaîne équivalente.</span><span class="sxs-lookup"><span data-stu-id="01886-610">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="01886-611">Représentation sous forme de chaîne de la valeur de cette instance.</span><span class="sxs-lookup"><span data-stu-id="01886-611">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-612">La valeur de retour est mis en forme avec le spécificateur de format général (« G »).</span><span class="sxs-lookup"><span data-stu-id="01886-612">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="01886-613">Autrement dit, si le <xref:System.FlagsAttribute> n’est pas appliqué à ce type énuméré est une constante nommée égale à la valeur de cette instance, puis la valeur de retour est une chaîne contenant le nom de la constante.</span><span class="sxs-lookup"><span data-stu-id="01886-613">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="01886-614">Si le <xref:System.FlagsAttribute> est appliqué et il est une combinaison d’un ou plusieurs des constantes nommées égale à la valeur de cette instance, la valeur de retour est une chaîne contenant une liste séparée par délimiteur des noms des constantes.</span><span class="sxs-lookup"><span data-stu-id="01886-614">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="01886-615">Sinon, la valeur de retour est la représentation sous forme de chaîne de la valeur numérique de cette instance.</span><span class="sxs-lookup"><span data-stu-id="01886-615">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="01886-616">Pour plus d’informations sur les valeurs d’énumération mise en forme, consultez [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="01886-616">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="01886-617">Pour plus d’informations sur la mise en forme en général, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="01886-617">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-618">L’exemple suivant illustre la conversion d’une valeur énumérée en chaîne.</span><span class="sxs-lookup"><span data-stu-id="01886-618">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="01886-619">Si plusieurs membres d’énumération ont la même valeur sous-jacente et que vous tentez de récupérer la représentation de chaîne du nom d’un membre d’énumération selon sa valeur sous-jacente, votre code ne doit pas faire d’hypothèses sur le nom que la méthode est retournée.</span><span class="sxs-lookup"><span data-stu-id="01886-619">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="01886-620">Par exemple, l’énumération suivante définit deux membres, <c>Shade.Gray</c> et <c>Shade.Grey</c>, qui ont la même valeur sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="01886-620">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
<span data-ttu-id="01886-621">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span><span class="sxs-lookup"><span data-stu-id="01886-621">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span></span> 
<span data-ttu-id="01886-622">L’appel de méthode suivant tente de récupérer le nom d’un membre de la <c>Shade</c> énumération dont la valeur sous-jacente est 1.</span><span class="sxs-lookup"><span data-stu-id="01886-622">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="01886-623">La méthode peut retourner « Gray » ou « Grey », et votre code ne doit pas faire d’hypothèses sur lequel la chaîne sera retournée.</span><span class="sxs-lookup"><span data-stu-id="01886-623">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
<span data-ttu-id="01886-624">[!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)] [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="01886-624">[!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)] [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</span></span></para></block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="enum.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="01886-625">(obsolète)</span><span class="sxs-lookup"><span data-stu-id="01886-625">(obsolete)</span></span></param>
        <summary><span data-ttu-id="01886-626">Cette surcharge de méthode est obsolète ; utilisez <see cref="M:System.Enum.ToString" />.</span><span class="sxs-lookup"><span data-stu-id="01886-626">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span></span></summary>
        <returns><span data-ttu-id="01886-627">Représentation sous forme de chaîne de la valeur de cette instance.</span><span class="sxs-lookup"><span data-stu-id="01886-627">The string representation of the value of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="enum.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="01886-628">Chaîne de format.</span><span class="sxs-lookup"><span data-stu-id="01886-628">A format string.</span></span></param>
        <summary><span data-ttu-id="01886-629">Convertit la valeur de cette instance en sa représentation sous forme de chaîne équivalente à l'aide du format spécifié.</span><span class="sxs-lookup"><span data-stu-id="01886-629">Converts the value of this instance to its equivalent string representation using the specified format.</span></span></summary>
        <returns><span data-ttu-id="01886-630">Représentation sous forme de chaîne de la valeur de cette instance, comme indiqué par <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="01886-630">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-631">Le `format` paramètre peut prendre l’une des chaînes de format suivantes : « G » ou « g », « D » ou « d », « X » ou « x » et « F » ou « f » (la chaîne de format ne respecte pas la casse).</span><span class="sxs-lookup"><span data-stu-id="01886-631">The `format` parameter can be one of the following format strings: "G" or "g", "D" or "d", "X" or "x", and "F" or "f" (the format string is not case-sensitive).</span></span> <span data-ttu-id="01886-632">Si `format` est `null` ou une chaîne vide (" »), le spécificateur de format général (« G ») est utilisé.</span><span class="sxs-lookup"><span data-stu-id="01886-632">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="01886-633">Pour plus d’informations sur les chaînes de format d’énumération et les valeurs d’énumération mise en forme, consultez [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="01886-633">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="01886-634">Pour plus d’informations sur la mise en forme en général, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="01886-634">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-635">L’exemple suivant montre comment convertir une valeur énumérée en chaîne.</span><span class="sxs-lookup"><span data-stu-id="01886-635">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="01886-636"><paramref name="format" /> contient une spécification non valide.</span><span class="sxs-lookup"><span data-stu-id="01886-636"><paramref name="format" /> contains an invalid specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01886-637"><paramref name="format" /> égale "X", mais le type d'énumération est inconnu.</span><span class="sxs-lookup"><span data-stu-id="01886-637"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="01886-638">Si plusieurs membres d’énumération ont la même valeur sous-jacente et que vous tentez de récupérer la représentation de chaîne du nom d’un membre d’énumération selon sa valeur sous-jacente, votre code ne doit pas faire d’hypothèses sur le nom que la méthode est retournée.</span><span class="sxs-lookup"><span data-stu-id="01886-638">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="01886-639">Par exemple, l’énumération suivante définit deux membres, <c>Shade.Gray</c> et <c>Shade.Grey</c>, qui ont la même valeur sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="01886-639">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
<span data-ttu-id="01886-640">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span><span class="sxs-lookup"><span data-stu-id="01886-640">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span></span> 
<span data-ttu-id="01886-641">L’appel de méthode suivant tente de récupérer le nom d’un membre de la <c>Shade</c> énumération dont la valeur sous-jacente est 1.</span><span class="sxs-lookup"><span data-stu-id="01886-641">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="01886-642">La méthode peut retourner « Gray » ou « Grey », et votre code ne doit pas faire d’hypothèses sur lequel la chaîne sera retournée.</span><span class="sxs-lookup"><span data-stu-id="01886-642">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
<span data-ttu-id="01886-643">[!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)] [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</span><span class="sxs-lookup"><span data-stu-id="01886-643">[!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)] [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</span></span></para></block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="01886-644">Mettre en forme des types dans .NET</span><span class="sxs-lookup"><span data-stu-id="01886-644">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="01886-645">Chaînes de format d'énumération</span><span class="sxs-lookup"><span data-stu-id="01886-645">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="enum.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="01886-646">Spécification de format.</span><span class="sxs-lookup"><span data-stu-id="01886-646">A format specification.</span></span></param>
        <param name="provider"><span data-ttu-id="01886-647">(Obsolète.)</span><span class="sxs-lookup"><span data-stu-id="01886-647">(Obsolete.)</span></span></param>
        <summary><span data-ttu-id="01886-648">Cette surcharge de méthode est obsolète ; utilisez <see cref="M:System.Enum.ToString(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="01886-648">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="01886-649">Représentation sous forme de chaîne de la valeur de cette instance, comme indiqué par <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="01886-649">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-650">Le `format` paramètre peut prendre l’une des chaînes de format suivantes : « G » ou « g », « D » ou « d », « X » ou « x » et « F » ou « f » (la chaîne de format ne respecte pas la casse).</span><span class="sxs-lookup"><span data-stu-id="01886-650">The `format` parameter can be one of the following format strings: "G" or "g", "D" or "d", "X" or "x", and "F" or "f" (the format string is not case-sensitive).</span></span> <span data-ttu-id="01886-651">Si `format` est `null` ou une chaîne vide (" »), le spécificateur de format général (« G ») est utilisé.</span><span class="sxs-lookup"><span data-stu-id="01886-651">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="01886-652">Pour plus d’informations sur les chaînes de format d’énumération et les valeurs d’énumération mise en forme, consultez [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="01886-652">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="01886-653">Pour plus d’informations sur la mise en forme en général, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="01886-653">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="01886-654">Spécifiez uniquement `format`; le `provider` paramètre est obsolète.</span><span class="sxs-lookup"><span data-stu-id="01886-654">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="01886-655"><paramref name="format" /> ne contient pas une spécification de format valide.</span><span class="sxs-lookup"><span data-stu-id="01886-655"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01886-656"><paramref name="format" /> égale "X", mais le type d'énumération est inconnu.</span><span class="sxs-lookup"><span data-stu-id="01886-656"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="01886-657">Mettre en forme des types dans .NET</span><span class="sxs-lookup"><span data-stu-id="01886-657">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="01886-658">Chaînes de format d'énumération</span><span class="sxs-lookup"><span data-stu-id="01886-658">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="01886-659">Convertit la représentation sous forme de chaîne du nom ou de la valeur numérique d'une ou de plusieurs constantes énumérées en objet énuméré équivalent.</span><span class="sxs-lookup"><span data-stu-id="01886-659">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="01886-660">La valeur de retour indique si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="01886-660">The return value indicates whether the conversion succeeded.</span></span></summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string *  -&gt; bool" Usage="System.Enum.TryParse (enumType, value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string * bool *  -&gt; bool" Usage="System.Enum.TryParse (enumType, value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="TEnum" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="01886-661">Type d’énumération vers lequel convertir <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-661">The enumeration type to which to convert <paramref name="value" />.</span></span></typeparam>
        <param name="value"><span data-ttu-id="01886-662">Représentation sous forme de chaîne respectant la casse du nom de l’énumération ou de la valeur sous-jacente à convertir.</span><span class="sxs-lookup"><span data-stu-id="01886-662">The case-sensitive string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="result"><span data-ttu-id="01886-663">Quand cette méthode est retournée, <paramref name="result" /> contient un objet du type <c>TEnum</c> dont la valeur est représentée par <paramref name="value" /> si l’opération d’analyse s’effectue correctement.</span><span class="sxs-lookup"><span data-stu-id="01886-663">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds.</span></span> <span data-ttu-id="01886-664">Si l’opération d’analyse échoue, <paramref name="result" /> contient la valeur par défaut du type sous-jacent de <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="01886-664">If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="01886-665">Notez que cette valeur n’a pas besoin d’être membre de l’énumération <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="01886-665">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="01886-666">Ce paramètre est passé sans être initialisé.</span><span class="sxs-lookup"><span data-stu-id="01886-666">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="01886-667">Convertit la représentation sous forme de chaîne du nom ou de la valeur numérique d'une ou de plusieurs constantes énumérées en objet énuméré équivalent.</span><span class="sxs-lookup"><span data-stu-id="01886-667">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="01886-668">La valeur de retour indique si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="01886-668">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="01886-669"><see langword="true" /> si la conversion du paramètre <paramref name="value" /> a réussi ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01886-669"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-670"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> est identique à la <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> (méthode), à ceci près qu’au lieu de lever une exception, elle retourne `false` si la conversion échoue.</span><span class="sxs-lookup"><span data-stu-id="01886-670"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="01886-671">Il élimine la nécessité pour la gestion des exceptions lors de l’analyse de la représentation sous forme de chaîne d’une valeur d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-671">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="01886-672">Le `value` paramètre contient la représentation sous forme de chaîne d’un membre d’énumération valeur sous-jacent ou constante nommée ou une liste de constantes nommées ou valeurs sous-jacentes délimitées par des virgules (,).</span><span class="sxs-lookup"><span data-stu-id="01886-672">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="01886-673">Si `value` comprend plusieurs constantes ou valeurs nommées, un ou plusieurs espaces vides peuvent précéder ou suivre chaque valeur, le nom ou la virgule dans `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-673">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="01886-674">Si `value` est une liste, `result` reflète la valeur des noms spécifiés ou combinées avec une opération de bits des valeurs sous-jacentes `OR` opération.</span><span class="sxs-lookup"><span data-stu-id="01886-674">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="01886-675">Si `value` est la représentation sous forme de chaîne du nom d’une valeur d’énumération, la comparaison de `value` avec énumération noms respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="01886-675">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="01886-676">Si `value` est un nom qui ne correspond pas à une constante nommée de `TEnum`, la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="01886-676">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="01886-677">Si `value` est la représentation sous forme de chaîne d’un entier qui ne représente pas une valeur sous-jacente de la `TEnum` énumération, la méthode retourne un membre d’énumération dont la valeur sous-jacente est `value` converti en un type intégral.</span><span class="sxs-lookup"><span data-stu-id="01886-677">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="01886-678">Si ce comportement est indésirable, appelez le <xref:System.Enum.IsDefined%2A> pour s’assurer qu’une représentation sous forme de chaîne particulière d’un entier est réellement membre `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="01886-678">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-679">L’exemple suivant définit un `Colors` énumération, appelle le <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> méthode pour convertir des chaînes à leurs valeurs d’énumération correspondantes et appelle le <xref:System.Enum.IsDefined%2A> pour s’assurer que les valeurs intégrales particuliers sont sous-jacent des valeurs dans le `Colors` énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-679">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-680"><paramref name="TEnum" /> n'est pas un type énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-680"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * bool *  -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="TEnum" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="01886-681">Type d’énumération vers lequel convertir <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="01886-681">The enumeration type to which to convert <paramref name="value" />.</span></span></typeparam>
        <param name="value"><span data-ttu-id="01886-682">Représentation sous forme de chaîne du nom de l'énumération ou de la valeur sous-jacente à convertir.</span><span class="sxs-lookup"><span data-stu-id="01886-682">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="01886-683"><see langword="true" /> pour ignorer la casse ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01886-683"><see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span></span></param>
        <param name="result"><span data-ttu-id="01886-684">Quand cette méthode est retournée, <paramref name="result" /> contient un objet du type <c>TEnum</c> dont la valeur est représentée par <paramref name="value" /> si l’opération d’analyse s’effectue correctement.</span><span class="sxs-lookup"><span data-stu-id="01886-684">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds.</span></span> <span data-ttu-id="01886-685">Si l’opération d’analyse échoue, <paramref name="result" /> contient la valeur par défaut du type sous-jacent de <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="01886-685">If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="01886-686">Notez que cette valeur n’a pas besoin d’être membre de l’énumération <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="01886-686">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="01886-687">Ce paramètre est passé sans être initialisé.</span><span class="sxs-lookup"><span data-stu-id="01886-687">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="01886-688">Convertit la représentation sous forme de chaîne du nom ou de la valeur numérique d'une ou de plusieurs constantes énumérées en objet énuméré équivalent.</span><span class="sxs-lookup"><span data-stu-id="01886-688">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="01886-689">Un paramètre spécifie si l'opération respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="01886-689">A parameter specifies whether the operation is case-sensitive.</span></span> <span data-ttu-id="01886-690">La valeur de retour indique si la conversion a réussi.</span><span class="sxs-lookup"><span data-stu-id="01886-690">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="01886-691"><see langword="true" /> si la conversion du paramètre <paramref name="value" /> a réussi ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01886-691"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01886-692"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> est identique à la <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> (méthode), à ceci près qu’au lieu de lever une exception, elle retourne `false` si la conversion échoue.</span><span class="sxs-lookup"><span data-stu-id="01886-692"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="01886-693">Il élimine la nécessité pour la gestion des exceptions lors de l’analyse de la représentation sous forme de chaîne d’une valeur d’énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-693">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="01886-694">Le `value` paramètre contient la représentation sous forme de chaîne d’un membre d’énumération valeur sous-jacent ou constante nommée ou une liste de constantes nommées ou valeurs sous-jacentes délimitées par des virgules (,).</span><span class="sxs-lookup"><span data-stu-id="01886-694">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="01886-695">Si `value` comprend plusieurs constantes ou valeurs nommées, un ou plusieurs espaces vides peuvent précéder ou suivre chaque valeur, le nom ou la virgule dans `value`.</span><span class="sxs-lookup"><span data-stu-id="01886-695">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="01886-696">Si `value` est une liste, `result` reflète la valeur des noms spécifiés ou combinées avec une opération de bits des valeurs sous-jacentes `OR` opération.</span><span class="sxs-lookup"><span data-stu-id="01886-696">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="01886-697">Si `value` est la représentation sous forme de chaîne du nom d’une valeur d’énumération, la comparaison de `value` énumération noms varient en fonction du `ignoreCase` paramètre.</span><span class="sxs-lookup"><span data-stu-id="01886-697">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="01886-698">Si `true`, la comparaison respecte la casse ; si `false`, elle respecte la casse.</span><span class="sxs-lookup"><span data-stu-id="01886-698">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="01886-699">Si `value` est un nom qui ne correspond pas à une constante nommée de `TEnum`, la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="01886-699">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="01886-700">Si `value` est la représentation sous forme de chaîne d’un entier qui ne représente pas une valeur sous-jacente de la `TEnum` énumération, la méthode retourne un membre d’énumération dont la valeur sous-jacente est `value` converti en un type intégral.</span><span class="sxs-lookup"><span data-stu-id="01886-700">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="01886-701">Si ce comportement est indésirable, appelez le <xref:System.Enum.IsDefined%2A> pour s’assurer qu’une représentation sous forme de chaîne particulière d’un entier est réellement membre `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="01886-701">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01886-702">L’exemple suivant définit un `Colors` énumération, appelle le <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> méthode pour convertir des chaînes à leurs valeurs d’énumération correspondantes et appelle le <xref:System.Enum.IsDefined%2A> pour s’assurer que les valeurs intégrales particuliers sont sous-jacent des valeurs dans le `Colors` énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-702">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="01886-703">Le <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> méthode utilise la comparaison de non-respect de la casse lorsque essaie de convertir les représentations sous forme de chaîne de constantes nommées en leurs valeurs d’énumération équivalentes.</span><span class="sxs-lookup"><span data-stu-id="01886-703">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01886-704"><paramref name="TEnum" /> n'est pas un type énumération.</span><span class="sxs-lookup"><span data-stu-id="01886-704"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>