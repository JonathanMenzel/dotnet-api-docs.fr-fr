<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0e0f91e3e6e3eea5c50028b600eadc103187a955" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30731463" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Représente un instant, généralement exprimé sous la forme d'une date et d'une heure.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Liens rapides vers l’exemple de code

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Cet article inclut plusieurs exemples qui utilisent la `DateTime` type :

**Exemples d’initialisation**      
 [Appeler un constructeur](#initialization-01)     
 [Appeler le constructeur par défaut implicite](#initialization-02)     
 [Affectation de valeur de retour](#initialization-03)     
 [Analyse une chaîne qui représente une date et heure](#initialization-04)     
 [Syntaxe Visual Basic pour initialiser une date et heure](#initialization-05)     

**Mise en forme `DateTime` objets sous forme de chaînes**  
 [Utilisez le format date/heure par défaut](#formatting-01)     
 [Mettre en forme une date et heure à l’aide d’une culture spécifique](#formatting-02)     
 [Mettre en forme une date heure à l’aide d’une chaîne de format standard ou personnalisée](#formatting-03)     
 [Spécifiez une chaîne de format et une culture spécifique](#formatting-04)     
 [Mettre en forme une date heure à l’aide de la norme ISO 8601 pour les services web](#formatting-05)     

**Analyser des chaînes en tant que `DateTime` objets**  
 [Utilisez `Parse` ou `TryParse` pour convertir une chaîne en date et heure](#parsing-01)     
 [Utilisez `ParseExact` ou `TryParseExact` pour convertir une chaîne dans un format connu](#parsing-02)     
 [Convertir à partir de la représentation sous forme de chaîne ISO 8601 de date et heure](#parsing-03)     

**`DateTime` resolution**  
 [Explorer la résolution des valeurs de date et d’heure](#resolution-01)     
 [Comparaison d’égalité avec une tolérance](#comparison-01)     

**Culture et des calendriers**  
 [Afficher les valeurs de date et d’heure à l’aide des calendriers spécifiques de culture](#calendars-01)     
 [Analyser des chaînes en fonction d’un calendrier spécifique de la culture](#calendars-02)     
 [Initialiser une date et heure de calendrier d’une culture spécifique](#calendars-03)     
 [L’accès aux propriétés de date et d’heure à l’aide du calendrier d’une culture spécifique](#calendars-04)     
 [La récupération de la semaine de l’année à l’aide des calendriers spécifiques de culture](#calendars-05)     

**Persistance**  
 [Persistance des valeurs date et heure sous forme de chaînes dans le fuseau horaire local](#persistence-01)     
 [Persistance des valeurs date et heure sous forme de chaînes dans un format indifférent de culture et l’heure](#persistence-02)     
 [Valeurs de date et d’heure persistantes en tant qu’entiers](#persistence-03)     
 [Persistance de date et heure des valeurs en utilisant le `XmlSerializer`](#persistence-04)     
 [Persistance de date et heure des valeurs en utilisant le `BinaryFormatter`](#persistence-05)     
 [Valeurs de date et d’heure persistantes avec des données de fuseau horaire](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>Liens rapides vers les rubriques de la section Notes.

Cette section contient des rubriques pour les utilisations courantes de la `DateTime` struct :
  
 [Initialiser un `DateTime` objet](#initializing-a-datetime-object)   
 [Les valeurs DateTime et leurs représentations sous forme de chaîne](#datetime-values-and-their-string-representations)   
 [L’analyse des valeurs DateTime à partir de chaînes](#parsing-datetime-values-from-strings)   
 [Valeurs DateTime](#datetime-values)   
 [Opérations DateTime](#datetime-operations)   
 [Résolution de DateTime](#datetime-resolution)   
 [Les calendriers et les valeurs DateTime](#datetime-values-and-calendars)   
 [Conserver les valeurs DateTime](#persisting-datetime-values)   
 [DateTime et. TimeSpan](#datetime-vs-timespan)   
 [Comparaison d’égalité au sein de la tolérance de panne](#comparing-for-equality-within-tolerance) [considérations sur l’interopérabilité COM](#com-interop-considerations)  
   
Le <xref:System.DateTime> type valeur représente des dates et heures avec des valeurs comprises entre 00:00:00 (minuit), le 1er janvier 0001 Anno onze heures (ère chrétienne) à 11:59:59 PM, le 31 décembre 9999 apr. J.C. (NOTRE ÈRE) dans le calendrier grégorien.  
  
Les valeurs de temps sont mesurés en unités de 100 nanosecondes, appelées graduations. Une date particulière est le nombre de graduations depuis 12:00 minuit, le 1er janvier 0001. (NOTRE ÈRE) dans la <xref:System.Globalization.GregorianCalendar> calendrier. Le nombre exclut les cycles qui seraient ajoutés par les secondes intercalaires. Par exemple, valeur graduations égale à 31241376000000000L représente la date du vendredi 01 janvier 0100 12:00:00 (minuit). A <xref:System.DateTime> valeur est toujours exprimée dans le contexte d’une manière explicite ou d’un calendrier par défaut.  
  
> [!NOTE]
>  Si vous travaillez avec une valeur de battements que vous souhaitez convertir en un autre intervalle de temps, telles que les minutes ou secondes, vous devez utiliser le <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, ou <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> constante pour effectuer la conversion. Par exemple, pour ajouter le nombre de secondes représenté par un nombre spécifié de graduations à la <xref:System.DateTime.Second%2A> composant d’un <xref:System.DateTime> valeur, vous pouvez utiliser l’expression `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Vous pouvez afficher la source pour l’ensemble des exemples de cet article, que ce soit [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) ou [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) à partir du référentiel de documents sur GitHub.

> [!NOTE]
>  Une alternative à la <xref:System.DateTime> structure pour travailler avec des valeurs de date et heure de fuseaux horaires en particulier est la <xref:System.DateTimeOffset> structure. Le <xref:System.DateTimeOffset> structure stocke des informations de date et d’heure privé <xref:System.DateTime> champ et le nombre de minutes par lequel ces date et heure diffère du temps UTC privé <xref:System.Int16> champ. Il est ainsi possible pour un <xref:System.DateTimeOffset> pour refléter l’heure dans un fuseau horaire particulier, alors qu’un <xref:System.DateTime> valeur peut refléter clairement seulement UTC et du fuseau horaire local. Pour plus d’informations sur l’utilisation du <xref:System.DateTime> structure ou le <xref:System.DateTimeOffset> lorsque vous travaillez avec des valeurs de date et heure de la structure, consultez [Choosing Between DateTime, DateTimeOffset, TimeSpan et TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Initialisation d’un objet DateTime  

Vous pouvez affecter une valeur initiale pour un nouveau `DateTime` valeur de différentes façons :

- Appel d’un constructeur, le des deux où vous spécifiez les arguments pour les valeurs, ou utilisez le constructeur par défaut implicite.
- Affectation d’un `DateTime` à la valeur de retour d’une propriété ou méthode.
- Analyse un `DateTime` valeur à partir de sa représentation sous forme de chaîne.
- À l’aide des fonctionnalités de langage spécifiques de Visual Basic pour instancier un `DateTime`. 

Les extraits de code suivants présentent des exemples de chacun :

#### <a name="invoke-constructors"></a>Appeler des constructeurs

Vous appelez une des surcharges de la <xref:System.DateTime> constructeur qui spécifient des éléments de la valeur de date et d’heure (par exemple, l’année, mois et jour ou le nombre de graduations). Le code suivant crée une date spécifique à l’aide de la <xref:System.DateTime> constructeur en spécifiant l’année, mois, jour, heure, minute et seconde.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Vous appelez le `DateTime` constructeur par défaut implicite de la structure lorsque vous souhaitez un `DateTime` initialisé à sa valeur par défaut. (Pour plus d’informations sur le constructeur par défaut implicite d’un type valeur, consultez [Types valeur](~/docs/csharp/language-reference/keywords/value-types.md).) Certains compilateurs prennent également en charge la déclaration d’un <xref:System.DateTime> valeur sans lui assigner explicitement une valeur pour elle. Création d’une valeur sans une initialisation explicite également entraîne la valeur par défaut. L’exemple suivant illustre la <xref:System.DateTime> constructeur implicite par défaut en c# et Visual Basic, ainsi qu’un <xref:System.DateTime> déclaration sans assignation dans Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Affectation d’une valeur calculée

Vous pouvez affecter la <xref:System.DateTime> une valeur de date et d’heure retournée par une propriété ou méthode de l’objet. L’exemple suivant affecte la date et heure, la date du temps universel coordonné (UTC) et l’heure et la date actuelle à trois nouvelles <xref:System.DateTime> variables.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analyse une chaîne qui représente une valeur DateTime

Le <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, et <xref:System.DateTime.TryParseExact%2A> toutes les méthodes de convertissent une chaîne à son équivalent valeur date et heure. Les exemples suivants utilisent le <xref:System.DateTime.Parse%2A> et <xref:System.DateTime.ParseExact%2A> méthodes pour analyser une chaîne et le convertir en un <xref:System.DateTime> valeur. Le second format utilise une forme pris en charge par le [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard pour une date et une heure au format de chaîne représentant. Cette représentation standard est souvent utilisée pour transférer des informations de date dans les services web.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

Le <xref:System.DateTime.TryParse%2A> et <xref:System.DateTime.TryParseExact%2A> méthodes indiquent si une chaîne est une représentation valide d’un <xref:System.DateTime> valeur et, s’il s’agit, effectue la conversion.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Syntaxe spécifique au langage Visual Basic

L’instruction Visual Basic suivante initialise une nouvelle <xref:System.DateTime> valeur.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>Les valeurs DateTime et leurs représentations sous forme de chaîne  

En interne, toutes les <xref:System.DateTime> les valeurs sont représentées en tant que le nombre de graduations (nombre d’intervalles de 100 nanosecondes) qui se sont écoulées depuis 12:00:00 minuit, le 1er janvier 0001. Le texte réel <xref:System.DateTime> la valeur est indépendante de la façon dont dans lequel cette valeur apparaît lorsque affichée. L’apparence d’un <xref:System.DateTime> valeur est le résultat d’une opération de mise en forme qui convertit une valeur en sa représentation sous forme de chaîne.  
  
L’apparence des valeurs de date et d’heure dépend de la culture, les normes internationales, les exigences des applications et préférences personnelles. Le <xref:System.DateTime> structure offre une grande souplesse dans la mise en forme des valeurs de date et d’heure via les surcharges de <xref:System.DateTime.ToString%2A>. La valeur par défaut <xref:System.DateTime.ToString?displayProperty=nameWithType> méthode retourne la représentation sous forme de chaîne d’une valeur de date et d’heure à l’aide de la date courte et le modèle d’heure longue de la culture actuelle. L’exemple suivant utilise la valeur par défaut <xref:System.DateTime.ToString?displayProperty=nameWithType> (méthode). Il affiche la date et l’heure à l’aide de la date courte et le modèle d’heure longue pour la culture actuelle. La culture en-US est la culture en cours sur l’ordinateur sur lequel l’exemple a été exécuté.  
  
<a name="formatting-01"></a> [!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Vous devrez peut-être mettre en forme les dates dans une culture spécifique pour prendre en charge les scénarios où le serveur peut être dans une autre culture à partir du client web. Vous spécifiez la culture à l’aide de la <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> méthode pour créer la date courte et une représentation sous forme de beaucoup de temps dans une culture spécifique. L’exemple suivant utilise la <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> méthode pour afficher la date et l’heure à l’aide de la date courte et le modèle d’heure longue pour la culture fr-FR.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Autres applications peuvent nécessiter des représentations sous forme de chaîne différentes d’une date. Le <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> méthode retourne la représentation sous forme de chaîne définie par un spécificateur de format standard ou personnalisée à l’aide des conventions de format de la culture actuelle. L’exemple suivant utilise le <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> culture de la méthode pour afficher la date complète et le modèle de temps pour les en-US, la culture en cours sur l’ordinateur sur lequel l’exemple a été exécuté.  
  
<a name="formatting-03"></a> [!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Enfin, vous pouvez spécifier la culture et le format à l’aide du <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> (méthode). L’exemple suivant utilise la <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthode pour afficher la date complète et le modèle d’heure pour la culture fr-FR.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

Le <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> surcharge peut être également utilisée avec une chaîne de format personnalisée pour spécifier d’autres formats. L’exemple suivant montre comment mettre en forme une chaîne à l’aide de la [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) souvent utilisé pour les services web de format standard. Le format Iso 8601 n’a pas une chaîne de format standard correspondant.

<a name="formatting05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Pour plus d’informations sur la mise en forme <xref:System.DateTime> valeurs, consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [les chaînes de Format de temps et de Date personnalisée](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>L’analyse des valeurs DateTime à partir de chaînes

L’analyse convertit la représentation sous forme de chaîne d’une date et une heure pour un <xref:System.DateTime> valeur. En règle générale, les chaînes de date et l’heure ont deux utilisations différentes dans les applications :  
  
-   Une date et heure accepte divers formulaires et reflète les conventions de la culture actuelle ou une culture spécifique. Par exemple, une application permet à un utilisateur dont la culture actuelle est en-US pour entrer une valeur de date sous la forme « 15/12/2013 » ou « 15 décembre 2013 ». Il permet à un utilisateur dont la culture actuelle est en-gb pour entrer une valeur de date sous la forme « 15/12/2013 » ou « 15 décembre 2013. »  
  
-   Une date et heure est représentée dans un format prédéfini. Par exemple, une application sérialise une date sous forme de « 20130103 » indépendamment de la culture sur lequel l’application est en cours d’exécution. Une application peut nécessiter dates soient une entrée dans le format de date courte de la culture actuelle.
  
Vous utilisez la <xref:System.DateTime.Parse%2A> ou <xref:System.DateTime.TryParse%2A> méthode pour convertir une chaîne à partir d’un des formats de date et l’heure courantes utilisées par une culture à un <xref:System.DateTime> valeur. L’exemple suivant montre comment vous pouvez utiliser <xref:System.DateTime.TryParse%2A> pour convertir des chaînes de date dans différents formats spécifiques à la culture sur un <xref:System.DateTime> valeur. Il remplace la culture actuelle sur anglais (Royaume-Uni) et appelle la <xref:System.DateTime.GetDateTimeFormats> méthode permettant de générer un tableau de chaînes de date et d’heure. Il passe ensuite chaque élément dans le tableau à la <xref:System.DateTime.TryParse%2A> (méthode). La sortie de l’exemple illustre que la méthode d’analyse a été en mesure de convertir correctement chaque les propres à la culture chaînes date et heure.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Vous utilisez la <xref:System.DateTime.ParseExact%2A> et <xref:System.DateTime.TryParseExact%2A> méthodes pour convertir une chaîne qui doit correspondre à un format particulier ou formats à un <xref:System.DateTime> valeur. Vous spécifiez une ou plusieurs chaînes de format date et heure en tant que paramètre à la méthode d’analyse. L’exemple suivant utilise le <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> méthode pour convertir des chaînes qui doivent être dans un format « AAAAMMJJ » ou « HHmmss » à <xref:System.DateTime> valeurs.  
  
<a name="parsing-02"></a> [!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Une utilisation courante pour <xref:System.DateTime.ParseExact%2A> consiste à convertir une représentation sous forme de chaîne d’un service web, généralement dans [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format standard. Le code suivant montre la chaîne de format correct à utiliser :

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Si une chaîne ne peut pas être analysée, le <xref:System.DateTime.Parse%2A> et <xref:System.DateTime.ParseExact%2A> méthodes lèvent une exception. Le <xref:System.DateTime.TryParse%2A> et <xref:System.DateTime.TryParseExact%2A> méthodes retournent un <xref:System.Boolean> valeur qui indique si la conversion a réussi ou échoué. Vous devez utiliser le <xref:System.DateTime.TryParse%2A> ou <xref:System.DateTime.TryParseExact%2A> méthodes dans les scénarios où les performances sont importantes. L’opération d’analyse pour les chaînes de date et d’heure a tendance à avoir un taux élevé d’échecs, et la gestion des exceptions est coûteuse. Utilisez ces méthodes si les chaînes sont entrées par les utilisateurs ou en provenance d’une source inconnue. 
  
Pour plus d’informations sur l’analyse des valeurs de date et d’heure, consultez [l’analyse de chaînes de Date et heure](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Valeurs DateTime

Valeurs d’heure dans le <xref:System.DateTime> type sont souvent exprimés à l’aide de la norme du temps universel coordonné (UTC). Temps universel coordonné est le nom d’heure de Greenwich (GMT). Temps universel coordonné est le temps mesurée en longitude zéro, le point d’origine UTC. L’heure d’été n’est pas applicable au format UTC.  
  
Heure locale est relatif à un fuseau horaire particulier. Un fuseau horaire est associé à un décalage de fuseau horaire. Un décalage de fuseau horaire est le décalage du fuseau horaire mesuré en heures, à partir du point d’origine UTC. En outre, heure locale est également affecté par l’heure d’été, qui ajoute ou soustrait un ajustement d’intervalle de temps. Heure locale est calculée en ajoutant le décalage de fuseau horaire UTC et le réglage de l’heure d’été si nécessaire. Le décalage de fuseau horaire sur le point d’origine UTC est égale à zéro.  
  
Heure UTC est appropriée pour les calculs, les comparaisons et le stockage date et heure dans les fichiers. Heure locale est appropriée pour l’affichage dans les interfaces utilisateur des applications de bureau. Les applications prenant en charge de fuseau horaire (par exemple, de nombreuses applications Web) doivent également travailler avec un nombre d’autres fuseaux horaires.  
  
Si le <xref:System.DateTime.Kind%2A> propriété d’un <xref:System.DateTime> objet est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, il n’est pas spécifié si l’heure représentée est heure locale, heure UTC ou à une heure dans un autre fuseau horaire.  

### <a name="datetime-resolution"></a>Résolution de DateTime
  
> [!NOTE]
>  En guise d’alternative à l’exécution de date et heure sur <xref:System.DateTime> valeurs à mesurer le temps écoulé, vous pouvez utiliser la <xref:System.Diagnostics.Stopwatch> classe.  
  
Le <xref:System.DateTime.Ticks%2A> propriété exprime les valeurs de date et d’heure dans les unités d’un dix-millionième de seconde. Le <xref:System.DateTime.Millisecond%2A> propriété renvoie les millièmes de seconde dans une valeur de date et d’heure. À l’aide d’appels répétés à la <xref:System.DateTime.Now%2A?displayProperty=nameWithType> propriété pour mesurer le temps écoulé est dépendante de l’horloge système. L’horloge système sur les systèmes Windows 7 et Windows 8 d’une résolution d’environ 15 millisecondes. Cette résolution affecte les intervalles de temps de petites moins de 100 millisecondes. 
  
L’exemple suivant illustre la dépendance de la date actuelle et les valeurs d’heure de la résolution de l’horloge système. Dans l’exemple, une boucle externe se répète à 20 fois, et une boucle interne permet de retarder la boucle externe. Si la valeur du compteur de boucle externe est 10, un appel à la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> méthode introduit un délai de cinq millisecondes. L’exemple suivant montre le nombre de millisecondes retourné par le `DateTime.Now.Milliseconds` les modifications apportées aux propriétés uniquement après l’appel à <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Opérations DateTime  

Un calcul à l’aide un <xref:System.DateTime> de la structure, tels que <xref:System.DateTime.Add%2A> ou <xref:System.DateTime.Subtract%2A>, ne modifiez pas la valeur de la structure. Au lieu de cela, le calcul retourne un nouveau <xref:System.DateTime> structure dont la valeur est le résultat du calcul.  
  
Opérations de conversion entre des fuseaux horaires (tel qu’entre l’heure UTC et l’heure locale, ou entre un fuseau horaire et l’autre) tiennent compte de l’heure d’été, mais pas les opérations arithmétiques et de comparaison.  
  
Le <xref:System.DateTime> structure elle-même offre un support limité pour la conversion d’un fuseau horaire à un autre. Vous pouvez utiliser la <xref:System.DateTime.ToLocalTime%2A> méthode pour convertir l’UTC en heure locale, ou vous pouvez utiliser la <xref:System.DateTime.ToUniversalTime%2A> méthode pour convertir à partir de l’heure locale au format UTC. Toutefois, un jeu complet de méthodes de conversion de fuseau horaire est disponible dans le <xref:System.TimeZoneInfo> classe. Convertir l’heure dans l’un des fuseaux horaires du monde l’heure dans un autre fuseau horaire à l’aide de ces méthodes.  
  
Calculs et des comparaisons <xref:System.DateTime> objets sont significatifs uniquement si les objets représentent les heures dans le même fuseau horaire. Vous pouvez utiliser un <xref:System.TimeZoneInfo> objet pour représenter un <xref:System.DateTime> fuseau horaire de valeur, même si les deux sont faiblement couplés. A <xref:System.DateTime> objet n’a pas d’une propriété qui retourne un objet qui représente le fuseau horaire de cette valeur date et d’heure. Le <xref:System.DateTime.Kind%2A> propriété indique si un `DateTime` représente l’heure UTC, heure locale, ou n’est pas spécifié. Dans une application prenant en charge de fuseau horaire, vous devez compter sur un mécanisme externe pour déterminer le fuseau horaire dans lequel un <xref:System.DateTime> objet a été créé. Vous pouvez utiliser une structure qui encapsule à la fois le <xref:System.DateTime> valeur et le <xref:System.TimeZoneInfo> objet qui représente le <xref:System.DateTime> fuseau horaire de valeur. Pour plus d’informations sur l’utilisation d’UTC dans les calculs et les comparaisons avec <xref:System.DateTime> valeurs, consultez [exécution d’opérations arithmétiques avec des Dates et heures](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Chaque <xref:System.DateTime> membre utilise implicitement le calendrier grégorien pour effectuer son opération. Les exceptions sont des méthodes qui implicitement spécifient un calendrier. Ceux-ci incluent des constructeurs qui spécifient un calendrier et les méthodes avec un paramètre dérivé <xref:System.IFormatProvider>, tel que <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Opérations par les membres de la <xref:System.DateTime> type prendre en considération des éléments tels que des années bissextiles et le nombre de jours dans un mois.  

## <a name="datetime-values-and-calendars"></a>Les calendriers et les valeurs DateTime  

La bibliothèque de classes .NET Framework inclut un nombre de classes de calendrier, qui sont dérivées de la <xref:System.Globalization.Calendar> classe.  Il s'agit des éléments suivants :  
  
-   La classe <xref:System.Globalization.ChineseLunisolarCalendar>.  
-   La classe <xref:System.Globalization.EastAsianLunisolarCalendar>.  
-   La classe <xref:System.Globalization.GregorianCalendar>.  
-   La classe <xref:System.Globalization.HebrewCalendar>.  
-   La classe <xref:System.Globalization.HijriCalendar>.  
-   La classe <xref:System.Globalization.JapaneseCalendar>.  
-   La classe <xref:System.Globalization.JapaneseLunisolarCalendar>.  
-   La classe <xref:System.Globalization.JulianCalendar>.  
-   La classe <xref:System.Globalization.KoreanCalendar>.  
-   La classe <xref:System.Globalization.KoreanLunisolarCalendar>.  
-   La classe <xref:System.Globalization.PersianCalendar>.  
-   La classe <xref:System.Globalization.TaiwanCalendar>.  
-   La classe <xref:System.Globalization.TaiwanLunisolarCalendar>.  
-   La classe <xref:System.Globalization.ThaiBuddhistCalendar>.  
-   La classe <xref:System.Globalization.UmAlQuraCalendar>.  
  
Chaque culture utilise un calendrier par défaut défini par son en lecture seule <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> propriété. Chaque culture peut-être prendre en charge un ou plusieurs calendriers définis par son en lecture seule <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> propriété. Le calendrier actuellement utilisé par un spécifique <xref:System.Globalization.CultureInfo> objet est défini par son <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propriété. Il doit être un des calendriers trouvés dans le <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> tableau.  
  
Un calendrier la culture actuelle est utilisée dans toutes les opérations de mise en forme pour cette culture. Par exemple, le calendrier par défaut de la culture bouddhiste thaïlandais est le calendrier thaï bouddhiste ère, qui est représenté par la <xref:System.Globalization.ThaiBuddhistCalendar> classe.  Lorsqu’un <xref:System.Globalization.CultureInfo> objet qui représente la culture bouddhiste thaïlandais est utilisé dans une date et heure de mise en forme d’opération, le calendrier thaï bouddhiste ère est utilisé par défaut. Le calendrier grégorien est utilisé uniquement si la culture <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propriété est modifiée, comme le montre l’exemple suivant :  

<a name="calendars-01"></a> [!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Calendrier actuel d’une culture est également utilisé dans toutes les opérations d’analyse pour cette culture, comme le montre l’exemple suivant.  
  
<a name="calendars-02"></a> [!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Vous instanciez un <xref:System.DateTime> valeur en utilisant les éléments de date et d’heure (nombre de l’année, mois et jour) d’un calendrier spécifique en appelant un [constructeur DateTime](xref:System.DateTime.%23ctor%2A) qui inclut un `calendar` paramètre et en lui passant un <xref:System.Globalization.CultureInfo.Calendar%2A>objet qui représente ce calendrier. L’exemple suivant utilise les éléments de date et heure de la <xref:System.Globalization.ThaiBuddhistCalendar> calendrier.  
  
<a name="calendars-03"></a> [!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> les constructeurs qui n’incluent pas une `calendar` paramètre supposent que les éléments de date et d’heure sont exprimées en unités dans le calendrier grégorien.  
  
Tous les autres <xref:System.DateTime> propriétés et méthodes utilisent le calendrier grégorien. Par exemple, le <xref:System.DateTime.Year%2A?displayProperty=nameWithType> retourne l’année dans le calendrier grégorien et le <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> méthode part du principe que le `year` paramètre est une année dans le calendrier grégorien.  Chaque <xref:System.DateTime> membre qui utilise le calendrier grégorien a un membre de la <xref:System.Globalization.CultureInfo.Calendar%2A> classe qui utilise un calendrier spécifique. Par exemple, le <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> méthode retourne l’année dans un calendrier spécifique et le <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> méthode interprète le `year` paramètre en tant que numéro d’une année dans un calendrier spécifique. L’exemple suivant utilise à la fois le <xref:System.DateTime> et les membres correspondants de la <xref:System.Globalization.ThaiBuddhistCalendar> classe.  
  
<a name="calendars-04"></a> [!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

Le <xref:System.DateTime> structure inclut un <xref:System.DateTime.DayOfWeek%2A> propriété qui retourne le jour de la semaine du calendrier grégorien. Il n’inclut pas un membre qui vous permet de récupérer le numéro de semaine de l’année. Pour récupérer la semaine de l’année, appelez le calendrier <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> méthode. L'exemple suivant illustre cette situation.  
  
<a name="calendars-05"></a> [!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Pour plus d’informations sur les dates et calendriers, consultez [utilisation des calendriers](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Conserver les valeurs DateTime  

Vous pouvez rendre persistante <xref:System.DateTime> valeurs de quatre manières :  
  
-   Vous [les convertir en chaînes](#persisting-values-as-strings) et conserver les chaînes.  
-   Vous [les convertir en valeurs entières 64 bits](#persisting-values-as-integers) (la valeur de la <xref:System.DateTime.Ticks%2A> propriété) et rendre persistantes des entiers.  
-   Vous [sérialiser les valeurs de date/heure](#serializing-dateTime-values).  
-   Vous [sérialiser les valeurs DateTime en même temps que les informations de fuseau horaire](#serializing-datetime-and-time-zone-data).  
  
Vous devez vous assurer que la routine qui restaure le <xref:System.DateTime> valeurs ne perdre des données ou lever une exception, quelle que soit la technique que vous choisissez. <xref:System.DateTime> les valeurs doivent effectuer un aller-retour. Autrement dit, la valeur d’origine et la valeur restaurée doivent être le même. Et si la version d’origine <xref:System.DateTime> valeur représente un instant unique, elle doit identifier le moment même de temps quand elle est restaurée.  
  
#### <a name="persisting-values-as-strings"></a>Persistance des valeurs sous forme de chaînes  

Pour restaurer correctement <xref:System.DateTime> les valeurs qui sont conservées sous forme de chaînes, suivez ces règles :  
  
-   Ne présumez le même spécifiques à la culture de mise en forme lors de la restauration de la chaîne comme lorsque vous rendue persistante. Pour vérifier qu’une chaîne peut être restaurée sur un système dont la culture actuelle est différente de la culture du système, il a été enregistré sur, appelez le <xref:System.DateTime.ToString%2A> surcharge pour enregistrer la chaîne en utilisant les conventions de la culture dite indifférente. Appelez le <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> ou <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> surcharge pour restaurer la chaîne en utilisant les conventions de la culture dite indifférente. N’utilisez jamais le <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, ou <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> surcharges, qui utilisent les conventions de la culture du thread actuel.  
  
-   Si la date représente un instant unique de temps, vérifiez qu’il représente le moment même lorsqu’elle est restaurée, même sur un autre fuseau horaire. Convertir le <xref:System.DateTime> valeur en temps universel coordonné (UTC), avant de l’enregistrer. Vous pouvez également sérialiser la valeur ainsi que des informations de fuseau horaire. Pour plus d’informations sur cette approche, consultez [données DateTime de sérialisation et le fuseau horaire](#TimeZone).  
  
 L’erreur la plus courante effectuée lors de la persistance <xref:System.DateTime> valeurs sous forme de chaînes consiste à s’appuient sur les conventions de mise en forme de la valeur par défaut ou la culture actuelle. Problèmes si la culture actuelle est différente lors de l’enregistrement et la restauration de chaînes. L’exemple suivant illustre ces problèmes. Elle enregistre les cinq dates en utilisant les conventions de mise en forme de la culture actuelle, qui est dans ce cas l’anglais (États-Unis). Il restaure les dates selon les conventions de mise en forme d’une autre culture, qui est dans ce cas l’anglais (Royaume-Uni). Étant donné que les conventions de mise en forme de deux cultures sont différentes, deux des dates ne peuvent pas être restaurées et les dates de trois restants sont interprétés correctement. En outre, si les valeurs de date et heure d’origine représentent des instants uniques dans le temps, restauré fois sont incorrectes, car les informations de fuseau horaire sont perdues.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Pour effectuer un aller-retour <xref:System.DateTime> valeurs avec succès, les étapes suivantes :  
  
1.  Si les valeurs représentent des instants uniques de temps, les convertir à partir de l’heure locale au format UTC en appelant le <xref:System.DateTime.ToUniversalTime%2A> (méthode).  
1.  Convertir les dates en leurs représentations sous forme de chaîne en appelant le <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> de surcharge. Utilisez les conventions de mise en forme de la culture dite indifférente en spécifiant <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> comme le `provider` argument. Spécifiez que la valeur doit effectuer un aller-retour à l’aide de la chaîne de format standard « O » ou « R ».  
  
Pour restaurer les données persistantes <xref:System.DateTime> valeurs sans perte de données, procédez comme suit :  
  
1.  Analyser les données en appelant le <xref:System.DateTime.ParseExact%2A> ou <xref:System.DateTime.TryParseExact%2A> de surcharge. Spécifiez <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> comme le `provider` argument et utilisez le même format standard de chaîne utilisé pour le `format` argument lors de la conversion. Inclure le <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> valeur dans le `styles` argument.  
1.  Si le <xref:System.DateTime> valeurs représentent des instants uniques dans le temps, l’appel de la <xref:System.DateTime.ToLocalTime%2A> méthode pour convertir la date analysée à l’heure UTC en heure locale.  
  
L’exemple suivant utilise la culture dite indifférente et la chaîne de format standard « O » pour vous assurer que <xref:System.DateTime> représentent les valeurs enregistré et restauré au même moment dans le temps, quel que soit le système, la culture ou le fuseau horaire des systèmes source et cible.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Persistance des valeurs en tant qu’entiers  

Vous pouvez conserver une date et une heure en tant qu’un <xref:System.Int64> valeur qui représente un nombre de graduations. Dans ce cas, il est inutile à prendre en compte la culture des systèmes la <xref:System.DateTime> valeurs sont conservées et restaurées sur.  
  
Pour conserver un <xref:System.DateTime> valeur sous forme d’entier :  
  
-   Si le <xref:System.DateTime> les valeurs représentent des instants uniques dans le temps, les convertir au format UTC en appelant le <xref:System.DateTime.ToUniversalTime%2A> (méthode).  
-   Extraire le nombre de graduations représenté par le <xref:System.DateTime> valeur à partir de son <xref:System.DateTime.Ticks%2A> propriété.  
  
Pour restaurer un <xref:System.DateTime> valeur qui a été rendue persistante sous forme d’entier :  
  
1.  Instancier un nouvel <xref:System.DateTime> en passant le <xref:System.Int64> valeur le <xref:System.DateTime.%23ctor%28System.Int64%29> constructeur.  
1.  Si le <xref:System.DateTime> valeur représente un instant unique, convertissez-le à l’heure UTC à l’heure locale en appelant le <xref:System.DateTime.ToLocalTime%2A> (méthode).  
  
L’exemple suivant rend persistant un tableau de <xref:System.DateTime> valeurs en tant qu’entiers sur un système aux États-Unis. Pacifique (États-Unis). Elle sera restaurée sur un système dans le fuseau UTC. Le fichier qui contient des entiers inclut un <xref:System.Int32> valeur qui indique le nombre total de <xref:System.Int64> les valeurs qui suivent immédiatement.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>Sérialisation des valeurs DateTime  

Vous pouvez rendre persistante <xref:System.DateTime> valeurs via la sérialisation vers un flux de données ou fichier, puis restaurez les pendant la désérialisation. <xref:System.DateTime> données sont sérialisées dans un format de l’objet spécifié. Les objets sont restaurés quand ils sont désérialisés. Un module de formatage ou d’un sérialiseur, tel que <xref:System.Xml.Serialization.XmlSerializer> ou <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, gère le processus de sérialisation et la désérialisation. Pour plus d’informations sur la sérialisation et les types de sérialisation pris en charge par le .NET Framework, consultez [sérialisation](~/docs/standard/serialization/index.md).
  
L’exemple suivant utilise le <xref:System.Xml.Serialization.XmlSerializer> classe pour sérialiser et désérialiser <xref:System.DateTime> valeurs. Les valeurs représentent tous les jours année bissextile au vingt et unième siècle. Le résultat représente le résultat si l’exemple est exécuté sur un système dont la culture actuelle est anglais (Royaume-Uni). Étant donné que vous avez désérialisé le <xref:System.DateTime> objet proprement dit, le code ne doit pas nécessairement gérer les différences culturelles dans des formats de date et d’heure.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

L’exemple précédent n’inclut pas les informations de temps. Si un <xref:System.DateTime> valeur représente un moment donné et est exprimée en heure locale, de le convertir à partir de l’heure locale en temps UTC avant qu’elle en appelant le <xref:System.DateTime.ToUniversalTime%2A> (méthode). Une fois que vous le désérialiser, convertissez-le à l’heure UTC en heure locale en appelant le <xref:System.DateTime.ToLocalTime%2A> (méthode). L’exemple suivant utilise le <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe à sérialiser <xref:System.DateTime> données sur un système aux États-Unis. Zone Pacifique et à désérialiser sur un système aux États-Unis. Centrale zone Standard.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>Sérialisation des données de date/heure et le fuseau horaire  

Tous les exemples précédents supposé que <xref:System.DateTime> les valeurs sont exprimées en heures locales. Le code converti les valeurs comprises entre l’heure UTC et l’heure locale pour qu’elles reflètent le moment même sur les systèmes source et cible. <xref:System.DateTime> valeurs peuvent également refléter moments dans le temps dans un fuseau horaire autre que local et l’heure UTC. Étant donné que le <xref:System.DateTime> structure ne prend pas en charge de fuseau horaire, vous devez sérialiser les deux le <xref:System.DateTime> valeur et le <xref:System.TimeZoneInfo> objet qui représente son fuseau horaire. Créer un type dont les champs comprennent le <xref:System.DateTime> valeur et son fuseau horaire. L’exemple suivant définit un `DateWithTimeZone` structure.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  Le `DateWithTimeZone` structure est utilisée dans les deux exemples, sérialiser et désérialiser un tableau de `DateWithTimeZone` objets. Vous pouvez afficher la source pour l’ensemble des exemples de cet article, que ce soit [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) ou [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) à partir du référentiel de documents sur GitHub.
  
À l’aide de la `DateWithTimeZone` structure, vous pouvez puis conserve la date et l’heure, ainsi que des informations de fuseau horaire. L’exemple suivant utilise le <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe pour sérialiser un tableau de `DateWithTimeZone` objets.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

L’exemple suivant appelle ensuite la <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> méthode à désérialiser.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime et. TimeSpan  

Le <xref:System.DateTime> et <xref:System.TimeSpan> types valeur diffèrent en ce qu’un <xref:System.DateTime> représente un instant alors qu’un <xref:System.TimeSpan> représente un intervalle de temps. Vous pouvez soustraire une instance de <xref:System.DateTime> à partir d’une autre pour obtenir un <xref:System.TimeSpan> objet qui représente l’intervalle de temps entre eux. Vous pouvez ajouter un nombre positif <xref:System.TimeSpan> actuel <xref:System.DateTime> pour obtenir un <xref:System.DateTime> valeur qui représente une date ultérieure.  
  
Vous pouvez ajouter ou soustraire un intervalle de temps d’un <xref:System.DateTime> objet. Intervalles de temps peuvent être négatif ou positif, et ils peuvent être exprimés en unités de graduations, secondes, ou comme un <xref:System.TimeSpan> objet.  

### <a name="comparing-for-equality-within-tolerance"></a>Comparaison d’égalité au sein de la tolérance de panne

Comparaisons d’égalité pour <xref:System.DateTime> les valeurs sont exactes. Cela signifie que les deux valeurs doivent être exprimées en tant que le même nombre de graduations à être considérées comme égales. Que la précision est souvent inutiles ou même incorrect pour de nombreuses applications. Souvent, vous souhaitez tester si <xref:System.DateTime> sont des objets **à peu près égale**. 

L’exemple suivant montre comment comparer à peu près équivalent <xref:System.DateTime> . Il accepte une petite marge de différence lorsque vous les déclarez égale.  
  
<a name="comparison-02"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Considérations sur l’interopérabilité COM  

A <xref:System.DateTime> valeur qui est transféré à une application COM, puis transférée à une application managée, est dite d’aller-retour. Toutefois, un <xref:System.DateTime> n’est pas le cas de valeur qui spécifie uniquement une heure aller-retour comme prévu.  
  
Si vous effectuer un aller-retour uniquement une heure, par exemple 3 heures, la date et l’heure est le 30 décembre 1899 (notre ère) à 3 h 00, à la place, le 1er janvier 0001 (notre ère) à 3 h 00 Le .NET Framework et COM supposent une date par défaut lorsque seule une heure est spécifiée. Toutefois, le système COM suppose une date de base du 30 décembre 1899 (notre ère), tandis que le .NET Framework suppose une date de base, le 1er janvier 0001 (notre ère)  
  
Lorsque seule une heure est passée du .NET Framework à COM, un traitement spécial est effectué qui convertit l’heure au format utilisé par COM. Quand uniquement une heure est passée de COM au .NET Framework, aucun traitement spécial n’est effectuée, car cela serait endommager les dates et heures ou avant le 30 décembre 1899 légitimes. Si une date démarre son aller-retour à partir de COM, le .NET Framework et COM conservent la date.  
  
Le comportement du .NET Framework et de COM signifie que si votre application réalise un aller-retour un <xref:System.DateTime> qui spécifie uniquement une heure, votre application doit veiller à modifier ou à ignorer la date erronée de la dernière <xref:System.DateTime> objet.  
     
 ]]></format>
    </remarks>
    <threadsafe>Tous les membres de ce type sont thread-safe. Les membres qui semblent modifier l’état de l’instance retournent en fait une nouvelle instance initialisée avec la nouvelle valeur. Comme avec tout autre type, la lecture et en écriture à une variable partagée qui contient une instance de ce type doivent être protégées par un verrou pour garantir la sécurité des threads.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Date et heure exprimées en nombre d'intervalles de 100 nanosecondes écoulés depuis le 1er janvier 0001 à 00:00:00.000 (minuit) dans le calendrier grégorien.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec le nombre de graduations spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété <xref:System.DateTime.Kind%2A> est initialisée à <xref:System.DateTimeKind.Unspecified>.  
  
 Pour les applications dans lesquelles la portabilité des données de date et d’heure ou un degré limité de fuseau horaire reconnaissance est important, vous pouvez utiliser correspondant <xref:System.DateTimeOffset> constructeur.  
  
   
  
## Examples  
 L’exemple suivant illustre l’un de le <xref:System.DateTime> constructeurs.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">Date et heure exprimées en nombre d'intervalles de 100 nanosecondes écoulés depuis le 1er janvier 0001 à 00:00:00.000 (minuit) dans le calendrier grégorien.</param>
        <param name="kind">Une des valeurs d’énumération qui indique si <c>ticks</c> spécifie une heure locale, une heure UTC, ou aucune des deux.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec un nombre spécifié de graduations et une heure UTC ou locale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour les applications dans lesquelles la portabilité des données de date et d’heure ou un degré limité de fuseau horaire reconnaissance est important, vous pouvez utiliser correspondant <xref:System.DateTimeOffset> constructeur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> ne fait pas partie des valeurs <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Année (1 à 9999).</param>
        <param name="month">Mois (1 à 12).</param>
        <param name="day">Jour (de 1 au nombre de jours de <c>month</c>).</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec l'année, le mois et le jour spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur interprète `year`, `month`, et `day` comme une année, mois et jour dans le calendrier grégorien. Pour instancier un <xref:System.DateTime> valeur à l’aide de l’année, mois et jour dans un autre calendrier, appelez le <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructeur.  
  
 L’heure de la journée résultant <xref:System.DateTime> correspond à minuit (00 : 00:00). La propriété <xref:System.DateTime.Kind%2A> est initialisée à <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> constructeur pour instancier un <xref:System.DateTime> valeur. L’exemple illustre également que cette surcharge crée un <xref:System.DateTime> valeur dont le composant heure est égal à minuit (ou 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> est inférieur à 1 ou supérieur à 9999.  
  
 - ou -  
  
 <paramref name="month" /> est inférieur à 1 ou supérieur à 12.  
  
 - ou -  
  
 <paramref name="day" /> est inférieur à 1 ou supérieur au nombre de jours dans <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Année (de 1 au nombre d’années de <c>calendar</c>).</param>
        <param name="month">Mois (de 1 au nombre de mois de <c>calendar</c>).</param>
        <param name="day">Jour (de 1 au nombre de jours de <c>month</c>).</param>
        <param name="calendar">Calendrier utilisé pour interpréter <c>year</c>, <c>month</c> et <c>day</c>.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec l'année, le mois et le jour spécifiés pour le calendrier spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’heure de la journée résultant <xref:System.DateTime> correspond à minuit (00 : 00:00). La propriété <xref:System.DateTime.Kind%2A> est initialisée à <xref:System.DateTimeKind.Unspecified>.  
  
 Les valeurs autorisées pour `year`, `month`, et `day` dépendent `calendar`. Une exception est levée si la date et heure spécifiées ne peuvent pas être exprimés à l’aide de `calendar`.  
  
 Le <xref:System.Globalization> espace de noms fournit plusieurs calendriers, notamment <xref:System.Globalization.GregorianCalendar> et <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructeur à deux reprises pour instancier deux <xref:System.DateTime> valeurs. Le premier appel instancie une <xref:System.DateTime> valeur en utilisant un <xref:System.Globalization.PersianCalendar> objet. Étant donné que le calendrier persan ne peut pas être désigné comme le calendrier par défaut pour une culture, affichage d’une date dans le calendrier persan requiert des appels individuels à ses <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, et <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> méthodes. Le deuxième appel au constructeur instancie un <xref:System.DateTime> valeur en utilisant un <xref:System.Globalization.HijriCalendar> objet. L’exemple modifie la culture actuelle en arabe (Syrie) et modifie le calendrier par défaut de la culture actuelle pour le calendrier Hijri. Étant donné que Hijri est le calendrier par défaut de la culture actuelle, la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthode utilise pour mettre en forme la date. Lors de la restauration de la culture actuelle précédente (qui est anglais (États-Unis) dans ce cas), la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthode utilise le calendrier grégorien de valeur par défaut de la culture actuelle pour mettre en forme la date.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> n’appartient pas à la plage prise en charge par <paramref name="calendar" />.  
  
 - ou -  
  
 <paramref name="month" /> est inférieur à 1 ou supérieur au nombre de mois dans <paramref name="calendar" />.  
  
 - ou -  
  
 <paramref name="day" /> est inférieur à 1 ou supérieur au nombre de jours dans <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Année (1 à 9999).</param>
        <param name="month">Mois (1 à 12).</param>
        <param name="day">Jour (de 1 au nombre de jours de <c>month</c>).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec l'année, le mois, le jour, l'heure, la minute et la seconde spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété <xref:System.DateTime.Kind%2A> est initialisée à <xref:System.DateTimeKind.Unspecified>.  
  
 Ce constructeur interprète`year`, `month`, et `day` comme une année, mois et jour dans le calendrier grégorien. Pour instancier un <xref:System.DateTime> valeur à l’aide de l’année, mois et jour dans un autre calendrier, appelez le <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructeur.  
  
 Pour les applications dans lesquelles la portabilité des données de date et d’heure ou un degré limité de fuseau horaire reconnaissance est important, vous pouvez utiliser correspondant <xref:System.DateTimeOffset> constructeur.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.%23ctor%2A> constructeur pour instancier un <xref:System.DateTime> valeur.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> est inférieur à 1 ou supérieur à 9999.  
  
 - ou -  
  
 <paramref name="month" /> est inférieur à 1 ou supérieur à 12.  
  
 - ou -  
  
 <paramref name="day" /> est inférieur à 1 ou supérieur au nombre de jours dans <paramref name="month" />.  
  
 - ou -  
  
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
 - ou -  
  
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Année (1 à 9999).</param>
        <param name="month">Mois (1 à 12).</param>
        <param name="day">Jour (de 1 au nombre de jours de <c>month</c>).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <param name="kind">Une des valeurs d’énumération qui indique si <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c> et <c>second</c> spécifient une heure locale, une heure UTC, ou aucune des deux.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec l'année, le mois, le jour, l'heure, la minute, la seconde et l'heure UTC ou locale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur interprète`year`, `month`, et `day` comme une année, mois et jour dans le calendrier grégorien. Pour instancier un <xref:System.DateTime> valeur à l’aide de l’année, mois et jour dans un autre calendrier, appelez le <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> constructeur.  
  
 Pour les applications dans lesquelles la portabilité des données de date et d’heure ou un degré limité de fuseau horaire reconnaissance est important, vous pouvez utiliser correspondant <xref:System.DateTimeOffset> constructeur.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> constructeur pour instancier un <xref:System.DateTime> valeur.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> est inférieur à 1 ou supérieur à 9999.  
  
 - ou -  
  
 <paramref name="month" /> est inférieur à 1 ou supérieur à 12.  
  
 - ou -  
  
 <paramref name="day" /> est inférieur à 1 ou supérieur au nombre de jours dans <paramref name="month" />.  
  
 - ou -  
  
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
 - ou -  
  
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> ne fait pas partie des valeurs <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Année (de 1 au nombre d’années de <c>calendar</c>).</param>
        <param name="month">Mois (de 1 au nombre de mois de <c>calendar</c>).</param>
        <param name="day">Jour (de 1 au nombre de jours de <c>month</c>).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <param name="calendar">Calendrier utilisé pour interpréter <c>year</c>, <c>month</c> et <c>day</c>.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec l'année, le mois, le jour, l'heure, la minute et la seconde spécifiés pour le calendrier spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété <xref:System.DateTime.Kind%2A> est initialisée à <xref:System.DateTimeKind.Unspecified>.  
  
 Les valeurs autorisées pour `year`, `month`, et `day` dépendent `calendar`. Une exception est levée si la date et heure spécifiées ne peuvent pas être exprimés à l’aide de `calendar`.  
  
 Le <xref:System.Globalization> espace de noms fournit plusieurs calendriers, notamment <xref:System.Globalization.GregorianCalendar> et <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructeur à deux reprises pour instancier deux <xref:System.DateTime> valeurs. Le premier appel instancie une <xref:System.DateTime> valeur en utilisant un <xref:System.Globalization.PersianCalendar> objet. Étant donné que le calendrier persan ne peut pas être désigné comme le calendrier par défaut pour une culture, affichage d’une date dans le calendrier persan requiert des appels individuels à ses <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, et <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> méthodes. Le deuxième appel au constructeur instancie un <xref:System.DateTime> valeur en utilisant un <xref:System.Globalization.HijriCalendar> objet. L’exemple modifie la culture actuelle en arabe (Syrie) et modifie le calendrier par défaut de la culture actuelle pour le calendrier Hijri. Étant donné que Hijri est le calendrier par défaut de la culture actuelle, la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthode utilise pour mettre en forme la date. Lors de la restauration de la culture actuelle précédente (qui est anglais (États-Unis) dans ce cas), la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthode utilise le calendrier grégorien de valeur par défaut de la culture actuelle pour mettre en forme la date.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> n’appartient pas à la plage prise en charge par <paramref name="calendar" />.  
  
 - ou -  
  
 <paramref name="month" /> est inférieur à 1 ou supérieur au nombre de mois dans <paramref name="calendar" />.  
  
 - ou -  
  
 <paramref name="day" /> est inférieur à 1 ou supérieur au nombre de jours dans <paramref name="month" />.  
  
 - ou -  
  
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
 - ou -  
  
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Année (1 à 9999).</param>
        <param name="month">Mois (1 à 12).</param>
        <param name="day">Jour (de 1 au nombre de jours de <c>month</c>).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <param name="millisecond">Millisecondes (0 à 999).</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec l'année, le mois, le jour, l'heure, la minute, la seconde et la milliseconde spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur interprète`year`, `month`, et `day` comme une année, mois et jour dans le calendrier grégorien. Pour instancier un <xref:System.DateTime> valeur à l’aide de l’année, mois et jour dans un autre calendrier, appelez le <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructeur.  
  
 La propriété <xref:System.DateTime.Kind%2A> est initialisée à <xref:System.DateTimeKind.Unspecified>.  
  
 Pour les applications dans lesquelles la portabilité des données de date et d’heure ou un degré limité de fuseau horaire reconnaissance est important, vous pouvez utiliser correspondant <xref:System.DateTimeOffset> constructeur.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> constructeur pour instancier un <xref:System.DateTime> valeur.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> est inférieur à 1 ou supérieur à 9999.  
  
 - ou -  
  
 <paramref name="month" /> est inférieur à 1 ou supérieur à 12.  
  
 - ou -  
  
 <paramref name="day" /> est inférieur à 1 ou supérieur au nombre de jours dans <paramref name="month" />.  
  
 - ou -  
  
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
 - ou -  
  
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="millisecond" /> est inférieur à 0 ou supérieur à 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Année (1 à 9999).</param>
        <param name="month">Mois (1 à 12).</param>
        <param name="day">Jour (de 1 au nombre de jours de <c>month</c>).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <param name="millisecond">Millisecondes (0 à 999).</param>
        <param name="kind">Une des valeurs d’énumération qui indique si <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> et <c>millisecond</c> spécifient une heure locale, une heure UTC, ou aucune des deux.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec l'année, le mois, le jour, l'heure, la minute, la seconde, la milliseconde et l'heure UTC ou locale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur interprète`year`, `month`, et `day` comme une année, mois et jour dans le calendrier grégorien. Pour instancier un <xref:System.DateTime> valeur à l’aide de l’année, mois et jour dans un autre calendrier, appelez le <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> constructeur.  
  
 Pour les applications dans lesquelles la portabilité des données de date et d’heure ou un degré limité de fuseau horaire reconnaissance est important, vous pouvez utiliser correspondant <xref:System.DateTimeOffset> constructeur.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> constructeur pour instancier un <xref:System.DateTime> valeur.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> est inférieur à 1 ou supérieur à 9999.  
  
 - ou -  
  
 <paramref name="month" /> est inférieur à 1 ou supérieur à 12.  
  
 - ou -  
  
 <paramref name="day" /> est inférieur à 1 ou supérieur au nombre de jours dans <paramref name="month" />.  
  
 - ou -  
  
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
 - ou -  
  
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="millisecond" /> est inférieur à 0 ou supérieur à 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> ne fait pas partie des valeurs <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Année (de 1 au nombre d’années de <c>calendar</c>).</param>
        <param name="month">Mois (de 1 au nombre de mois de <c>calendar</c>).</param>
        <param name="day">Jour (de 1 au nombre de jours de <c>month</c>).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <param name="millisecond">Millisecondes (0 à 999).</param>
        <param name="calendar">Calendrier utilisé pour interpréter <c>year</c>, <c>month</c> et <c>day</c>.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec l'année, le mois, le jour, l'heure, la minute, la seconde et la milliseconde spécifiés pour le calendrier spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété <xref:System.DateTime.Kind%2A> est initialisée à <xref:System.DateTimeKind.Unspecified>.  
  
 Les valeurs autorisées pour `year`, `month`, et `day` dépendent `calendar`. Une exception est levée si la date et heure spécifiées ne peuvent pas être exprimés à l’aide de `calendar`.  
  
 Pour les applications dans lesquelles la portabilité des données de date et d’heure ou un degré limité de fuseau horaire reconnaissance est important, vous pouvez utiliser correspondant <xref:System.DateTimeOffset> constructeur.  
  
 Le <xref:System.Globalization> espace de noms fournit plusieurs calendriers, notamment <xref:System.Globalization.GregorianCalendar> et <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructeur à deux reprises pour instancier deux <xref:System.DateTime> valeurs. Le premier appel instancie une <xref:System.DateTime> valeur en utilisant un <xref:System.Globalization.PersianCalendar> objet. Étant donné que le calendrier persan ne peut pas être désigné comme le calendrier par défaut pour une culture, affichage d’une date dans le calendrier persan requiert des appels individuels à ses <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, et <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> méthodes. Le deuxième appel au constructeur instancie un <xref:System.DateTime> valeur en utilisant un <xref:System.Globalization.HijriCalendar> objet. L’exemple modifie la culture actuelle en arabe (Syrie) et modifie le calendrier par défaut de la culture actuelle pour le calendrier Hijri. Étant donné que Hijri est le calendrier par défaut de la culture actuelle, la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthode utilise pour mettre en forme la date. Lors de la restauration de la culture actuelle précédente (qui est anglais (États-Unis) dans ce cas), la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthode utilise le calendrier grégorien de valeur par défaut de la culture actuelle pour mettre en forme la date.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> n’appartient pas à la plage prise en charge par <paramref name="calendar" />.  
  
 - ou -  
  
 <paramref name="month" /> est inférieur à 1 ou supérieur au nombre de mois dans <paramref name="calendar" />.  
  
 - ou -  
  
 <paramref name="day" /> est inférieur à 1 ou supérieur au nombre de jours dans <paramref name="month" />.  
  
 - ou -  
  
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
 - ou -  
  
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="millisecond" /> est inférieur à 0 ou supérieur à 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Année (de 1 au nombre d’années de <c>calendar</c>).</param>
        <param name="month">Mois (de 1 au nombre de mois de <c>calendar</c>).</param>
        <param name="day">Jour (de 1 au nombre de jours de <c>month</c>).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <param name="millisecond">Millisecondes (0 à 999).</param>
        <param name="calendar">Calendrier utilisé pour interpréter <c>year</c>, <c>month</c> et <c>day</c>.</param>
        <param name="kind">Une des valeurs d’énumération qui indique si <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> et <c>millisecond</c> spécifient une heure locale, une heure UTC, ou aucune des deux.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTime" /> avec l'année, le mois, le jour, l'heure, la minute, la seconde, la milliseconde et l'heure UTC ou locale spécifiés pour le calendrier spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les valeurs autorisées pour `year`, `month`, et `day` paramètres dépendent de le `calendar` paramètre. Une exception est levée si la date et heure spécifiées ne peuvent pas être exprimés à l’aide de `calendar`.  
  
 Pour les applications dans lesquelles la portabilité des données de date et d’heure ou un degré limité de fuseau horaire reconnaissance est important, vous pouvez utiliser correspondant <xref:System.DateTimeOffset> constructeur.  
  
 Le <xref:System.Globalization> espace de noms fournit plusieurs calendriers, notamment <xref:System.Globalization.GregorianCalendar> et <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> constructeur à deux reprises pour instancier deux <xref:System.DateTime> valeurs. Le premier appel instancie une <xref:System.DateTime> valeur en utilisant un <xref:System.Globalization.PersianCalendar> objet. Étant donné que le calendrier persan ne peut pas être désigné comme le calendrier par défaut pour une culture, affichage d’une date dans le calendrier persan requiert des appels individuels à ses <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, et <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> méthodes. Le deuxième appel au constructeur instancie un <xref:System.DateTime> valeur en utilisant un <xref:System.Globalization.HijriCalendar> objet. L’exemple modifie la culture actuelle en arabe (Syrie) et modifie le calendrier par défaut de la culture actuelle pour le calendrier Hijri. Étant donné que Hijri est le calendrier par défaut de la culture actuelle, la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthode utilise pour mettre en forme la date. Lors de la restauration de la culture actuelle précédente (qui est anglais (États-Unis) dans ce cas), la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthode utilise le calendrier grégorien de valeur par défaut de la culture actuelle pour mettre en forme la date.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> n’appartient pas à la plage prise en charge par <paramref name="calendar" />.  
  
 - ou -  
  
 <paramref name="month" /> est inférieur à 1 ou supérieur au nombre de mois dans <paramref name="calendar" />.  
  
 - ou -  
  
 <paramref name="day" /> est inférieur à 1 ou supérieur au nombre de jours dans <paramref name="month" />.  
  
 - ou -  
  
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
 - ou -  
  
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.  
  
 - ou -  
  
 <paramref name="millisecond" /> est inférieur à 0 ou supérieur à 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> ne fait pas partie des valeurs <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Intervalle de temps positif ou négatif.</param>
        <summary>Retourne un nouveau <see cref="T:System.DateTime" /> qui ajoute la valeur du <see cref="T:System.TimeSpan" /> spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est la somme de la date et de l'heure représentées par cette instance et de l'intervalle de temps représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.DateTime.Add%2A> méthode pour ajouter plusieurs types d’intervalle de temps (jours, heures, minutes, secondes ou millisecondes) en une seule opération. Le comportement de cette méthode est identique à celui de l’opérateur d’addition. Le <xref:System.DateTime> structure prend également en charge les méthodes d’addition spécialisées (telles que <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, et <xref:System.DateTime.AddMinutes%2A>) pour chaque intervalle de temps.  
  
 Le <xref:System.DateTime.Add%2A> méthode prend en compte les années bissextiles et le nombre de jours dans un mois lors de l’exécution de l’arithmétique de date.  
  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime>. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> dont la valeur est le résultat de cette opération. Le <xref:System.DateTime.Kind%2A> propriété du nouveau <xref:System.DateTime> instance est identique à celle de l’instance actuelle.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.Add%2A> (méthode). Elle calcule le jour de la semaine est 36 jours (864 heures) à partir de ce moment.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de jours entiers et partiels. Le paramètre <c>value</c> peut être négatif ou positif.</param>
        <summary>Retourne un nouveau <see cref="T:System.DateTime" /> qui ajoute le nombre de jours spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l'heure représentées par cette instance et du nombre de jours représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime>. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> dont la valeur est le résultat de cette opération.  
  
 La partie fractionnaire du `value` est la partie fractionnaire d’un jour. Par exemple, 4,5 équivaut à 4 jours, 12 heures, 0 minutes, 0 seconde, 0 milliseconde et 0 graduation.  
  
 Le `value` paramètre est arrondi à la milliseconde.  
  
 Le <xref:System.DateTime.AddDays%2A> méthode prend en compte les années bissextiles et le nombre de jours dans un mois lors de l’exécution de l’arithmétique de date.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.DateTime.AddDays%2A> méthode pour déterminer le jour de la semaine 36 jours après la date actuelle.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre d'heures entières et partielles. Le paramètre <c>value</c> peut être négatif ou positif.</param>
        <summary>Retourne un nouveau <see cref="T:System.DateTime" /> qui ajoute le nombre d'heures spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l'heure représentées par cette instance et du nombre d'heures représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime>. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> dont la valeur est le résultat de cette opération. Le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet est le même que celui de `value`.  
  
 La partie fractionnaire du `value` est la partie fractionnaire d’une heure. Par exemple, 4,5 équivaut à 4 heures, 30 minutes, 0 seconde, 0 milliseconde et 0 graduation.  
  
 Le `value` paramètre est arrondi à la milliseconde.  
  
 Conversion des intervalles de temps de moins d’une heure à une fraction peut impliquer une perte de précision si le résultat est un nombre décimal périodique sans fin d’exécution. (Par exemple, une minute est à 0,016667 heure). Si cela pose problème, vous pouvez utiliser la <xref:System.DateTime.Add%2A> méthode, qui vous permet de spécifier plusieurs types d’intervalle de temps dans un seul appel de méthode et élimine la nécessité de convertir les intervalles de temps en parties fractionnaires d’une heure.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.DateTime.AddHours%2A> méthode pour ajouter un nombre de valeurs entières et partielles à une date et une heure. Il illustre également la perte de précision provoquée par le passage à la méthode une valeur qui inclut une partie fractionnaire.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de millisecondes entières et partielles. Le paramètre <c>value</c> peut être négatif ou positif. Notez que cette valeur est arrondie à l'entier le plus proche.</param>
        <summary>Retourne un nouveau <see cref="T:System.DateTime" /> qui ajoute le nombre de millisecondes spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l'heure représentées par cette instance et du nombre de millisecondes représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime>. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> dont la valeur est le résultat de cette opération.  
  
 La partie fractionnaire du `value` est la partie fractionnaire d’une milliseconde. Par exemple, 4,5 équivaut à 4 millisecondes et 5000 graduations, où une milliseconde = 10000 graduations.  
  
 Le `value` paramètre est arrondi à l’entier le plus proche.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.AddMilliseconds%2A> méthode pour ajouter une milliseconde et 1,5 milliseconde à une <xref:System.DateTime> valeur. Ensuite, il affiche chaque nouvelle valeur et affiche la différence entre lui et la valeur d’origine. La différence est affichée comme un intervalle de temps et en tant que nombre de graduations. L’exemple indique clairement qu’une milliseconde est égale à 10 000 graduations. Il montre également que les millisecondes fractionnaires sont arrondies avant d’effectuer l’ajout ; le <xref:System.DateTime> valeur qui résulte de l’ajout de 1,5 milliseconde à la date d’origine est de 2 millisecondes supérieures à la date d’origine.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de minutes entières et partielles. Le paramètre <c>value</c> peut être négatif ou positif.</param>
        <summary>Retourne un nouveau <see cref="T:System.DateTime" /> qui ajoute le nombre de minutes spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l'heure représentées par cette instance et du nombre de minutes représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime>. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> dont la valeur est le résultat de cette opération.  
  
 La partie fractionnaire du `value` est la partie fractionnaire d’une minute. Par exemple, 4,5 équivaut à 4 minutes, 30 secondes, 0 milliseconde et 0 graduation.  
  
 Le `value` paramètre est arrondi à la milliseconde.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.DateTime.AddMinutes%2A> méthode pour ajouter un nombre de valeurs entières et partielles à une date et une heure.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Nombre de mois. Le paramètre <c>months</c> peut être négatif ou positif.</param>
        <summary>Retourne un nouveau <see cref="T:System.DateTime" /> qui ajoute le nombre de mois spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l'heure représentées par cette instance et de <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime> objet. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> objet dont la valeur est le résultat de cette opération.  
  
 Le <xref:System.DateTime.AddMonths%2A> méthode calcule le mois résultant et l’année, en prenant en compte les années bissextiles et le nombre de jours dans un mois, puis ajuste la partie jour de la <xref:System.DateTime> objet. Si le jour résultant n’est pas un jour valide du mois obtenu, le dernier jour valide du mois résultant est utilisé. Par exemple, le 31 mars + 1 mois = le 30 avril et le 31 mars - 1 mois = 28 février pour une année bissextile et 29 février pour une année bissextile.  
  
 La partie heure du jour de la <xref:System.DateTime> objet reste identique à cette instance.  
  
   
  
## Examples  
 L’exemple suivant ajoute comprise entre 0 et 15 mois au dernier jour de décembre 2015. Dans ce cas, la méthode AddMonths retourne la date du dernier jour de chaque mois et gère correctement les années bissextiles.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.  
  
 - ou -  
  
 <paramref name="months" /> est inférieur à -120 000 ou supérieur à 120 000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de secondes entières et partielles. Le paramètre <c>value</c> peut être négatif ou positif.</param>
        <summary>Retourne un nouveau <see cref="T:System.DateTime" /> qui ajoute le nombre de secondes spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l'heure représentées par cette instance et du nombre de secondes représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime>. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> dont la valeur est le résultat de cette opération.  
  
 La partie fractionnaire du `value` est la fraction de seconde. Par exemple, 4,5 équivaut à 4 secondes, 500 millisecondes et 0 graduation.  
  
 Le `value` paramètre est arrondi à la milliseconde.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.AddSeconds%2A> méthode pour ajouter les 30 secondes et le nombre de secondes par jour à un <xref:System.DateTime> valeur. Ensuite, il affiche chaque nouvelle valeur et affiche la différence entre lui et la valeur d’origine. La différence est affichée comme un intervalle de temps et en tant que nombre de graduations.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Nombre de graduations de 100 nanosecondes. Le paramètre <c>value</c> peut être positif ou négatif.</param>
        <summary>Retourne un nouveau <see cref="T:System.DateTime" /> qui ajoute le nombre de graduations spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l'heure représentées par cette instance et du temps représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime>. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> dont la valeur est le résultat de cette opération.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Nombre d'années. Le paramètre <c>value</c> peut être négatif ou positif.</param>
        <summary>Retourne un nouveau <see cref="T:System.DateTime" /> qui ajoute le nombre d'années spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l'heure représentées par cette instance et du nombre d'années représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime> objet. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> objet dont la valeur est le résultat de cette opération.  
  
 Le <xref:System.DateTime.AddYears%2A> méthode calcule l’année résultante en tenant compte des années bissextiles. La partie mois et l’heure du jour de la <xref:System.DateTime> objet reste identique à cette instance.  
  
 Si l’instance actuelle représente l’année bissextile dans une année bissextile, la valeur de retour dépend de la date de la cible :  
  
-   Si `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> est également une année bissextile, valeur de retour représente le jour de cette année bissextile. Par exemple, si quatre ans est ajouté à 29 février 2012, la date renvoyée est le 29 février 2016.  
  
-   Si `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> n’est pas une année bissextile, la valeur de retour représente le jour précédant le jour de cette année bissextile. Par exemple, si une année est ajoutée à 29 février 2012, la date de retour est 28 février 2013.  
  
 L’exemple suivant illustre l’utilisation de la <xref:System.DateTime.AddYears%2A> méthode avec un <xref:System.DateTime> valeur qui représente un jour de l’année bissextile. Il affiche la date pour les années antérieures à quinze et quinze années qui suivent le 29 février 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> ou le <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Premier objet à comparer.</param>
        <param name="t2">Deuxième objet à comparer.</param>
        <summary>Compare deux instances de <see cref="T:System.DateTime" /> et retourne un entier qui indique si la première instance est antérieure, identique ou ultérieure à la deuxième instance.</summary>
        <returns>Nombre signé indiquant les valeurs relatives de <paramref name="t1" /> et de <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Type valeur  
  
 </term><description> Condition  
  
 </description></listheader><item><term> Inférieur à zéro  
  
 </term><description><paramref name="t1" /> est antérieur à <paramref name="t2" />.  
  
 </description></item><item><term> Zéro  
  
 </term><description><paramref name="t1" /> est identique à <paramref name="t2" />.  
  
 </description></item><item><term> Supérieur à zéro  
  
 </term><description><paramref name="t1" /> est ultérieur à <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour déterminer la relation de `t1` à `t2`, le <xref:System.DateTime.Compare%2A> méthode compare la <xref:System.DateTime.Ticks%2A> propriété de `t1` et `t2` , mais ignore leurs <xref:System.DateTime.Kind%2A> propriété. Avant de comparer <xref:System.DateTime> objets, vérifiez que les objets représentent les heures dans le même fuseau horaire.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.Compare%2A> (méthode).  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compare la valeur de cette instance à une valeur <see cref="T:System.DateTime" /> spécifiée et indique si cette instance est antérieure, identique ou ultérieure à la valeur <see cref="T:System.DateTime" /> spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les deux surcharges de la <xref:System.DateTime.CompareTo%2A> méthode retourne un nombre signé qui indique la valeur relative de cette instance et le `value` argument, comme indiqué dans le tableau suivant.  
  
|Value|Description |  
|-----------|-----------------|  
|Inférieure à zéro|Cette instance est antérieure à `value`.|  
|Zéro|Cette instance est la même que `value`.|  
|Supérieure à zéro|Cette instance est ultérieure à `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Objet à comparer avec l'instance actuelle.</param>
        <summary>Compare la valeur de cette instance à une valeur <see cref="T:System.DateTime" /> spécifiée et retourne un entier qui indique si cette instance est antérieure, identique ou ultérieure à la valeur <see cref="T:System.DateTime" /> spécifiée.</summary>
        <returns>Nombre signé indiquant les valeurs relatives de cette instance et du paramètre <paramref name="value" />.  
  
 <list type="table"><listheader><term> Valeur  
  
 </term><description> Description  
  
 </description></listheader><item><term> Inférieur à zéro  
  
 </term><description> Cette instance est antérieure à <paramref name="value" />.  
  
 </description></item><item><term> Zéro  
  
 </term><description> Cette instance est la même que <paramref name="value" />.  
  
 </description></item><item><term> Supérieur à zéro  
  
 </term><description> Cette instance est ultérieure à <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour déterminer la relation de l’instance actuelle en `value`, le <xref:System.DateTime.CompareTo%2A> méthode compare la <xref:System.DateTime.Ticks%2A> propriété de l’instance actuelle et `value` mais ignore leur <xref:System.DateTime.Kind%2A> propriété.  Avant de comparer <xref:System.DateTime> objets, assurez-vous que les objets représentent les heures dans le même fuseau horaire. Vous pouvez le faire en comparant les valeurs de leurs <xref:System.DateTime.Kind%2A> propriétés.  
  
 Cette méthode implémente la <xref:System.IComparable%601?displayProperty=nameWithType> de l’interface et effectue légèrement meilleures que les <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> surcharge de méthode, car il n’a pas à convertir le `value` paramètre à un objet.  
  
   
  
## Examples  
 L’exemple suivant instancie trois <xref:System.DateTime> des objets, un objet représentant la date du jour date, une autre qui représente la date de l’année précédente et une troisième qui représente la date d’un an dans le futur. Il appelle ensuite la <xref:System.DateTime.CompareTo%28System.DateTime%29> (méthode) et affiche le résultat de la comparaison.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet boxed à comparer ou <see langword="null" />.</param>
        <summary>Compare la valeur de cette instance à un objet spécifié qui contient une valeur <see cref="T:System.DateTime" /> spécifiée, et retourne un entier qui indique si cette instance est antérieure, identique ou ultérieure à la valeur <see cref="T:System.DateTime" /> spécifiée.</summary>
        <returns>Nombre signé indiquant les valeurs relatives de cette instance et <paramref name="value" />.  
  
 <list type="table"><listheader><term> Valeur  
  
 </term><description> Description  
  
 </description></listheader><item><term> Inférieur à zéro  
  
 </term><description> Cette instance est antérieure à <paramref name="value" />.  
  
 </description></item><item><term> Zéro  
  
 </term><description> Cette instance est la même que <paramref name="value" />.  
  
 </description></item><item><term> Supérieur à zéro  
  
 </term><description> Cette instance est ultérieure à <paramref name="value" /> ou <paramref name="value" /> est <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour déterminer la relation de l’instance actuelle en `value`, le <xref:System.DateTime.CompareTo%2A> méthode compare la <xref:System.DateTime.Ticks%2A> propriété de l’instance actuelle et `value` mais ignore leur <xref:System.DateTime.Kind%2A> propriété. Avant de comparer <xref:System.DateTime> objets, assurez-vous que les objets représentent les heures dans le même fuseau horaire. Vous pouvez le faire en comparant les valeurs de leurs <xref:System.DateTime.Kind%2A> propriétés.  
  
 N’importe quelle instance de <xref:System.DateTime>, quelle que soit sa valeur, est considéré comme supérieur à `null`.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.CompareTo%2A> (méthode).  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> n'est pas un <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « date » de cette instance.</summary>
        <value>Nouvel objet dont la date est identique à celle de cette instance, et valeur d'heure définie à 12:00:00 minuit (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> valeur est identique à celle de l’instance actuelle.  
  
 Étant donné que la <xref:System.DateTime> type représente les deux dates et heures dans un type unique, il est important d’éviter une mauvaise interprétation d’une date retournée par le <xref:System.DateTime.Date%2A> propriété comme une date et une heure.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.Date%2A> propriété pour extraire le composant date d’une <xref:System.DateTime> valeur avec son composant heure définie sur zéro (ou 0:00:00, ou minuit). Il illustre également que, selon la chaîne de format utilisée pour afficher le <xref:System.DateTime> valeur, le composant heure peut continuer à apparaître dans la sortie mise en forme.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le jour du mois représenté par cette instance.</summary>
        <value>Composant « jour », exprimé comme une valeur comprise entre 1 et 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.Day%2A> propriété retourne toujours le jour du mois du calendrier grégorien, même si le courant <xref:System.DateTime> valeur a été instanciée à l’aide d’un autre calendrier ou si le thread actuel calendrier par défaut de la culture n’est pas le calendrier grégorien. Pour extraire le jour du mois d’une date particulière à l’aide d’un autre calendrier, appelez de ce calendrier <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> méthode. L’exemple suivant utilise à la fois le <xref:System.DateTime.Day%2A> propriété et la <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> méthode pour extraire le jour du mois pour une <xref:System.DateTime> valeur qui est instancié à l’aide du calendrier islamique (Hijri).  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 De même, l’exemple suivant utilise à la fois le <xref:System.DateTime.Day%2A> propriété et la <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> méthode pour extraire le jour du mois lorsque la culture actuelle du thread est ar-SA, qui utilise Hijri comme son calendrier par défaut.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 L’exemple suivant illustre le <xref:System.DateTime.Day%2A> propriété.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le jour de semaine représenté par cette instance.</summary>
        <value>Constante énumérée qui indique le jour de la semaine de cette valeur <see cref="T:System.DateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de l’une des constantes dans le <xref:System.DayOfWeek> énumération est comprise entre <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> à <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Si casté en un entier, sa valeur est comprise entre zéro (ce qui signifie <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) et six (qui indique <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Le <xref:System.DateTime.DayOfWeek%2A> propriété retourne une constante énumérée ; il ne reflète pas les paramètres régionaux et linguistiques d’un système. Pour extraire une chaîne représentant un nom de jour de semaine localisé pour une date particulière, appelez l’une des surcharges de la <xref:System.DateTime.ToString%2A> méthode inclut un `format` paramètre et lui passer soit le `ddd` ou `dddd` chaînes de format personnalisées. Pour plus d’informations, consultez [Comment : extraire le jour de la semaine d’une Date spécifique](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.DayOfWeek%2A> propriété et la <xref:System.DayOfWeek?displayProperty=nameWithType> énumération.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le jour de l'année représenté par cette instance.</summary>
        <value>Jour de l'année, exprimé comme une valeur comprise entre 1 et 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.DayOfYear%2A> propriété prend en compte l’années bissextiles lorsqu’il calcule le jour de l’année. La valeur de propriété reflète toujours le jour de l’année dans le calendrier grégorien, quel que soit le calendrier actuel de la culture actuelle thread. Pour extraire le jour de l’année dans un calendrier différent, appelez le <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> méthode de ce calendrier.  
  
   
  
## Examples  
 L’exemple suivant affiche le jour de l’année du 31 décembre 2010-2020 années dans le calendrier grégorien. Notez que l’exemple montre que le 31 décembre est le 366ème jour de l’année d’une année bissextile.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Année.</param>
        <param name="month">Mois (chiffre compris entre 1 et 12).</param>
        <summary>Retourne le nombre de jours compris dans le mois et l'année spécifiés.</summary>
        <returns>Nombre de jours de <paramref name="month" /> pour le <paramref name="year" /> spécifié.  
  
 Par exemple, si <paramref name="month" /> est égal à 2 pour février, la valeur de retour est 28 ou 29, suivant que <paramref name="year" /> est une année bissextile ou non.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.DaysInMonth%2A> méthode interprète toujours `month` et `year` comme le mois et l’année du calendrier grégorien de calendrier même si le calendrier grégorien n’est pas un calendrier actuel de la culture actuelle. Pour obtenir le nombre de jours dans un mois spécifié d’un calendrier particulier, appelez de ce calendrier <xref:System.Globalization.Calendar.GetDaysInMonth%2A> méthode.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser la <xref:System.DateTime.DaysInMonth%2A> méthode pour déterminer le nombre de jours de juillet 2001, février 1998 (une année bissextile) et février 1996 (une année bissextile).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 L’exemple suivant affiche le nombre de jours dans chaque mois de l’année spécifiée dans un tableau d’entiers.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> est inférieur à 1 ou supérieur à 12.  
  
 - ou -  
  
 <paramref name="year" /> est inférieur à 1 ou supérieur à 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une valeur indiquant si deux objets <see cref="T:System.DateTime" />, ou si une instance de <see cref="T:System.DateTime" /> et un autre objet ou <see cref="T:System.DateTime" /> ont la même valeur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Objet à comparer à cette instance.</param>
        <summary>Renvoie une valeur indiquant si la valeur de cette instance est égale à la valeur de l'instance <see cref="T:System.DateTime" /> spécifiée.</summary>
        <returns>
          <see langword="true" /> si le paramètre <paramref name="value" /> est égal à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’instance actuelle et `value` sont égales si leurs <xref:System.DateTime.Ticks%2A> les valeurs de propriété sont égales. Leur <xref:System.DateTime.Kind%2A> valeurs de propriété ne sont pas considérés comme dans le test d’égalité.  
  
 Cette méthode implémente la <xref:System.IEquatable%601?displayProperty=nameWithType> de l’interface et effectue légèrement meilleures que les <xref:System.DateTime.Equals%2A> (méthode), car le `value` paramètre n’a pas à convertir en un objet.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.Equals%2A> (méthode).  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet à comparer à cette instance.</param>
        <summary>Retourne une valeur indiquant si cette instance équivaut à un objet spécifié.</summary>
        <returns>
          <see langword="true" /> si <paramref name="value" /> est une instance de <see cref="T:System.DateTime" /> et est égal à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’instance actuelle et `value` sont égales si leurs <xref:System.DateTime.Ticks%2A> les valeurs de propriété sont égales. Leur <xref:System.DateTime.Kind%2A> valeurs de propriété ne sont pas considérés comme dans le test d’égalité.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.Equals%2A> (méthode).  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Premier objet à comparer.</param>
        <param name="t2">Deuxième objet à comparer.</param>
        <summary>Retourne une valeur indiquant si deux instances de <see cref="T:System.DateTime" /> représentent la même valeur de date et d'heure.</summary>
        <returns>
          <see langword="true" /> si les deux valeurs sont égales ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` et `t2` sont égales si leurs <xref:System.DateTime.Ticks%2A> les valeurs de propriété sont égales. Leur <xref:System.DateTime.Kind%2A> valeurs de propriété ne sont pas considérés comme dans le test d’égalité.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.Equals%2A> (méthode).  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">Entier 64 bits signé qui encode la propriété <see cref="P:System.DateTime.Kind" /> dans un champ 2 bits et la propriété <see cref="P:System.DateTime.Ticks" /> dans un champ 62 bits.</param>
        <summary>Désérialise une valeur binaire 64 bits et recrée un objet <see cref="T:System.DateTime" /> sérialisé d'origine.</summary>
        <returns>Objet qui équivaut à l'objet <see cref="T:System.DateTime" /> qui a été sérialisé par la méthode <see cref="M:System.DateTime.ToBinary" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.DateTime.ToBinary%2A> pour convertir la valeur de la méthode <xref:System.DateTime> objet en une valeur binaire. Ensuite, utilisez la valeur binaire et la <xref:System.DateTime.FromBinary%2A> méthode pour recréer l’original <xref:System.DateTime> objet.  
  
> [!IMPORTANT]
>  Dans certains cas, le <xref:System.DateTime> valeur retournée par la <xref:System.DateTime.FromBinary%2A> méthode n’est pas identique à celle d’origine <xref:System.DateTime> valeur fournie à la <xref:System.DateTime.ToBinary%2A> (méthode). Pour plus d’informations, consultez la section suivante, « Réglage des heures locales ».  
  
## <a name="local-time-adjustment"></a>Ajustement de l’heure locale  
 Une heure locale, qui est une heure UTC ajustée pour le fuseau horaire local, est représentée par un <xref:System.DateTime> structure dont <xref:System.DateTime.Kind%2A> propriété a la valeur <xref:System.DateTimeKind.Local>. Lors de la restauration d’une variable locale <xref:System.DateTime> valeur à partir de la représentation binaire qui est générée par le <xref:System.DateTime.ToBinary%2A> (méthode), la <xref:System.DateTime.FromBinary%2A> méthode peut ajuster la valeur recréée afin qu’il ne soit pas égale à la valeur d’origine. Cela peut se produire dans les conditions suivantes :  
  
-   Si une variable locale <xref:System.DateTime> l’objet est sérialisé dans un fuseau horaire par la <xref:System.DateTime.ToBinary%2A> (méthode), puis désérialisé dans un autre fuseau horaire par la <xref:System.DateTime.FromBinary%2A> (méthode), l’heure locale représentée par résultant <xref:System.DateTime> objet est automatiquement ajusté au deuxième fuseau horaire.  
  
     Par exemple, considérez un <xref:System.DateTime> objet qui représente une heure locale de 15 heures. Une application qui s’exécute aux États-Unis. Fuseau horaire Pacifique utilise le <xref:System.DateTime.ToBinary%2A> méthode pour convertir <xref:System.DateTime> objet en une valeur binaire. Une autre application qui s’exécute aux États-Unis. Fuseau horaire est utilise ensuite la <xref:System.DateTime.FromBinary%2A> méthode pour convertir la valeur binaire à une nouvelle <xref:System.DateTime> objet. La valeur de la nouvelle <xref:System.DateTime> objet est de 18 h 00, ce qui représente le même point dans le temps que le 15 d’origine. valeur, mais est ajustée en heure locale dans le fuseau horaire est.  
  
-   Si la représentation binaire d’une variable locale <xref:System.DateTime> valeur représente une heure non valide dans le fuseau horaire local du système sur lequel <xref:System.DateTime.FromBinary%2A> est appelée, l’heure est ajustée afin qu’il soit valide.  
  
     Par exemple, la transition à partir de l’heure d’hiver à l’heure d’été se produit dans la zone Pacifique des États-Unis le 14 mars 2010, à 2 h 00, lorsque l’heure avance d’une heure à 3 h 00 du matin. Cet intervalle horaire est une heure non valide, autrement dit, un intervalle de temps qui n’existe pas dans ce fuseau horaire. L’exemple suivant montre que lorsqu’une heure qui se trouve dans cette plage est convertie en une valeur binaire par le <xref:System.DateTime.ToBinary%2A> (méthode) et est ensuite restaurée par le <xref:System.DateTime.FromBinary%2A> (méthode), la valeur d’origine est ajustée pour devenir une heure valide. Vous pouvez déterminer si une date particulière et la valeur d’heure peuvent être modifiée en le passant à la <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> méthode, comme l’exemple illustre.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considérations relatives à la version  
 En commençant par le .NET Framework version 2.0, un <xref:System.DateTime> structure se compose d’un champ Kind privé, qui indique si l’heure spécifiée sont heure locale, le temps universel coordonné (UTC) ou aucune des deux, concaténés à un champ Ticks privé, ce qui contient le nombre de graduations de 100 nanosecondes qui spécifient une date et une heure. Le nombre de graduations est accessible avec la <xref:System.DateTime.Ticks%2A> champ de propriété et theKind est accessible avec la <xref:System.DateTime.Kind%2A> propriété.  
  
 Avant le .NET Framework 2.0, si vous sérialisiez un <xref:System.DateTime> objet manuellement à la place à l’aide d’une interface de sérialisation comme <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, vous avez besoin sérialiser uniquement les données de graduations dans le <xref:System.DateTime>. À compter de .NET Framework 2.0, vous devez également sérialiser les données de type.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Heure de fichier Windows exprimée en graduations.</param>
        <summary>Convertit l'heure de fichier Windows spécifiée en heure locale équivalente.</summary>
        <returns>Objet qui représente l'heure locale équivalente à la date et à l'heure représentées par le paramètre <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Heure de fichier Windows est une valeur 64 bits qui représente le nombre d’intervalles de 100 nanosecondes écoulés depuis 12:00 minuit, le 1er janvier 1601. (C.E.) Heure (UTC). Windows utilise une heure de fichier pour enregistrer l’assignation d’une application crée, accède ou écrit dans un fichier.  
  
 Le `fileTime` paramètre spécifie une heure de fichier exprimée en graduations de 100 nanosecondes.  
  
 À compter de .NET Framework version 2.0, la valeur de retour est un <xref:System.DateTime> dont <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.FromFileTime%2A> (méthode).  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> est inférieur à 0 ou représente une heure supérieure à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage">
          <para>En règle générale, les <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> méthode restaurations un <see cref="T:System.DateTime" /> valeur qui a été enregistrée par le <see cref="M:System.DateTime.ToFileTime" /> (méthode). Toutefois, les deux valeurs peuvent différer dans les conditions suivantes :  
  
-   Si la sérialisation et désérialisation de la <see cref="T:System.DateTime" /> valeur se produisent dans des fuseaux horaires différents. Par exemple, si un <see cref="T:System.DateTime" /> valeur avec une durée de 12 h 30. aux États-Unis. Fuseau horaire est est sérialisé et désérialisé puis aux États-Unis Fuseau horaire Pacifique, la valeur d’origine de 12 h 30. est ajustée à 9 h 30. afin de refléter la différence entre les deux fuseaux horaires.  
  
-   Si le <see cref="T:System.DateTime" /> valeur sérialisée représente une heure non valide dans le fuseau horaire local. Dans ce cas, le <see cref="M:System.DateTime.ToFileTime" /> méthode ajuste restauré <see cref="T:System.DateTime" /> valeur afin qu’il représente une heure valide dans le fuseau horaire local.  
  
     Par exemple, la transition à partir de l’heure d’hiver à l’heure d’été se produit aux États-Unis. Fuseau horaire Pacifique le 14 mars 2010 à 2 h 00, lorsque l’heure avance d’une heure à 3 h 00 du matin. Cet intervalle horaire est une heure non valide, autrement dit, un intervalle de temps qui n’existe pas dans ce fuseau horaire. L’exemple suivant montre que lorsqu’une heure qui se trouve dans cette plage est convertie en une valeur d’entier long par la <see cref="M:System.DateTime.ToFileTime" /> (méthode) et est ensuite restaurée par le <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> (méthode), la valeur d’origine est ajustée pour devenir une heure valide. Vous pouvez déterminer si une date particulière et la valeur d’heure peuvent être modifiée en le passant à la <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> méthode, comme l’exemple illustre.  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Heure de fichier Windows exprimée en graduations.</param>
        <summary>Convertit l'heure de fichier Windows spécifiée en heure UTC équivalente.</summary>
        <returns>Objet qui représente l'heure UTC équivalente à la date et à l'heure représentées par le paramètre <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Heure de fichier Windows est une valeur 64 bits qui représente le nombre d’intervalles de 100 nanosecondes écoulés depuis 12:00 minuit, le 1er janvier 1601. (C.E.) Heure (UTC). Windows utilise une heure de fichier pour enregistrer l’assignation d’une application crée, accède ou écrit dans un fichier.  
  
 Le `fileTime` paramètre spécifie une heure de fichier exprimée en graduations de 100 nanosecondes.  
  
 À compter de .NET Framework version 2.0, la valeur de retour est un <xref:System.DateTime> dont <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> est inférieur à 0 ou représente une heure supérieure à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Date OLE Automation.</param>
        <summary>Retourne un <see cref="T:System.DateTime" /> qui équivaut à la date OLE Automation spécifiée.</summary>
        <returns>Objet qui représente la même date et la même heure que <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `d` paramètre est un nombre à virgule flottante double précision qui représente une date en tant que le nombre de jours avant ou après la date de base, minuit, 30 décembre 1899. La signe et la partie entière de `d` encodent la date comme un décalage de jour positif ou négatif à partir de 30 décembre 1899 et la valeur absolue de la partie fractionnaire de `d` encode l’heure du jour sous forme de fraction de déplacement d’un jour à minuit. `d` doit être une valeur entre moins 657435.0 via 2958465.99999999 positif.  
  
 Notez qu’en raison du mode de codage des dates, il existe deux façons de représenter n’importe quel moment du 30 décembre 1899. Par exemple, de -0,5 et 0,5 signifient MIDI le 30 décembre 1899, car le déplacement d’un jour de plus ou moins zéro jours à compter de la date de base est toujours la date de base, et correspond à un déplacement demi-journée comprise entre minuit et midi.  
  
 Consultez <xref:System.DateTime.ToOADate%2A> pour plus d’informations sur OLE Automation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La date n’est pas une valeur de date OLE Automation valide.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la valeur de cette instance en toutes les représentations sous forme de chaîne prises en charge par les spécificateurs de format de date et d'heure standard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Vous ne devez pas supposer que plusieurs appels à la <xref:System.DateTime.GetDateTimeFormats%2A> surcharges retournera des données identiques. En fonction de la surcharge spécifique, les données retournées par cette méthode peuvent changer si la culture actuelle change, l’utilisateur remplace les paramètres de culture individuels, ou une mise à jour se produit à des données de culture du système.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de cette instance en toutes les représentations sous forme de chaîne prises en charge par les spécificateurs de format de date et d'heure standard.</summary>
        <returns>Tableau de chaînes dont chaque élément est la représentation de la valeur de cette instance, mise en forme à l'aide d'un des spécificateurs de format de date et d'heure standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau de chaînes retourné par la <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> méthode équivaut à combiner les tableaux de chaînes retournés par les appels séparés à la <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> méthode avec le « d », « D », « f », « F », « g », « G », « m », « o », « r », « s », « t », « T », « u », « U » et les chaînes de format standard « y ». Pour plus d’informations sur les spécificateurs de format standard, consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Chaque élément de la valeur de retour est mis en forme à l’aide des informations de la culture actuelle. Pour plus d’informations sur les informations de mise en forme propres à la culture pour la culture actuelle, consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Étant donné que cette méthode utilise les données dépendantes de la culture, vous ne devez pas supposer renvoyant des données identiques dans plusieurs appels à la méthode. Les données retournées par cette méthode peuvent changer si la culture actuelle change, l’utilisateur remplace les paramètres de culture individuels, ou une mise à jour se produit à des données de culture du système.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> (méthode). Il affiche la représentation sous forme de chaîne d’une date à l’aide de tous les délais standard et les formats d’heure dans la culture actuelle de l’ordinateur, qui est dans ce cas en-US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 L’exemple affiche la sortie suivante :  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne de format de date et d’heure standard.</param>
        <summary>Convertit la valeur de cette instance en toutes les représentations sous forme de chaîne prises en charge par le spécificateur de format de date et d'heure standard spécifié.</summary>
        <returns>Tableau de chaînes dont chaque élément est la représentation de la valeur de cette instance mise en forme à l'aide du spécificateur de format de date et d'heure standard <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `format` paramètre peut être un des spécificateurs de format d’heure et date standard. Notamment, d, D, f, F, g, G, M ou m, O (ou o), R (ou r), s, t, T, u, U et Y (ou y). Pour plus d’informations, consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Chaque élément de la valeur de retour est mis en forme à l’aide des informations de la culture actuelle. Pour plus d’informations sur les informations de mise en forme propres à la culture pour la culture actuelle, consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Étant donné que cette méthode utilise les données dépendantes de la culture, vous ne devez pas supposer renvoyant des données identiques dans plusieurs appels à la méthode. Les données retournées par cette méthode peuvent changer si la culture actuelle change, l’utilisateur remplace les paramètres de culture individuels, ou une mise à jour se produit à des données de culture du système.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> (méthode). Il affiche la représentation sous forme de chaîne d’une date en utilisant le spécificateur de format de date longue (« D ») pour la culture actuelle.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> n'est pas un caractère de spécificateur de format de date et d'heure standard valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture se rapportant à cette instance.</param>
        <summary>Convertit la valeur de cette instance en toutes les représentations sous forme de chaîne prises en charge par les spécificateurs de format de date et d'heure standard spécifié et les données de format propres à la culture spécifiées.</summary>
        <returns>Tableau de chaînes dont chaque élément est la représentation de la valeur de cette instance, mise en forme à l'aide d'un des spécificateurs de format de date et d'heure standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau de chaînes retourné par la <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> méthode équivaut à combiner les tableaux de chaînes retournés par les appels séparés à la <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthode avec le « d », « D », « f », « F », « g », « G », « m », « o », « r », « s », « t », « T », « u », « U » et les chaînes de format standard « y ». Pour plus d’informations sur les spécificateurs de format standard, consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Chaque élément de la valeur de retour est mise en forme à l’aide des informations spécifiques à la culture fournies par `provider`.  
  
> [!IMPORTANT]
>  Étant donné que cette méthode utilise les données dépendantes de la culture, vous ne devez pas supposer que plusieurs appels à la méthode retourneront des données identiques, sauf si `provider` est un <xref:System.Globalization.CultureInfo> objet qui représente la culture dite indifférente. Les données retournées par cette méthode peuvent changer si l’utilisateur substitue les paramètres de culture individuels `provider` ou si une mise à jour se produit pour les données de culture du système pour `provider`.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> (méthode). Il affiche la représentation sous forme de chaîne d’une date à l’aide de tous les délais standard et les formats d’heure pour la culture fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 L’exemple affiche la sortie suivante :  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne de format de date et d’heure.</param>
        <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture se rapportant à cette instance.</param>
        <summary>Convertit la valeur de cette instance en toutes les représentations sous forme de chaîne prises en charge par le spécificateur de format de date et d'heure standard spécifié et les données de format propres à la culture.</summary>
        <returns>Tableau de chaînes dont chaque élément est la représentation de la valeur de cette instance, mise en forme à l'aide d'un des spécificateurs de format de date et d'heure standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre de format peut être un des spécificateurs de format d’heure et date standard. Notamment, d, D, f, F, g, G, M ou m, O (ou o), R (ou r), s, t, T, u, U et Y (ou y). Pour plus d’informations, consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Chaque élément de la valeur de retour est mise en forme à l’aide des informations spécifiques à la culture fournies par `provider`.  
  
> [!IMPORTANT]
>  Étant donné que cette méthode utilise les données dépendantes de la culture, vous ne devez pas supposer que plusieurs appels à la méthode retourneront des données identiques, sauf si `provider` est un <xref:System.Globalization.CultureInfo> objet qui représente la culture dite indifférente. Les données retournées par cette méthode peuvent changer si l’utilisateur substitue les paramètres de culture individuels `provider` ou si une mise à jour se produit pour les données de culture du système pour `provider`.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> (méthode). Il affiche les représentations sous forme de chaîne d’une date en utilisant le spécificateur de format de date courte (« d ») pour la culture fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> n'est pas un caractère de spécificateur de format de date et d'heure standard valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le code de hachage de cette instance.</summary>
        <returns>Code de hachage d'un entier signé 32 bits.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le <see cref="T:System.TypeCode" /> du type valeur <see cref="T:System.DateTime" />.</summary>
        <returns>Constante énumérée, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « heure » de la date représentée par cette instance.</summary>
        <value>Composant « heure », exprimé comme une valeur comprise entre 0 et 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.DateTime.Hour%2A> propriété est toujours exprimée à l’aide d’une horloge de 24 heures. Pour récupérer une chaîne qui représente l’heure d’une date et l’heure à l’aide d’une horloge au format 12 heures, appelez le <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> ou <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthode avec le spécificateur de format personnalisé « h ». Exemple :  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 L’exemple suivant illustre le <xref:System.DateTime.Hour%2A> propriété.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique si cette instance de <see cref="T:System.DateTime" /> est dans la plage d'heures d'été pour le fuseau horaire actuel.</summary>
        <returns>
          <see langword="true" /> si la valeur de la propriété <see cref="P:System.DateTime.Kind" /> est <see cref="F:System.DateTimeKind.Local" /> ou <see cref="F:System.DateTimeKind.Unspecified" /> et la valeur de cette instance de <see cref="T:System.DateTime" /> est dans la plage d'heures d'été pour le fuseau horaire ; <see langword="false" /> si <see cref="P:System.DateTime.Kind" /> est <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode détermine si le courant <xref:System.DateTime> valeur est comprise dans la plage de l’heure d’été du fuseau horaire local, qui est retourné par la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriété. Vous pouvez déterminer si un fuseau horaire prend en charge l’heure d’été en récupérant la valeur de son <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> propriété. Pour les fuseaux horaires qui observent l’heure d’été, vous pouvez déterminer lorsque la transition vers et depuis l’heure d’été se produit en récupérant le <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> tableau retourné par du fuseau horaire <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> propriété.  
  
 Si le courant <xref:System.DateTime> valeur représente un ambiguë ou une heure non valide dans le fuseau horaire local, la méthode retourne `false`.  
  
 Sur [!INCLUDE[winxp](~/includes/winxp-md.md)] systèmes, la <xref:System.DateTime.IsDaylightSavingTime%2A> méthode reconnaît uniquement la règle d’ajustement actuelle pour déterminer si l’instance actuelle est une heure. Par conséquent, la méthode ne peut pas signaler correctement si l’instance actuelle est une heure pour les périodes avant l’entrée en vigueur de la règle d’ajustement actuelle.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Année sur 4 chiffres.</param>
        <summary>Retourne une indication confirmant si l'année spécifiée est une année bissextile.</summary>
        <returns>
          <see langword="true" /> si <paramref name="year" /> est une année bissextile ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` est spécifié comme un nombre 10 base à 4 chiffres. par exemple, 1996.  
  
 `year` est toujours interprété comme une année dans le calendrier grégorien. Pour déterminer si une année particulière était une année bissextile dans un autre calendrier, appelez l’objet calendrier `IsLeapYear` méthode.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.DateTime.IsLeapYear%2A> méthode pour déterminer quelle années entre 1994 et 2014 sont des années bissextiles. L’exemple illustre également le résultat lorsque la <xref:System.DateTime.AddYears%2A> méthode est utilisée pour ajouter une année à une année bissextile.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> est inférieur à 1 ou supérieur à 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'heure représentée par cette instance se base sur l'heure locale, l'heure UTC, ou aucune des deux.</summary>
        <value>Une des valeurs d'énumération qui indique ce que représente l'heure actuelle. La valeur par défaut est <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez définir explicitement le <xref:System.DateTime.Kind%2A> propriété d’un nouveau <xref:System.DateTime> valeur à un particulier <xref:System.DateTimeKind> valeur en appelant le <xref:System.DateTime.SpecifyKind%2A> (méthode).  
  
 Le <xref:System.DateTime.Kind%2A> propriété permet à un <xref:System.DateTime> valeur refléter clairement le temps universel coordonné (UTC) ou l’heure locale. En revanche, le <xref:System.DateTimeOffset> structure peut refléter clairement tout moment dans n’importe quel fuseau horaire comme un point unique dans le temps.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.SpecifyKind%2A> méthode afin d’illustrer comment les <xref:System.DateTime.Kind%2A> propriété a une incidence sur la <xref:System.DateTime.ToLocalTime%2A> et <xref:System.DateTime.ToUniversalTime%2A> méthodes de conversion.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la plus grande valeur possible de <see cref="T:System.DateTime" />. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette constante est équivalente à 23:59:59.9999999 UTC, le 31 décembre 9999 dans le calendrier grégorien, un seul graduations de 100 nanosecondes avant 00:00:00 UTC, le 1er janvier 10000.  
  
 Certains calendriers, tels que les <xref:System.Globalization.ThaiBuddhistCalendar>, prennent en charge une plage de dates supérieure qui est antérieure à <xref:System.DateTime.MaxValue>. Dans ce cas, essayez d’accéder <xref:System.DateTime.MaxValue> dans les attributions de variables ou de mise en forme et d’opérations d’analyse peut lever un <xref:System.ArgumentOutOfRangeException>. Au lieu d’extraire la valeur de <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, vous pouvez récupérer la valeur de la valeur date valide la plus récente de la culture spécifiée à partir de la <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> propriété.  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.DateTime> objet en passant à son constructeur un <xref:System.Int64> valeur qui représente un nombre de graduations. Avant d’appeler le constructeur, l’exemple vérifie que cette valeur est supérieure ou égale à `DateTime.MinValue.Ticks` et inférieure ou égale à `DateTime.MaxValue.Ticks`. Si non, il lève une <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « millisecondes » de la date représentée par cette instance.</summary>
        <value>Composant « millisecondes », exprimé comme une valeur comprise entre 0 et 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez afficher la représentation sous forme de chaîne de la <xref:System.DateTime.Millisecond%2A> propriété en utilisant le spécificateur de format « fff ». Par exemple, le code suivant affiche une chaîne qui contient le nombre de millisecondes dans une date et une heure dans la console.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 Vous pouvez également afficher le composant « millisecondes », ainsi que les autres composants d’une valeur de date et d’heure en utilisant le spécificateur de format standard « o ». Exemple :  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Toutefois, le spécificateur de format « o » est prévu que pour l’affichage pour l’aller-retour ou le stockage d’un <xref:System.DateTime> valeur. Vous pouvez également afficher des millisecondes avec d’autres composants de date et d’heure à l’aide d’une chaîne de format personnalisée, comme le montre l’exemple suivant.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 L’exemple suivant illustre le <xref:System.DateTime.Millisecond%2A> propriété.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « minutes » de la date représentée par cette instance.</summary>
        <value>Composant « minute », exprimé comme une valeur comprise entre 0 et 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant illustre le <xref:System.DateTime.Minute%2A> propriété.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la plus petite valeur possible de <see cref="T:System.DateTime" />. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette constante est équivalente à 00:00:00.0000000 UTC, le 1er janvier 0001, dans le calendrier grégorien.  
  
 <xref:System.DateTime.MinValue> définit la date et l’heure qui est affectée à une non initialisé <xref:System.DateTime> variable. L'exemple suivant illustre ce comportement.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 Le <xref:System.DateTime.MinValue> et <xref:System.DateTime.MaxValue> propriétés peuvent être utilisées pour vous assurer qu’une valeur est comprise dans la plage prise en charge avant de le transmettre à un <xref:System.DateTime> constructeur. Le code dans la section exemple illustre cette utilisation.  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.DateTime> objet en passant à son constructeur un <xref:System.Int64> valeur qui représente un nombre de graduations. Avant d’appeler le constructeur, l’exemple vérifie que cette valeur est supérieure ou égale à `DateTime.MinValue.Ticks` et inférieure ou égale à `DateTime.MaxValue.Ticks`. Si non, il lève une <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « mois » de la date représentée par cette instance.</summary>
        <value>Composant « mois », exprimé comme une valeur comprise entre 1 et 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant illustre le <xref:System.DateTime.Month%2A> propriété.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.DateTime" /> qui a pour valeur la date et l'heure actuelles sur cet ordinateur, exprimées en heure locale.</summary>
        <value>Objet dont la valeur est égale à la date et à l'heure locales actuelles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.Now%2A> propriété retourne un <xref:System.DateTime> valeur qui représente la date et heure actuelles sur l’ordinateur local. Notez qu’il existe une différence entre un <xref:System.DateTime> valeur, qui représente le nombre de graduations qui se sont écoulées depuis minuit le 1er janvier 0001, et la représentation sous forme de chaîne de cet <xref:System.DateTime> valeur, qui exprime une valeur de date et d’heure dans un format de la culture spécifique-spécifiques. Pour plus d’informations sur les valeurs de date et heure de mise en forme, consultez la <xref:System.DateTime.ToString%2A> (méthode). L’exemple suivant affiche la date courte et une chaîne d’heure dans plusieurs formats spécifiques à la culture.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 La résolution de cette propriété dépend de l’horloge système, qui varie selon le système d’exploitation sous-jacent. Il a tendance à être comprise entre 0,5 et 15 millisecondes. Par conséquent, les appels répétés à la <xref:System.DateTime.Now%2A> propriété dans un intervalle d’heure courte, comme dans une boucle, peut-être retourner la même valeur.  
  
 Le <xref:System.DateTime.Now%2A> propriété est souvent utilisée pour mesurer les performances. Toutefois, en raison de sa résolution faible, il n’est pas approprié pour une utilisation comme outil d’évaluation. Une meilleure solution consiste à utiliser la <xref:System.Diagnostics.Stopwatch> classe.  
  
 À compter de .NET Framework version 2.0, la valeur de retour est un <xref:System.DateTime> dont <xref:System.DateTime.Kind%2A> propriété renvoie <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Vous pouvez également utiliser le <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> propriété à récupérer la date du jour et l’heure. Il permet à une heure locale à être exprimée clairement comme un point unique dans le temps, ce qui à son tour rend cette valeur d’heure portable sur plusieurs ordinateurs.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.Now%2A> et <xref:System.DateTime.UtcNow%2A> propriétés à récupérer actuelle date et heure locales et en cours universel coordonné (UTC) date et heure. Il utilise ensuite les conventions de mise en forme d’un nombre de cultures pour afficher les chaînes, ainsi que par les valeurs de la leur <xref:System.DateTime.Kind%2A> propriétés.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Valeur de date et heure à ajouter.</param>
        <param name="t">Intervalle de temps à ajouter.</param>
        <summary>Ajoute un intervalle de temps spécifié à une date et une heure spécifiées, générant une nouvelle date et heure.</summary>
        <returns>Objet qui est la somme des valeurs de <paramref name="d" /> et <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[La méthode équivalente pour cet opérateur est <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant illustre l’opérateur d’addition.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Premier objet à comparer.</param>
        <param name="d2">Deuxième objet à comparer.</param>
        <summary>Détermine si deux instances spécifiées de <see cref="T:System.DateTime" /> sont égales.</summary>
        <returns>
          <see langword="true" /> si <paramref name="d1" /> et <paramref name="d2" /> représentent les mêmes date et heure ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.op_Equality%2A> opérateur détermine si deux <xref:System.DateTime> valeurs sont égales en comparant leur nombre de graduations. Avant de comparer <xref:System.DateTime> objets, assurez-vous que les objets représentent les heures dans le même fuseau horaire. Vous pouvez le faire en comparant les valeurs de leurs propriétés <xref:System.DateTime.Kind%2A>.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant illustre l’opérateur d’égalité.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Premier objet à comparer.</param>
        <param name="t2">Deuxième objet à comparer.</param>
        <summary>Détermine si un <see cref="T:System.DateTime" /> spécifié est ultérieur à un autre <see cref="T:System.DateTime" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si <paramref name="t1" /> est postérieur à <paramref name="t2" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.op_GreaterThan%2A> opérateur détermine la relation entre deux <xref:System.DateTime> valeurs en comparant leur nombre de graduations. Avant de comparer <xref:System.DateTime> objets, assurez-vous que les objets représentent les heures dans le même fuseau horaire. Vous pouvez le faire en comparant les valeurs de leurs propriétés <xref:System.DateTime.Kind%2A>.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Premier objet à comparer.</param>
        <param name="t2">Deuxième objet à comparer.</param>
        <summary>Détermine si un <see cref="T:System.DateTime" /> spécifié représente une date et une heure identiques ou ultérieures à un autre <see cref="T:System.DateTime" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si <paramref name="t1" /> est identique ou postérieur à <paramref name="t2" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.op_GreaterThanOrEqual%2A> opérateur détermine la relation entre deux <xref:System.DateTime> valeurs en comparant leur nombre de graduations. Avant de comparer <xref:System.DateTime> objets, assurez-vous que les objets représentent les heures dans le même fuseau horaire. Vous pouvez le faire en comparant les valeurs de leurs propriétés <xref:System.DateTime.Kind%2A>.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Premier objet à comparer.</param>
        <param name="d2">Deuxième objet à comparer.</param>
        <summary>Détermine si deux instances spécifiées de <see cref="T:System.DateTime" /> ne sont pas égales.</summary>
        <returns>
          <see langword="true" /> si <paramref name="d1" /> et <paramref name="d2" /> ne représentent pas les mêmes date et heure ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.op_Inequality%2A> opérateur détermine si deux <xref:System.DateTime> valeurs ne sont pas égales en comparant leur nombre de graduations. Avant de comparer <xref:System.DateTime> objets, assurez-vous que les objets représentent les heures dans le même fuseau horaire. Vous pouvez le faire en comparant les valeurs de leurs propriétés <xref:System.DateTime.Kind%2A>.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Premier objet à comparer.</param>
        <param name="t2">Deuxième objet à comparer.</param>
        <summary>Détermine si un <see cref="T:System.DateTime" /> spécifié est antérieur à un autre <see cref="T:System.DateTime" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si <paramref name="t1" /> est antérieur à <paramref name="t2" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.op_LessThan%2A> opérateur détermine la relation entre deux <xref:System.DateTime> valeurs en comparant leur nombre de graduations. Avant de comparer <xref:System.DateTime> objets, assurez-vous que les objets représentent les heures dans le même fuseau horaire. Vous pouvez le faire en comparant les valeurs de leurs propriétés <xref:System.DateTime.Kind%2A>.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Premier objet à comparer.</param>
        <param name="t2">Deuxième objet à comparer.</param>
        <summary>Détermine si un <see cref="T:System.DateTime" /> spécifié représente une date et une heure identiques ou antérieures à un autre <see cref="T:System.DateTime" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si <paramref name="t1" /> est identique ou antérieur à <paramref name="t2" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.op_LessThanOrEqual%2A> opérateur détermine la relation entre deux <xref:System.DateTime> valeurs en comparant leur nombre de graduations. Avant de comparer <xref:System.DateTime> objets, assurez-vous que les objets représentent les heures dans le même fuseau horaire. Vous pouvez le faire en comparant les valeurs de leurs propriétés <xref:System.DateTime.Kind%2A>.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Soustrait un <see cref="T:System.DateTime" /> ou un <see cref="T:System.TimeSpan" /> spécifié d’un <see cref="T:System.DateTime" /> spécifié.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Valeur de date et d'heure à laquelle appliquer la soustraction (diminuende).</param>
        <param name="d2">Valeur de date et d'heure à soustraire (diminuteur).</param>
        <summary>Soustrait une date et une heure spécifiées des autres date et heure spécifiées, et retourne un intervalle de temps.</summary>
        <returns>Intervalle de temps entre <paramref name="d1" /> et <paramref name="d2" /> ; c'est-à-dire, <paramref name="d1" /> moins <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> méthode ne tient pas compte de la valeur de la <xref:System.DateTime.Kind%2A> propriété des deux <xref:System.DateTime> lors de l’exécution de la soustraction des valeurs. Avant de soustraire <xref:System.DateTime> objets, vérifiez que les objets représentent les heures dans le même fuseau horaire. Dans le cas contraire, le résultat inclura la différence entre les fuseaux horaires.  
  
> [!NOTE]
>  Le <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> méthode considère la différence entre les fuseaux horaires lors de l’exécution de la soustraction.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.Subtract%2A> méthode et l’opérateur de soustraction.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Valeur de date et d'heure à laquelle appliquer la soustraction.</param>
        <param name="t">Intervalle de temps à soustraire.</param>
        <summary>Soustrait un intervalle de temps spécifié d'une date et d'une heure spécifiées et retourne une nouvelle date et heure.</summary>
        <returns>Objet dont la valeur correspond à la valeur de <paramref name="d" /> moins la valeur de <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode soustrait la valeur de graduations de `t` à partir de la valeur de graduations de `d`.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.Subtract%2A> méthode et l’opérateur de soustraction.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’objet <see cref="T:System.DateTime" /> obtenu est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette section :  
  
 [Quelle méthode appeler ?](#Tasks)   
 [La chaîne à analyser](#StringToParse)   
 [Conventions d’analyse et de culturels](#Culture)   
 [Éléments de style et de l’analyse](#Styles)   
 [La valeur de retour et DateTime.Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Quelle méthode appeler ?  
  
|À|Call|  
|--------|----------|  
|Analyser une chaîne de date et d’heure en utilisant les conventions de la culture actuelle.|<xref:System.DateTime.Parse%28System.String%29> surcharge|  
|Analyser une chaîne de date et d’heure en utilisant les conventions d’une culture spécifique.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> surcharge (consultez [analyse et des Conventions culturelles](#Culture))|  
|Analyser une chaîne de date et d’heure avec les éléments de style particulière (par exemple, un espace blanc ou aucun espace blanc).|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> surcharge|  
|Analyser une chaîne de date et d’heure qui doit être dans un format particulier.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> ou <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Analyser une chaîne de date et d’heure et d’effectuer une conversion en heure UTC ou locale.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> surcharge|  
|Analyser une chaîne de date et d’heure sans gestion des exceptions.|Méthode <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>|  
|Restaurer (aller-retour) une valeur de date et d’heure créée par une opération de mise en forme.|Transmettez la chaîne de format standard « o » ou « r » à la <xref:System.DateTime.ToString%28System.String%29> (méthode), puis appelez le <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> surcharger avec <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analyser une chaîne de date et d’heure dans un format fixe au-delà des limites des ordinateurs (et éventuellement culturelles).|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> ou <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> (méthode)|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>La chaîne à analyser  
 Le <xref:System.DateTime.Parse%2A> méthode essaie de convertir la représentation sous forme de chaîne d’une valeur de date et d’heure à son <xref:System.DateTime> équivalent. Il tente d’analyser la totalité de la chaîne d’entrée sans lever un <xref:System.FormatException> exception.  
  
> [!IMPORTANT]
>  Si l’opération d’analyse échoue en raison d’un format de chaîne non reconnu, le <xref:System.DateTime.Parse%2A> méthode lève une exception un <xref:System.FormatException>, alors que le <xref:System.DateTime.TryParse%2A> méthode renvoie `false`. Étant donné que la gestion des exceptions peuvent être coûteuse, vous devez utiliser <xref:System.DateTime.Parse%2A> lorsque l’opération d’analyse est censée être effectuée en raison de la source d’entrée est approuvée. <xref:System.DateTime.TryParse%2A> Il est préférable lorsque l’analyse des erreurs sont susceptibles, en particulier, car une source d’entrée n’est pas approuvée, ou vous avez défini les valeurs par défaut raisonnable pour remplacer les chaînes n’analysent pas correctement.   

 La chaîne à analyser peut prendre une des formes suivantes :  
  
-   Chaîne avec une date et d’un composant d’heure.  
  
-   Chaîne avec une date, mais aucun composant. Si le composant est absent, la méthode suppose que 12:00 (minuit). Si le composant date est une année à deux chiffres, il est converti en une année selon la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> de calendrier actuel de la culture actuelle ou de calendrier actuel de la culture spécifiée (si vous utilisez une surcharge avec une valeur non null `provider` argument).  
  
- Chaîne avec un composant de date qui inclut uniquement le mois et l’année, mais aucun composant « jour ». La méthode suppose que le premier jour du mois.

- Chaîne avec un composant de date qui inclut uniquement le mois et le jour, mais aucun composant « année ». La méthode suppose que l’année en cours.

-   Chaîne avec une heure, mais aucun composant de date. La méthode suppose que la date actuelle, sauf si vous appelez le <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> de surcharge et inclure <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> dans le `styles` argument, dans lequel cas la méthode suppose une date du 1er janvier 0001.  

- Chaîne avec un composant qui inclut uniquement l’heure et un indicateur AM/PM, aucun composant de date. La méthode suppose que la date et une heure avec aucune minutes et aucun secondes. Vous pouvez modifier ce comportement en appelant le <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> de surcharge et inclure <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> dans le `styles` argument, dans lequel cas la méthode suppose une date du 1er janvier 0001.

-   Chaîne qui consacrée des informations de fuseau horaire et est conforme à ISO 8601. Dans les exemples suivants, la première chaîne désigne le temps universel coordonné (UTC), et la seconde désigne l’heure dans un fuseau horaire qui est de sept heures antérieures à l’heure UTC :  
  
    « 2008-11-01T19:35:00.0000000Z »   
    « 2008-11-01T19:35:00.0000000-07:00 »  
  
-   Une chaîne qui inclut l’indicateur GMT et est conforme au format d’heure RFC 1123 ; par exemple :  
  
     « Sat, 01 Nov 2008 19:35:00 GMT »  
  
-   Une chaîne qui inclut la date et l’heure, ainsi que les informations de décalage de fuseau horaire ; par exemple :  
  
     "03/01/2009 05:42:00 -5:00"  

L’exemple suivant analyse les chaînes dans chacun de ces formats en utilisant les conventions de mise en forme de la culture actuelle, qui dans ce cas est la culture en-US :

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Si la chaîne d’entrée représente une année bissextile dans une année bissextile dans le calendrier utilisé par la méthode d’analyse (voir [conventions culturelles et de l’analyse](#Culture)), la <xref:System.DateTime.Parse%2A> méthode analyse la chaîne avec succès. Si la chaîne d’entrée représente une année bissextile dans une année bissextile, la méthode lève un <xref:System.FormatException>.  
  
 Étant donné que la <xref:System.DateTime.Parse%2A> méthode essaie d’analyser la représentation sous forme de chaîne d’une date et heure en utilisant les règles de mise en forme d’en cours ou d’une culture spécifiée, la tentative d’analyse d’une chaîne dans toutes les cultures différentes peut échouer. Pour analyser une date et le format d’heure entre les différents paramètres régionaux, utilisez une des surcharges de la <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> méthode et fournir un spécificateur de format.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Conventions d’analyse et de culturels  
 Toutes les surcharges de la <xref:System.DateTime.Parse%2A> méthode sont dépendantes de la culture, sauf si la chaîne à analyser (ce qui est représenté par `s` dans le tableau suivant) conforme au modèle ISO 8601. L’opération d’analyse utilise les informations de mise en forme dans un <xref:System.Globalization.DateTimeFormatInfo> objet est dérivée comme suit :  
  
|Si vous appelez|Et `provider` est|Informations de mise en forme sont dérivées.|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|La culture du thread actuel (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> propriété)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|A <xref:System.Globalization.DateTimeFormatInfo> objet|Spécifié <xref:System.Globalization.DateTimeFormatInfo> objet|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|La culture du thread actuel (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> propriété)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|A <xref:System.Globalization.CultureInfo> objet|La propriété <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Personnalisé <xref:System.IFormatProvider> implémentation|Méthode <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>|  
  
 Lorsque les informations de mise en forme est dérivée d’un <xref:System.Globalization.DateTimeFormatInfo> objet, le <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propriété définit le calendrier utilisé dans l’opération d’analyse.  
  
 Si vous analysez une chaîne de date et d’heure à l’aide un <xref:System.Globalization.DateTimeFormatInfo> objet avec des paramètres personnalisés qui sont différentes de celles d’une culture standard, utilisez la <xref:System.DateTime.ParseExact%2A> méthode à la place de la <xref:System.DateTime.Parse%2A> méthode pour améliorer des chances de réussite de la conversion. Une date non standard et la chaîne d’heure peuvent être complexe et difficile à analyser. Le <xref:System.DateTime.Parse%2A> méthode essaie d’analyser une chaîne avec plusieurs modèles d’analyse implicites, qui risque d’échouer. En revanche, le <xref:System.DateTime.ParseExact%2A> (méthode), vous devez explicitement désigner un ou plusieurs modèles d’analyse précis, susceptibles de réussir. Pour plus d’informations, consultez la section « DateTimeFormatInfo et Dynamic Data » dans la <xref:System.Globalization.DateTimeFormatInfo> rubrique.  
  
> [!IMPORTANT]
>  Notez que les conventions de mise en forme pour une culture particulière sont dynamiques et peuvent être sujette à modification. Cela signifie que les opérations d’analyse qui varient selon les conventions de mise en forme de la culture (actuel) par défaut ou qui spécifient un <xref:System.IFormatProvider> objet qui représente une culture autre que la culture dite indifférente risque de façon inattendue si une des actions suivantes se produit :  
>   
> -   Les données spécifiques à la culture a changé entre les versions principales ou secondaires du .NET Framework ou à la suite d’une mise à jour la version existante du .NET Framework.  
> -   Les données spécifiques à la culture reflètent les préférences de l’utilisateur, lequel peuvent varier d’un ordinateur ou à une session.  
> -   Les données spécifiques à la culture représentent une culture de remplacement qui remplace les paramètres d’une culture standard ou d’une culture personnalisée.  
>   
>  Pour éviter les difficultés lors de l’analyse des chaînes de date et l’heure qui sont associés à des modifications apportées aux données culturelles, vous pouvez analyser des chaînes de date et d’heure à l’aide de la culture dite indifférente, ou vous pouvez appeler la <xref:System.DateTime.ParseExact%2A> ou <xref:System.DateTime.TryParseExact%2A> (méthode) et spécifiez le format exact de la chaîne à analyser. Si vous sérialisez et la désérialisation des données de date et d’heure, vous pouvez utiliser les conventions de mise en forme de la culture dite indifférente, ou vous pouvez sérialiser et désérialiser la <xref:System.DateTime> valeur dans un format binaire.  
>   
>  Pour plus d’informations, consultez la section « données de culture dynamiques » dans le <xref:System.Globalization.CultureInfo> rubrique ainsi que les valeurs de date/heure Persisting » » section dans le <xref:System.DateTime> rubrique.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Éléments de style et de l’analyse  
 Tous les <xref:System.DateTime.Parse%2A> surcharges ignorent les caractères d’espace blanc au début, internes ou de fin dans la chaîne d’entrée (qui est représenté par `s` dans le tableau suivant). La date et l’heure peuvent être délimitées par une paire de début et de fin des caractères dièse (« # », U + 0023) et peuvent être suivies d’un ou plusieurs caractères NULL (U + 0000).  
  
 En outre, le <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> surcharge possède un `styles` paramètre se compose d’un ou plusieurs membres de la <xref:System.Globalization.DateTimeStyles> énumération. Ce paramètre définit comment `s` doit être interprété et comment l’opération d’analyse doit convertir `s` à une date et une heure. Le tableau suivant décrit l’effet de chaque <xref:System.Globalization.DateTimeStyles> membre sur l’opération d’analyse.  
  
|Membre DateTimeStyles|Effet sur la conversion|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `s` et, si nécessaire, le convertit au format UTC, comme suit :<br /><br /> -If `s` inclut un décalage de fuseau horaire, ou si `s` ne contient aucune information de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeLocal> indicateur, la méthode analyse la chaîne, les appels <xref:System.DateTime.ToUniversalTime%2A> pour convertir le texte retourné <xref:System.DateTime> valeur UTC et affecte le <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-If `s` indique qu’il représente l’heure UTC, ou si `s` ne contient pas les informations de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeUniversal> indicateur, la méthode analyse la chaîne, n’effectue aucune conversion de fuseau horaire sur le <xref:System.DateTime> valeur et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Dans tous les autres cas, l’indicateur est sans effet.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Cette valeur est ignorée. Espace interne est toujours autorisé dans les éléments de date et heure de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Cette valeur est ignorée. Espace blanc de début est toujours autorisé dans les éléments de date et heure de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Cette valeur est ignorée. Espace blanc de fin est toujours autorisé dans les éléments de date et heure de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Spécifie que `s` peut contenir de début, internes et les espaces blancs de fin. Il s'agit du comportement par défaut. Il ne peut pas être substitué en fournissant une plus restrictif <xref:System.Globalization.DateTimeStyles> comme valeur d’énumération <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Spécifie que si `s` ne contient pas toutes les informations de fuseau horaire, heure locale sont supposées. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> indicateur est présent, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Spécifie que si `s` ne contient pas toutes les informations de fuseau horaire, UTC sont supposées. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> indicateur est présent, la méthode convertit le texte retourné <xref:System.DateTime> valeur à l’heure UTC à l’heure locale et affecte ses <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Bien que les valide, cette valeur est ignorée.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Pour les chaînes qui contiennent des informations de fuseau horaire, tente d’empêcher la conversion d’une chaîne de date et d’heure pour une <xref:System.DateTime> valeur qui représente une heure locale avec sa <xref:System.DateTime.Kind%2A> propriété la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. En règle générale, cette chaîne est créée en appelant le <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> (méthode) et en utilisant le spécificateur de format standard « o », « r » ou « u ».|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>La valeur de retour et DateTime.Kind

Le `DateTime.Parse` surcharges retournent un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind> propriété inclut des informations de fuseau horaire. Il peut indiquer que l’heure est :

- Temps universel coordonné (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- L’heure dans le fuseau horaire local (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- L’heure dans un fuseau horaire inconnu (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 En règle générale, les <xref:System.DateTime.Parse%2A> méthode retourne un <xref:System.DateTime> dont l’objet <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Toutefois, le <xref:System.DateTime.Parse%2A> méthode peut également effectuer la conversion du fuseau horaire et définissez la valeur de la <xref:System.DateTime.Kind%2A> propriété différemment, en fonction des valeurs de la `s` et `styles` paramètres :  
  
|If|Conversion de fuseau horaire|Propriété Kind|  
|--------|--------------------------|-------------------|  
|`s` contient des informations de fuseau horaire.|La date et l’heure est convertie à l’heure dans le fuseau horaire local.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` contient des informations de fuseau horaire, et `styles` inclut la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> indicateur.|La date et l’heure est convertie en temps universel coordonné (UTC).|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` contient l’indicateur de fuseau horaire Z ou GMT, et `styles` inclut la <xref:System.Globalization.DateTimeStyles.RoundtripKind> indicateur.|La date et l’heure sont interprétées comme UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 L’exemple suivant convertit les chaînes de date qui contiennent des informations de fuseau horaire à l’heure dans le fuseau horaire local :  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  Vous pouvez également conserver la valeur de date et d’heure <xref:System.DateTime.Kind%2A> propriété pendant une mise en forme et l’opération d’analyse à l’aide de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> indicateur. L’exemple suivant illustre comment la <xref:System.Globalization.DateTimeStyles.RoundtripKind> indicateur affecte l’opération d’analyse sur <xref:System.DateTime> les valeurs sont converties en chaînes à l’aide du spécificateur de format « o », « r » ou « u ».  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Nombreux exemples qui appellent le `DateTime.Parse` méthode disséminées le [remarques](#remarks) section de cet article et dans la documentation relative à la personne `DateTime.Parse` surcharges.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Vous pouvez également télécharger un ensemble complet de `DateTime.Parse` obtenir des exemples, qui sont inclus dans un [projet .NET Core 2.0 pour c#](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/DateTime.Parse.zip) et un [projet .NET Core 2.0 pour Visual Basic](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), à partir de la [dotnet/docs Référentiel GitHub](https://github.com/dotnet/docs).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir. Pour plus d’informations, consultez [la chaîne à analyser](#StringToParse).</param>
        <summary>Convertit la représentation sous forme de chaîne d’une date/heure en son équivalent <see cref="T:System.DateTime" /> en utilisant les conventions de la culture du thread actuel.</summary>
        <returns>Objet qui équivaut à la date et à l'heure figurant dans <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Si `s` contient des informations de fuseau horaire, cette méthode retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType> et convertit la date et l’heure dans `s` en heure locale. Dans le cas contraire, il n’effectue aucune conversion de fuseau horaire et retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Cette surcharge tente d’analyser `s` en utilisant les conventions de mise en forme de la culture actuelle. La culture actuelle est indiquée par le <xref:System.Globalization.CultureInfo.CurrentCulture> propriété. Pour analyser une chaîne en utilisant les conventions de mise en forme d’une culture spécifique, appelez le <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> ou <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> surcharges.

Cette surcharge tente d’analyser `s` à l’aide de <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> style.

## <a name="example"></a>Exemple

L’exemple suivant analyse la représentation sous forme de chaîne de plusieurs valeurs de date et d’heure par :

- À l’aide du fournisseur de format par défaut, qui fournit les conventions de mise en forme de la culture du thread actuel de l’ordinateur utilisé pour générer l’exemple de sortie. La sortie de cet exemple reflète les conventions de mise en forme de la culture en-US.

- À l’aide de la valeur de style par défaut, qui est <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Il gère la <xref:System.FormatException> conventions de présentation de l’exception qui est levée lorsque la méthode tente d’analyser la représentation sous forme de chaîne d’une date et l’heure à l’aide d’une autre culture. Il montre également comment analyser correctement une valeur de date et d’heure qui n’utilise pas les conventions de mise en forme de la culture du thread actuel.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> ne contient pas de représentation sous forme de chaîne valide de date et d'heure.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir. Pour plus d’informations, consultez [la chaîne à analyser](#StringToParse).</param>
        <param name="provider">Objet qui fournit des informations de format spécifiques à la culture sur <c>s</c>.  Consultez [Analyse et conventions culturelles](#Culture)</param>
        <summary>Convertit la représentation sous forme de chaîne d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" /> à l'aide des informations de format propres à la culture.</summary>
        <returns>Objet qui équivaut à la date et à l'heure figurant dans <paramref name="s" />, comme spécifié par <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Si `s` contient des informations de fuseau horaire, cette méthode retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType> et convertit la date et l’heure dans `s` en heure locale. Dans le cas contraire, il n’effectue aucune conversion de fuseau horaire et retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Cette surcharge tente d’analyser `s` à l’aide de la <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> style.

## <a name="example"></a>Exemple

L’exemple suivant analyse un tableau de chaînes de date en utilisant les conventions en-US, fr-FR et les cultures fr-fr. Il montre que les représentations sous forme de chaîne d’une date unique peuvent être interprétés différemment dans toutes les cultures différentes.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> ne contient pas de représentation sous forme de chaîne valide de date et d'heure.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir. Pour plus d’informations, consultez [la chaîne à analyser](#StringToParse).</param>
        <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture sur <c>s</c>.  Consultez [Analyse et conventions culturelles](#Culture)</param>
        <param name="styles">Combinaison au niveau du bit des valeurs d’énumération qui indique les éléments de style pouvant être présents dans <c>s</c> pour la réussite de l’opération d’analyse et qui définit comment interpréter la date analysée par rapport au fuseau horaire actuel ou à la date actuelle. Une valeur typique à spécifier est <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Convertit la représentation sous forme de chaîne d’une date/heure en son équivalent <see cref="T:System.DateTime" /> en utilisant les informations de format propres à la culture et un style de mise en forme.</summary>
        <returns>Objet qui équivaut à la date et à l'heure figurant dans <paramref name="s" />, comme spécifié par <paramref name="provider" /> et <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Cette surcharge de méthode convertit la date et l’heure dans `s` et définit les <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> valeur comme suit :

|If |Conversion de fuseau horaire|Propriété Kind|   
|-----|-----|-----|  
|`s` ne contient aucune information de fuseau horaire.|Aucun.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` contient des informations de fuseau horaire.|À l’heure dans le fuseau horaire local|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` contient des informations de fuseau horaire, et « styles inclut le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur.|Heure se de coordonnée (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` contient l’indicateur de fuseau horaire Z ou GMT, et `styles` inclut le <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|Aucun.|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Exemple

L’exemple suivant illustre la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> (méthode) et affiche la valeur de la <xref:System.DateTime.Kind%2A> propriété des résultats de <xref:System.DateTime> valeurs.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> est <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> ne contient pas de représentation sous forme de chaîne valide de date et d'heure.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> contient une combinaison non valide de valeurs <see cref="T:System.Globalization.DateTimeStyles" />. Par exemple, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> et <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" />. Le format de la représentation sous forme de chaîne doit correspondre exactement à un format spécifié, ou une exception est levée.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir.</param>
        <param name="format">Spécificateur de format définissant le format requis de <c>s</c>. Pour plus d'informations, consultez la section Remarques.</param>
        <param name="provider">Objet qui fournit des informations de format spécifiques à la culture sur <c>s</c>.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" /> à l'aide des informations de format propres à la culture et au format spécifiés. Le format de la chaîne doit correspondre exactement au format spécifié.</summary>
        <returns>Objet qui équivaut à la date et à l'heure figurant dans <paramref name="s" />, comme spécifié par <paramref name="format" /> et <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date, qui doit être au format défini par le `format` paramètre. Elle requiert également que le \<Date > et \<temps > éléments de la représentation sous forme de chaîne d’une date et l’heure s’affichent dans l’ordre spécifié par `format`et qui `s` n’avoir aucun espace blanc autre que celle autorisée par `format`. Si `format` définit une date sans élément d’heure et l’analyse réussit, résultant <xref:System.DateTime> valeur a un temps de minuit (00 : 00:00). Si `format` définit une heure sans élément de date et de l’analyse réussit, résultant <xref:System.DateTime> valeur a une date de `DateTime.Now.Date`.  
  
 Si `s` ne représente pas une heure dans un fuseau horaire particulier et l’opération d’analyse réussit, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> valeur est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si `s` représente l’heure dans un fuseau horaire particulier et `format` aux informations de fuseau horaire d’être présents (par exemple, si `format` est égal à « o », « r » ou les spécificateurs de format standard « u », ou si elle contient le « z », « zz » ou « zzz » spécificateur de format personnalisé), le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> valeur est <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 Le `format` paramètre est une chaîne qui contient un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisés qui définissent le format requis de `s`. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) ou [les chaînes de Format de temps et de Date personnalisée](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Si `format` est un modèle de format personnalisé qui n’a pas été incluent les séparateurs de date ou d’heure (par exemple, « yyyyMMddHHmm »), utilisez la culture dite indifférente pour le `provider` spécificateur de format de paramètre et la forme la plus large de chaque personnalisé. Par exemple, si vous souhaitez spécifier des heures dans le modèle de format, spécifiez une forme étendue, « HH », plutôt que le formulaire plus étroite, « H ».  
  
 La date particulière et les symboles de temps et les chaînes (tels que les noms des jours de la semaine dans un langage particulier) utilisés dans `s` sont définies par le `provider` paramètre, ainsi que le format précis de `s` si `format` est un format standard chaîne du spécificateur. Le `provider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture utilisée pour interpréter `s`. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par son <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété définit les symboles et la mise en forme dans `s`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
-   Personnalisé <xref:System.IFormatProvider> implémentation dont <xref:System.IFormatProvider.GetFormat%2A> méthode retourne la <xref:System.Globalization.CultureInfo> objet ou le <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `provider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.ParseExact%2A> (méthode).  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ou <paramref name="format" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> ou <paramref name="format" /> est une chaîne vide.  
  
 - ou -  
  
 <paramref name="s" /> ne contient aucune date et heure correspondant au modèle spécifié dans <paramref name="format" />.  
  
 - ou -  
  
 Le composant « heure » et l'indicateur AM/PM de <paramref name="s" /> ne correspondent pas.</exception>
        <block subset="none" type="usage">
          <para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTime.ParseExact" /> méthode lève une exception un <see cref="T:System.FormatException" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas en accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir.</param>
        <param name="format">Spécificateur de format définissant le format requis de <c>s</c>. Pour plus d'informations, consultez la section Remarques.</param>
        <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture sur <c>s</c>.</param>
        <param name="style">Combinaison au niveau du bit des valeurs d’énumération qui fournit des informations supplémentaires sur <c>s</c>, sur les éléments de style pouvant être présents dans <c>s</c> ou sur la conversion de <c>s</c> en une valeur <see cref="T:System.DateTime" />. Une valeur typique à spécifier est <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" /> à l'aide des informations et du style de format propres à la culture spécifiés. Le format de la représentation sous forme de chaîne doit correspondre exactement au format spécifié, ou une exception est levée.</summary>
        <returns>Objet qui équivaut à la date et à l'heure figurant dans <paramref name="s" />, comme spécifié par <paramref name="format" />, <paramref name="provider" /> et <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date, qui doit être dans un format défini par le `format` paramètre. Elle requiert également que les éléments de date et d’heure dans `s` s’affichent dans l’ordre spécifié par `format`. Si `s` ne correspond pas au modèle du `format` paramètre, avec les variations définies par le `style` paramètre, la méthode lève un <xref:System.FormatException>. En revanche, le <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date dans l’un des formats reconnus par le fournisseur de format <xref:System.Globalization.DateTimeFormatInfo> objet. Le <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthode autorise également les éléments de date et d’heure dans `s` s’affichent dans n’importe quel ordre.  
  
 Si le `s` paramètre contient uniquement une heure et aucune date, la date actuelle est utilisée, sauf si le `style` paramètre inclut le <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> indicateur, auquel cas la date par défaut (`DateTime.Date.MinValue`) est utilisé. Si le `s` paramètre contient uniquement une date et aucune heure de minuit (00 : 00:00) est utilisé. Le `style` paramètre détermine également si le `s` paramètre peut contenir des caractères d’espace blanc de début, interne ou de fin.  
  
 Si `s` ne contient aucune information de fuseau horaire, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Ce comportement peut être modifié à l’aide de la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> indicateur, qui retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, ou à l’aide de la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> et <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateurs, qui retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` contient des informations de fuseau horaire, l’heure est convertie en heure locale, si nécessaire et le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Ce comportement peut être modifié à l’aide de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> indicateur pour ne pas convertir le temps universel coordonné (UTC) en heure locale et pour définir le <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Le `format` paramètre définit le modèle requis de le `s` paramètre. Il peut se composer d’un ou plusieurs spécificateurs de format personnalisés à partir de la [Date personnalisée et les chaînes de Format d’heure](~/docs/standard/base-types/custom-date-and-time-format-strings.md) table ou un spécificateur de format standard unique qui identifie un modèle prédéfini, à partir de la [Date Standard et Chaînes de Format d’heure](~/docs/standard/base-types/standard-date-and-time-format-strings.md) table.  
  
 Si vous n’utilisez pas de séparateurs de date ou d’heure dans un modèle de format personnalisé, utilisez la culture dite indifférente pour le `provider` spécificateur de format de paramètre et la forme la plus large de chaque personnalisé. Par exemple, si vous souhaitez spécifier des heures dans le modèle, spécifier une forme étendue, « HH », plutôt que le formulaire plus étroite, « H ».  
  
> [!NOTE]
>  Au lieu que `s` est conforme à un seul format de l’opération d’analyse, vous pouvez appeler la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode) et de spécifier plusieurs formats autorisés. Cela rend l’opération d’analyse plus susceptible de réussir.  
  
 Le `styles` paramètre inclut un ou plusieurs membres de la <xref:System.Globalization.DateTimeStyles> énumération qui déterminent si et où espace blanc non défini par `format` peut apparaître dans `s` et qui contrôlent le comportement précis de l’opération d’analyse. Le tableau suivant décrit comment chaque membre de la <xref:System.Globalization.DateTimeStyles> énumération affecte le fonctionnement de la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> (méthode).  
  
|Membre DateTimeStyles|Description |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `s` et, si nécessaire, le convertit au format UTC. Si `s` inclut un décalage de fuseau horaire, ou si `s` ne contient aucune information de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, les appels <xref:System.DateTime.ToUniversalTime%2A> pour convertir le texte retourné <xref:System.DateTime> valeur au format UTC et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indique qu’il représente l’heure UTC, ou si `s` ne contient pas les informations de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, n’effectue aucune conversion de fuseau horaire sur le <xref:System.DateTime> valeur et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Dans tous les autres cas, l’indicateur est sans effet.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Spécifie qu’un espace blanc non défini par `format` peuvent apparaître entre des dates individuelles ou d’un élément d’heure.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Spécifie qu’un espace blanc non défini par `format` peut apparaître au début de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Spécifie qu’un espace blanc non défini par `format` peut apparaître à la fin de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Spécifie que `s` peut contenir, internes et de fin non définis par des espaces blancs `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est supposé pour représenter une heure locale. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est censé pour représenter l’heure UTC. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, la méthode convertit le texte retourné <xref:System.DateTime> valeur à l’heure UTC à l’heure locale et affecte ses <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contient le temps sans les informations de date, la date de la valeur de retour est définie sur `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Le `s` paramètre est analysé à l’aide des valeurs par défaut. Aucun espace blanc autre que ceux présents dans `format` est autorisée. Si `s` ne dispose pas d’un composant de date, la date de retourné <xref:System.DateTime> a la valeur 1/1/0001. Si `s` ne contient aucune information de fuseau horaire, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si les informations de fuseau horaire sont présentes dans `s`, l’heure est convertie en heure locale et la <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Pour les chaînes qui contiennent des informations de fuseau horaire, tente d’empêcher la conversion en un <xref:System.DateTime> valeur de date et d’heure avec son <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Cet indicateur empêche principalement la conversion d’heures UTC en heures locales.|  
  
 La date particulière et les symboles de temps et les chaînes (par exemple, les noms des jours de la semaine dans un langage particulier) utilisés dans `s` sont définies par le `provider` paramètre, ainsi que le format précis de `s` si `format` est un format standard chaîne du spécificateur. Le `provider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture utilisée pour interpréter `s`. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par son <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété définit les symboles et la mise en forme dans `s`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
-   Personnalisé <xref:System.IFormatProvider> implémentation dont <xref:System.IFormatProvider.GetFormat%2A> méthode retourne la <xref:System.Globalization.CultureInfo> objet ou le <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `provider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> (méthode). Notez que la chaîne « 5/01/2009 8 h 30 » ne peut pas être analysée correctement lorsque le `styles` paramètre est égal à <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> , car les espaces ne sont pas autorisés par `format`. En outre, la chaîne « 5/01/2009 09:00 » ne peut pas être analysé avec succès avec un `format` de « MM/JJ/yyyyhh:mm », car la chaîne de date ne précède pas le nombre de mois avec un zéro non significatif, en tant que `format` requiert.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ou <paramref name="format" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> ou <paramref name="format" /> est une chaîne vide.  
  
 - ou -  
  
 <paramref name="s" /> ne contient aucune date et heure correspondant au modèle spécifié dans <paramref name="format" />.  
  
 - ou -  
  
 Le composant « heure » et l'indicateur AM/PM de <paramref name="s" /> ne correspondent pas.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contient une combinaison non valide de valeurs <see cref="T:System.Globalization.DateTimeStyles" />. Par exemple, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> et <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTime.ParseExact" /> méthode lève une exception un <see cref="T:System.FormatException" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas en accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir.</param>
        <param name="formats">Tableau de formats possibles pour <c>s</c>. Pour plus d'informations, consultez la section Remarques.</param>
        <param name="provider">Objet qui fournit des informations de format spécifiques à la culture sur <c>s</c>.</param>
        <param name="style">Combinaison au niveau du bit des valeurs d’énumération qui indique le format autorisé de <c>s</c>. Une valeur typique à spécifier est <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et heure en son équivalent <see cref="T:System.DateTime" /> à l'aide du tableau de formats, des informations et du style de format propres à la culture spécifiés. Le format de la représentation sous forme de chaîne doit correspondre exactement à au moins l'un des formats spécifiés, ou une exception est levée.</summary>
        <returns>Objet qui équivaut à la date et à l'heure figurant dans <paramref name="s" />, comme spécifié par <paramref name="formats" />, <paramref name="provider" /> et <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date correspondant à l’un des modèles assignés à la `formats` paramètre. Si la chaîne `s` ne correspond pas à l’un de ces modèles avec les variations définies par le `styles` paramètre, la méthode lève un <xref:System.FormatException>. Outre la comparaison de `s` avec plusieurs modèles de mise en forme, plutôt qu’à un seul modèle de mise en forme, cette surcharge se comporte comme le <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode).  
  
 Le `s` paramètre contient la date et l’heure d’analyse. Si le `s` paramètre contient uniquement une heure et aucune date, la date actuelle est utilisée, sauf si le `style` paramètre inclut le <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> indicateur, auquel cas la date par défaut (`DateTime.Date.MinValue`) est utilisé. Si le `s` paramètre contient uniquement une date et aucune heure de minuit (00 : 00:00) est utilisé. Le `style` paramètre détermine également si le `s` paramètre peut contenir de début, interne ou de fin des caractères autres que ceux autorisés par l’une des chaînes de format dans `formats`.  
  
 Si `s` ne contient aucune information de fuseau horaire, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Ce comportement peut être modifié à l’aide de la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> indicateur, qui retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, ou à l’aide de la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> et <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateurs, qui retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` contient des informations de fuseau horaire, l’heure est convertie en heure locale, si nécessaire et le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Ce comportement peut être modifié à l’aide de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> indicateur pour ne pas convertir le temps universel coordonné (UTC) en heure locale et définir la <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Le `formats` paramètre contient un tableau de modèles, dont `s` doit correspondre exactement l’opération d’analyse aboutisse. Les modèles dans le `formats` paramètre se compose d’un ou plusieurs spécificateurs de format personnalisés à partir de la [Date personnalisée et les chaînes de Format d’heure](~/docs/standard/base-types/custom-date-and-time-format-strings.md) table ou un spécificateur de format standard unique qui identifie un modèle prédéfini, à partir de la [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) table.  
  
 Si vous n’utilisez pas de séparateurs de date ou d’heure dans un modèle de format personnalisé, utilisez la culture dite indifférente pour le `provider` spécificateur de format de paramètre et la forme la plus large de chaque personnalisé. Par exemple, si vous souhaitez spécifier des heures dans le modèle, spécifier une forme étendue, « HH », plutôt que le formulaire plus étroite, « H ».  
  
 Le `styles` paramètre inclut un ou plusieurs membres de la <xref:System.Globalization.DateTimeStyles> énumération qui déterminent si et où espace blanc non défini par `format` peut apparaître dans `s` et qui contrôlent le comportement précis de l’opération d’analyse. Le tableau suivant décrit comment chaque membre de la <xref:System.Globalization.DateTimeStyles> énumération affecte le fonctionnement de la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> (méthode).  
  
|Membre DateTimeStyles|Description |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `s` et, si nécessaire, le convertit au format UTC. Si `s` inclut un décalage de fuseau horaire, ou si `s` ne contient aucune information de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, les appels <xref:System.DateTime.ToUniversalTime%2A> pour convertir le texte retourné <xref:System.DateTime> valeur au format UTC et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indique qu’il représente l’heure UTC, ou si `s` ne contient pas les informations de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, n’effectue aucune conversion de fuseau horaire sur le <xref:System.DateTime> valeur et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Dans tous les autres cas, l’indicateur est sans effet.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Spécifie qu’un espace blanc non défini par `format` peuvent apparaître entre des dates individuelles ou d’un élément d’heure.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Spécifie qu’un espace blanc non défini par `format` peut apparaître au début de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Spécifie qu’un espace blanc non défini par `format` peut apparaître à la fin de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Spécifie que `s` peut contenir, internes et de fin non définis par des espaces blancs `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est supposé pour représenter une heure locale. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est censé pour représenter l’heure UTC. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, la méthode convertit le texte retourné <xref:System.DateTime> valeur à l’heure UTC à l’heure locale et affecte ses <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contient le temps sans les informations de date, la date de la valeur de retour est définie sur `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Le `s` paramètre est analysé à l’aide des valeurs par défaut. Aucun espace blanc autre que ceux présents dans `format` est autorisée. Si `s` ne dispose pas d’un composant de date, la date de retourné <xref:System.DateTime> a la valeur 1/1/0001. Si `s` ne contient aucune information de fuseau horaire, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si les informations de fuseau horaire sont présentes dans `s`, l’heure est convertie en heure locale et la <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Pour les chaînes qui contiennent des informations de fuseau horaire, tente d’empêcher la conversion en une date et d’heure avec son <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Cet indicateur empêche principalement la conversion d’heures UTC en heures locales.|  
  
 La date particulière et les symboles de temps et les chaînes (par exemple, les noms des jours de la semaine dans un langage particulier) utilisés dans `s` sont définies par le `provider` paramètre, ainsi que le format précis de `s` si `format` est un format standard chaîne du spécificateur. Le `provider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture utilisée pour interpréter `s`. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par son <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété définit les symboles et la mise en forme dans `s`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
-   Personnalisé <xref:System.IFormatProvider> implémentation dont <xref:System.IFormatProvider.GetFormat%2A> méthode retourne la <xref:System.Globalization.CultureInfo> objet ou le <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `provider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> pour s’assurer qu’une chaîne dans un nombre de formats possibles peut être analysée avec succès.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ou <paramref name="formats" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> est une chaîne vide.  
  
 - ou -  
  
 un élément de <paramref name="formats" /> est une chaîne vide.  
  
 - ou -  
  
 <paramref name="s" /> ne contient aucune date ou heure correspondant à un élément de <paramref name="formats" />.  
  
 - ou -  
  
 Le composant « heure » et l'indicateur AM/PM de <paramref name="s" /> ne correspondent pas.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contient une combinaison non valide de valeurs <see cref="T:System.Globalization.DateTimeStyles" />. Par exemple, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> et <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTime.ParseExact" /> méthode lève une exception un <see cref="T:System.FormatException" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas en accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « secondes » de la date représentée par cette instance.</summary>
        <value>Composant « secondes », exprimé comme une valeur comprise entre 0 et 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant illustre le <xref:System.DateTime.Second%2A> propriété.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">Date et heure.</param>
        <param name="kind">Une des valeurs d'énumération qui indique si le nouvel objet représente une heure locale, une heure UTC ou aucune des deux.</param>
        <summary>Crée un objet <see cref="T:System.DateTime" /> qui a le même nombre de graduations que le <see cref="T:System.DateTime" /> spécifié, mais qui est désigné comme une heure locale, une heure UTC ou aucune des deux, en fonction de ce que la valeur <see cref="T:System.DateTimeKind" /> spécifiée indique.</summary>
        <returns>Nouvel objet qui a le même nombre de graduations que l'objet représenté par le paramètre <paramref name="value" /> et la valeur <see cref="T:System.DateTimeKind" /> spécifiée par le paramètre <paramref name="kind" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.DateTime> objet se compose d’un champ Kind qui indique si la valeur d’heure est basée sur l’heure locale, le temps universel coordonné (UTC) ou aucune des deux, et un champ Ticks qui contient une valeur d’heure est exprimée en graduations de 100 nanosecondes. Le <xref:System.DateTime.SpecifyKind%2A> méthode crée un nouvel <xref:System.DateTime> à l’aide de l’élément spécifié de l’objet `kind` paramètre et la valeur d’heure d’origine.  
  
> [!IMPORTANT]
>  Retourné <xref:System.DateTime> valeur ne représente pas le même instant dans le temps que le `value` paramètre, et <xref:System.DateTime.SpecifyKind%2A> n’est pas une méthode de conversion de fuseau horaire. Au lieu de cela, il laisse l’heure spécifiée par le `value` inchangée et définit les <xref:System.DateTime.Kind%2A> propriété `kind`. Pour plus d’informations sur les conversions de fuseau horaire, consultez [conversion d’heures entre fuseaux horaires](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 Le <xref:System.DateTime.SpecifyKind%2A> méthode est utile dans les scénarios d’interopérabilité où vous recevez un <xref:System.DateTime> objet avec un champ de type non spécifié, mais vous pouvez déterminer en indépendant signifie que le champ Ticks représente l’heure locale ou UTC.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.SpecifyKind%2A> méthode afin d’illustrer comment les <xref:System.DateTime.Kind%2A> propriété a une incidence sur la <xref:System.DateTime.ToLocalTime%2A> et <xref:System.DateTime.ToUniversalTime%2A> méthodes de conversion.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Soustrait l'heure ou la durée spécifiée de cette instance.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Valeur de date et d'heure à soustraire.</param>
        <summary>Soustrait la date et l'heure spécifiées de cette instance.</summary>
        <returns>Intervalle de temps égal à la date et à l'heure représentées par cette instance moins la date et l'heure représentées par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.Subtract%28System.DateTime%29> méthode détermine la différence entre deux dates. Pour soustraire un intervalle de temps à partir de l’instance actuelle, appelez la <xref:System.DateTime.Subtract%28System.TimeSpan%29> (méthode). Pour soustraire un intervalle de temps particulier à partir de l’instance actuelle, appelez la méthode qui ajoute cet intervalle de temps à la date actuelle et fournissez une valeur négative en tant qu’argument de méthode. Par exemple, pour soustraire deux mois à compter de la date actuelle, appelez la <xref:System.DateTime.AddMonths%28System.Int32%29> méthode avec une valeur de -2.  
  
 Si la date et l’heure de l’instance actuelle est antérieure à `value`, la méthode retourne un <xref:System.TimeSpan> objet qui représente un intervalle de temps négatif. Autrement dit, la valeur de toutes ses propriétés non nulle (tel que <xref:System.TimeSpan.Days%2A> ou <xref:System.TimeSpan.Ticks%2A>) est un nombre négatif.  
  
 Le <xref:System.DateTime.Subtract%28System.DateTime%29> méthode ne tient pas compte de la valeur de la <xref:System.DateTime.Kind%2A> propriété des deux <xref:System.DateTime> lors de l’exécution de la soustraction des valeurs. Avant de soustraire <xref:System.DateTime> objets, vérifiez que les objets représentent les heures dans le même fuseau horaire. Dans le cas contraire, le résultat inclura la différence entre les fuseaux horaires.  
  
> [!NOTE]
>  Le <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> méthode considère la différence entre les fuseaux horaires lors de l’exécution de la soustraction.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.Subtract%2A> méthode et l’opérateur de soustraction.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le résultat est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Intervalle de temps à soustraire.</param>
        <summary>Soustrait la durée spécifiée de cette instance.</summary>
        <returns>Objet qui est égal à la date et à l'heure représentées par cette instance moins l'intervalle de temps représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.Subtract%28System.TimeSpan%29> méthode retourne la date qui est une différence d’intervalle de temps spécifié à partir de l’instance actuelle. Pour déterminer l’intervalle de temps entre deux dates, appelez le <xref:System.DateTime.Subtract%28System.DateTime%29> (méthode). Pour soustraire un intervalle de temps particulier à partir de l’instance actuelle, appelez la méthode qui ajoute cet intervalle de temps à la date actuelle et fournissez une valeur négative en tant qu’argument de méthode. Par exemple, pour soustraire deux mois à compter de la date actuelle, appelez la <xref:System.DateTime.AddMonths%28System.Int32%29> méthode avec une valeur de -2.  
  
 Cette méthode ne modifie pas la valeur de cet <xref:System.DateTime>. Au lieu de cela, il retourne un nouvel <xref:System.DateTime> dont la valeur est le résultat de cette opération.  
  
 En règle générale, les <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> méthode soustrait un <xref:System.TimeSpan> objet qui représente un intervalle de temps positif et retourne un <xref:System.DateTime> valeur antérieure à la date et l’heure de l’instance actuelle. Toutefois, si le <xref:System.TimeSpan> objet représente un intervalle de temps négatif, le <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> méthode retourne un <xref:System.DateTime> valeur postérieure à la date et l’heure de l’instance actuelle.  
  
 Le <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> méthode vous permet de soustraire un intervalle de temps qui se compose de plusieurs unités de temps telles que (un nombre donné d’heures) et un certain nombre de minutes. À soustraire une seule unité de temps (par exemple, les années, mois ou jours) de la <xref:System.DateTime> instance, vous pouvez passer une valeur numérique négative en tant que paramètre à une des méthodes suivantes :  
  
-   <xref:System.DateTime.AddYears%2A>, pour soustraire un nombre spécifique d’années à partir de l’instance de date et l’heure actuelle.  
  
-   <xref:System.DateTime.AddMonths%2A>, pour soustraire un nombre spécifique de mois à partir de l’instance de date et l’heure actuelle.  
  
-   <xref:System.DateTime.AddDays%2A>, pour soustraire un nombre spécifique de jours à partir de l’instance de date et l’heure actuelle.  
  
-   <xref:System.DateTime.AddHours%2A>, pour soustraire un nombre spécifique d’heures de l’instance de date et l’heure actuelle.  
  
-   <xref:System.DateTime.AddMinutes%2A>, pour soustraire un nombre spécifique de minutes à partir de l’instance de date et l’heure actuelle.  
  
-   <xref:System.DateTime.AddSeconds%2A>, pour soustraire un nombre spécifique de secondes à partir de l’instance de date et l’heure actuelle.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, pour soustraire un nombre spécifique de millisecondes de l’instance de date et l’heure actuelle.  
  
-   <xref:System.DateTime.AddTicks%2A>, pour soustraire un nombre spécifique de graduations de l’instance de date et l’heure actuelle.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.Subtract%2A> méthode et l’opérateur de soustraction.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le résultat est inférieur à <see cref="F:System.DateTime.MinValue" /> ou supérieur à <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Retourne l'objet <see cref="T:System.DateTime" /> actuel.</summary>
        <returns>Objet actif.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">Type souhaité.</param>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Convertit l'objet <see cref="T:System.DateTime" /> actuel en un objet de type spécifié.</summary>
        <returns>Objet du type spécifié par le paramètre de <paramref name="type" />, avec une valeur équivalente à l'objet <see cref="T:System.DateTime" /> actuel.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge pour le type <see cref="T:System.DateTime" />.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Cette conversion n'est pas prise en charge. Toute tentative d'utilisation de cette méthode lève une <see cref="T:System.InvalidCastException" />.</summary>
        <returns>La valeur de retour pour ce membre n'est pas utilisée.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Dans tous les cas.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Objet à remplir avec des données.</param>
        <param name="context">Destination de cette sérialisation. (Ce paramètre n'est pas utilisé ; spécifiez <see langword="null" />).</param>
        <summary>Remplit un objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> des données nécessaires à la sérialisation de l'objet <see cref="T:System.DateTime" /> actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplit la `info` paramètre avec le <xref:System.DateTime.Ticks%2A> et <xref:System.DateTime.Kind%2A> les valeurs de propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiert une confiance totale pour l’appelant immédiat. Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de graduations représentant la date et l'heure de cette instance.</summary>
        <value>Nombre de graduations représentant la date et l'heure de cette instance. La valeur est comprise entre <see langword="DateTime.MinValue.Ticks" /> et <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une graduation représente 100 nanosecondes, ou un dix-millionième de seconde. Il existe 10 000 graduations dans une milliseconde, ou les cycles de 10 millions en une seconde.  
  
 La valeur de cette propriété représente le nombre d’intervalles de 100 nanosecondes écoulés depuis 12:00:00 minuit, le 1er janvier 0001 (0 : 00:00 UTC le 1er janvier 0001, dans le calendrier grégorien), qui représente <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Il n’inclut pas le nombre de graduations qui sont attribuables aux secondes intercalaires.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.Ticks%2A> propriété pour afficher le nombre de graduations qui se sont écoulées depuis le début du vingt et unième siècle et pour instancier un <xref:System.TimeSpan> objet. Le <xref:System.TimeSpan> objet est ensuite utilisé pour afficher le temps écoulé à l’aide de plusieurs autres intervalles de temps.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'heure de cette instance.</summary>
        <value>Intervalle de temps qui représente la fraction du jour écoulée depuis minuit.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à la <xref:System.DateTime.Date%2A> propriété. qui retourne un <xref:System.DateTime> valeur qui représente une date sans son composant d’heure, la <xref:System.DateTime.TimeOfDay%2A> propriété retourne un <xref:System.TimeSpan> valeur qui représente un <xref:System.DateTime> composant au moment de la valeur.  
  
 Si vous souhaitez afficher l’heure du jour ou de récupérer la représentation sous forme de chaîne de l’heure du jour d’un <xref:System.DateTime> valeur, vous pouvez appeler une surcharge de la <xref:System.DateTime.ToString%2A> méthode qui a un `format` paramètre ou utilisez le [mise en forme composite ](~/docs/standard/base-types/composite-formatting.md) fonctionnalité avec le « t » ou la chaîne de format standard « T ».  
  
   
  
## Examples  
 L’exemple suivant affiche la valeur de la <xref:System.DateTime.TimeOfDay%2A> propriété à un tableau de <xref:System.DateTime> valeurs. Il compare également la valeur de retour avec la chaîne retournée par la chaîne de format standard « t » dans une opération de mise en forme composite.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sérialise l'objet <see cref="T:System.DateTime" /> actuel en une valeur binaire 64 bits qui pourra ensuite être utilisée pour recréer l'objet <see cref="T:System.DateTime" />.</summary>
        <returns>Entier signé 64 bits qui encode les propriétés <see cref="P:System.DateTime.Kind" /> et <see cref="P:System.DateTime.Ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.DateTime.ToBinary%2A> pour convertir la valeur de la méthode <xref:System.DateTime> objet en une valeur binaire. Ensuite, utilisez la valeur binaire et la <xref:System.DateTime.FromBinary%2A> méthode pour recréer l’original <xref:System.DateTime> objet.  
  
> [!IMPORTANT]
>  Dans certains cas, le <xref:System.DateTime> valeur retournée par la <xref:System.DateTime.FromBinary%2A> méthode n’est pas identique à celle d’origine <xref:System.DateTime> valeur fournie à la <xref:System.DateTime.ToBinary%2A> (méthode). Pour plus d’informations, consultez la section suivante, « Réglage des heures locales ».  
  
## <a name="local-time-adjustment"></a>Ajustement de l’heure locale  
 Une heure locale, qui est une heure UTC ajustée pour le fuseau horaire local, est représentée par un <xref:System.DateTime> structure dont <xref:System.DateTime.Kind%2A> propriété a la valeur <xref:System.DateTimeKind.Local>. Lors de la restauration d’une variable locale <xref:System.DateTime> valeur à partir de la représentation binaire qui est générée par le <xref:System.DateTime.ToBinary%2A> (méthode), la <xref:System.DateTime.FromBinary%2A> méthode peut ajuster la valeur recréée afin qu’il ne soit pas égale à la valeur d’origine. Cela peut se produire dans les conditions suivantes :  
  
-   Si une variable locale <xref:System.DateTime> l’objet est sérialisé dans un fuseau horaire par la <xref:System.DateTime.ToBinary%2A> (méthode), puis désérialisé dans un autre fuseau horaire par la <xref:System.DateTime.FromBinary%2A> (méthode), l’heure locale représentée par résultant <xref:System.DateTime> objet est automatiquement ajusté au deuxième fuseau horaire.  
  
     Par exemple, considérez un <xref:System.DateTime> objet qui représente une heure locale de 15 heures. Une application qui s’exécute aux États-Unis. Fuseau horaire Pacifique utilise le <xref:System.DateTime.ToBinary%2A> méthode pour convertir <xref:System.DateTime> objet en une valeur binaire. Une autre application qui s’exécute aux États-Unis. Fuseau horaire est utilise le <xref:System.DateTime.FromBinary%2A> méthode pour convertir la valeur binaire à une nouvelle <xref:System.DateTime> objet. La valeur de la nouvelle <xref:System.DateTime> objet est de 18 h 00, ce qui représente le même point dans le temps que le 15 d’origine. valeur, mais est ajustée en heure locale dans le fuseau horaire est.  
  
-   Si la représentation binaire d’une variable locale <xref:System.DateTime> valeur représente une heure non valide dans le fuseau horaire local du système sur lequel <xref:System.DateTime.FromBinary%2A> est appelée, l’heure est ajustée afin qu’il soit valide.  
  
     Par exemple, la transition à partir de l’heure d’hiver à l’heure d’été se produit aux États-Unis. Fuseau horaire Pacifique le 14 mars 2010 à 2 h 00, lorsque l’heure avance d’une heure à 3 h 00 du matin. Cet intervalle horaire est une heure non valide, autrement dit, un intervalle de temps qui n’existe pas dans ce fuseau horaire. L’exemple suivant montre que lorsqu’une heure qui se trouve dans cette plage est convertie en une valeur binaire par le <xref:System.DateTime.ToBinary%2A> (méthode) et est ensuite restaurée par le <xref:System.DateTime.FromBinary%2A> (méthode), la valeur d’origine est ajustée pour devenir une heure valide. Vous pouvez déterminer si une date particulière et la valeur d’heure peuvent être modifiée en le passant à la <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> méthode, comme l’exemple illustre.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considérations relatives à la version  
 En commençant par le .NET Framework version 2.0, un <xref:System.DateTime> structure se compose d’un champ Kind privé, qui indique si la valeur d’heure spécifiée est basée sur l’heure locale, le temps universel coordonné (UTC) ou aucune des deux et un champ Ticks privé qui contient le nombre de graduations de 100 nanosecondes qui spécifient une date et une heure. Le champ Ticks est accessible avec la <xref:System.DateTime.Ticks%2A> propriété et le champ Kind est accessible avec la <xref:System.DateTime.Kind%2A> propriété.  
  
 Avant le .NET Framework 2.0, si vous sérialisiez un <xref:System.DateTime> objet manuellement à la place à l’aide d’une interface de sérialisation comme <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, vous ne deviez sérialiser les données de graduations dans le <xref:System.DateTime> structure. Depuis la version 2.0, vous devez également sérialiser les données de type.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la date actuelle.</summary>
        <value>Objet défini à la date d'aujourd'hui, avec le composant de l'heure défini à 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À compter de .NET Framework version 2.0, la valeur de retour est un <xref:System.DateTime> dont <xref:System.DateTime.Kind%2A> propriété renvoie <xref:System.DateTimeKind.Local>.  
  
 Parce qu’il retourne la date actuelle sans l’heure actuelle, le <xref:System.DateTime.Today%2A> propriété convient pour une utilisation dans les applications qui fonctionnent avec des dates. Pour plus d’informations, consultez [Choosing Between DateTime, DateTimeOffset, TimeSpan et TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). En revanche, le <xref:System.DateTime.TimeOfDay%2A> propriété retourne l’heure actuelle sans la date actuelle et le <xref:System.DateTime.Now%2A> propriété retourne la date et l’heure actuelle.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.Date%2A> propriété à récupérer la date actuelle. Elle montre également comment un <xref:System.DateTime> valeur peut être mise en forme à l’aide de certaines chaînes de format d’heure et date standard. Notez que la sortie produite par le troisième appel le <xref:System.DateTime.ToString%28System.String%29> méthode utilise le spécificateur de format g pour inclure le composant d’heure qui est zéro.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en heure de fichier Windows.</summary>
        <returns>Valeur de l'objet <see cref="T:System.DateTime" /> actuel exprimée sous forme d'heure de fichier Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Heure de fichier Windows est une valeur 64 bits qui représente le nombre d’intervalles de 100 nanosecondes écoulés depuis 12:00 minuit, le 1er janvier 1601. (C.E.) Heure (UTC). Windows utilise une heure de fichier pour enregistrer l’assignation d’une application crée, accède ou écrit dans un fichier.  
  
 Le <xref:System.DateTime.ToFileTime%2A> utilise le <xref:System.DateTime.Kind%2A> propriété pour déterminer si actuel <xref:System.DateTime> objet est une heure locale, une heure UTC ou un type non spécifié qui est traité comme une heure locale.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.ToFileTime%2A> (méthode).  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’heure du fichier résultante représente une date et une heure avant 00:00 (minuit) le 1er janvier 1601 (notre ère) UTC.</exception>
        <block subset="none" type="usage">
          <para>En règle générale, les <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> méthode restaurations un <see cref="T:System.DateTime" /> valeur qui a été enregistrée par le <see cref="M:System.DateTime.ToFileTime" /> (méthode). Toutefois, les deux valeurs peuvent différer dans les conditions suivantes :  
  
-   Si la sérialisation et désérialisation de la <see cref="T:System.DateTime" /> valeur se produisent dans des fuseaux horaires différents. Par exemple, si un <see cref="T:System.DateTime" /> valeur avec une durée de 12 h 30. aux États-Unis. Fuseau horaire est est sérialisé et désérialisé puis aux États-Unis Fuseau horaire Pacifique, la valeur d’origine de 12 h 30. est ajustée à 9 h 30. afin de refléter la différence entre les deux fuseaux horaires.  
  
-   Si le <see cref="T:System.DateTime" /> valeur sérialisée représente une heure non valide dans le fuseau horaire local. Dans ce cas, le <see cref="M:System.DateTime.ToFileTime" /> méthode ajuste restauré <see cref="T:System.DateTime" /> valeur afin qu’il représente une heure valide dans le fuseau horaire local.  
  
     Par exemple, la transition à partir de l’heure d’hiver à l’heure d’été se produit aux États-Unis. Fuseau horaire Pacifique le 14 mars 2010 à 2 h 00, lorsque l’heure avance d’une heure à 3 h 00 du matin. Cet intervalle horaire est une heure non valide, autrement dit, un intervalle de temps qui n’existe pas dans ce fuseau horaire. L’exemple suivant montre que lorsqu’une heure qui se trouve dans cette plage est convertie en une valeur d’entier long par la <see cref="M:System.DateTime.ToFileTime" /> (méthode) et est ensuite restaurée par le <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> (méthode), la valeur d’origine est ajustée pour devenir une heure valide. Vous pouvez déterminer si une date particulière et la valeur d’heure peuvent être modifiée en le passant à la <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> méthode, comme l’exemple illustre.  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en heure de fichier Windows.</summary>
        <returns>Valeur de l'objet <see cref="T:System.DateTime" /> actuel exprimée sous forme d'heure de fichier Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Heure de fichier Windows est une valeur 64 bits qui représente le nombre d’intervalles de 100 nanosecondes écoulés depuis 12:00 minuit, le 1er janvier 1601. (C.E.) Heure (UTC). Windows utilise une heure de fichier pour enregistrer l’assignation d’une application crée, accède ou écrit dans un fichier.  
  
 Le <xref:System.DateTime.ToFileTimeUtc%2A> utilise le <xref:System.DateTime.Kind%2A> propriété pour déterminer si actuel <xref:System.DateTime> objet est une heure locale, une heure UTC ou un type non spécifié qui est traité comme une heure UTC. S’il est une heure locale, elle convertit l’heure en UTC avant d’effectuer la conversion en heure de fichier Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’heure du fichier résultante représente une date et une heure avant 00:00 (minuit) le 1er janvier 1601 (notre ère) UTC.</exception>
        <block subset="none" type="usage">
          <para>Le <see cref="M:System.DateTime.ToFileTimeUtc" /> (méthode) est parfois utilisée pour convertir une heure locale au format UTC et par la suite pour la restaurer en appelant le <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> méthode suivie par le <see cref="M:System.DateTime.ToLocalTime" /> (méthode). Toutefois, si l’heure d’origine représente une heure non valide dans le fuseau horaire local, les deux valeurs d’heure locale ne sera pas égales. Pour plus d’informations, consultez le <see cref="M:System.DateTime.ToLocalTime" /> (méthode).</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en heure locale.</summary>
        <returns>Objet dont la propriété <see cref="P:System.DateTime.Kind" /> est <see cref="F:System.DateTimeKind.Local" /> et dont la valeur est l'heure locale équivalente à la valeur de l'objet <see cref="T:System.DateTime" /> actif ou <see cref="F:System.DateTime.MaxValue" /> si la valeur convertie est trop grande pour être représentée par un objet <see cref="T:System.DateTime" /> ou <see cref="F:System.DateTime.MinValue" /> si la valeur convertie est trop petite pour être représentée comme un objet <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’heure locale est égale à l’heure de temps universel coordonné (UTC) plus l’offset UTC. Pour plus d’informations sur l’offset UTC, consultez <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversion prend également en compte la règle de l’heure d’été qui s’applique à l’heure représentée par l’actuel <xref:System.DateTime> objet.  
  
> [!IMPORTANT]
>  Sur [!INCLUDE[winxp](~/includes/winxp-md.md)] systèmes, la <xref:System.DateTime.ToLocalTime%2A> méthode reconnaît uniquement la règle d’ajustement actuelle lors de la conversion à l’heure UTC en heure locale. Par conséquent, les conversions pour les périodes avant l’entrée en vigueur de la règle d’ajustement actuelle ne peuvent pas refléter correctement la différence entre l’heure UTC et l’heure locale.  
  
 En commençant par le .NET Framework version 2.0, la valeur retournée par la <xref:System.DateTime.ToLocalTime%2A> méthode est déterminée par le <xref:System.DateTime.Kind%2A> propriété actuelles <xref:System.DateTime> objet. Le tableau suivant décrit les résultats possibles.  
  
|Kind|Résultats|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Cette instance de <xref:System.DateTime> est convertie en heure locale.|  
|<xref:System.DateTimeKind.Local>|Aucune conversion n’est effectuée.|  
|<xref:System.DateTimeKind.Unspecified>|Cette instance de <xref:System.DateTime> est supposé pour être une heure UTC et la conversion est effectuée comme si <xref:System.DateTime.Kind%2A> ont été <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  Le <xref:System.DateTime.ToLocalTime%2A> méthode convertit un <xref:System.DateTime> valeur à l’heure UTC en heure locale. Pour convertir l’heure dans un fuseau horaire désigné en heure locale, utilisez la <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> (méthode).  
  
 La valeur retournée par la conversion est un <xref:System.DateTime> dont <xref:System.DateTime.Kind%2A> propriété retourne toujours <xref:System.DateTimeKind.Local>. Par conséquent, un résultat valide est retourné même si <xref:System.DateTime.ToLocalTime%2A> est appliqué à plusieurs reprises au même <xref:System.DateTime>.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.ToLocalTime%2A> (méthode). Notez que le résultat exact dépend de la culture actuelle et le fuseau horaire local du système sur lequel il est exécuté.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 L’exemple suivant utilise le <xref:System.DateTime.SpecifyKind%2A> méthode afin d’illustrer comment les <xref:System.DateTime.Kind%2A> propriété a une incidence sur la <xref:System.DateTime.ToLocalTime%2A> et <xref:System.DateTime.ToUniversalTime%2A> méthodes de conversion.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Vous pouvez utiliser la <see cref="M:System.DateTime.ToLocalTime" /> méthode pour restaurer un local valeur date et heure qui a été convertie en heure UTC par la <see cref="M:System.DateTime.ToUniversalTime" /> ou <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> (méthode). Cependant, si l’heure d’origine représente une heure non valide dans le fuseau horaire local, elle pas correspondent à la valeur restaurée. Lorsque la <see cref="M:System.DateTime.ToLocalTime" /> méthode convertit une heure à l’heure UTC du fuseau horaire local, elle ajuste également l’heure pour qu’elle soit valide dans le fuseau horaire local.  
  
 Par exemple, la transition à partir de l’heure d’hiver à l’heure d’été se produit aux États-Unis. Fuseau horaire Pacifique le 14 mars 2010 à 2 h 00, lorsque l’heure avance d’une heure à 3 h 00 du matin. Cet intervalle horaire est une heure non valide, autrement dit, un intervalle de temps qui n’existe pas dans ce fuseau horaire. L’exemple suivant montre que lorsqu’une heure qui se trouve dans cette plage est convertie en heure UTC par la <see cref="M:System.DateTime.ToUniversalTime" /> (méthode) et est ensuite restaurée par le <see cref="M:System.DateTime.ToLocalTime" /> (méthode), la valeur d’origine est ajustée pour devenir une heure valide. Vous pouvez déterminer si une date particulière et la valeur d’heure peuvent être modifiée en le passant à la <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> méthode, comme l’exemple illustre.  
  
 [!code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)]
 [!code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en sa représentation sous forme de chaîne de date longue équivalente.</summary>
        <returns>Chaîne qui contient la représentation sous forme de chaîne de date longue de l'objet <see cref="T:System.DateTime" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.DateTime> objet est mis en forme à l’aide du modèle défini par le <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> propriété associée à la culture du thread actuel. La valeur de retour est identique à la valeur retournée en spécifiant la « D » [chaîne de format DateTime standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) avec la <xref:System.DateTime.ToString%28System.String%29> (méthode).  
  
> [!IMPORTANT]
>  La chaîne retournée par la <xref:System.DateTime.ToLongDateString%2A> méthode est sensible à la culture. Elle reflète le modèle défini par la culture actuelle <xref:System.Globalization.DateTimeFormatInfo> objet. Par exemple, pour la culture en-US, le modèle de date longue standard est « dddd, MMMMdd, yyyy » ; pour la culture fr-fr, il est « dddd d. MMMMaaaa » ; pour la culture ja-JP, il est « aaaa ' ?' M'? ' d'? ' ». La chaîne de format spécifique sur un ordinateur particulier peut également être personnalisée afin qu’elle diffère de la chaîne de format de date longue standard.  
  
 Pour plus d’informations sur la culture du thread actuel, consultez le <xref:System.Threading.Thread.CurrentCulture%2A> propriété. Pour plus d’informations sur les caractères de format, les modèles de format et la sortie, ils produisent, consultez la [mise en forme des Types](~/docs/standard/base-types/formatting-types.md) rubrique. Pour plus d’informations sur la modification du modèle de format associé à un caractère de format, consultez la <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.ToLongDateString%2A> (méthode).  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en sa représentation sous forme de chaîne d'heure longue équivalente.</summary>
        <returns>Chaîne qui contient la représentation sous forme de chaîne d'heure longue de l'objet <see cref="T:System.DateTime" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.DateTime> objet est mis en forme à l’aide du modèle défini par le <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> propriété associée à la culture du thread actuel. La valeur de retour est identique à la valeur retournée en spécifiant le paramètre « T » [chaîne de format de date et heure standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) avec la <xref:System.DateTime.ToString%28System.String%29> (méthode).  
  
> [!IMPORTANT]
>  La chaîne retournée par la <xref:System.DateTime.ToLongTimeString%2A> méthode est sensible à la culture. Elle reflète le modèle défini par le <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propriété de la culture actuelle <xref:System.Globalization.DateTimeFormatInfo> objet. Par exemple, pour la culture en-US, le modèle d’heure longue standard est « : mm : ss » ; pour la culture fr-fr, il est « HH : mm : » ; pour la culture ja-JP, il est « SS ». La chaîne de format spécifique sur un ordinateur particulier peut également être personnalisée afin qu’elle diffère de la chaîne de format standard beaucoup de temps.  
  
 Pour plus d’informations sur la culture du thread actuel, consultez le <xref:System.Threading.Thread.CurrentCulture%2A> propriété. Pour plus d’informations sur les caractères de format, les modèles de format et la sortie, ils produisent, consultez la [mise en forme des Types](~/docs/standard/base-types/formatting-types.md) rubrique. Pour plus d’informations sur la modification du modèle de format associé à un caractère de format, consultez la <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.ToLongTimeString%2A> (méthode).  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de cette instance en date OLE Automation équivalente.</summary>
        <returns>Nombre à virgule flottante double précision qui contient une date OLE Automation équivalant à la valeur de cette instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une date OLE Automation est implémentée comme un nombre à virgule flottante dont le composant intégral est le nombre de jours avant ou après le 30 décembre 1899 à minuit et dont le composant fractions de seconde représente l’heure de la journée divisée par 24. Par exemple, minuit le 31 décembre 1899 est représenté par 1.0 ; 18 : 00, le 1er janvier 1900 est représenté par 2.25 ; minuit, 29 décembre 1899 est représenté par -1.0 ; et 18 : 00, 29 décembre 1899 est représenté par -1,25.  
  
 La Date OLE Automation de base est le 30 décembre 1899 à minuit. La date OLE Automation minimum est minuit, le 1er janvier 0100. La Date OLE Automation maximale est la même que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, le dernier instant du 31 décembre 9999.  
  
 Le <xref:System.DateTime.ToOADate%2A> méthode lève une exception une <xref:System.OverflowException> si l’instance actuelle représente une date ultérieure à <xref:System.DateTime.MinValue> et antérieure à minuit January1, 0100. Toutefois, si la valeur de l’instance actuelle est <xref:System.DateTime.MinValue>, la méthode retourne 0.  
  
 Pour plus d’informations sur OLE Automation, consultez la [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">La valeur de cette instance ne peut pas être représentée comme Date OLE Automation.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en sa représentation sous forme de chaîne de date courte équivalente.</summary>
        <returns>Chaîne qui contient la représentation sous forme de chaîne de date courte de l'objet <see cref="T:System.DateTime" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.DateTime> objet est mis en forme à l’aide du modèle défini par le <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> propriété associée à la culture du thread actuel. La valeur de retour est identique à la valeur retournée en spécifiant la « d » [chaîne de format DateTime standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) avec la <xref:System.DateTime.ToString%28System.String%29> (méthode).  
  
> [!IMPORTANT]
>  La chaîne retournée par la <xref:System.DateTime.ToShortDateString%2A> méthode est sensible à la culture. Elle reflète le modèle défini par la culture actuelle <xref:System.Globalization.DateTimeFormatInfo> objet. Par exemple, pour la culture en-US, le modèle de date courte standard est « J/aaaa » ; pour la culture fr-fr, il est « aaaa. MM.yyyy » ; pour la culture ja-JP, il est « yyyy, M/d ». La chaîne de format spécifique sur un ordinateur particulier peut également être personnalisée afin qu’elle diffère de la chaîne de format de date courte.  
  
 Pour plus d’informations sur la culture du thread actuel, consultez le <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propriété. Pour plus d’informations sur les caractères de format, les modèles de format et la sortie, ils produisent, consultez la [mise en forme des Types](~/docs/standard/base-types/formatting-types.md) rubrique. Pour plus d’informations sur la modification du modèle de format associé à un caractère de format, consultez la <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.ToShortDateString%2A> (méthode). Il montre également que le résultat de l’appel de la <xref:System.DateTime.ToShortDateString%2A> méthode est identique à l’appel du <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> méthode avec « d » comme paramètre de format.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en sa représentation sous forme de chaîne d'heure courte équivalente.</summary>
        <returns>Chaîne qui contient la représentation sous forme de chaîne d'heure courte de l'objet <see cref="T:System.DateTime" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.DateTime> objet est mis en forme à l’aide du modèle défini par le <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> propriété associée à la culture du thread actuel. La valeur de retour est identique à la valeur retournée en spécifiant le paramètre « t » [chaîne de format DateTime standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) avec la <xref:System.DateTime.ToString%28System.String%29> (méthode).  
  
> [!IMPORTANT]
>  La chaîne retournée par la <xref:System.DateTime.ToShortTimeString%2A> méthode est sensible à la culture. Elle reflète le modèle défini par la culture actuelle <xref:System.Globalization.DateTimeFormatInfo> objet. Par exemple, pour la culture en-US, le modèle d’heure courte standard est « HH : mm tt » ; pour la culture fr-fr, il est « HH : mm » ; pour la culture ja-JP, il est « HH : mm ». La chaîne de format spécifique sur un ordinateur particulier peut également être personnalisée afin qu’elle diffère de la chaîne de format d’heure courte standard.  
  
 Pour plus d’informations sur la culture du thread actuel, consultez le <xref:System.Threading.Thread.CurrentCulture%2A> propriété. Pour plus d’informations sur les caractères de format, les modèles de format et la sortie, ils produisent, consultez la [mise en forme des Types](~/docs/standard/base-types/formatting-types.md) rubrique. Pour plus d’informations sur la modification du modèle de format associé à un caractère de format, consultez la <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.ToShortTimeString%2A> (méthode).  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en sa représentation équivalente sous forme de chaîne.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l’objet <see cref="T:System.DateTime" /> actuel en sa représentation sous forme de chaîne équivalente à l’aide des conventions de mise en forme de la culture actuelle.</summary>
        <returns>Représentation sous forme de chaîne de la valeur de l'objet <see cref="T:System.DateTime" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.DateTime> objet est mis en forme à l’aide du spécificateur de format d’heure (« G ») et général. Pour mettre en forme à l’aide d’un spécificateur de format de temps et de date spécifique, appelez le <xref:System.DateTime.ToString%28System.String%29> (méthode). Pour mettre en forme à l’aide de la date générale et un spécificateur de format d’heure (« G ») pour une culture spécifique, appelez le <xref:System.DateTime.ToString%28System.IFormatProvider%29> (méthode). Pour mettre en forme à l’aide d’une date donnée et de spécificateur de format d’heure et les conventions d’une culture spécifique, appelez le <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> (méthode).  
  
 Cette méthode utilise les informations de mise en forme dérivées de la culture actuelle. En particulier, elle combine les chaînes de format personnalisé retournés par le <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> et <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propriétés de la <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la `Thread.CurrentThread.CurrentCulture.DateTimeFormat` propriété. Pour plus d'informations, consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. D’autres surcharges de la <xref:System.DateTime.ToString%2A> méthode permettent de spécifier la culture dont la mise en forme à utiliser et à définir le modèle de sortie de la <xref:System.DateTime> valeur.  
  
   
  
## Examples  
 L’exemple suivant illustre comment la représentation sous forme de chaîne d’un <xref:System.DateTime> valeur retournée par la <xref:System.DateTime.ToString> méthode dépend de la culture actuelle du thread. Il modifie la culture du thread actuel à partir en-US fr-fr à ja-JP. et dans chaque cas, appelle la <xref:System.DateTime.ToString> méthode pour retourner la représentation sous forme de chaîne d’une valeur de date et d’heure à l’aide de cette culture.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l’heure sont en dehors de la plage de dates prise en charge par le calendrier utilisé par la culture actuelle.</exception>
        <block subset="none" type="usage">
          <para>Le <see cref="M:System.DateTime.ToString" /> méthode retourne la représentation sous forme de chaîne de date et heure dans le calendrier utilisé par la culture actuelle. Si la valeur de la <see cref="T:System.DateTime" /> instance est antérieure à <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou postérieur à <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, la méthode lève un <see cref="T:System.ArgumentOutOfRangeException" />. L'exemple suivant illustre cette situation. Il tente de mettre en forme une date qui est en dehors de la plage de la <see cref="T:System.Globalization.HijriCalendar" /> classe lors de la culture actuelle est arabe (Syrie).  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en sa représentation sous forme de chaîne équivalente à l'aide des informations de format propres à la culture spécifiées.</summary>
        <returns>Représentation sous forme de chaîne de la valeur de l'objet <see cref="T:System.DateTime" /> actuel tel que spécifié par <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.DateTime> objet est mis en forme à l’aide de la date générale et un spécificateur de format d’heure (« G »), qui met en forme à l’aide du modèle de date courte et le modèle d’heure longue de sortie.  
  
 Le format de date courte et du modèle d’heure longue est défini par le `provider` paramètre. Le `provider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `provider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet associé à la culture actuelle est utilisé. Pour plus d'informations, consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant affiche la représentation sous forme de chaîne d’une date et heure à l’aide <xref:System.Globalization.CultureInfo> objets qui représentent des cinq cultures différentes.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l'heure sont en dehors de la plage de dates prise en charge par le calendrier utilisé par <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>Le <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> méthode retourne la représentation sous forme de chaîne de date et heure dans le calendrier utilisé par la culture représentée par le <paramref name="provider" /> paramètre. Son calendrier est défini par le <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propriété. Si la valeur de la <see cref="T:System.DateTime" /> instance est antérieure à <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou postérieur à <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, la méthode lève un <see cref="T:System.ArgumentOutOfRangeException" />. L'exemple suivant illustre cette situation. Il tente de mettre en forme une date qui est en dehors de la plage de la <see cref="T:System.Globalization.JapaneseCalendar" /> classe.  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne de format de date et d'heure standard ou personnalisée.</param>
        <summary>Convertit la valeur de l’objet <see cref="T:System.DateTime" /> actuel en sa représentation sous forme de chaîne équivalente à l’aide du format spécifié et des conventions de mise en forme de la culture actuelle.</summary>
        <returns>Représentation sous forme de chaîne de la valeur de l'objet <see cref="T:System.DateTime" /> actuel tel que spécifié par <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.ToString%28System.String%29> méthode retourne la représentation sous forme de chaîne d’une valeur de date et d’heure dans un format spécifique qui utilise les conventions de mise en forme de la culture actuelle ; pour plus d’informations, consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 Le `format` paramètre doit contenir un caractère spécificateur de format unique (consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou un modèle de format personnalisé (consultez [Date personnalisée et les chaînes de Format d’heure](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) qui définit le format de la chaîne retournée. Si `format` est `null` ou une chaîne vide, le spécificateur de format général, « G », est utilisée.  
  
 Certaines utilisations de cette méthode sont les suivantes :  
  
-   Obtention d’une chaîne qui affiche la date et l’heure dans le format d’heure et de date courte de la culture actuelle. Pour ce faire, vous utilisez le spécificateur de format « G ».  
  
-   Obtention d’une chaîne qui contienne uniquement le mois et l’année. Pour ce faire, vous utilisez la chaîne de format « MM/AAAA ». La chaîne de format utilise le séparateur de date de la culture actuelle.  
  
-   Obtention d’une chaîne qui contient la date et l’heure dans un format spécifique. Par exemple, le « MM/JJ/yyyyHH:mm » chaîne de format affiche la chaîne de date et d’heure dans un format fixe tel que « 19 2013 / / 03 / / 18:06 ». La chaîne de format utilise « / » comme séparateur de date fixe, quels que soient les paramètres spécifiques à la culture.  
  
-   Obtention d’une date dans un format condensée qui peut être utilisé pour la sérialisation d’une chaîne de date. Par exemple, la chaîne de format « AAAAMMJJ » affiche une année à quatre chiffres suivie d’un mois à deux chiffres et un jour à deux chiffres sans séparateur de date.  
  
 L’exemple suivant utilise ces trois chaînes de format pour afficher une valeur de date et d’heure en utilisant les conventions des cultures en-US et fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 L’exemple suivant utilise chacune des chaînes de format d’heure standard de date et une sélection de date personnalisée et les chaînes de format de temps à la représentation sous forme de chaîne d’un <xref:System.DateTime> valeur. La culture actuelle du thread pour l’exemple est en-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">La longueur de <paramref name="format" /> est 1 et il ne s'agit pas d'un des caractères spécificateurs de format définis pour <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 - ou -  
  
 <paramref name="format" /> ne contient pas de modèle de format personnalisé valide.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l’heure sont en dehors de la plage de dates prise en charge par le calendrier utilisé par la culture actuelle.</exception>
        <block subset="none" type="usage">
          <para>Le <see cref="M:System.DateTime.ToString(System.String)" /> méthode retourne la représentation sous forme de chaîne de date et heure dans le calendrier utilisé par la culture actuelle. Si la valeur de la <see cref="T:System.DateTime" /> instance est antérieure à <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou postérieur à <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, la méthode lève un <see cref="T:System.ArgumentOutOfRangeException" />. L'exemple suivant illustre cette situation. Il tente de mettre en forme une date qui est en dehors de la plage de la <see cref="T:System.Globalization.HebrewCalendar" /> classe lors de la culture actuelle est hébreu (Israël).  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne de format de date et d'heure standard ou personnalisée.</param>
        <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en sa représentation sous forme de chaîne équivalente à l'aide du format et des informations de format spécifiques à la culture spécifiés.</summary>
        <returns>Représentation sous forme de chaîne de la valeur de l'objet <see cref="T:System.DateTime" /> actuel tel que spécifié par <paramref name="format" /> et <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `format` paramètre peut contenir un caractère spécificateur de format unique (consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou un modèle de format personnalisé (consultez [personnalisé chaînes de Date et heure Format](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Si `format` est `null` ou une chaîne vide (« »), le spécificateur de format standard « G », est utilisé.  
  
 Le `provider` paramètre définit le modèle qui correspond aux spécificateurs de format standard, ainsi que les symboles et les noms des composants de date et d’heure. Le `provider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme doivent être reflétées dans la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
-   Un objet personnalisé qui implémente le <xref:System.IFormatProvider> interface. Son <xref:System.IFormatProvider.GetFormat%2A> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `provider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> associé actuel culture est utilisée. Pour plus d'informations, consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant utilise chacune des chaînes de format d’heure standard de date pour afficher la représentation sous forme de chaîne d’une date et heure pour quatre cultures différentes.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 L’exemple suivant illustre différentes façons de mettre en forme un <xref:System.DateTime> valeur à l’aide de l’invariant <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">La longueur de <paramref name="format" /> est 1 et il ne s'agit pas d'un des caractères spécificateurs de format définis pour <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 - ou -  
  
 <paramref name="format" /> ne contient pas de modèle de format personnalisé valide.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l'heure sont en dehors de la plage de dates prise en charge par le calendrier utilisé par <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>Le <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> méthode retourne la représentation sous forme de chaîne de date et heure dans le calendrier utilisé par le <paramref name="provider" /> paramètre. Son calendrier est défini par le <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propriété. Si la valeur de la <see cref="T:System.DateTime" /> instance est antérieure à <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou postérieur à <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, la méthode lève un <see cref="T:System.ArgumentOutOfRangeException" />. L'exemple suivant illustre cette situation. Il tente de mettre en forme une date qui est en dehors de la plage de la <see cref="T:System.Globalization.UmAlQuraCalendar" /> classe.  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTime" /> actuel en Temps universel coordonné (UTC).</summary>
        <returns>Objet dont la propriété <see cref="P:System.DateTime.Kind" /> est <see cref="F:System.DateTimeKind.Utc" /> et dont la valeur est l'heure UTC équivalente à la valeur de l'objet <see cref="T:System.DateTime" /> actuel, ou <see cref="F:System.DateTime.MaxValue" /> si la valeur convertie est trop grande pour être représentée par un objet <see cref="T:System.DateTime" />, ou <see cref="F:System.DateTime.MinValue" /> si la valeur convertie est trop petite pour être représentée par un objet <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le temps universel coordonné (UTC) est égal à l’heure locale moins l’offset UTC. Pour plus d’informations sur l’offset UTC, consultez <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversion prend également en compte la règle de l’heure d’été qui s’applique à l’heure représentée par l’actuel <xref:System.DateTime> objet.  
  
> [!IMPORTANT]
>  Sur [!INCLUDE[winxp](~/includes/winxp-md.md)] systèmes, la <xref:System.DateTime.ToUniversalTime%2A> méthode reconnaît uniquement la règle d’ajustement actuelle lors de la conversion de l’heure locale au format UTC. Par conséquent, les conversions pour les périodes avant l’entrée en vigueur de la règle d’ajustement actuelle ne peuvent pas refléter correctement la différence entre l’heure locale et l’heure UTC.  
  
 En commençant par le .NET Framework version 2.0, la valeur retournée par la <xref:System.DateTime.ToUniversalTime%2A> méthode est déterminée par le <xref:System.DateTime.Kind%2A> propriété actuelles <xref:System.DateTime> objet. Le tableau suivant décrit les résultats possibles.  
  
|Kind|Résultats|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Aucune conversion n’est effectuée.|  
|<xref:System.DateTimeKind.Local>|En cours <xref:System.DateTime> objet est converti au format UTC.|  
|<xref:System.DateTimeKind.Unspecified>|En cours <xref:System.DateTime> objet est censé pour être une heure locale, et la conversion est effectuée comme si <xref:System.DateTime.Kind%2A> ont été <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  Le <xref:System.DateTime.ToUniversalTime%2A> méthode convertit un <xref:System.DateTime> la valeur de l’heure locale au format UTC. Pour convertir l’heure dans un fuseau horaire non local en heure UTC, utilisez la <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> (méthode). Pour convertir une heure dont l’offset UTC est connu, utilisez le <xref:System.DateTimeOffset.ToUniversalTime%2A> (méthode).  
  
 Si la valeur de date et heure de l’instance est une heure ambiguë, cette méthode suppose qu’il est d’une heure d’hiver. (Une heure ambiguë est un objet qui peut mapper à une heure d’hiver ou à une heure dans le fuseau horaire local) Si la valeur de date et heure de l’instance est une heure non valide, cette méthode soustrait simplement l’heure locale à l’heure UTC du fuseau horaire local en décalage pour retourner l’heure UTC. (Une heure non valide est un objet qui n’existe pas en raison de l’application de règles d’ajustement de l’heure d’été).  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.ToUniversalTime%2A> (méthode).  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 L’exemple suivant utilise le <xref:System.DateTime.SpecifyKind%2A> méthode afin d’illustrer comment les <xref:System.DateTime.Kind%2A> propriété a une incidence sur la <xref:System.DateTime.ToLocalTime%2A> et <xref:System.DateTime.ToUniversalTime%2A> méthodes de conversion.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Le <see cref="M:System.DateTime.ToUniversalTime" /> (méthode) est parfois utilisée pour convertir une heure locale au format UTC. Le <see cref="M:System.DateTime.ToLocalTime" /> méthode est alors appelée pour restaurer l’heure locale d’origine. Toutefois, si l’heure d’origine représente une heure non valide dans le fuseau horaire local, les deux valeurs d’heure locale ne sera pas égales. Pour plus d’informations et obtenir un exemple, consultez la <see cref="M:System.DateTime.ToLocalTime" /> (méthode).  
  
 Sur [!INCLUDE[winxp](~/includes/winxp-md.md)] systèmes, la <see cref="M:System.DateTime.ToUniversalTime" /> méthode reconnaît uniquement la règle d’ajustement actuelle pour le fuseau horaire local, qu’il applique à toutes les dates, y compris les dates de bas niveau (autrement dit, les dates antérieures à la date de début de l’ajustement en cours (règle). Applications s’exécutant sur [!INCLUDE[winxp](~/includes/winxp-md.md)] nécessitant une date locales historiquement exacts et les calculs de temps doivent contourner ce comportement à l’aide de la <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> méthode pour récupérer un <see cref="T:System.TimeZoneInfo" /> qui correspond au fuseau horaire local de l’objet et l’appel son <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> (méthode).  
  
 L’exemple suivant illustre la différence entre la <see cref="M:System.DateTime.ToUniversalTime" /> et <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> méthodes sur un [!INCLUDE[winxp](~/includes/winxp-md.md)] système aux États-Unis. Pacifique (États-Unis). Les première deux appels de méthode s’appliquent à la règle d’ajustement de fuseau horaire actuel (qui est entré en vigueur en 2007) à une date en 2006. La règle d’ajustement actuelle prévoit la transition à l’heure sur le deuxième dimanche de mars ; la règle précédente, qui était en vigueur en 2006 a prévu la transition vers l’heure d’été pour le premier dimanche d’avril. Le troisième appel de méthode effectue précisément cette date historique et la durée de la conversion.  
  
 [!code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)]
 [!code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" /> et retourne une valeur qui indique si la conversion a réussi.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir.</param>
        <param name="result">Quand cette méthode est retournée, contient la valeur <see cref="T:System.DateTime" /> équivalente à la date et l’heure contenues dans <c>s</c> si la conversion a réussi, ou <see cref="F:System.DateTime.MinValue" /> si elle a échoué. La conversion échoue si le paramètre <c>s</c> est <see langword="null" />, est une chaîne vide ("") ou ne contient pas de représentation sous forme de chaîne valide d’une date et d’une heure. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" /> et retourne une valeur qui indique si la conversion a réussi.</summary>
        <returns>
          <see langword="true" /> si la conversion du paramètre <paramref name="s" /> a réussi ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> méthode est similaire à la <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> (méthode), à ceci près que le <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> méthode ne lève pas d’exception si la conversion échoue.  
  
 La chaîne `s` est analysé à l’aide des informations de mise en forme en cours <xref:System.Globalization.DateTimeFormatInfo> objet, qui est fourni implicitement par la culture du thread actuel.  
  
 Cette méthode tente d’ignorer les données non reconnues, si possible et renseigne manquant mois, jour et informations d’année avec la date actuelle. Si `s` contient uniquement une date mais aucune heure, cette méthode suppose que l’heure est 12:00 (minuit). Si `s` inclut un composant de date avec une année à deux chiffres, il est converti en une année dans un calendrier actuel de la culture actuelle en fonction de la valeur de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriété. Tout début, internes ou à la fin des caractères d’espace blanc dans `s` est ignoré. La date et l’heure peuvent être délimitées par une paire de début et de fin des caractères dièse ('#', U + 0023) et peuvent être suivies d’un ou plusieurs caractères NULL (U + 0000).  
  
 Étant donné que la <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> méthode essaie d’analyser la représentation sous forme de chaîne d’une date et heure en utilisant les règles de mise en forme de la culture actuelle, en essayant d’analyser une chaîne particulière dans toutes les cultures différentes peut échouer ou retourner des résultats différents. Si une date et le format d’heure seront analysés sur différents paramètres régionaux, utilisez la <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> méthode ou l’une des surcharges de la <xref:System.DateTime.TryParseExact%2A> méthode et fournir un spécificateur de format.  
  
 Si `s` est la représentation sous forme de chaîne d’une année bissextile dans une année bissextile dans le calendrier actuel, l’analyse de la méthode `s` avec succès. Si `s` est la représentation sous forme de chaîne d’une année bissextile dans une année bissextile dans le calendrier actuel de la culture actuelle, l’opération d’analyse échoue et la méthode retourne `false`.  
  
 Si `s` ne contient aucune information de fuseau horaire, `result` contient un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> lorsque la méthode est retournée. Si la chaîne à analyser contient des informations de fuseau horaire, `result` contient un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType> lorsque la méthode est retournée.  
  
   
  
## Examples  
 L’exemple suivant passe un nombre de chaînes de date et d’heure à la <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> (méthode).  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Mise en forme est influencée par les propriétés actuelles <see cref="T:System.Globalization.DateTimeFormatInfo" /> objet, qui, par défaut, sont dérivées de la **Options régionales et linguistiques** élément dans le panneau de configuration. Le <see cref="Overload:System.DateTime.TryParse" /> méthode pouvez inopinément échouera et renverra <see langword="False" /> si actuel <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> et <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> propriétés sont définies sur la même valeur.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir.</param>
        <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture sur <c>s</c>.</param>
        <param name="styles">Combinaison d'opérations de bits de valeurs d'énumération qui définit la manière d'interpréter les données analysées par rapport au fuseau horaire actuel ou à la date actuelle. Une valeur typique à spécifier est <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Quand cette méthode est retournée, contient la valeur <see cref="T:System.DateTime" /> équivalente à la date et l’heure contenues dans <c>s</c> si la conversion a réussi, ou <see cref="F:System.DateTime.MinValue" /> si elle a échoué. La conversion échoue si le paramètre <c>s</c> est <see langword="null" />, est une chaîne vide ("") ou ne contient pas de représentation sous forme de chaîne valide d’une date et d’une heure. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" /> à l'aide des informations de format et du style de mise en forme propres à la culture spécifiés, et retourne une valeur qui indique si la conversion a réussi.</summary>
        <returns>
          <see langword="true" /> si la conversion du paramètre <paramref name="s" /> a réussi ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> méthode analyse une chaîne qui contient des informations de date, heure et fuseau horaire. Il est similaire à la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode), à ceci près que le <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> méthode ne lève pas d’exception si la conversion échoue.  
  
 Cette méthode tente d’ignorer les données non reconnues et l’analyse `s` complètement. Si `s` contient une heure mais aucune date, la méthode remplace par défaut la date actuelle ou, si `styles` inclut la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> indicateur, il remplace `DateTime.Date.MinValue`. Si `s` contient une date mais aucune heure, 12:00 minuit est utilisée en tant que la durée par défaut. Si une date est présente mais que son composant « année » se compose de chiffres que deux, il est converti en une année dans le `provider` calendrier en cours du paramètre en fonction de la valeur de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriété. Tout début, internes ou à la fin des caractères d’espace blanc dans `s` sont ignorés. La date et l’heure peuvent être délimitées par une paire de début et de fin des caractères dièse ('#', U + 0023) et peuvent être suivies d’un ou plusieurs caractères NULL (U + 0000).  
  
 Les formats valides spécifiques pour la date et les éléments de temps, ainsi que les noms et les symboles utilisés dans les dates et heures, sont définis par le `provider` paramètre, qui peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture dont la mise en forme est utilisée dans le `s` paramètre. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme utilisée dans `s`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme utilisée dans `s`.  
  
-   Implémentation <xref:System.IFormatProvider> personnalisée. Son <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit la mise en forme utilisée dans `s`.  
  
 Si `provider` est `null`, la culture actuelle est utilisée.  
  
 Si `s` est la représentation sous forme de chaîne d’une année bissextile dans une année bissextile dans le calendrier actuel, l’analyse de la méthode `s` avec succès. Si `s` est la représentation sous forme de chaîne d’une année bissextile dans une année bissextile dans le calendrier actuel de `provider`, l’opération d’analyse échoue et la méthode retourne `false`.  
  
 Le `styles` paramètre définit l’interprétation précise de la chaîne analysée et la façon dont l’opération d’analyse doit la gérer. Il peut être un ou plusieurs membres de la <xref:System.Globalization.DateTimeStyles> énumération, comme décrit dans le tableau suivant.  
  
|Membre DateTimeStyles|Description |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `s` et, si nécessaire, le convertit au format UTC. Si `s` inclut un décalage de fuseau horaire, ou si `s` ne contient aucune information de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, les appels <xref:System.DateTime.ToUniversalTime%2A> pour convertir le texte retourné <xref:System.DateTime> valeur au format UTC et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indique qu’il représente l’heure UTC, ou si `s` ne contient pas les informations de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, n’effectue aucune conversion de fuseau horaire sur le <xref:System.DateTime> valeur et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Dans tous les autres cas, l’indicateur est sans effet.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Bien que les valide, cette valeur est ignorée. L’espace interne est autorisé dans les éléments de date et heure de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Bien que les valide, cette valeur est ignorée. Espace blanc de début est autorisé dans les éléments de date et heure de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Bien que les valide, cette valeur est ignorée. Espace blanc de fin est autorisé dans les éléments de date et heure de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Spécifie que `s` peut contenir de début, internes et les espaces blancs de fin. Il s'agit du comportement par défaut. Il ne peut pas être substitué en fournissant une plus restrictif <xref:System.Globalization.DateTimeStyles> comme valeur d’énumération <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est supposé pour représenter une heure locale. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est censé pour représenter l’heure UTC. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, la méthode convertit le texte retourné <xref:System.DateTime> valeur à l’heure UTC à l’heure locale et affecte ses <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Bien que les valide, cette valeur est ignorée.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Pour les chaînes qui contiennent des informations de fuseau horaire, tente d’empêcher la conversion d’une chaîne de date et d’heure pour une <xref:System.DateTime> valeur avec son <xref:System.DateTime.Kind%2A> propriété la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. En règle générale, cette chaîne est créée en appelant le <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> méthode à l’aide de spécificateurs de format standard « o », « r » ou « u ».|  
  
 Si `s` ne contient aucune information de fuseau horaire, le <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> méthode retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , sauf si un `styles` indicateur indique le contraire. Si `s` inclut le fuseau horaire ou les informations de décalage de fuseau horaire, le <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> méthode effectue les conversions d’heure nécessaires et retourne l’une des opérations suivantes :  
  
-   A <xref:System.DateTime> valeur dont la date et heure reflète l’heure locale et dont <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   Ou, si `styles` inclut la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> indicateur, un <xref:System.DateTime> valeur dont la date et heure reflète l’heure UTC et dont <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Ce comportement peut être remplacé en utilisant le <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> indicateur.  
  
## <a name="parsing-custom-cultures"></a>Analyse de Cultures personnalisées  
 Si vous analysez une chaîne de date et d’heure générée pour une culture personnalisée, utilisez la <xref:System.DateTime.TryParseExact%2A> méthode à la place de la <xref:System.DateTime.TryParse%2A> méthode pour améliorer la probabilité de réussite de l’opération d’analyse. Une chaîne de date et d’heure de culture personnalisée peut être complexe et difficile à analyser. Le <xref:System.DateTime.TryParse%2A> méthode tente d’analyser une chaîne avec plusieurs modèles d’analyse implicites, qui risque d’échouer. En revanche, le <xref:System.DateTime.TryParseExact%2A> (méthode), vous devez explicitement désigner un ou plusieurs modèles d’analyse précis, susceptibles de réussir.  
  
 Pour plus d’informations sur les cultures personnalisées, consultez la <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> classe.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> (méthode).  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> n’est pas une valeur de <see cref="T:System.Globalization.DateTimeStyles" /> valide.  
  
 - ou -  
  
 <paramref name="styles" /> contient une combinaison non valide de valeurs <see cref="T:System.Globalization.DateTimeStyles" /> (par exemple, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> et <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> est une culture neutre et ne peut être employé dans le cadre d'une opération d'analyse.</exception>
        <block subset="none" type="usage">
          <para>Mise en forme est influencée par les propriétés actuelles <see cref="T:System.Globalization.DateTimeFormatInfo" /> objet, qui est fournie par le <paramref name="provider" /> paramètre. Le <see cref="Overload:System.DateTime.TryParse" /> méthode pouvez inopinément échouera et renverra <see langword="False" /> si actuel <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> et <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> propriétés sont définies sur la même valeur.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" />. Le format de la chaîne doit correspondre exactement à un format spécifié. La méthode retourne une valeur qui indique si la conversion a réussi.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir.</param>
        <param name="format">Format requis de <c>s</c>.</param>
        <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture sur <c>s</c>.</param>
        <param name="style">Combinaison au niveau du bit d’une ou de plusieurs valeurs d’énumération qui indiquent le format autorisé de <c>s</c>.</param>
        <param name="result">Quand cette méthode est retournée, contient la valeur <see cref="T:System.DateTime" /> équivalente à la date et l’heure contenues dans <c>s</c> si la conversion a réussi, ou <see cref="F:System.DateTime.MinValue" /> si elle a échoué. La conversion échoue si le paramètre <c>s</c> ou <c>format</c> est <see langword="null" />, est une chaîne vide ou ne contient pas une date et une heure correspondant au modèle spécifié dans <c>format</c>. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTime" /> à l'aide des informations et du style de format propres à la culture spécifiés. Le format de la chaîne doit correspondre exactement au format spécifié. La méthode retourne une valeur qui indique si la conversion a réussi.</summary>
        <returns>
          <see langword="true" /> si la conversion de <paramref name="s" /> est réussie ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date, qui doit être au format défini par le `format` paramètre. Il est similaire à la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode), à ceci près que le <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> méthode ne lève pas d’exception si la conversion échoue.  
  
 Le `s` paramètre contient la date et l’heure d’analyse et doit être dans un format défini par le `format` paramètre. Si les éléments de date et d’heure fuseau horaire sont présents dans `s`, elles doivent également apparaître dans l’ordre spécifié par `format`. Si `format` définit une date sans élément d’heure et l’analyse réussit, résultant <xref:System.DateTime> valeur a un temps de minuit (00 : 00:00). Si `format` définit une heure sans élément de date et de l’analyse réussit, résultant <xref:System.DateTime> valeur par défaut a une date de `DateTime.Now.Date`, soit d’une date de `DateTime.MinValue.Date` si `styles` inclut la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> indicateur. Le `style` paramètre détermine si le `s` paramètre peut contenir des caractères d’espace blanc de début, interne ou de fin.  
  
 Si `s` ne contient aucune information de fuseau horaire, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Ce comportement peut être modifié à l’aide de la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> indicateur, qui retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, ou à l’aide de la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> et <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateurs, qui retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si s contient des informations de fuseau horaire, l’heure est convertie en heure locale, si nécessaire et le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Ce comportement peut être modifié à l’aide de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> indicateur pour ne pas convertir le temps universel coordonné (UTC) en heure locale et définir la <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Le `format` paramètre contient un modèle qui correspond au format attendu de le `s` paramètre. Le modèle dans le `format` paramètre se compose d’un ou plusieurs spécificateurs de format personnalisés à partir de la [Date personnalisée et les chaînes de Format d’heure](~/docs/standard/base-types/custom-date-and-time-format-strings.md) table ou un spécificateur de format standard unique qui identifie un modèle prédéfini, à partir de la [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) table.  
  
 Si vous n’utilisez pas de séparateurs de date ou d’heure dans un modèle de format personnalisé, utilisez la culture dite indifférente pour le `provider` spécificateur de format de paramètre et la forme la plus large de chaque personnalisé. Par exemple, si vous souhaitez spécifier des heures dans le modèle, spécifier une forme étendue, « HH », plutôt que le formulaire plus étroite, « H ».  
  
> [!NOTE]
>  Au lieu que `s` est conforme à un seul format de l’opération d’analyse, vous pouvez appeler la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> (méthode) et de spécifier plusieurs formats autorisés. Cela rend l’opération d’analyse plus susceptible de réussir.  
  
 La date particulière et les symboles de temps et les chaînes (par exemple, les noms des jours de la semaine dans un langage particulier) utilisés dans `s` sont définies par le `provider` paramètre, ainsi que le format précis de `s` si `format` est un format standard chaîne du spécificateur. Le `provider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture utilisée pour interpréter `s`. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par son <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété définit les symboles et la mise en forme dans `s`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
-   Personnalisé <xref:System.IFormatProvider> implémentation dont <xref:System.IFormatProvider.GetFormat%2A> méthode retourne la <xref:System.Globalization.CultureInfo> objet ou le <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `provider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le `styles` paramètre inclut un ou plusieurs membres de la <xref:System.Globalization.DateTimeStyles> énumération qui déterminent si et où espace blanc non défini par `format` peut apparaître dans `s` et qui contrôlent le comportement précis de l’opération d’analyse. Le tableau suivant décrit comment chaque membre de la <xref:System.Globalization.DateTimeStyles> énumération affecte le fonctionnement de la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> (méthode).  
  
|Membre DateTimeStyles|Description |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `s` et, si nécessaire, le convertit au format UTC. Si `s` inclut un décalage de fuseau horaire, ou si `s` ne contient aucune information de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, les appels <xref:System.DateTime.ToUniversalTime%2A> pour convertir le texte retourné <xref:System.DateTime> valeur au format UTC et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indique qu’il représente l’heure UTC, ou si `s` ne contient pas les informations de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, n’effectue aucune conversion de fuseau horaire sur le <xref:System.DateTime> valeur et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Dans tous les autres cas, l’indicateur est sans effet.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Spécifie qu’un espace blanc non défini par `format` peuvent apparaître entre des dates individuelles ou d’un élément d’heure.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Spécifie qu’un espace blanc non défini par `format` peut apparaître au début de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Spécifie qu’un espace blanc non défini par `format` peut apparaître à la fin de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Spécifie que `s` peut contenir, internes et de fin non définis par des espaces blancs `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est supposé pour représenter une heure locale. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est censé pour représenter l’heure UTC. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, la méthode convertit le texte retourné <xref:System.DateTime> valeur à l’heure UTC à l’heure locale et affecte ses <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contient le temps sans les informations de date, la date de la valeur de retour est définie sur `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Le `s` paramètre est analysé à l’aide des valeurs par défaut. Aucun espace blanc autre que ceux présents dans `format` est autorisée. Si `s` ne dispose pas d’un composant de date, la date de retourné <xref:System.DateTime> a la valeur 1/1/0001. Si `s` ne contient aucune information de fuseau horaire, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si les informations de fuseau horaire sont présentes dans `s`, l’heure est convertie en heure locale et la <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Pour les chaînes qui contiennent des informations de fuseau horaire, tente d’empêcher la conversion en un <xref:System.DateTime> valeur avec son <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Cet indicateur empêche principalement la conversion d’heures UTC en heures locales.|  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> (méthode). Notez que la chaîne « 5/01/2009 8 h 30 » ne peut pas être analysée correctement lorsque le `styles` paramètre est égal à <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> , car les espaces ne sont pas autorisés par `format`. En outre, la chaîne « 5/01/2009 09:00 » ne peut pas être analysé avec succès avec un `format` de « MM/JJ/yyyyhh:mm », car la chaîne de date ne précède pas le nombre de mois avec un zéro non significatif, en tant que `format` requiert.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> n’est pas une valeur de <see cref="T:System.Globalization.DateTimeStyles" /> valide.  
  
 - ou -  
  
 <paramref name="styles" /> contient une combinaison non valide de valeurs <see cref="T:System.Globalization.DateTimeStyles" /> (par exemple, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> et <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTime.TryParseExact" /> retourne de la méthode <see langword="false" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas en accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne contenant une date et une heure à convertir.</param>
        <param name="formats">Tableau de formats possibles pour <c>s</c>.</param>
        <param name="provider">Objet qui fournit des informations de format spécifiques à la culture sur <c>s</c>.</param>
        <param name="style">Combinaison au niveau du bit des valeurs d’énumération qui indique le format autorisé de <c>s</c>. Une valeur typique à spécifier est <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Quand cette méthode est retournée, contient la valeur <see cref="T:System.DateTime" /> équivalente à la date et l’heure contenues dans <c>s</c> si la conversion a réussi, ou <see cref="F:System.DateTime.MinValue" /> si elle a échoué. La conversion échoue si <c>s</c> ou <c>formats</c> est <see langword="null" />, si <c>s</c> ou un élément de <c>formats</c> est une chaîne vide, ou si le format de <c>s</c> ne correspond pas exactement à celui qui est spécifié par au moins l’un des modèles de format dans <c>formats</c>. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et heure en son équivalent <see cref="T:System.DateTime" /> à l'aide du tableau de formats, des informations et du style de format propres à la culture spécifiés. Le format de la chaîne doit correspondre exactement à au moins un des formats spécifiés. La méthode retourne une valeur qui indique si la conversion a réussi.</summary>
        <returns>
          <see langword="true" /> si la conversion du paramètre <paramref name="s" /> a réussi ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date correspondant à l’un des modèles assignés à la `formats` paramètre. Elle est similaire à la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode), à l’exception de la <xref:System.DateTime.TryParseExact%2A> méthode ne lève pas d’exception si la conversion échoue.  
  
 Le `s` paramètre contient la date et l’heure d’analyse. Si le `s` paramètre contient uniquement une heure et aucune date, la date actuelle est utilisée, sauf si le `style` paramètre inclut le <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> indicateur, auquel cas la date par défaut (`DateTime.Date.MinValue`) est utilisé. Si le `s` paramètre contient uniquement une date et aucune heure de minuit (00 : 00:00) est utilisé. Le `style` paramètre détermine également si le `s` paramètre peut contenir de début, interne ou de fin des caractères autres que ceux autorisés par l’une des chaînes de format dans `formats`.  
  
 Si `s` ne contient aucune information de fuseau horaire, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Ce comportement peut être modifié à l’aide de la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> indicateur, qui retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, ou à l’aide de la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> et <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateurs, qui retourne un <xref:System.DateTime> dont la valeur <xref:System.DateTime.Kind%2A> propriété est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si s contient des informations de fuseau horaire, l’heure est convertie en heure locale, si nécessaire et le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Ce comportement peut être modifié à l’aide de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> indicateur pour ne pas convertir le temps universel coordonné (UTC) en heure locale et définir la <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Le `formats` paramètre contient un tableau de modèles, dont `s` doit correspondre exactement l’opération d’analyse aboutisse. Les modèles dans le `formats` paramètre se composent d’un ou plusieurs spécificateurs de format personnalisés à partir de la [Date personnalisée et les chaînes de Format d’heure](~/docs/standard/base-types/custom-date-and-time-format-strings.md) table ou un spécificateur de format standard unique qui identifie un modèle prédéfini, à partir de la [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) table.  
  
 Si vous n’utilisez pas de séparateurs de date ou d’heure dans un modèle de format personnalisé, utilisez la culture dite indifférente pour le `provider` spécificateur de format de paramètre et la forme la plus large de chaque personnalisé. Par exemple, si vous souhaitez spécifier des heures dans le modèle, spécifier une forme étendue, « HH », plutôt que le formulaire plus étroite, « H ».  
  
 La date particulière et les symboles de temps et les chaînes (par exemple, les noms des jours de la semaine dans un langage particulier) utilisés dans `s` sont définies par le `provider` paramètre, ainsi que le format précis de `s` si `format` est un format standard chaîne du spécificateur. Le `provider` paramètre peut être une des opérations suivantes :  
  
-   A <xref:System.Globalization.CultureInfo> objet qui représente la culture utilisée pour interpréter `s`. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par son <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété définit les symboles et la mise en forme dans `s`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
-   Personnalisé <xref:System.IFormatProvider> implémentation dont <xref:System.IFormatProvider.GetFormat%2A> méthode retourne la <xref:System.Globalization.CultureInfo> objet ou le <xref:System.Globalization.DateTimeFormatInfo> objet qui fournit des informations de mise en forme.  
  
 Si `provider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le `styles` paramètre inclut un ou plusieurs membres de la <xref:System.Globalization.DateTimeStyles> énumération qui déterminent si et où espace blanc non défini par `format` peut apparaître dans `s` et qui contrôlent le comportement précis de l’opération d’analyse. Le tableau suivant décrit comment chaque membre de la <xref:System.Globalization.DateTimeStyles> énumération affecte le fonctionnement de la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> (méthode).  
  
|Membre DateTimeStyles|Description |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `s` et, si nécessaire, le convertit au format UTC. Si `s` inclut un décalage de fuseau horaire, ou si `s` ne contient aucune information de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, les appels <xref:System.DateTime.ToUniversalTime%2A> pour convertir le texte retourné <xref:System.DateTime> valeur au format UTC et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indique qu’il représente l’heure UTC, ou si `s` ne contient pas les informations de fuseau horaire, mais `styles` inclut la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> indicateur, la méthode analyse la chaîne, n’effectue aucune conversion de fuseau horaire sur le <xref:System.DateTime> valeur et définit les <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Dans tous les autres cas, l’indicateur est sans effet.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Spécifie qu’un espace blanc non défini par `format` peuvent apparaître entre des dates individuelles ou d’un élément d’heure.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Spécifie qu’un espace blanc non défini par `format` peut apparaître au début de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Spécifie qu’un espace blanc non défini par `format` peut apparaître à la fin de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Spécifie que `s` peut contenir, internes et de fin non définis par des espaces blancs `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est supposé pour représenter une heure locale. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Spécifie que si `s` ne dispose pas de toutes les informations de fuseau horaire, il est censé pour représenter l’heure UTC. À moins que le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> indicateur est présent, la méthode convertit le texte retourné <xref:System.DateTime> valeur à l’heure UTC à l’heure locale et affecte ses <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contient le temps sans les informations de date, la date de la valeur de retour est définie sur `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Le `s` paramètre est analysé à l’aide des valeurs par défaut. Aucun espace blanc autre que ceux présents dans `format` est autorisée. Si `s` ne dispose pas d’un composant de date, la date de retourné <xref:System.DateTime> a la valeur 1/1/0001. Si `s` ne contient aucune information de fuseau horaire, le <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si les informations de fuseau horaire sont présentes dans `s`, l’heure est convertie en heure locale et la <xref:System.DateTime.Kind%2A> propriété retourné <xref:System.DateTime> objet a la valeur <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Pour les chaînes qui contiennent des informations de fuseau horaire, tente d’empêcher la conversion en un <xref:System.DateTime> valeur avec son <xref:System.DateTime.Kind%2A> propriété <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Cet indicateur empêche principalement la conversion d’heures UTC en heures locales.|  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> pour s’assurer qu’une chaîne dans un nombre de formats possibles peut être analysée avec succès.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> n’est pas une valeur de <see cref="T:System.Globalization.DateTimeStyles" /> valide.  
  
 - ou -  
  
 <paramref name="styles" /> contient une combinaison non valide de valeurs <see cref="T:System.Globalization.DateTimeStyles" /> (par exemple, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> et <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTime.TryParseExact" /> retourne de la méthode <see langword="false" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas en accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.DateTime" /> qui a pour valeur la date et l'heure actuelles sur cet ordinateur, exprimées en temps UTC.</summary>
        <value>Objet dont la valeur est égale à la date et à l'heure UTC actuelles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La résolution de cette propriété dépend de l’horloge système, qui varie selon le système d’exploitation sous-jacent. Il a tendance à être comprise entre 0,5 et 15 millisecondes.

 À compter de .NET Framework version 2.0, la valeur de retour est un <xref:System.DateTime> dont <xref:System.DateTime.Kind%2A> propriété renvoie <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Une alternative à l’utilisation de <xref:System.DateTime.UtcNow%2A> est <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Lors de la première indique qu’une valeur de date et d’heure est le temps universel coordonné (UTC) en assignant <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> à son <xref:System.DateTime.Kind%2A> propriété, celle-ci affecte la date et offset d’heure de l’heure UTC de valeur d’heure (égal à <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTime.SpecifyKind%2A> méthode afin d’illustrer comment les <xref:System.DateTime.Kind%2A> propriété a une incidence sur la <xref:System.DateTime.ToLocalTime%2A> et <xref:System.DateTime.ToUniversalTime%2A> méthodes de conversion.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « année » de la date représentée par cette instance.</summary>
        <value>Année, comprise entre 1 et 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.DateTime.Year%2A> retourne l’année de l’instance actuelle dans le calendrier grégorien. Il ne retourne pas de l’année en utilisant le calendrier par défaut de la culture actuelle. Pour récupérer l’année à l’aide d’un calendrier particulier, vous pouvez appeler de ce calendrier `GetYear` méthode, comme le montre le code suivant.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 L’exemple suivant illustre le <xref:System.DateTime.Year%2A> propriété.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>