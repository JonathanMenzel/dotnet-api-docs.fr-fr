<Type Name="Random" FullName="System.Random">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ad7a7caff000dc43adcd1a90679ce6c6f419bc0" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174124" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Random" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Random extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Random" />
  <TypeSignature Language="VB.NET" Value="Public Class Random" />
  <TypeSignature Language="C++ CLI" Value="public ref class Random" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5e765-101">Représente un générateur de nombres pseudo-aléatoires. Il s’agit d’un périphérique qui produit une séquence de nombres conformes à certaines exigences statistiques liées à l’aspect aléatoire.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5e765-101">Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e765-102">Nombres pseudo-aléatoires sont choisies avec une probabilité égale à partir d’un jeu de nombres fini.</span><span class="sxs-lookup"><span data-stu-id="5e765-102">Pseudo-random numbers are chosen with equal probability from a finite set of numbers.</span></span> <span data-ttu-id="5e765-103">Les nombres choisis ne sont pas complètement aléatoires, car un algorithme mathématique est utilisé pour les sélectionner, mais elles sont suffisamment aléatoires pour des raisons pratiques.</span><span class="sxs-lookup"><span data-stu-id="5e765-103">The chosen numbers are not completely random because a mathematical algorithm is used to select them, but they are sufficiently random for practical purposes.</span></span> <span data-ttu-id="5e765-104">L’implémentation actuelle de la <xref:System.Random> classe est basée sur une version modifiée de soustraction de nombres générateur aléatoires de Knuth.</span><span class="sxs-lookup"><span data-stu-id="5e765-104">The current implementation of the <xref:System.Random> class is based on a modified version of Donald E. Knuth's subtractive random number generator algorithm.</span></span> <span data-ttu-id="5e765-105">Pour plus d’informations, consultez D. e</span><span class="sxs-lookup"><span data-stu-id="5e765-105">For more information, see D. E.</span></span> <span data-ttu-id="5e765-106">Knuth.</span><span class="sxs-lookup"><span data-stu-id="5e765-106">Knuth.</span></span> <span data-ttu-id="5e765-107">*L’Art de la programmation et Volume 2 : algorithmes Seminumerical*.</span><span class="sxs-lookup"><span data-stu-id="5e765-107">*The Art of Computer Programming, Volume 2: Seminumerical Algorithms*.</span></span> <span data-ttu-id="5e765-108">Addison-Wesley, Reading, MA, troisième édition, 1997.</span><span class="sxs-lookup"><span data-stu-id="5e765-108">Addison-Wesley, Reading, MA, third edition, 1997.</span></span>  
  
 <span data-ttu-id="5e765-109">Pour générer un nombre aléatoire sécurisé par chiffrement, tel que celui qui convient pour la création d’un mot de passe aléatoire, utilisez la <xref:System.Security.Cryptography.RNGCryptoServiceProvider> classe ou dériver une classe de <xref:System.Security.Cryptography.RandomNumberGenerator?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5e765-109">To generate a cryptographically secure random number, such as one that's suitable for creating a random password, use the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class or derive a class from <xref:System.Security.Cryptography.RandomNumberGenerator?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5e765-110">Dans cette rubrique :</span><span class="sxs-lookup"><span data-stu-id="5e765-110">In this topic:</span></span>  
  
 <span data-ttu-id="5e765-111">[L’instanciation du Générateur de nombres aléatoires](#Instantiate) </span><span class="sxs-lookup"><span data-stu-id="5e765-111">[Instantiating the random number generator](#Instantiate) </span></span>  
 <span data-ttu-id="5e765-112">[Éviter plusieurs instanciations](#Multiple) </span><span class="sxs-lookup"><span data-stu-id="5e765-112">[Avoiding multiple instantiations](#Multiple) </span></span>  
 <span data-ttu-id="5e765-113">[La sécurité de classe et de thread System.Random](#ThreadSafety) </span><span class="sxs-lookup"><span data-stu-id="5e765-113">[The System.Random class and thread safety](#ThreadSafety) </span></span>  
 <span data-ttu-id="5e765-114">[Génération de différents types de nombres aléatoires](#Functionality) </span><span class="sxs-lookup"><span data-stu-id="5e765-114">[Generating different types of random numbers](#Functionality) </span></span>  
 <span data-ttu-id="5e765-115">[En remplaçant votre propre algorithme](#Overriding) </span><span class="sxs-lookup"><span data-stu-id="5e765-115">[Substituting your own algorithm](#Overriding) </span></span>  
 <span data-ttu-id="5e765-116">[Comment utilisez-vous System.Random à...](#Operations) </span><span class="sxs-lookup"><span data-stu-id="5e765-116">[How do you use System.Random to…](#Operations) </span></span>  
 [<span data-ttu-id="5e765-117">Récupérer la même séquence de valeurs aléatoires</span><span class="sxs-lookup"><span data-stu-id="5e765-117">Retrieve the same sequence of random values</span></span>](#Same)  
 [<span data-ttu-id="5e765-118">Récupérer des séquences uniques de valeurs aléatoires</span><span class="sxs-lookup"><span data-stu-id="5e765-118">Retrieve unique sequences of random values</span></span>](#Unique)  
 [<span data-ttu-id="5e765-119">Récupérer des nombres entiers dans une plage spécifiée</span><span class="sxs-lookup"><span data-stu-id="5e765-119">Retrieve integers in a specified range</span></span>](#Range)  
 [<span data-ttu-id="5e765-120">Récupérer des entiers avec un nombre spécifié de chiffres</span><span class="sxs-lookup"><span data-stu-id="5e765-120">Retrieve integers with a specified number of digits</span></span>](#Digits)  
 [<span data-ttu-id="5e765-121">Récupérer des valeurs à virgule flottante dans une plage spécifiée</span><span class="sxs-lookup"><span data-stu-id="5e765-121">Retrieve floating-point values in a specified range</span></span>](#Floats)  
 [<span data-ttu-id="5e765-122">Générer des valeurs booléennes aléatoires</span><span class="sxs-lookup"><span data-stu-id="5e765-122">Generate random Boolean values</span></span>](#Boolean)  
 [<span data-ttu-id="5e765-123">Générer des entiers aléatoires 64 bits</span><span class="sxs-lookup"><span data-stu-id="5e765-123">Generate random 64-bit integers</span></span>](#Long)  
 [<span data-ttu-id="5e765-124">Récupérer des octets dans une plage spécifiée</span><span class="sxs-lookup"><span data-stu-id="5e765-124">Retrieve bytes in a specified range</span></span>](#Bytes)  
 [<span data-ttu-id="5e765-125">Récupérer un élément d’un tableau ou une collection de manière aléatoire</span><span class="sxs-lookup"><span data-stu-id="5e765-125">Retrieve an element from an array or collection at random</span></span>](#Array)  
 [<span data-ttu-id="5e765-126">Récupérer un élément unique d’un tableau ou d’une collection</span><span class="sxs-lookup"><span data-stu-id="5e765-126">Retrieve a unique element from an array or collection</span></span>](#UniqueArray)  
  
<a name="Instantiate"></a>   
## <a name="instantiating-the-random-number-generator"></a><span data-ttu-id="5e765-127">L’instanciation du Générateur de nombres aléatoires</span><span class="sxs-lookup"><span data-stu-id="5e765-127">Instantiating the random number generator</span></span>  
 <span data-ttu-id="5e765-128">Vous instanciez le Générateur de nombres aléatoires en fournissant une valeur de départ (valeur de départ de l’algorithme de génération de nombres pseudo-aléatoires) à un <xref:System.Random.%23ctor%2A> constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="5e765-128">You instantiate the random number generator by providing a seed value (a starting value for the pseudo-random number generation algorithm) to a <xref:System.Random.%23ctor%2A> class constructor.</span></span>  <span data-ttu-id="5e765-129">Vous pouvez fournir la valeur de départ explicitement ou implicitement :</span><span class="sxs-lookup"><span data-stu-id="5e765-129">You can supply the seed value either explicitly or implicitly:</span></span>  
  
-   <span data-ttu-id="5e765-130">Le <xref:System.Random.%23ctor%28System.Int32%29> constructeur utilise une valeur de départ explicite que vous fournissez.</span><span class="sxs-lookup"><span data-stu-id="5e765-130">The <xref:System.Random.%23ctor%28System.Int32%29> constructor uses an explicit seed value that you supply.</span></span>  
  
-   <span data-ttu-id="5e765-131">Le <xref:System.Random.%23ctor> constructeur utilise l’horloge système pour fournir une valeur de départ.</span><span class="sxs-lookup"><span data-stu-id="5e765-131">The <xref:System.Random.%23ctor> constructor uses the system clock to provide a seed value.</span></span> <span data-ttu-id="5e765-132">Il s’agit de la méthode la plus courante de l’instanciation du Générateur de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-132">This is the most common way of instantiating the random number generator.</span></span>  
  
 <span data-ttu-id="5e765-133">Si la même valeur de départ est utilisée pour différentes <xref:System.Random> des objets, ils génèrent la même série de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-133">If the same seed is used for separate <xref:System.Random> objects, they will generate the same series of random numbers.</span></span> <span data-ttu-id="5e765-134">Cela peut être utile pour la création d’une suite de tests qui traite les valeurs aléatoires, ou pour relire les jeux qui dérivent leurs données de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-134">This can be useful for creating a test suite that processes random values, or for replaying games that derive their data from random numbers.</span></span> <span data-ttu-id="5e765-135">Toutefois, notez que <xref:System.Random> objets de processus qui s’exécutent sous différentes versions du .NET Framework peuvent retourner différentes séries de nombres aléatoires même s’ils sont instanciés avec les mêmes valeurs initiales.</span><span class="sxs-lookup"><span data-stu-id="5e765-135">However, note that <xref:System.Random> objects in processes running under different versions of the .NET Framework may return different series of random numbers even if they're instantiated with identical seed values.</span></span>  
  
 <span data-ttu-id="5e765-136">Pour produire différentes séquences de nombres aléatoires, vous pouvez rendre la valeur initiale dépendant du temps, ainsi produisant une autre série avec chaque nouvelle instance de <xref:System.Random>.</span><span class="sxs-lookup"><span data-stu-id="5e765-136">To produce different sequences of random numbers, you can make the seed value time-dependent, thereby producing a different series with each new instance of <xref:System.Random>.</span></span> <span data-ttu-id="5e765-137">Paramétré <xref:System.Random.%23ctor%28System.Int32%29> constructeur peut prendre un <xref:System.Int32> valeur en fonction du nombre de graduations dans l’heure actuelle, tandis que sans paramètre <xref:System.Random.%23ctor> constructeur utilise l’horloge système pour générer sa valeur initiale.</span><span class="sxs-lookup"><span data-stu-id="5e765-137">The parameterized <xref:System.Random.%23ctor%28System.Int32%29> constructor can take an <xref:System.Int32> value based on the number of ticks in the current time, whereas the parameterless <xref:System.Random.%23ctor> constructor uses the system clock to generate its seed value.</span></span> <span data-ttu-id="5e765-138">Toutefois, étant donné que l’horloge a la résolution finie, l’utilisation du constructeur sans paramètre pour créer différents <xref:System.Random> objets successivement crée des générateurs de nombres aléatoires qui produisent des séquences identiques de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-138">However, because the clock has finite resolution, using the parameterless constructor to create different <xref:System.Random> objects in close succession creates random number generators that produce identical sequences of random numbers.</span></span> <span data-ttu-id="5e765-139">L’exemple suivant illustre comment deux <xref:System.Random> objets sont instanciés successivement génèrent une série identique de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-139">The following example illustrates how two <xref:System.Random> objects that are instantiated in close succession generate an identical series of random numbers.</span></span> <span data-ttu-id="5e765-140">La plupart des systèmes Windows, <xref:System.Random> les objets créés dans les 15 millisecondes d’un autre sont susceptibles d’avoir les mêmes valeurs initiales.</span><span class="sxs-lookup"><span data-stu-id="5e765-140">On most Windows systems, <xref:System.Random> objects created within 15 milliseconds of one another are likely to have identical seed values.</span></span>  
  
 [!code-cpp[System.Random#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/random1.cpp#1)]
 [!code-csharp[System.Random#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/Random1.cs#1)]
 [!code-vb[System.Random#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/Random1.vb#1)]  
  
 <span data-ttu-id="5e765-141">Pour éviter ce problème, créez un seul <xref:System.Random> objet au lieu de plusieurs objets.</span><span class="sxs-lookup"><span data-stu-id="5e765-141">To avoid this problem, create a single <xref:System.Random> object instead of multiple objects.</span></span>  
  
<a name="Multiple"></a>   
## <a name="avoiding-multiple-instantiations"></a><span data-ttu-id="5e765-142">Éviter plusieurs instanciations</span><span class="sxs-lookup"><span data-stu-id="5e765-142">Avoiding multiple instantiations</span></span>  
 <span data-ttu-id="5e765-143">L’initialisation de deux générateurs de nombres aléatoires dans une boucle serrée ou de suite crée deux générateurs de nombres aléatoires qui peuvent produire des séquences identiques de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-143">Initializing two random number generators in a tight loop or in rapid succession creates two random number generators that can produce identical sequences of random numbers.</span></span> <span data-ttu-id="5e765-144">Dans la plupart des cas, cette intention de développeur n’est pas et peut entraîner des problèmes de performances, car l’instanciation et initialisation d’un générateur de nombres aléatoires sont un processus relativement coûteux.</span><span class="sxs-lookup"><span data-stu-id="5e765-144">In most cases, this is not the developer's intent and can lead to performance issues, because instantiating and initializing a random number generator is a relatively expensive process.</span></span>  
  
 <span data-ttu-id="5e765-145">À la fois pour améliorer les performances et pour éviter de créer par inadvertance des générateurs de nombres aléatoires distincts qui génèrent des séquences numériques identiques, nous vous recommandons de créer un <xref:System.Random> objet pour générer des nombres aléatoires au fil du temps, au lieu de créer nouvelle <xref:System.Random> objets pour générer un nombre aléatoire.</span><span class="sxs-lookup"><span data-stu-id="5e765-145">Both to improve performance and to avoid inadvertently creating separate random number generators that generate identical numeric sequences, we recommend that you create one <xref:System.Random> object to generate many random numbers over time, instead of creating new <xref:System.Random> objects to generate one random number.</span></span>  
  
 <span data-ttu-id="5e765-146">Toutefois, la <xref:System.Random> classe n’est pas thread-safe.</span><span class="sxs-lookup"><span data-stu-id="5e765-146">However, the <xref:System.Random> class isn't thread safe.</span></span> <span data-ttu-id="5e765-147">Si vous appelez <xref:System.Random> méthodes à partir de plusieurs threads, suivez les instructions figurant dans la section suivante.</span><span class="sxs-lookup"><span data-stu-id="5e765-147">If you call <xref:System.Random> methods from multiple threads, follow the guidelines discussed in the next section.</span></span>  
  
<a name="ThreadSafety"></a>   
## <a name="the-systemrandom-class-and-thread-safety"></a><span data-ttu-id="5e765-148">La sécurité de classe et de thread System.Random</span><span class="sxs-lookup"><span data-stu-id="5e765-148">The System.Random class and thread safety</span></span>  
 <span data-ttu-id="5e765-149">Au lieu de l’instanciation de l’individu <xref:System.Random> des objets, nous vous recommandons de créer un seul <xref:System.Random> instance à générer tous les nombres aléatoires requises par votre application.</span><span class="sxs-lookup"><span data-stu-id="5e765-149">Instead of instantiating individual <xref:System.Random> objects, we recommend that you create a single <xref:System.Random> instance to generate all the random numbers needed by your app.</span></span> <span data-ttu-id="5e765-150">Toutefois, <xref:System.Random> objets ne sont pas thread-safe.</span><span class="sxs-lookup"><span data-stu-id="5e765-150">However, <xref:System.Random> objects are not thread safe.</span></span> <span data-ttu-id="5e765-151">Si votre application appelle <xref:System.Random> méthodes à partir de plusieurs threads, vous devez utiliser un objet de synchronisation pour vous assurer que qu’un seul thread peut accéder au Générateur de nombres aléatoires à la fois.</span><span class="sxs-lookup"><span data-stu-id="5e765-151">If your app calls <xref:System.Random> methods from multiple threads, you must use a synchronization object to ensure that only one thread can access the random number generator at a time.</span></span> <span data-ttu-id="5e765-152">Si vous ne vous assurer que le <xref:System.Random> objet est accessible de manière thread-safe, les appels aux méthodes qui retournent des nombres aléatoires retournent 0.</span><span class="sxs-lookup"><span data-stu-id="5e765-152">If you don't ensure that the <xref:System.Random> object is accessed in a thread-safe way, calls to methods that return random numbers return 0.</span></span>  
  
 <span data-ttu-id="5e765-153">L’exemple suivant utilise le langage c# [lock, instruction](~/docs/csharp/language-reference/keywords/lock-statement.md) et Visual Basic [SyncLock, instruction](~/docs/visual-basic/language-reference/statements/synclock-statement.md) pour vous assurer qu’un générateur de nombres aléatoires unique est accessible par les 11 threads de manière thread-safe.</span><span class="sxs-lookup"><span data-stu-id="5e765-153">The following example uses the C# [lock Statement](~/docs/csharp/language-reference/keywords/lock-statement.md) and the Visual Basic [SyncLock statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md) to ensure that a single random number generator is accessed by 11 threads in a thread-safe manner.</span></span> <span data-ttu-id="5e765-154">Chaque thread génère des nombres aléatoires de 2 millions, compte le nombre de nombres aléatoires et calcule leur somme, puis met à jour les totaux de tous les threads en fin d’exécution.</span><span class="sxs-lookup"><span data-stu-id="5e765-154">Each thread generates 2 million random numbers, counts the number of random numbers generated and calculates their sum, and then updates the totals for all threads when it finishes executing.</span></span>  
  
 [!code-cpp[System.Random#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/threadsafeex1.cpp#3)]
 [!code-csharp[System.Random#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/threadsafeex1.cs#3)]
 [!code-vb[System.Random#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/threadsafeex1.vb#3)]  
  
 <span data-ttu-id="5e765-155">L’exemple vérifie la sécurité des threads de plusieurs manières :</span><span class="sxs-lookup"><span data-stu-id="5e765-155">The example ensures thread-safety in the following ways:</span></span>  
  
-   <span data-ttu-id="5e765-156">Le <xref:System.ThreadStaticAttribute> attribut est utilisé pour définir des variables locales de thread qui effectuent le suivi du nombre total de nombres aléatoires et leur somme pour chaque thread.</span><span class="sxs-lookup"><span data-stu-id="5e765-156">The <xref:System.ThreadStaticAttribute> attribute is used to define thread-local variables that track the total number of random numbers generated and their sum for each thread.</span></span>  
  
-   <span data-ttu-id="5e765-157">Un verrou (le `lock` instruction en c# et la `SyncLock` instruction en Visual Basic) protège l’accès aux variables pour le nombre total et la somme de tous les nombres aléatoires sur tous les threads.</span><span class="sxs-lookup"><span data-stu-id="5e765-157">A lock (the `lock` statement in C# and the `SyncLock` statement in Visual Basic) protects access to the variables for the total count and sum of all random numbers generated on all threads.</span></span>  
  
-   <span data-ttu-id="5e765-158">Un sémaphore (le <xref:System.Threading.CountdownEvent> objet) permet de s’assurer que le thread principal se bloque jusqu'à ce que tous les autres threads terminent.</span><span class="sxs-lookup"><span data-stu-id="5e765-158">A semaphore (the <xref:System.Threading.CountdownEvent> object) is used to ensure that the main thread blocks until all other threads complete execution.</span></span>  
  
-   <span data-ttu-id="5e765-159">L’exemple vérifie si le Générateur de nombres aléatoires est endommagé en déterminant si les deux appels consécutifs à des méthodes de génération de nombres aléatoires retournent 0.</span><span class="sxs-lookup"><span data-stu-id="5e765-159">The example checks whether the random number generator has become corrupted by determining whether two consecutive calls to random number generation methods return 0.</span></span> <span data-ttu-id="5e765-160">Si l’altération est détectée, l’exemple utilise le <xref:System.Threading.CancellationTokenSource> objet pour signaler que tous les threads doivent être annulées.</span><span class="sxs-lookup"><span data-stu-id="5e765-160">If corruption is detected, the example uses the <xref:System.Threading.CancellationTokenSource> object to signal that all threads should be canceled.</span></span>  
  
-   <span data-ttu-id="5e765-161">Avant de générer chaque nombre aléatoire, chaque thread vérifie l’état de la <xref:System.Threading.CancellationToken> objet.</span><span class="sxs-lookup"><span data-stu-id="5e765-161">Before generating each random number, each thread checks the state of the <xref:System.Threading.CancellationToken> object.</span></span> <span data-ttu-id="5e765-162">Si l’annulation est demandée, l’exemple appelle la <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> méthode pour annuler le thread.</span><span class="sxs-lookup"><span data-stu-id="5e765-162">If cancellation is requested, the example calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method to cancel the thread.</span></span>  
  
 <span data-ttu-id="5e765-163">L’exemple suivant est identique à la première, sauf qu’elle utilise un <xref:System.Threading.Tasks.Task> objet et une expression lambda à la place de <xref:System.Threading.Thread> objets.</span><span class="sxs-lookup"><span data-stu-id="5e765-163">The following example is identical to the first, except that it uses a <xref:System.Threading.Tasks.Task> object and a lambda expression instead of <xref:System.Threading.Thread> objects.</span></span>  
  
 [!code-csharp[System.Random#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/threadsafeex2.cs#4)]
 [!code-vb[System.Random#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/threadsafeex2.vb#4)]  
  
 <span data-ttu-id="5e765-164">Il diffère du premier exemple de plusieurs manières :</span><span class="sxs-lookup"><span data-stu-id="5e765-164">It differs from the first example in the following ways:</span></span>  
  
-   <span data-ttu-id="5e765-165">Les variables pour suivre le nombre de nombres aléatoires et leur somme dans chaque tâche sont locales à la tâche, il est donc inutile d’utiliser le <xref:System.ThreadStaticAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="5e765-165">The variables to keep track of the number of random numbers generated and their sum in each task are local to the task, so there is no need to use the <xref:System.ThreadStaticAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="5e765-166">La méthode statique <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> méthode est utilisée pour vous assurer que le thread principal ne se termine avant que toutes les tâches soient terminées.</span><span class="sxs-lookup"><span data-stu-id="5e765-166">The static <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method is used to ensure that the main thread doesn't complete before all tasks have finished.</span></span> <span data-ttu-id="5e765-167">Il est inutile du <xref:System.Threading.CountdownEvent> objet.</span><span class="sxs-lookup"><span data-stu-id="5e765-167">There is no need for the <xref:System.Threading.CountdownEvent> object.</span></span>  
  
-   <span data-ttu-id="5e765-168">L’exception qui résulte de l’annulation de tâches est visible dans le <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-168">The exception that results from task cancellation is surfaced in the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5e765-169">Dans l’exemple précédent, elle est gérée par chaque thread.</span><span class="sxs-lookup"><span data-stu-id="5e765-169">In the previous example, it is handled by each thread.</span></span>  
  
<a name="Functionality"></a>   
## <a name="generating-different-types-of-random-numbers"></a><span data-ttu-id="5e765-170">Génération de différents types de nombres aléatoires</span><span class="sxs-lookup"><span data-stu-id="5e765-170">Generating different types of random numbers</span></span>  
 <span data-ttu-id="5e765-171">Le Générateur de nombres aléatoires fournit des méthodes qui vous permettent de générer les types suivants de nombres aléatoires :</span><span class="sxs-lookup"><span data-stu-id="5e765-171">The random number generator provides methods that let you generate the following kinds of random numbers:</span></span>  
  
-   <span data-ttu-id="5e765-172">Une série de <xref:System.Byte> valeurs.</span><span class="sxs-lookup"><span data-stu-id="5e765-172">A series of <xref:System.Byte> values.</span></span> <span data-ttu-id="5e765-173">Vous déterminez le nombre de valeurs d’octets en passant un tableau initialisé selon le nombre d’éléments que vous souhaitez que la méthode pour retourner à la <xref:System.Random.NextBytes%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-173">You determine the number of byte values by passing an array initialized to the number of elements you want the method to return to the <xref:System.Random.NextBytes%2A> method.</span></span> <span data-ttu-id="5e765-174">L’exemple suivant génère 20 octets.</span><span class="sxs-lookup"><span data-stu-id="5e765-174">The following example generates 20 bytes.</span></span>  
  
     [!code-cpp[System.Random#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/nextbytes1.cpp#5)]
     [!code-csharp[System.Random#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/nextbytes1.cs#5)]
     [!code-vb[System.Random#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/nextbytes1.vb#5)]  
  
-   <span data-ttu-id="5e765-175">Un entier unique.</span><span class="sxs-lookup"><span data-stu-id="5e765-175">A single integer.</span></span> <span data-ttu-id="5e765-176">Vous pouvez choisir si vous souhaitez un entier compris entre 0 et une valeur maximale (<xref:System.Int32.MaxValue?displayProperty=nameWithType> – 1) en appelant le <xref:System.Random.Next> (méthode), un entier compris entre 0 et une valeur spécifique en appelant le <xref:System.Random.Next%28System.Int32%29> (méthode), ou un entier compris dans une plage de valeurs en appelant le <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>(méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-176">You can choose whether you want an integer from 0 to a maximum value (<xref:System.Int32.MaxValue?displayProperty=nameWithType> – 1) by calling the <xref:System.Random.Next> method, an integer between 0 and a specific value by calling the <xref:System.Random.Next%28System.Int32%29> method, or an integer within a range of values by calling the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="5e765-177">Dans les surcharges paramétrables, la valeur maximale spécifiée est exclusive ; Autrement dit, le nombre maximal généré est un inférieur à la valeur spécifiée.</span><span class="sxs-lookup"><span data-stu-id="5e765-177">In the parameterized overloads, the specified maximum value is exclusive; that is, the actual maximum number generated is one less than the specified value.</span></span>  
  
     <span data-ttu-id="5e765-178">L’exemple suivant appelle la <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> méthode permettant de générer des nombres aléatoires compris entre -10 et 10 10.</span><span class="sxs-lookup"><span data-stu-id="5e765-178">The following example calls the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method to generate 10 random numbers between -10 and 10.</span></span> <span data-ttu-id="5e765-179">Notez que le deuxième argument à la méthode spécifie la limite supérieure exclusive de la plage de valeurs aléatoires retourné par la méthode.</span><span class="sxs-lookup"><span data-stu-id="5e765-179">Note that the second argument to the method specifies the exclusive upper bound of the range of random values returned by the method.</span></span> <span data-ttu-id="5e765-180">En d’autres termes, le plus grand entier que la méthode peut retourner une est inférieure à cette valeur.</span><span class="sxs-lookup"><span data-stu-id="5e765-180">In other words, the largest integer that the method can return is one less than this value.</span></span>  
  
     [!code-cpp[System.Random#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/nextex1.cpp#6)]
     [!code-csharp[System.Random#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/nextex1.cs#6)]
     [!code-vb[System.Random#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/nextex1.vb#6)]  
  
-   <span data-ttu-id="5e765-181">Une valeur unique à virgule flottante comprise entre 0,0 et inférieur à 1,0 en appelant le <xref:System.Random.NextDouble%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-181">A single floating-point value from 0.0 to less than 1.0 by calling the <xref:System.Random.NextDouble%2A> method.</span></span> <span data-ttu-id="5e765-182">La limite supérieure exclusive du nombre aléatoire retourné par la méthode est 1, par conséquent, sa limite supérieure réelle est 0.99999999999999978.</span><span class="sxs-lookup"><span data-stu-id="5e765-182">The exclusive upper bound of the random number returned by the method is 1, so its actual upper bound is 0.99999999999999978.</span></span> <span data-ttu-id="5e765-183">L’exemple suivant génère des nombres à virgule flottante aléatoires 10.</span><span class="sxs-lookup"><span data-stu-id="5e765-183">The following example generates 10 random floating-point numbers.</span></span>  
  
     [!code-cpp[System.Random#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/nextdoubleex1.cpp#7)]
     [!code-csharp[System.Random#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/nextdoubleex1.cs#7)]
     [!code-vb[System.Random#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/nextdoubleex1.vb#7)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="5e765-184">Le <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> méthode vous permet de spécifier la plage de nombres aléatoires retourné.</span><span class="sxs-lookup"><span data-stu-id="5e765-184">The <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method allows you to specify the range of the returned random number.</span></span> <span data-ttu-id="5e765-185">Toutefois, le `maxValue` paramètre, qui spécifie la plage supérieure retournées numérique, est exclusif, pas un inclus, valeur.</span><span class="sxs-lookup"><span data-stu-id="5e765-185">However, the `maxValue` parameter, which specifies the upper range returned number, is an exclusive, not an inclusive, value.</span></span> <span data-ttu-id="5e765-186">Cela signifie que l’appel de méthode `Next(0, 100)` retourne une valeur comprise entre 0 et 99 et non entre 0 et 100.</span><span class="sxs-lookup"><span data-stu-id="5e765-186">This means that the method call `Next(0, 100)` returns a value between 0 and 99, and not between 0 and 100.</span></span>  
  
 <span data-ttu-id="5e765-187">Vous pouvez également utiliser le <xref:System.Random> classe pour des tâches telles que la génération de [des valeurs aléatoires t : System.Boolean](#Boolean), génération [à virgule flottante aléatoire des valeurs avec une plage de 0 à 1](#Floats), génération [entiers 64 bits aléatoires](#Long), et [récupération aléatoirement d’un élément unique à partir d’un tableau ou une collection](#UniqueArray).</span><span class="sxs-lookup"><span data-stu-id="5e765-187">You can also use the <xref:System.Random> class for such tasks as generating [random T:System.Boolean values](#Boolean), generating [random floating point values with a range other than 0 to 1](#Floats), generating [random 64-bit integers](#Long), and [randomly retrieving a unique element from an array or collection](#UniqueArray).</span></span> <span data-ttu-id="5e765-188">Pour celles-ci et d’autres tâches courantes, consultez le [utilisation System.Random à...](#Operations)</span><span class="sxs-lookup"><span data-stu-id="5e765-188">For these and other common tasks, see the [How do you use System.Random to…](#Operations)</span></span> <span data-ttu-id="5e765-189">section.</span><span class="sxs-lookup"><span data-stu-id="5e765-189">section.</span></span>  
  
<a name="Overriding"></a>   
## <a name="substituting-your-own-algorithm"></a><span data-ttu-id="5e765-190">En remplaçant votre propre algorithme</span><span class="sxs-lookup"><span data-stu-id="5e765-190">Substituting your own algorithm</span></span>  
 <span data-ttu-id="5e765-191">Vous pouvez implémenter votre propre générateur de nombres aléatoires en héritant de la <xref:System.Random> classe et en fournissant votre algorithme de génération de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-191">You can implement your own random number generator by inheriting from the <xref:System.Random> class and supplying your random number generation algorithm.</span></span> <span data-ttu-id="5e765-192">Pour fournir votre propre algorithme, vous devez substituer la <xref:System.Random.Sample%2A> (méthode), qui implémente l’algorithme de génération de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-192">To supply your own algorithm, you must override the <xref:System.Random.Sample%2A> method, which implements the random number generation algorithm.</span></span> <span data-ttu-id="5e765-193">Vous devez également substituer la <xref:System.Random.Next>, <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>, et <xref:System.Random.NextBytes%2A> méthodes pour vous assurer qu’ils appellent votre substituée <xref:System.Random.Sample%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-193">You should also override the <xref:System.Random.Next>, <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>, and <xref:System.Random.NextBytes%2A> methods to ensure that they call your overridden <xref:System.Random.Sample%2A> method.</span></span> <span data-ttu-id="5e765-194">Vous n’êtes pas obligé de remplacer le <xref:System.Random.Next%28System.Int32%29> et <xref:System.Random.NextDouble%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="5e765-194">You don't have to override the <xref:System.Random.Next%28System.Int32%29> and <xref:System.Random.NextDouble%2A> methods.</span></span>  
  
 <span data-ttu-id="5e765-195">Pour obtenir un exemple qui dérive de la <xref:System.Random> classe et modifie son générateur de nombres pseudo-aléatoires par défaut, consultez le <xref:System.Random.Sample%2A> page de référence.</span><span class="sxs-lookup"><span data-stu-id="5e765-195">For an example that derives from the <xref:System.Random> class and modifies its default pseudo-random number generator, see the <xref:System.Random.Sample%2A> reference page.</span></span>  
  
<a name="Operations"></a>   
## <a name="how-do-you-use-systemrandom-to"></a><span data-ttu-id="5e765-196">Comment utilisez-vous System.Random à...</span><span class="sxs-lookup"><span data-stu-id="5e765-196">How do you use System.Random to…</span></span>  
 <span data-ttu-id="5e765-197">Les sections suivantes décrivent et fournissent des exemples de code pour les méthodes que vous souhaiterez peut-être utiliser des nombres aléatoires dans votre application.</span><span class="sxs-lookup"><span data-stu-id="5e765-197">The following sections discuss and provide sample code for some of the ways you might want to use random numbers in your app.</span></span>  
  
<a name="Same"></a>   
### <a name="retrieve-the-same-sequence-of-random-values"></a><span data-ttu-id="5e765-198">Récupérer la même séquence de valeurs aléatoires</span><span class="sxs-lookup"><span data-stu-id="5e765-198">Retrieve the same sequence of random values</span></span>  
 <span data-ttu-id="5e765-199">Parfois, vous souhaitez générer la même séquence de nombres aléatoires dans les scénarios de test de logiciel et dans le jeu.</span><span class="sxs-lookup"><span data-stu-id="5e765-199">Sometimes you want to generate the same sequence of random numbers in software test scenarios and in game playing.</span></span> <span data-ttu-id="5e765-200">Test avec la même séquence de nombres aléatoires permet de vous permet de détecter les régressions et confirmer les correctifs de bogues.</span><span class="sxs-lookup"><span data-stu-id="5e765-200">Testing with the same sequence of random numbers allows you to detect regressions and confirm bug fixes.</span></span> <span data-ttu-id="5e765-201">À l’aide de la même séquence de nombre aléatoire dans les jeux permet de relire les jeux précédentes.</span><span class="sxs-lookup"><span data-stu-id="5e765-201">Using the same sequence of random number in games allows you to replay previous games.</span></span>  
  
 <span data-ttu-id="5e765-202">Vous pouvez générer la même séquence de nombres aléatoires grâce à la même valeur de départ pour le <xref:System.Random.%23ctor%28System.Int32%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="5e765-202">You can generate the same sequence of random numbers by providing the same seed value to the <xref:System.Random.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="5e765-203">La valeur de départ fournit une valeur de départ pour l’algorithme de génération de nombres pseudo-aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-203">The seed value provides a starting value for the pseudo-random number generation algorithm.</span></span> <span data-ttu-id="5e765-204">L’exemple suivant utilise 100100 comme une valeur de départ arbitraire pour instancier le <xref:System.Random> objet affiche 20 valeurs à virgule flottante aléatoires et persiste la valeur de départ.</span><span class="sxs-lookup"><span data-stu-id="5e765-204">The following example uses 100100 as an arbitrary seed value to instantiate the <xref:System.Random> object, displays 20 random floating-point values, and persists the seed value.</span></span> <span data-ttu-id="5e765-205">Elle restaure la valeur de départ, instancie un nouveau générateur de nombres aléatoires et affiche les mêmes 20 valeurs à virgule flottante aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-205">It then restores the seed value, instantiates a new random number generator, and displays the same 20 random floating-point values.</span></span>  <span data-ttu-id="5e765-206">Notez que l’exemple peut produire plusieurs séquences de nombres aléatoires de s’exécuter sur différentes versions du .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="5e765-206">Note that the example may produce different sequences of random numbers if run on different versions of the .NET Framework.</span></span>  
  
 [!code-cpp[System.Random#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/same1.cpp#12)]
 [!code-csharp[System.Random#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/same1.cs#12)]
 [!code-vb[System.Random#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/same1.vb#12)]  
  
<a name="Unique"></a>   
### <a name="retrieve-unique-sequences-of-random-numbers"></a><span data-ttu-id="5e765-207">Récupérer des séquences uniques de nombres aléatoires</span><span class="sxs-lookup"><span data-stu-id="5e765-207">Retrieve unique sequences of random numbers</span></span>  
 <span data-ttu-id="5e765-208">En fournissant des valeurs initiales différentes aux instances de la <xref:System.Random> classe entraîne chaque générateur de nombres aléatoires produire une autre séquence de valeurs.</span><span class="sxs-lookup"><span data-stu-id="5e765-208">Providing different seed values to instances of the <xref:System.Random> class causes each random number generator to produce a different sequence of values.</span></span> <span data-ttu-id="5e765-209">Vous pouvez fournir une valeur de départ explicitement en appelant le <xref:System.Random.%23ctor%28System.Int32%29> constructeur, ou implicitement en appelant le <xref:System.Random.%23ctor> constructeur.</span><span class="sxs-lookup"><span data-stu-id="5e765-209">You can provide a seed value either explicitly by calling the <xref:System.Random.%23ctor%28System.Int32%29> constructor, or implicitly by calling the <xref:System.Random.%23ctor> constructor.</span></span> <span data-ttu-id="5e765-210">La plupart des développeurs appeler le constructeur sans paramètre, qui utilise l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="5e765-210">Most developers call the parameterless constructor, which uses the system clock.</span></span> <span data-ttu-id="5e765-211">L’exemple suivant utilise cette approche pour instancier deux <xref:System.Random> instances.</span><span class="sxs-lookup"><span data-stu-id="5e765-211">The following example uses this approach to instantiate two <xref:System.Random> instances.</span></span> <span data-ttu-id="5e765-212">Chaque instance affiche une série de 10 entiers aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-212">Each instance displays a series of 10 random integers.</span></span>  
  
 [!code-cpp[System.Random#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/unique.cpp#13)]
 [!code-csharp[System.Random#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/unique.cs#13)]
 [!code-vb[System.Random#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/unique.vb#13)]  
  
 <span data-ttu-id="5e765-213">Toutefois, en raison de sa résolution finie, l’horloge système ne détecte pas les différences de temps inférieure à environ 15 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="5e765-213">However, because of its finite resolution, the system clock doesn't detect time differences that are less than approximately 15 milliseconds.</span></span> <span data-ttu-id="5e765-214">Par conséquent, si votre code appelle la <xref:System.Random.%23ctor> surcharge pour instancier deux <xref:System.Random> objets à la suite, vous susceptibles par inadvertance de fournir les objets avec les mêmes valeurs initiales.</span><span class="sxs-lookup"><span data-stu-id="5e765-214">Therefore, if your code calls the <xref:System.Random.%23ctor> overload to instantiate two <xref:System.Random> objects in succession, you might inadvertently be providing the objects with identical seed values.</span></span> <span data-ttu-id="5e765-215">Pour le voir dans l’exemple précédent, commentez le <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> appel de méthode et de compilation et d’exécuter à nouveau l’exemple.</span><span class="sxs-lookup"><span data-stu-id="5e765-215">To see this in the previous example, comment out the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method call, and compile and run the example again.</span></span>  
  
 <span data-ttu-id="5e765-216">Pour éviter cela, nous vous recommandons d’instancier une seule <xref:System.Random> de l’objet au lieu de plusieurs.</span><span class="sxs-lookup"><span data-stu-id="5e765-216">To prevent this from happening, we recommend that you instantiate a single <xref:System.Random> object rather than multiple ones.</span></span> <span data-ttu-id="5e765-217">Toutefois, étant donné que <xref:System.Random> n’est pas thread-safe, vous devez utiliser un périphérique de synchronisation si vous accédez à un <xref:System.Random> une instance à partir de plusieurs threads ; pour plus d’informations, consultez [aléatoire de la sécurité de classe et de thread](#ThreadSafety) plus haut dans cette rubrique.</span><span class="sxs-lookup"><span data-stu-id="5e765-217">However, since <xref:System.Random> isn't thread safe, you must use some synchronization device if you access a <xref:System.Random> instance from multiple threads; for more information, see [The Random class and thread safety](#ThreadSafety) earlier in this topic.</span></span> <span data-ttu-id="5e765-218">Ou bien, vous pouvez utiliser un mécanisme de délai, telles que la <xref:System.Threading.Thread.Sleep%2A> méthode utilisée dans l’exemple précédent, afin d’éviter les instanciations éloignés de plus de 15 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="5e765-218">Alternately, you can use a delay mechanism, such as the <xref:System.Threading.Thread.Sleep%2A> method used in the previous example, to ensure that the instantiations occur more than 15 millisecond apart.</span></span>  
  
<a name="Range"></a>   
### <a name="retrieve-integers-in-a-specified-range"></a><span data-ttu-id="5e765-219">Récupérer des nombres entiers dans une plage spécifiée</span><span class="sxs-lookup"><span data-stu-id="5e765-219">Retrieve integers in a specified range</span></span>  
 <span data-ttu-id="5e765-220">Vous pouvez récupérer des nombres entiers dans une plage spécifiée en appelant le <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> (méthode), ce qui vous permet de spécifier la limite inférieure et la limite supérieure des nombres que vous souhaitez que le Générateur de nombres aléatoires à retourner.</span><span class="sxs-lookup"><span data-stu-id="5e765-220">You can retrieve integers in a specified range by calling the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method, which lets you specify both the lower and the upper bound of the numbers you'd like the random number generator to return.</span></span> <span data-ttu-id="5e765-221">La limite supérieure est exclusif, pas un inclus, valeur.</span><span class="sxs-lookup"><span data-stu-id="5e765-221">The upper bound is an exclusive, not an inclusive, value.</span></span> <span data-ttu-id="5e765-222">Autrement dit, il n’est pas inclus dans la plage de valeurs retournées par la méthode.</span><span class="sxs-lookup"><span data-stu-id="5e765-222">That is, it isn't included in the range of values returned by the method.</span></span> <span data-ttu-id="5e765-223">L’exemple suivant utilise cette méthode pour générer des entiers aléatoires compris entre -10 et 10.</span><span class="sxs-lookup"><span data-stu-id="5e765-223">The following example uses this method to generate random integers between -10 and 10.</span></span> <span data-ttu-id="5e765-224">Notez qu’il spécifie 11, qui est supérieure à la valeur souhaitée, en tant que la valeur de la `maxValue` argument dans l’appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="5e765-224">Note that it specifies 11, which is one greater than the desired value, as the value of the `maxValue` argument in the method call.</span></span>  
  
 [!code-cpp[System.Random#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/range1.cpp#15)]
 [!code-csharp[System.Random#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/range1.cs#15)]
 [!code-vb[System.Random#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/range1.vb#15)]  
  
<a name="Digits"></a>   
### <a name="retrieve-integers-with-a-specified-number-of-digits"></a><span data-ttu-id="5e765-225">Récupérer des entiers avec un nombre spécifié de chiffres</span><span class="sxs-lookup"><span data-stu-id="5e765-225">Retrieve integers with a specified number of digits</span></span>  
 <span data-ttu-id="5e765-226">Vous pouvez appeler la <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> méthode pour récupérer des nombres avec un nombre de chiffres spécifié.</span><span class="sxs-lookup"><span data-stu-id="5e765-226">You can call the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method to retrieve numbers with a specified number of digits.</span></span> <span data-ttu-id="5e765-227">Par exemple, pour récupérer les nombres avec quatre chiffres (autrement dit, les nombres allant de 1000 à 9999), vous appelez le <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> méthode avec un `minValue` valeur de 1000 et un `maxValue` valeur de 10 000, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="5e765-227">For example, to retrieve numbers with four digits (that is, numbers that range from 1000 to 9999), you call the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method with a `minValue` value of 1000 and a `maxValue` value of 10000, as the following example shows.</span></span>  
  
 [!code-cpp[System.Random#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/range2.cpp#16)]
 [!code-csharp[System.Random#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/range2.cs#16)]
 [!code-vb[System.Random#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/range2.vb#16)]  
  
<a name="Floats"></a>   
### <a name="retrieve-floating-point-values-in-a-specified-range"></a><span data-ttu-id="5e765-228">Récupérer des valeurs à virgule flottante dans une plage spécifiée</span><span class="sxs-lookup"><span data-stu-id="5e765-228">Retrieve floating-point values in a specified range</span></span>  
 <span data-ttu-id="5e765-229">Le <xref:System.Random.NextDouble%2A> méthode retourne les valeurs à virgule flottante aléatoires de cette plage entre 0 et inférieur à 1.</span><span class="sxs-lookup"><span data-stu-id="5e765-229">The <xref:System.Random.NextDouble%2A> method returns random floating-point values that range from 0 to less than 1.</span></span> <span data-ttu-id="5e765-230">Toutefois, vous souhaiterez souvent générer des valeurs aléatoires dans une autre plage.</span><span class="sxs-lookup"><span data-stu-id="5e765-230">However, you'll often want to generate random values in some other range.</span></span>  
  
 <span data-ttu-id="5e765-231">Si l’intervalle entre les valeurs souhaitées minimales et maximales est 1, vous pouvez ajouter la différence entre l’intervalle de départ souhaitée et la valeur 0 au nombre retourné par le <xref:System.Random.NextDouble%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-231">If the interval between the minimum and maximum desired values is 1, you can add the difference between the desired starting interval and 0 to the number returned by the <xref:System.Random.NextDouble%2A> method.</span></span> <span data-ttu-id="5e765-232">L’exemple suivant procède ainsi pour générer des nombres aléatoires 10 entre -1 et 0.</span><span class="sxs-lookup"><span data-stu-id="5e765-232">The following example does this to generate 10 random numbers between -1 and 0.</span></span>  
  
 [!code-cpp[System.Random#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/doublerange2.cpp#17)]
 [!code-csharp[System.Random#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/doublerange2.cs#17)]
 [!code-vb[System.Random#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/doublerange2.vb#17)]  
  
 <span data-ttu-id="5e765-233">Pour générer des nombres à virgule flottante aléatoires dont la limite inférieure est 0, mais limite supérieure est supérieure à 1 (ou, dans le cas des nombres négatifs, dont la limite inférieure est inférieure à -1 et limite supérieure est égale à 0), multipliez le nombre aléatoire par la limite différente de zéro.</span><span class="sxs-lookup"><span data-stu-id="5e765-233">To generate random floating-point numbers whose lower bound is 0 but upper bound is greater than 1 (or, in the case of negative numbers, whose lower bound is less than -1 and upper bound is 0), multiply the random number by the non-zero bound.</span></span> <span data-ttu-id="5e765-234">L’exemple suivant fait cela pour générer des nombres à virgule flottante aléatoires de 20 millions de cette plage de 0 à <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5e765-234">The following example does this to generate 20 million random floating-point numbers that range from 0 to <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5e765-235">Dans affiche également la distribution des valeurs aléatoires générées par la méthode.</span><span class="sxs-lookup"><span data-stu-id="5e765-235">In also displays the distribution of the random values generated by the method.</span></span>  
  
 [!code-cpp[System.Random#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/doublerange1.cpp#18)]
 [!code-csharp[System.Random#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/doublerange1.cs#18)]
 [!code-vb[System.Random#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/doublerange1.vb#18)]  
  
 <span data-ttu-id="5e765-236">Pour générer des nombres à virgule flottante aléatoires comprise entre deux valeurs arbitraires, comme le <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> méthode fait pour les entiers, utilisez la formule suivante :</span><span class="sxs-lookup"><span data-stu-id="5e765-236">To generate random floating-point numbers between two arbitrary values, like the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method does for integers, use the following formula:</span></span>  
  
```csharp  
Random.NextDouble() * (maxValue – minValue) + minValue  
```  
  
 <span data-ttu-id="5e765-237">L’exemple suivant génère des nombres aléatoires de 1 million qui vont à partir de 10.0 pour 11.0 et affiche leur distribution.</span><span class="sxs-lookup"><span data-stu-id="5e765-237">The following example generates 1 million random numbers that range from 10.0 to 11.0, and displays their distribution.</span></span>  
  
 [!code-cpp[System.Random#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/doublerange3.cpp#19)]
 [!code-csharp[System.Random#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/doublerange3.cs#19)]
 [!code-vb[System.Random#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/doublerange3.vb#19)]  
  
<a name="Boolean"></a>   
### <a name="generate-random-boolean-values"></a><span data-ttu-id="5e765-238">Générer des valeurs booléennes aléatoires</span><span class="sxs-lookup"><span data-stu-id="5e765-238">Generate random Boolean values</span></span>  
 <span data-ttu-id="5e765-239">Le <xref:System.Random> classe ne fournit des méthodes qui génèrent <xref:System.Boolean> valeurs.</span><span class="sxs-lookup"><span data-stu-id="5e765-239">The <xref:System.Random> class doesn't provide methods that generate <xref:System.Boolean> values.</span></span> <span data-ttu-id="5e765-240">Toutefois, vous pouvez définir votre propre classe ou une méthode pour ce faire.</span><span class="sxs-lookup"><span data-stu-id="5e765-240">However, you can define your own class or method to do that.</span></span> <span data-ttu-id="5e765-241">L’exemple suivant définit une classe, `BooleanGenerator`, avec une méthode unique, `NextBoolean`.</span><span class="sxs-lookup"><span data-stu-id="5e765-241">The following example defines a class, `BooleanGenerator`, with a single method, `NextBoolean`.</span></span> <span data-ttu-id="5e765-242">Le `BooleanGenerator` classe stocke un <xref:System.Random> objet comme une variable privée.</span><span class="sxs-lookup"><span data-stu-id="5e765-242">The `BooleanGenerator` class stores a <xref:System.Random> object as a private variable.</span></span> <span data-ttu-id="5e765-243">Le `NextBoolean` les appels de méthode le <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> (méthode) et passe le résultat à la <xref:System.Convert.ToBoolean%28System.Int32%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-243">The `NextBoolean` method calls the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method and passes the result to the <xref:System.Convert.ToBoolean%28System.Int32%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5e765-244">Notez que 2 est utilisée comme argument pour spécifier la limite supérieure du nombre aléatoire.</span><span class="sxs-lookup"><span data-stu-id="5e765-244">Note that 2 is used as the argument to specify the upper bound of the random number.</span></span> <span data-ttu-id="5e765-245">Dans la mesure où il s’agit d’une valeur exclusive, l’appel de méthode retourne 0 ou 1.</span><span class="sxs-lookup"><span data-stu-id="5e765-245">Since this is an exclusive value, the method call returns either 0 or 1.</span></span>  
  
 [!code-cpp[System.Random#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/booleans1.cpp#8)]
 [!code-csharp[System.Random#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/booleans1.cs#8)]
 [!code-vb[System.Random#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/booleans1.vb#8)]  
  
 <span data-ttu-id="5e765-246">Au lieu de créer une classe distincte pour générer aléatoire <xref:System.Boolean> valeurs, l’exemple peut simplement ont défini une seule méthode.</span><span class="sxs-lookup"><span data-stu-id="5e765-246">Instead of creating a separate class to generate random <xref:System.Boolean> values, the example could simply have defined a single method.</span></span> <span data-ttu-id="5e765-247">Dans ce cas, toutefois, le <xref:System.Random> objet doit avoir été défini en tant que variable de niveau classe pour éviter l’instanciation d’un nouvel <xref:System.Random> instance dans chaque appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="5e765-247">In that case, however, the <xref:System.Random> object should have been defined as a class-level variable to avoid instantiating a new <xref:System.Random> instance in each method call.</span></span> <span data-ttu-id="5e765-248">En Visual Basic, l’instance aléatoire peut être défini comme un [statique](~/docs/visual-basic/language-reference/modifiers/static.md) variable dans le `NextBoolean` (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-248">In Visual Basic, the Random instance can be defined as a [Static](~/docs/visual-basic/language-reference/modifiers/static.md) variable in the `NextBoolean` method.</span></span>  <span data-ttu-id="5e765-249">L’exemple suivant fournit une implémentation.</span><span class="sxs-lookup"><span data-stu-id="5e765-249">The following example provides an implementation.</span></span>  
  
 [!code-cpp[System.Random#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/booleans2.cpp#20)]
 [!code-csharp[System.Random#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/booleans2.cs#20)]
 [!code-vb[System.Random#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/booleans2.vb#20)]  
  
<a name="Long"></a>   
### <a name="generate-random-64-bit-integers"></a><span data-ttu-id="5e765-250">Générer des entiers aléatoires 64 bits</span><span class="sxs-lookup"><span data-stu-id="5e765-250">Generate random 64-bit integers</span></span>  
 <span data-ttu-id="5e765-251">Les surcharges de la <xref:System.Random.Next%2A> méthode retournent des entiers 32 bits.</span><span class="sxs-lookup"><span data-stu-id="5e765-251">The overloads of the <xref:System.Random.Next%2A> method return 32-bit integers.</span></span> <span data-ttu-id="5e765-252">Toutefois, dans certains cas, vous souhaiterez travailler avec des entiers de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="5e765-252">However, in some cases, you might want to work with 64-bit integers.</span></span> <span data-ttu-id="5e765-253">Vous pouvez procéder comme suit :</span><span class="sxs-lookup"><span data-stu-id="5e765-253">You can do this as follows:</span></span>  
  
1.  <span data-ttu-id="5e765-254">Appelez le <xref:System.Random.NextDouble%2A> valeur du point de méthode pour récupérer un flottante double précision.</span><span class="sxs-lookup"><span data-stu-id="5e765-254">Call the <xref:System.Random.NextDouble%2A> method to retrieve a double-precision floating point value.</span></span>  
  
2.  <span data-ttu-id="5e765-255">Multiplier cette valeur <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5e765-255">Multiply that value by <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5e765-256">L’exemple suivant utilise cette technique pour générer des entiers aléatoires long de 20 millions et les classe dans 10 groupes égaux.</span><span class="sxs-lookup"><span data-stu-id="5e765-256">The following example uses this technique to generate 20 million random long integers and categorizes them in 10 equal groups.</span></span> <span data-ttu-id="5e765-257">Elle évalue ensuite la distribution des nombres aléatoires en comptant le nombre de chaque groupe de 0 à <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5e765-257">It then evaluates the distribution of the random numbers by counting the number in each group from 0 to <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5e765-258">Comme le montre la sortie de l’exemple, les nombres sont réparties plus ou moins dans la plage d’un entier long.</span><span class="sxs-lookup"><span data-stu-id="5e765-258">As the output from the example shows, the numbers are distributed more or less equally through the range of a long integer.</span></span>  
  
 [!code-cpp[System.Random#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/long1.cpp#14)]
 [!code-csharp[System.Random#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/long1.cs#14)]
 [!code-vb[System.Random#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/long1.vb#14)]  
  
 <span data-ttu-id="5e765-259">Une autre technique qu’utilise une manipulation de bits ne génère pas des nombres véritablement aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-259">An alternative technique that uses bit manipulation does not generate truly random numbers.</span></span> <span data-ttu-id="5e765-260">Cette technique appelle <xref:System.Random.Next> pour générer deux entiers, décale vers la gauche un par 32 bits et ORs ensemble.</span><span class="sxs-lookup"><span data-stu-id="5e765-260">This technique calls <xref:System.Random.Next> to generate two integers, left-shifts one by 32 bits, and ORs them together.</span></span> <span data-ttu-id="5e765-261">Cette technique présente deux limitations :</span><span class="sxs-lookup"><span data-stu-id="5e765-261">This technique has two limitations:</span></span>  
  
1.  <span data-ttu-id="5e765-262">Étant donné que le bit 31 est le bit de signe, la valeur de bit 31 de l’entier long résultant est toujours 0.</span><span class="sxs-lookup"><span data-stu-id="5e765-262">Because bit 31 is the sign bit, the value in bit 31 of the resulting long integer is always 0.</span></span>  <span data-ttu-id="5e765-263">Ce peut être résolu en générant aléatoire égal à 0 ou 1, le décalage à gauche de 31 bits et réunion à l’entier long aléatoire d’origine.</span><span class="sxs-lookup"><span data-stu-id="5e765-263">This can be addressed by generating a random 0 or 1, left-shifting it 31 bits, and ORing it with the original random long integer.</span></span>  
  
2.  <span data-ttu-id="5e765-264">Plus sérieusement, car la probabilité que la valeur retournée par <xref:System.Random.Next> est égal à 0, il y a quelques si les nombres aléatoires dans la plage 0 x 0-0x00000000FFFFFFFF.</span><span class="sxs-lookup"><span data-stu-id="5e765-264">More seriously, because the probability that the value returned by <xref:System.Random.Next> will be 0, there will be few if any random numbers in the range 0x0-0x00000000FFFFFFFF.</span></span>  
  
<a name="Bytes"></a>   
### <a name="retrieve-bytes-in-a-specified-range"></a><span data-ttu-id="5e765-265">Récupérer des octets dans une plage spécifiée</span><span class="sxs-lookup"><span data-stu-id="5e765-265">Retrieve bytes in a specified range</span></span>  
 <span data-ttu-id="5e765-266">Les surcharges de la <xref:System.Random.Next%2A> méthode permettent de spécifier la plage de nombres aléatoires, mais la <xref:System.Random.NextBytes%2A> n’est pas le cas de méthode.</span><span class="sxs-lookup"><span data-stu-id="5e765-266">The overloads of the <xref:System.Random.Next%2A> method allow you to specify the range of random numbers, but the <xref:System.Random.NextBytes%2A> method does not.</span></span> <span data-ttu-id="5e765-267">L’exemple suivant implémente un `NextBytes` méthode qui vous permet de spécifier la plage d’octets retournés.</span><span class="sxs-lookup"><span data-stu-id="5e765-267">The following example implements a `NextBytes` method that lets you specify the range of the returned bytes.</span></span> <span data-ttu-id="5e765-268">Il définit un `Random2` classe qui dérive de <xref:System.Random> et les surcharges de sa `NextBytes` (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-268">It defines a `Random2` class that derives from <xref:System.Random> and overloads its `NextBytes` method.</span></span>  
  
 [!code-cpp[System.Random#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/bytes1.cpp#9)]
 [!code-csharp[System.Random#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/bytes1.cs#9)]
 [!code-vb[System.Random#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/bytes1.vb#9)]  
  
 <span data-ttu-id="5e765-269">Le `NextBytes(Byte[], Byte, Byte)` méthode encapsule un appel à la <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> (méthode) et spécifie la valeur minimale et une supérieure à la valeur maximale (dans ce cas, 0 et 101) que nous voulons retournés dans le tableau d’octets.</span><span class="sxs-lookup"><span data-stu-id="5e765-269">The `NextBytes(Byte[], Byte, Byte)` method wraps a call to the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method and specifies the minimum value and one greater than the maximum value (in this case, 0 and 101) that we want returned in the byte array.</span></span> <span data-ttu-id="5e765-270">Étant donné que nous assurer que les valeurs entières retournées par la <xref:System.Random.Next%2A> méthode sont dans la plage de la <xref:System.Byte> type de données, nous pouvons en toute sécurité les casté (en c#) ou convertir (en Visual Basic) à partir d’entiers en octets.</span><span class="sxs-lookup"><span data-stu-id="5e765-270">Because we are sure that the integer values returned by the <xref:System.Random.Next%2A> method are within the range of the <xref:System.Byte> data type, we can safely cast them (in C#) or convert them (in Visual Basic) from integers to bytes.</span></span>  
  
<a name="Array"></a>   
### <a name="retrieve-an-element-from-an-array-or-collection-at-random"></a><span data-ttu-id="5e765-271">Récupérer un élément d’un tableau ou une collection de manière aléatoire</span><span class="sxs-lookup"><span data-stu-id="5e765-271">Retrieve an element from an array or collection at random</span></span>  
 <span data-ttu-id="5e765-272">Nombres aléatoires servent souvent d’index pour récupérer les valeurs à partir des tableaux ou collections.</span><span class="sxs-lookup"><span data-stu-id="5e765-272">Random numbers often serve as indexes to retrieve values from arrays or collections.</span></span> <span data-ttu-id="5e765-273">Pour récupérer une valeur d’index aléatoires, vous pouvez appeler la <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> méthode et l’utilisation de la limite inférieure du tableau en tant que la valeur de sa `minValue` argument et supérieure à la limite supérieure du tableau en tant que la valeur de son `maxValue` argument.</span><span class="sxs-lookup"><span data-stu-id="5e765-273">To retrieve a random index value, you can call the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method, and use the lower bound of the array as the value of its `minValue` argument and one greater than the upper bound of the array as the value of its `maxValue` argument.</span></span> <span data-ttu-id="5e765-274">Pour un tableau de base zéro, cela est équivalent à sa <xref:System.Array.Length%2A> propriété, ou supérieure à la valeur retournée par le <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-274">For a zero-based array, this is equivalent to its <xref:System.Array.Length%2A> property, or one greater than the value returned by the <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5e765-275">L’exemple suivant récupère aléatoirement le nom d’une ville aux États-Unis à partir d’un tableau de villes.</span><span class="sxs-lookup"><span data-stu-id="5e765-275">The following example randomly retrieves the name of a city in the United States from an array of cities.</span></span>  
  
 [!code-cpp[System.Random#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/array1.cpp#10)]
 [!code-csharp[System.Random#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/array1.cs#10)]
 [!code-vb[System.Random#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/array1.vb#10)]  
  
<a name="UniqueArray"></a>   
### <a name="retrieve-a-unique-element-from-an-array-or-collection"></a><span data-ttu-id="5e765-276">Récupérer un élément unique d’un tableau ou d’une collection</span><span class="sxs-lookup"><span data-stu-id="5e765-276">Retrieve a unique element from an array or collection</span></span>  
 <span data-ttu-id="5e765-277">Un générateur de nombres aléatoires permettre toujours retourner des valeurs en double.</span><span class="sxs-lookup"><span data-stu-id="5e765-277">A random number generator can always return duplicate values.</span></span> <span data-ttu-id="5e765-278">Lorsque la plage de numéros devient plus petite ou le nombre de valeurs générées devient plus grand, la probabilité de doublons se développe.</span><span class="sxs-lookup"><span data-stu-id="5e765-278">As the range of numbers becomes smaller or the number of values generated becomes larger, the probability of duplicates grows.</span></span> <span data-ttu-id="5e765-279">Si des valeurs aléatoires doivent être uniques, des numéros sont générés pour compenser les doublons, ce qui entraîne des performances médiocres de plus en plus.</span><span class="sxs-lookup"><span data-stu-id="5e765-279">If random values must be unique, more numbers are generated to compensate for duplicates, resulting in increasingly poor performance.</span></span>  
  
 <span data-ttu-id="5e765-280">Il existe un certain nombre de techniques pour gérer ce scénario.</span><span class="sxs-lookup"><span data-stu-id="5e765-280">There are a number of techniques to handle this scenario.</span></span> <span data-ttu-id="5e765-281">Une solution courante consiste à créer un tableau ou collection qui contient les valeurs à récupérer et un tableau parallèle qui contient les nombres à virgule flottante aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-281">One common solution is to create an array or collection that contains the values to be retrieved, and a parallel array that contains random floating-point numbers.</span></span> <span data-ttu-id="5e765-282">Le deuxième tableau est rempli avec des nombres aléatoires au moment le premier tableau est créé, et le <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> méthode est utilisée pour trier le premier tableau en utilisant les valeurs dans le tableau en parallèle.</span><span class="sxs-lookup"><span data-stu-id="5e765-282">The second array is populated with random numbers at the time the first array is created, and the <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> method is used to sort the first array by using the values in the parallel array.</span></span>  
  
 <span data-ttu-id="5e765-283">Par exemple, si vous développez un jeu de Solitaire, vous souhaitez vous assurer que chaque carte est utilisée qu’une seule fois.</span><span class="sxs-lookup"><span data-stu-id="5e765-283">For example, if you're developing a Solitaire game, you want to ensure that each card is used only once.</span></span> <span data-ttu-id="5e765-284">Au lieu de générer des nombres aléatoires pour récupérer une carte et suivi si cette carte a déjà été traitée, vous pouvez créer un tableau parallèle de nombres aléatoires qui peuvent être utilisés pour trier le pont.</span><span class="sxs-lookup"><span data-stu-id="5e765-284">Instead of generating random numbers to retrieve a card and tracking whether that card has already been dealt, you can create a parallel array of random numbers that can be used to sort the deck.</span></span> <span data-ttu-id="5e765-285">Une fois que le pont est trié, votre application peut gérer un pointeur pour indiquer l’index de la carte suivante sur le pont.</span><span class="sxs-lookup"><span data-stu-id="5e765-285">Once the deck is sorted, your app can maintain a pointer to indicate the index of the next card on the deck.</span></span>  
  
 <span data-ttu-id="5e765-286">L'exemple suivant illustre cette approche.</span><span class="sxs-lookup"><span data-stu-id="5e765-286">The following example illustrates this approach.</span></span> <span data-ttu-id="5e765-287">Il définit un `Card` classe qui représente une carte à jouer et un `Dealer` classe qui traite un jeu de cartes mélangés.</span><span class="sxs-lookup"><span data-stu-id="5e765-287">It defines a `Card` class that represents a playing card and a `Dealer` class that deals a deck of shuffled cards.</span></span> <span data-ttu-id="5e765-288">Le `Dealer` constructeur de classe remplit deux tableaux : un `deck` tableau qui a une portée de classe et qui représente toutes les cartes dans le pont et un local `order` tableau qui a le même nombre d’éléments que le `deck` de tableau et est rempli avec généré de façon aléatoire <xref:System.Double> valeurs.</span><span class="sxs-lookup"><span data-stu-id="5e765-288">The `Dealer` class constructor populates two arrays: a `deck` array that has class scope and that represents all the cards in the deck; and a local `order` array that has the same number of elements as the `deck` array and is populated with randomly generated <xref:System.Double> values.</span></span>  <span data-ttu-id="5e765-289">Le <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> méthode est alors appelée pour trier les `deck` tableau basé sur les valeurs dans le `order` tableau.</span><span class="sxs-lookup"><span data-stu-id="5e765-289">The <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> method is then called to sort the `deck` array based on the values in the `order` array.</span></span>  
  
 [!code-cpp[System.Random#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/uniquearray1.cpp#11)]
 [!code-csharp[System.Random#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/uniquearray1.cs#11)]
 [!code-vb[System.Random#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/uniquearray1.vb#11)]  
  
   
  
## Examples  
 <span data-ttu-id="5e765-290">L’exemple suivant crée un générateur de nombres aléatoires unique et appelle son <xref:System.Random.NextBytes%2A>, <xref:System.Random.Next%2A>, et <xref:System.Random.NextDouble%2A> pour générer des séquences de nombres aléatoires dans des plages différentes méthodes.</span><span class="sxs-lookup"><span data-stu-id="5e765-290">The following example creates a single random number generator and calls its <xref:System.Random.NextBytes%2A>, <xref:System.Random.Next%2A>, and <xref:System.Random.NextDouble%2A> methods to generate sequences of random numbers within different ranges.</span></span>  
  
 [!code-cpp[System.Random#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/random2.cpp#2)]
 [!code-csharp[System.Random#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/Random2.cs#2)]
 [!code-vb[System.Random#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/Random2.vb#2)]  
  
 <span data-ttu-id="5e765-291">L’exemple suivant génère un entier aléatoire qu’il utilise en tant qu’index pour récupérer une valeur de chaîne d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="5e765-291">The following example generates a random integer that it uses as an index to retrieve a string value from an array.</span></span>  
  
 [!code-cpp[System.Random.Next#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next1.cpp#3)]
 [!code-csharp[System.Random.Next#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next1.cs#3)]
 [!code-vb[System.Random.Next#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next1.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="5e765-292">
        <para>Dans le .NET Framework 1.0 et 1.1, une implémentation minimale d’une classe dérivée de <see cref="T:System.Random" /> requis la substitution de la <see cref="M:System.Random.Sample" /> méthode pour définir un algorithme de nouvel ou modifié pour la génération de nombres aléatoires. La classe dérivée pouvait alors reposer sur l’implémentation de classe de base de la <see cref="M:System.Random.Next" />, <see cref="M:System.Random.Next(System.Int32)" />, <see cref="M:System.Random.Next(System.Int32,System.Int32)" />, <see cref="M:System.Random.NextBytes(System.Byte[])" />, et <see cref="M:System.Random.NextDouble" /> méthodes à appeler l’implémentation de classe dérivée de la <see cref="M:System.Random.Sample" /> (méthode).  Dans le .NET Framework 2.0 et versions ultérieur, le comportement de la <see cref="M:System.Random.Next" />, <see cref="M:System.Random.Next(System.Int32,System.Int32)" />, et <see cref="M:System.Random.NextBytes(System.Byte[])" /> méthodes ont été modifiés afin que ces méthodes n’appellent pas nécessairement l’implémentation de classe dérivée de la <see cref="M:System.Random.Sample" /> (méthode). Par conséquent, les classes dérivées de <see cref="T:System.Random" /> qui ciblent le .NET Framework 2.0 et version ultérieure doit également substituer ces trois méthodes.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="5e765-292">
          <para>In the .NET Framework 1.0 and 1.1, a minimum implementation of a class derived from <see cref="T:System.Random" /> required overriding the <see cref="M:System.Random.Sample" /> method to define a new or modified algorithm for generating random numbers. The derived class could then rely on the base class implementation of the <see cref="M:System.Random.Next" />, <see cref="M:System.Random.Next(System.Int32)" />, <see cref="M:System.Random.Next(System.Int32,System.Int32)" />, <see cref="M:System.Random.NextBytes(System.Byte[])" />, and <see cref="M:System.Random.NextDouble" /> methods to call the derived class implementation of the <see cref="M:System.Random.Sample" /> method.  In the .NET Framework 2.0 and later, the behavior of the <see cref="M:System.Random.Next" />, <see cref="M:System.Random.Next(System.Int32,System.Int32)" />, and <see cref="M:System.Random.NextBytes(System.Byte[])" /> methods have changed so that these methods do not necessarily call the derived class implementation of the <see cref="M:System.Random.Sample" /> method. As a result, classes derived from <see cref="T:System.Random" /> that target the .NET Framework 2.0 and later should also override these three methods.</para>
        </span>
      </span>
    </block>
    <block subset="none" type="usage">
      <span data-ttu-id="5e765-293">
        <para>L’implémentation du Générateur de nombres aléatoires dans le <see cref="T:System.Random" /> classe restent les mêmes sur les versions principales du .NET Framework n’est pas garanti. Par conséquent, vous ne doit pas supposer que la même valeur de départ entraîne la même séquence pseudo-aléatoire dans les différentes versions du .NET Framework.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="5e765-293">
          <para>The implementation of the random number generator in the <see cref="T:System.Random" /> class isn't guaranteed to remain the same across major versions of the .NET Framework. As a result, you shouldn't assume that the same seed will result in the same pseudo-random sequence in different versions of the .NET Framework.</para>
        </span>
      </span>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e765-294">Initialise une nouvelle instance de la classe <see cref="T:System.Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-294">Initializes a new instance of the <see cref="T:System.Random" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Random ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Random();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5e765-295">Initialise une nouvelle instance de la classe <see cref="T:System.Random" />, à l'aide d'une valeur initiale par défaut qui est fonction du temps.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-295">Initializes a new instance of the <see cref="T:System.Random" /> class, using a time-dependent default seed value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e765-296">La valeur de départ par défaut est dérivée de l’horloge système et a la résolution finie.</span><span class="sxs-lookup"><span data-stu-id="5e765-296">The default seed value is derived from the system clock and has finite resolution.</span></span> <span data-ttu-id="5e765-297">Par conséquent, différents <xref:System.Random> les objets qui sont créés successivement par un appel au constructeur par défaut ont des valeurs initiales par défaut identiques et, par conséquent, produira des ensembles identiques de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-297">As a result, different <xref:System.Random> objects that are created in close succession by a call to the default constructor will have identical default seed values and, therefore, will produce identical sets of random numbers.</span></span> <span data-ttu-id="5e765-298">Ce problème peut être évité en utilisant un seul <xref:System.Random> objet pour générer tous les nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-298">This problem can be avoided by using a single <xref:System.Random> object to generate all random numbers.</span></span> <span data-ttu-id="5e765-299">Vous pouvez également contourner en modifiant la valeur de départ retournée par l’horloge système, puis en fournissant explicitement cette nouvelle valeur de départ pour le <xref:System.Random.%23ctor%28System.Int32%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="5e765-299">You can also work around it by modifying the seed value returned by the system clock and then explicitly providing this new seed value to the <xref:System.Random.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="5e765-300">Pour plus d’informations, consultez le <xref:System.Random.%23ctor%28System.Int32%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="5e765-300">For more information, see the <xref:System.Random.%23ctor%28System.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="5e765-301">Appeler ce constructeur si vous souhaitez que le Générateur de nombres aléatoires pour générer une séquence aléatoire de nombres.</span><span class="sxs-lookup"><span data-stu-id="5e765-301">Call this constructor if you want your random number generator to generate a random sequence of numbers.</span></span> <span data-ttu-id="5e765-302">Pour générer une séquence fixe de nombres aléatoires qui seront identiques pour différents générateurs de nombres aléatoires, appelez le <xref:System.Random.%23ctor%28System.Int32%29> constructeur avec une valeur de départ fixe.</span><span class="sxs-lookup"><span data-stu-id="5e765-302">To generate a fixed  sequence of random numbers that will be the same for different random number generators, call the <xref:System.Random.%23ctor%28System.Int32%29> constructor with a fixed seed value .</span></span> <span data-ttu-id="5e765-303">Cela <xref:System.Random> surcharge de constructeur est fréquemment utilisée lorsque vous testez les applications qui utilisent des nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-303">This <xref:System.Random> constructor overload is frequently used when testing apps that use random numbers.</span></span>  
  
 <span data-ttu-id="5e765-304">Une fois que vous avez instancié le Générateur de nombres aléatoires, vous appelez individuels <xref:System.Random> méthodes, telles que <xref:System.Random.Next> ou <xref:System.Random.NextDouble>, afin de générer des nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-304">Once you've instantiated the random number generator, you call individual <xref:System.Random> methods, such as <xref:System.Random.Next> or <xref:System.Random.NextDouble>, to generate random numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e765-305">L’exemple suivant utilise le constructeur par défaut pour instancier trois <xref:System.Random> objets et affiche une séquence de cinq entiers aléatoires pour chacun.</span><span class="sxs-lookup"><span data-stu-id="5e765-305">The following example uses the default constructor to instantiate three <xref:System.Random> objects and displays a sequence of five random integers for each.</span></span> <span data-ttu-id="5e765-306">Étant donné que les deux premières <xref:System.Random> objets sont créés successivement, ils sont instanciés à l’aide des mêmes valeurs initiales basées sur l’horloge système et, par conséquent, ils produisent une séquence identique de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-306">Because the first two <xref:System.Random> objects are created in close succession, they are instantiated using identical seed values based on the system clock and, therefore, they produce an identical sequence of random numbers.</span></span> <span data-ttu-id="5e765-307">En revanche, le constructeur par défaut du troisième <xref:System.Random> objet est appelé après un délai de deux secondes généré en appelant le <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-307">On the other hand, the default constructor of the third <xref:System.Random> object is called after a two-second delay caused by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5e765-308">Étant donné que cela génère une valeur initiale différente pour la troisième <xref:System.Random> de l’objet, il génère une séquence différente de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-308">Because this produces a different seed value for the third <xref:System.Random> object, it produces a different sequence of random numbers.</span></span>  
  
 [!code-csharp[System.Random.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor1.cs#2)]
 [!code-vb[System.Random.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Random (int Seed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 Seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Seed As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Random(int Seed);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Seed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Seed">
          <span data-ttu-id="5e765-309">Nombre utilisé pour calculer la valeur de départ de la séquence de nombres pseudo-aléatoires.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-309">A number used to calculate a starting value for the pseudo-random number sequence.</span>
          </span>
          <span data-ttu-id="5e765-310">Si un nombre négatif est spécifié, la valeur absolue du nombre est utilisée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-310">If a negative number is specified, the absolute value of the number is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e765-311">Initialise une nouvelle instance de la classe <see cref="T:System.Random" /> à l'aide de la valeur initiale spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-311">Initializes a new instance of the <see cref="T:System.Random" /> class, using the specified seed value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e765-312">En fournissant une valeur de départ identiques pour différents <xref:System.Random> objets provoque chaque instance produire des séquences identiques de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-312">Providing an identical seed value to different <xref:System.Random> objects causes each instance to produce identical sequences of random numbers.</span></span> <span data-ttu-id="5e765-313">Cela se produit souvent lorsque vous testez des applications qui s’appuient sur les générateurs de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-313">This is often done when testing apps that rely on random number generators.</span></span>  
  
 <span data-ttu-id="5e765-314">Si votre application nécessite différentes séquences de nombres aléatoires, appeler ce constructeur à plusieurs reprises avec différentes valeurs initiales.</span><span class="sxs-lookup"><span data-stu-id="5e765-314">If your application requires different random number sequences, invoke this constructor repeatedly with different seed values.</span></span> <span data-ttu-id="5e765-315">Pour produire une valeur de départ unique est dépendant du temps.</span><span class="sxs-lookup"><span data-stu-id="5e765-315">One way to produce a unique seed value is to make it time-dependent.</span></span> <span data-ttu-id="5e765-316">Par exemple, dériver la valeur de départ de l’horloge système, comme le <xref:System.Random.%23ctor> surcharge est.</span><span class="sxs-lookup"><span data-stu-id="5e765-316">For example, derive the seed value from the system clock, as the <xref:System.Random.%23ctor> overload does.</span></span> <span data-ttu-id="5e765-317">Toutefois, l’horloge système peut-être pas une résolution suffisante pour fournir différents appels de ce constructeur avec une valeur initiale différente.</span><span class="sxs-lookup"><span data-stu-id="5e765-317">However, the system clock might not have sufficient resolution to provide different invocations of this constructor with a different seed value.</span></span> <span data-ttu-id="5e765-318">Cela entraîne des générateurs de nombres aléatoires qui génèrent des séquences identiques de nombres pseudo-aléatoires, comme illustré dans les deux premières <xref:System.Random> objets dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="5e765-318">This results in random number generators that generate identical sequences of pseudo-random numbers, as illustrated by the first two <xref:System.Random> objects in the following example.</span></span> <span data-ttu-id="5e765-319">Pour éviter ce problème, appliquez un algorithme pour différencier la valeur de départ dans chaque appel ou appelez le <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> pour s’assurer que vous fournissez chaque constructeur avec une valeur initiale différente.</span><span class="sxs-lookup"><span data-stu-id="5e765-319">To prevent this, apply an algorithm to differentiate the seed value in each invocation, or call the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to ensure that you provide each constructor with a different seed value.</span></span>  
  
 [!code-csharp[System.Random.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor4.cs#4)]
 [!code-vb[System.Random.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor4.vb#4)]  
  
 <span data-ttu-id="5e765-320">Une autre option consiste à instancier une seule <xref:System.Random> de l’objet que vous utilisez pour générer tous les nombres aléatoires dans votre application.</span><span class="sxs-lookup"><span data-stu-id="5e765-320">Another option is to instantiate a single <xref:System.Random> object that you use to generate all the random numbers in your application.</span></span> <span data-ttu-id="5e765-321">Il en résulte légèrement meilleures performances, étant donné que l’instanciation d’un générateur de nombres aléatoires est relativement coûteuse.</span><span class="sxs-lookup"><span data-stu-id="5e765-321">This yields slightly better performance, since instantiating a random number generator is fairly expensive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e765-322">L’exemple suivant crée <xref:System.Random> objets avec le constructeur de classe qui prend un paramètre initial et génère une séquence de valeurs de type double et d’entiers aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-322">The following example creates <xref:System.Random> objects with the class constructor that takes a seed parameter and generates a sequence of random integers and doubles.</span></span> <span data-ttu-id="5e765-323">L’exemple montre que la même séquence est générée lorsque le <xref:System.Random> objet est créé à nouveau avec le paramètre de constructeur et la valeur initiale.</span><span class="sxs-lookup"><span data-stu-id="5e765-323">The example illustrates that the same sequence is generated when the <xref:System.Random> object is created again with the constructor and seed parameter.</span></span>  
  
 [!code-cpp[System.Random.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Ctor/CPP/ctor.cpp#1)]
 [!code-csharp[System.Random.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor.cs#1)]
 [!code-vb[System.Random.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Next">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e765-324">Retourne un nombre aléatoire entier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-324">Returns a random integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual int Next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Next" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Next () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Next();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5e765-325">Retourne un nombre aléatoire entier non négatif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-325">Returns a non-negative random integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e765-326">Entier signé 32 bits supérieur ou égal à 0 et inférieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-326">A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e765-327"><xref:System.Random.Next%2A?displayProperty=nameWithType> génère un nombre aléatoire dont la valeur est comprise entre 0 et inférieur à <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5e765-327"><xref:System.Random.Next%2A?displayProperty=nameWithType> generates a random number whose value ranges from 0 to less than <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5e765-328">Pour générer un nombre aléatoire dont la valeur varie de 0 à un autre nombre positif, utilisez la <xref:System.Random.Next%28System.Int32%29?displayProperty=nameWithType> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="5e765-328">To generate a random number whose value ranges from 0 to some other positive number, use the <xref:System.Random.Next%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="5e765-329">Pour générer un nombre aléatoire dans une plage différente, utilisez la <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="5e765-329">To generate a random number within a different range, use the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e765-330">L’exemple suivant passe des appels répétés à la <xref:System.Random.Next%2A> méthode pour générer un nombre spécifique de nombres aléatoires demandées par l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="5e765-330">The following example makes repeated calls to the <xref:System.Random.Next%2A> method to generate a specific number of random numbers requested by the user.</span></span> <span data-ttu-id="5e765-331">Le <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> méthode est utilisée pour obtenir des commentaires des clients.</span><span class="sxs-lookup"><span data-stu-id="5e765-331">The <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method is used to get customer input.</span></span>  
  
 [!code-cpp[System.Random.Next#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next3.cpp#5)]
 [!code-csharp[System.Random.Next#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next3.cs#5)]
 [!code-vb[System.Random.Next#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next3.vb#5)]  
  
 <span data-ttu-id="5e765-332">L’exemple suivant dérive une classe de <xref:System.Random> pour générer une séquence de nombres aléatoires dont la distribution diffère de la distribution uniforme générée par la <xref:System.Random.Sample%2A> méthode de la classe de base.</span><span class="sxs-lookup"><span data-stu-id="5e765-332">The following example derives a class from <xref:System.Random> to generate a sequence of random numbers whose distribution differs from the uniform distribution generated by the <xref:System.Random.Sample%2A> method of the base class.</span></span> <span data-ttu-id="5e765-333">Il remplace le <xref:System.Random.Sample%2A> méthode pour fournir la distribution de nombres aléatoires et substitue le <xref:System.Random.Next%2A?displayProperty=nameWithType> méthode à utiliser la série de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-333">It overrides the <xref:System.Random.Sample%2A> method to provide the distribution of random numbers, and overrides the <xref:System.Random.Next%2A?displayProperty=nameWithType> method to use series of random numbers.</span></span>  
  
 [!code-cpp[System.Random.Sample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Sample/cpp/sampleex.cpp#1)]
 [!code-csharp[System.Random.Sample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Sample/CS/sample.cs#1)]
 [!code-vb[System.Random.Sample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Sample/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="5e765-334">
            <para>En commençant avec le .NET Framework version 2.0, si vous dérivez une classe de <see cref="T:System.Random" /> et remplacez le <see cref="M:System.Random.Sample" /> (méthode), la distribution fournie par l’implémentation de classe dérivée de la <see cref="M:System.Random.Sample" /> méthode n’est pas utilisée dans les appels à la classe de base implémentation de la <see cref="M:System.Random.Next" /> (méthode). Au lieu de cela, la distribution uniforme retournée par la base de <see cref="T:System.Random" /> classe est utilisée. Ce comportement permet d’améliorer les performances globales de la <see cref="T:System.Random" /> classe. Pour modifier ce comportement pour appeler le <see cref="M:System.Random.Sample" /> méthode dans la classe dérivée, vous devez également substituer la <see cref="M:System.Random.Next" /> (méthode).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-334">
              <para>Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the <see cref="M:System.Random.Next" /> method. Instead, the uniform distribution returned by the base <see cref="T:System.Random" /> class is used. This behavior improves the overall performance of the <see cref="T:System.Random" /> class. To modify this behavior to call the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the <see cref="M:System.Random.Next" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual int Next (int maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next(int32 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Next(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Next (maxValue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Next(int maxValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxValue">
          <span data-ttu-id="5e765-335">Limite supérieure (exclusive) du nombre aléatoire à générer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-335">The exclusive upper bound of the random number to be generated.</span>
          </span>
          <span data-ttu-id="5e765-336">La valeur <c>maxValue</c> doit être supérieure ou égale à 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-336">
              <c>maxValue</c> must be greater than or equal to 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e765-337">Retourne un nombre aléatoire entier non négatif, inférieur au nombre maximal spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-337">Returns a non-negative random integer that is less than the specified maximum.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e765-338">Entier signé 32 bits supérieur ou égal à 0 et inférieur à <paramref name="maxValue" />, autrement dit la plage des valeurs de retour inclut généralement 0, mais pas <paramref name="maxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-338">A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes 0 but not <paramref name="maxValue" />.</span>
          </span>
          <span data-ttu-id="5e765-339">Toutefois, si <paramref name="maxValue" /> est égal à 0, <paramref name="maxValue" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-339">However, if <paramref name="maxValue" /> equals 0, <paramref name="maxValue" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e765-340">Le <xref:System.Random.Next%28System.Int32%29> surcharge retourne des entiers aléatoires de cette plage de 0 à `maxValue` – 1.</span><span class="sxs-lookup"><span data-stu-id="5e765-340">The <xref:System.Random.Next%28System.Int32%29> overload returns random integers that range from 0 to `maxValue` – 1.</span></span> <span data-ttu-id="5e765-341">Toutefois, si `maxValue` est 0, la méthode retourne 0.</span><span class="sxs-lookup"><span data-stu-id="5e765-341">However, if `maxValue` is 0, the method returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e765-342">L’exemple suivant génère des entiers aléatoires avec différentes surcharges de la <xref:System.Random.Next%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-342">The following example generates random integers with various overloads of the <xref:System.Random.Next%2A> method.</span></span>  
  
 [!code-cpp[System.Random.Next#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next.cpp#1)]
 [!code-csharp[System.Random.Next#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next.cs#1)]
 [!code-vb[System.Random.Next#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next.vb#1)]  
  
 <span data-ttu-id="5e765-343">L’exemple suivant génère un entier aléatoire qu’il utilise en tant qu’index pour récupérer une valeur de chaîne d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="5e765-343">The following example generates a random integer that it uses as an index to retrieve a string value from an array.</span></span> <span data-ttu-id="5e765-344">Étant donné que l’index le plus élevé du tableau est une inférieure à sa longueur, la valeur de la <xref:System.Array.Length%2A?displayProperty=nameWithType> propriété est fournie comme un le `maxValue` paramètre.</span><span class="sxs-lookup"><span data-stu-id="5e765-344">Because the highest index of the array is one less than its length, the value of the <xref:System.Array.Length%2A?displayProperty=nameWithType> property is supplied as a the `maxValue` parameter.</span></span>  
  
 [!code-cpp[System.Random.Next#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next1.cpp#3)]
 [!code-csharp[System.Random.Next#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next1.cs#3)]
 [!code-vb[System.Random.Next#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5e765-345">
            <paramref name="maxValue" /> est inférieur à 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-345">
              <paramref name="maxValue" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual int Next (int minValue, int maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next(int32 minValue, int32 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Next(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Next (minValue As Integer, maxValue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Next(int minValue, int maxValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minValue">
          <span data-ttu-id="5e765-346">Limite inférieure (incluse) du nombre aléatoire retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-346">The inclusive lower bound of the random number returned.</span>
          </span>
        </param>
        <param name="maxValue">
          <span data-ttu-id="5e765-347">Limite supérieure (exclusive) du nombre aléatoire retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-347">The exclusive upper bound of the random number returned.</span>
          </span>
          <span data-ttu-id="5e765-348">La valeur <c>maxValue</c> doit être supérieure ou égale à la valeur <c>minValue</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-348">
              <c>maxValue</c> must be greater than or equal to <c>minValue</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e765-349">Retourne un entier aléatoire qui se trouve dans une plage spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-349">Returns a random integer that is within a specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e765-350">Entier signé 32 bits supérieur ou égal à <paramref name="minValue" /> et inférieur à <paramref name="maxValue" /> ; autrement dit, la plage des valeurs de retour inclut <paramref name="minValue" /> mais pas <paramref name="maxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-350">A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />.</span>
          </span>
          <span data-ttu-id="5e765-351">Si <paramref name="minValue" /> est égal à <paramref name="maxValue" />, <paramref name="minValue" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-351">If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e765-352">Le <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> surcharge retourne des entiers aléatoires comprises entre `minValue` à `maxValue` – 1.</span><span class="sxs-lookup"><span data-stu-id="5e765-352">The <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> overload returns random integers that range from `minValue` to `maxValue` – 1.</span></span> <span data-ttu-id="5e765-353">Toutefois, si `maxValue` est égal à `minValue`, la méthode retourne `minValue`.</span><span class="sxs-lookup"><span data-stu-id="5e765-353">However, if `maxValue` equals `minValue`, the method returns `minValue`.</span></span>  
  
 <span data-ttu-id="5e765-354">Contrairement à d’autres surcharges de la <xref:System.Random.Next%2A> (méthode), qui retournent des valeurs uniquement non négatives, cette méthode peut retourner un entier aléatoire négatif.</span><span class="sxs-lookup"><span data-stu-id="5e765-354">Unlike the other overloads of the <xref:System.Random.Next%2A> method, which return only non-negative values, this method can return a negative random integer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e765-355">L’exemple suivant utilise la <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> méthode pour générer des entiers aléatoires avec trois plages distinctes.</span><span class="sxs-lookup"><span data-stu-id="5e765-355">The following example uses the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to generate random integers with three distinct ranges.</span></span> <span data-ttu-id="5e765-356">Notez que la sortie exacte de l’exemple dépend de la valeur de départ de système passée à la <xref:System.Random> constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="5e765-356">Note that the exact output from the example depends on the system-supplied seed value passed to the <xref:System.Random> class constructor.</span></span>  
  
 [!code-cpp[System.Random.Next#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next2.cpp#2)]
 [!code-csharp[System.Random.Next#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/Next2.cs#2)]
 [!code-vb[System.Random.Next#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next2.vb#2)]  
  
 <span data-ttu-id="5e765-357">L’exemple suivant génère un entier aléatoire qu’il utilise en tant qu’index pour récupérer une valeur de chaîne d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="5e765-357">The following example generates a random integer that it uses as an index to retrieve a string value from an array.</span></span> <span data-ttu-id="5e765-358">Étant donné que l’index le plus élevé du tableau est une inférieure à sa longueur, la valeur de la <xref:System.Array.Length%2A?displayProperty=nameWithType> propriété est fournie comme un le `maxValue` paramètre.</span><span class="sxs-lookup"><span data-stu-id="5e765-358">Because the highest index of the array is one less than its length, the value of the <xref:System.Array.Length%2A?displayProperty=nameWithType> property is supplied as a the `maxValue` parameter.</span></span>  
  
 [!code-cpp[System.Random.Next#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next4.cpp#4)]
 [!code-csharp[System.Random.Next#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next4.cs#4)]
 [!code-vb[System.Random.Next#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5e765-359">
            <paramref name="minValue" /> est supérieur à <paramref name="maxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-359">
              <paramref name="minValue" /> is greater than <paramref name="maxValue" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="5e765-360">
            <para>En commençant avec le .NET Framework version 2.0, si vous dérivez une classe de <see cref="T:System.Random" /> et remplacez le <see cref="M:System.Random.Sample" /> (méthode), la distribution fournie par l’implémentation de classe dérivée de la <see cref="M:System.Random.Sample" /> méthode n’est pas utilisée dans les appels à la classe de base implémentation de la <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> surcharge de méthode si la différence entre la <paramref name="minValue" /> et <paramref name="maxValue" /> paramètres est supérieur à <see cref="F:System.Int32.MaxValue" />. Au lieu de cela, la distribution uniforme retournée par la base de <see cref="T:System.Random" /> classe est utilisée. Ce comportement permet d’améliorer les performances globales de la <see cref="T:System.Random" /> classe. Pour modifier ce comportement pour appeler le <see cref="M:System.Random.Sample" /> méthode dans la classe dérivée, vous devez également substituer la <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> surcharge de méthode.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-360">
              <para>Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> method overload if the difference between the <paramref name="minValue" /> and <paramref name="maxValue" /> parameters is greater than <see cref="F:System.Int32.MaxValue" />. Instead, the uniform distribution returned by the base <see cref="T:System.Random" /> class is used. This behavior improves the overall performance of the <see cref="T:System.Random" /> class. To modify this behavior to call the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> method overload.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="NextBytes">
      <MemberSignature Language="C#" Value="public virtual void NextBytes (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NextBytes(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.NextBytes(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NextBytes (buffer As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NextBytes(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="5e765-361">Tableau d'octets contenant des nombres aléatoires.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-361">An array of bytes to contain random numbers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e765-362">Remplit les éléments d'un tableau d'octets spécifié à l'aide de nombres aléatoires.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-362">Fills the elements of a specified array of bytes with random numbers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e765-363">Chaque élément du tableau d’octets est défini sur un nombre aléatoire supérieur ou égal à 0 et inférieur ou égal à <xref:System.Byte.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="5e765-363">Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or equal to <xref:System.Byte.MaxValue>.</span></span>  
  
 <span data-ttu-id="5e765-364">Par exemple, pour générer un nombre aléatoire sécurisé par chiffrement approprié pour la création d’un mot de passe aléatoire, utilisez une méthode telle que <xref:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5e765-364">For example, to generate a cryptographically secured random number suitable for creating a random password, use a method such as <xref:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e765-365">L’exemple suivant montre comment utiliser la <xref:System.Random.NextBytes%2A> méthode pour remplir un tableau d’octets avec des valeurs d’octet aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-365">The following example demonstrates how to use the <xref:System.Random.NextBytes%2A> method to fill an array of bytes with random byte values.</span></span>  
  
 [!code-cpp[Classic Random.NextBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Random.NextBytes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Random.NextBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Random.NextBytes Example/CS/source.cs#1)]
 [!code-vb[Classic Random.NextBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Random.NextBytes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e765-366">
            <paramref name="buffer" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-366">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="5e765-367">
            <para>En commençant avec le .NET Framework version 2.0, si vous dérivez une classe de <see cref="T:System.Random" /> et remplacez le <see cref="M:System.Random.Sample" /> (méthode), la distribution fournie par l’implémentation de classe dérivée de la <see cref="M:System.Random.Sample" /> méthode n’est pas utilisée dans les appels à la classe de base implémentation de la <see cref="M:System.Random.NextBytes(System.Byte[])" /> (méthode). Au lieu de cela, la distribution uniforme retournée par la base de <see cref="T:System.Random" /> classe est utilisée. Ce comportement permet d’améliorer les performances globales de la <see cref="T:System.Random" /> classe. Pour modifier ce comportement pour appeler le <see cref="M:System.Random.Sample" /> méthode dans la classe dérivée, vous devez également substituer la <see cref="M:System.Random.NextBytes(System.Byte[])" /> (méthode).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-367">
              <para>Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the <see cref="M:System.Random.NextBytes(System.Byte[])" /> method. Instead, the uniform distribution returned by the base <see cref="T:System.Random" /> class is used. This behavior improves the overall performance of the <see cref="T:System.Random" /> class. To modify this behavior to call the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the <see cref="M:System.Random.NextBytes(System.Byte[])" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="NextBytes">
      <MemberSignature Language="C#" Value="public virtual void NextBytes (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NextBytes(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.NextBytes(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NextBytes (buffer As Span(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NextBytes(Span&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextDouble">
      <MemberSignature Language="C#" Value="public virtual double NextDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NextDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.NextDouble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NextDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual double NextDouble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5e765-368">Retourne un nombre aléatoire à virgule flottante supérieur ou égal à 0,0 et inférieur à 1,0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-368">Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e765-369">Nombre à virgule flottante double précision supérieur ou égal à 0,0 et inférieur à 1,0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-369">A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e765-370">La limite supérieure réelle du nombre aléatoire retourné par cette méthode est 0.99999999999999978.</span><span class="sxs-lookup"><span data-stu-id="5e765-370">The actual upper bound of the random number returned by this method is 0.99999999999999978.</span></span>  
  
 <span data-ttu-id="5e765-371">Pour récupérer des valeurs à virgule flottante aléatoires dans une plage entre 0,0 et 1,0, consultez la section « Extraire des valeurs à virgule flottante dans une plage spécifiée » de la <xref:System.Random> rubrique de la classe.</span><span class="sxs-lookup"><span data-stu-id="5e765-371">To retrieve random floating-point values within a range other than 0.0 and 1.0, see the "Retrieve floating-point values in a specified range" section of the <xref:System.Random> class topic.</span></span>  
  
 <span data-ttu-id="5e765-372">Cette méthode est la version publique de la méthode protégée, <xref:System.Random.Sample%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e765-372">This method is the public version of the protected method, <xref:System.Random.Sample%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e765-373">L’exemple suivant utilise la <xref:System.Random.NextDouble%2A> méthode pour générer des séquences de type Double aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-373">The following example uses the <xref:System.Random.NextDouble%2A> method to generate sequences of random doubles.</span></span>  
  
 [!code-cpp[System.Random.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Ctor/CPP/ctor.cpp#1)]
 [!code-csharp[System.Random.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor.cs#1)]
 [!code-vb[System.Random.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor.vb#1)]  
  
 <span data-ttu-id="5e765-374">L’exemple suivant appelle la <xref:System.Random.NextDouble%2A> méthode permettant de générer aléatoire de 100 nombres et affiche la fréquence distribution.</span><span class="sxs-lookup"><span data-stu-id="5e765-374">The following example calls the <xref:System.Random.NextDouble%2A> method to generate 100 random numbers and displays their frequency distribution.</span></span>  
  
 [!code-csharp[System.Random.NextDouble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.random.nextdouble/cs/nextdouble1.cs#2)]
 [!code-vb[System.Random.NextDouble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.random.nextdouble/vb/nextdouble1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sample">
      <MemberSignature Language="C#" Value="protected virtual double Sample ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance float64 Sample() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Sample" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Sample () As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual double Sample();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5e765-375">Retourne un nombre aléatoire à virgule flottante compris entre 0,0 et 1,0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-375">Returns a random floating-point number between 0.0 and 1.0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e765-376">Nombre à virgule flottante double précision supérieur ou égal à 0,0 et inférieur à 1,0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-376">A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e765-377">Pour produire une distribution aléatoire différente ou un principe de générateur de nombres aléatoires différent, dérivez une classe de la <xref:System.Random> classe et substituer la <xref:System.Random.Sample%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-377">To produce a different random distribution or a different random number generator principle, derive a class from the <xref:System.Random> class and override the <xref:System.Random.Sample%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5e765-378">Le <xref:System.Random.Sample%2A> méthode est `protected`, ce qui signifie qu’il est accessible uniquement dans la <xref:System.Random> classe et ses classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="5e765-378">The <xref:System.Random.Sample%2A> method is `protected`, which means that it is accessible only within the <xref:System.Random> class and its derived classes.</span></span> <span data-ttu-id="5e765-379">Pour générer un nombre aléatoire compris entre 0 et 1 dans un <xref:System.Random> de l’instance, appelez le <xref:System.Random.NextDouble%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="5e765-379">To generate a random number between 0 and 1 from a <xref:System.Random> instance, call the <xref:System.Random.NextDouble%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e765-380">L’exemple suivant dérive une classe de <xref:System.Random> et remplace le <xref:System.Random.Sample%2A> méthode permettant de générer une distribution de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="5e765-380">The following example derives a class from <xref:System.Random> and overrides the <xref:System.Random.Sample%2A> method to generate a distribution of random numbers.</span></span> <span data-ttu-id="5e765-381">Cette distribution est différente de la distribution uniforme générée par la <xref:System.Random.Sample%2A> méthode de la classe de base.</span><span class="sxs-lookup"><span data-stu-id="5e765-381">This distribution is different than the uniform distribution generated by the <xref:System.Random.Sample%2A> method of the base class.</span></span>  
  
 [!code-cpp[System.Random.Sample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Sample/cpp/sampleex.cpp#1)]
 [!code-csharp[System.Random.Sample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Sample/CS/sample.cs#1)]
 [!code-vb[System.Random.Sample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Sample/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="5e765-382">
            <para>En commençant avec le .NET Framework version 2.0, si vous dérivez une classe de <see cref="T:System.Random" /> et remplacez le <see cref="M:System.Random.Sample" /> (méthode), la distribution fournie par l’implémentation de classe dérivée de la <see cref="M:System.Random.Sample" /> méthode n’est pas utilisée dans les appels à la classe de base implémentation des méthodes suivantes : - le <see cref="M:System.Random.NextBytes(System.Byte[])" /> (méthode).  -La <see cref="M:System.Random.Next" /> (méthode).  -La <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> (méthode), si (<paramref name="maxValue" /> - <paramref name="minValue" />) est supérieur à <see cref="F:System.Int32.MaxValue" />.  Au lieu de cela, la distribution uniforme fournie par la base de <see cref="T:System.Random" /> classe est utilisée. Ce comportement permet d’améliorer les performances globales de la <see cref="T:System.Random" /> classe. Pour modifier ce comportement pour appeler l’implémentation de la <see cref="M:System.Random.Sample" /> méthode dans la classe dérivée, vous devez également substituer le comportement de ces trois membres. L’exemple fournit une illustration.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e765-382">
              <para>Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the following methods:  -   The <see cref="M:System.Random.NextBytes(System.Byte[])" /> method.  -   The <see cref="M:System.Random.Next" /> method.  -   The <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> method, if (<paramref name="maxValue" /> - <paramref name="minValue" />) is greater than <see cref="F:System.Int32.MaxValue" />.  Instead, the uniform distribution provided by the base <see cref="T:System.Random" /> class is used. This behavior improves the overall performance of the <see cref="T:System.Random" /> class. To modify this behavior to call the implementation of the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the behavior of these three members. The example provides an illustration.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Random.NextDouble" />
      </Docs>
    </Member>
  </Members>
</Type>