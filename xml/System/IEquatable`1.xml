<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f169ba3e3ec57eac1b6bb82d978c55c2b059e3fb" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52737427" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Type des objets à comparer.</typeparam>
    <summary>Définit une méthode généralisée qu'un type valeur ou une classe implémente pour créer une méthode spécifique au type permettant de déterminer l'égalité des instances.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette interface est implémentée par les types dont les valeurs peuvent être comparées (pour les classes d’exemple, numérique et chaîne). Un type valeur ou une classe implémente la <xref:System.IEquatable%601.Equals%2A> méthode pour créer une méthode spécifique au type permettant de déterminer l’égalité des instances.  
  
> [!NOTE]
>  Le <xref:System.IComparable%601> interface définit le <xref:System.IComparable%601.CompareTo%2A> (méthode), qui détermine l’ordre de tri des instances du type d’implémentation. Le <xref:System.IEquatable%601> interface définit le <xref:System.IEquatable%601.Equals%2A> (méthode), qui détermine l’égalité des instances du type d’implémentation.  
  
 Le <xref:System.IEquatable%601> interface est utilisée par les objets de collection générique, tel que <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, et <xref:System.Collections.Generic.LinkedList%601> lors du test d’égalité dans des méthodes telles que `Contains`, `IndexOf`, `LastIndexOf`, et `Remove`. Elle doit être implémentée pour tout objet qui peut être stocké dans une collection générique.  
  
   
  
## Examples  
 Consultez l’exemple de la <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Remplacez le paramètre de type de la <see cref="T:System.IEquatable`1" /> interface avec le type qui implémente cette interface.  
  
Si vous implémentez <see cref="T:System.IEquatable`1" />, vous devez également remplacer les implémentations de classe de base de <see cref="M:System.Object.Equals(System.Object)" /> et <see cref="M:System.Object.GetHashCode" /> afin que leur comportement est cohérent avec celui de la <see cref="M:System.IEquatable`1.Equals(`0)" /> (méthode). Si vous substituez <see cref="M:System.Object.Equals(System.Object)" />, votre implémentation substituée est également appelée dans les appels à la méthode statique <see langword="Equals(System.Object, System.Object)" /> méthode sur votre classe. En outre, vous devez surcharger les <see langword="op_Equality" /> et <see langword="op_Inequality" /> opérateurs. Cela garantit que tous les tests d’égalité retournent des résultats cohérents.  
  
 <block subset="none" type="note"><para>  
 Pour plus d’informations sur la substitution <see cref="M:System.Object.Equals(System.Object)" />, consultez le <see cref="M:System.Object.Equals(System.Object)" /> article.  
  
</para></block>  
  
 Pour un type valeur, vous devez toujours implémenter <see cref="T:System.IEquatable`1" /> et substituer <see cref="M:System.Object.Equals(System.Object)" /> pour de meilleures performances. <see cref="M:System.Object.Equals(System.Object)" /> zones de types valeur et s’appuie sur la réflexion pour comparer deux valeurs sont égales. Votre mise en œuvre de <see cref="M:System.IEquatable`1.Equals(`0)" /> et votre substitution de <see cref="M:System.Object.Equals(System.Object)" /> doit retourner des résultats cohérents.  
  
Si vous implémentez <see cref="T:System.IEquatable`1" />, vous devez également implémenter <see cref="T:System.IComparable`1" /> si les instances de votre type peuvent être ordonnées ou triées. Si votre type implémente <see cref="T:System.IComparable`1" />, vous implémentez également presque toujours <see cref="T:System.IEquatable`1" />.</para>
      <para>Notez qu’il existe certaines conceptions où un type prend en charge une relation d’ordre, mais l’égalité peut être différente d’une relation de tri. Envisagez un `Person` classe où vous triez par ordre alphabétique. Deux personnes avec le même nom trient les mêmes, mais ne sont pas la même personne.</para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Objet à comparer à cet objet.</param>
        <summary>Indique si l'objet actuel est égal à un autre objet du même type.</summary>
        <returns><see langword="true" /> si l'objet actuel est égal au paramètre <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation de la <xref:System.IEquatable%601.Equals%2A> méthode est destinée à effectuer un test d’égalité avec un autre objet de type `T`, le même type que l’objet actuel. Le <xref:System.IEquatable%601.Equals(%600)> méthode est appelée dans les circonstances suivantes :  
  
-   Lorsque le `Equals` méthode est appelée et le `other` argument est un objet fortement typé de type `T`. (Si `other` n’est pas de type `T`, la base de <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> méthode est appelée. Des deux méthodes, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> légèrement offre de meilleures performances.)  
  
-   Lorsque les méthodes de recherche d’un nombre d’objets de collection génériques sont appelées. Certaines de ces types et leurs méthodes sont les suivantes :  
  
    -   Certaines surcharges génériques de la <xref:System.Array.BinarySearch%2A> (méthode).  
  
    -   Les méthodes de recherche de la <xref:System.Collections.Generic.List%601> classe, y compris <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, et <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.  
  
    -   Les méthodes de recherche de la <xref:System.Collections.Generic.Dictionary%602> classe, y compris <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> et <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.  
  
    -   Les méthodes de recherche du générique <xref:System.Collections.Generic.LinkedList%601> classe, y compris <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> et <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.  
  
 En d’autres termes, pour gérer le stockage des objets d’une classe dans un tableau ou un objet de collection générique, il est judicieux d’implémenter <xref:System.IEquatable%601> afin que l’objet pouvant être facilement identifié et manipulée.  
  
 Lorsque vous implémentez le <xref:System.IEquatable%601.Equals%2A> (méthode), définir une égalité de manière appropriée pour le type spécifié par l’argument de type générique. Par exemple, si l’argument de type est <xref:System.Int32>, définir une égalité de manière appropriée pour la comparaison de deux entiers signés 32 bits.  
  
   
  
## Examples  
 L’exemple suivant montre l’implémentation partielle d’un `Person` classe qui implémente <xref:System.IEquatable%601> et a deux propriétés, `LastName` et `SSN`. Le <xref:System.IEquatable%601.Equals%2A> retourne de la méthode `True` si le `SSN` propriété de deux `Person` objets sont identiques ; sinon, elle retourne `False`.  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` objets peuvent alors être stockées dans un <xref:System.Collections.Generic.List%601> de l’objet et peuvent être identifiés par le `Contains` (méthode), comme le montre l’exemple suivant.  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si vous implémentez <see cref="M:System.IEquatable`1.Equals(`0)" />, vous devez également remplacer les implémentations de classe de base de <see cref="M:System.Object.Equals(System.Object)" /> et <see cref="M:System.Object.GetHashCode" /> afin que leur comportement est cohérent avec celui de la <see cref="M:System.IEquatable`1.Equals(`0)" /> (méthode). Si vous substituez <see cref="M:System.Object.Equals(System.Object)" />, votre implémentation substituée est également appelée dans les appels à la méthode statique <see langword="Equals(System.Object, System.Object)" /> méthode sur votre classe. En outre, vous devez surcharger les <see langword="op_Equality" /> et <see langword="op_Inequality" /> opérateurs. Cela garantit que tous les tests d’égalité des résultats cohérents, qui illustre l’exemple.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>