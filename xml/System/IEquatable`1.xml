<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IEquatable`1.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac519bc49f94beee1a3c075a5ffa5eaa52f9c90027f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19bc49f94beee1a3c075a5ffa5eaa52f9c90027f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The type of objects to compare.</source>
          <target state="translated">Type des objets à comparer.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IEquatable`1">
          <source>Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</source>
          <target state="translated">Définit une méthode généralisée qu'un type valeur ou une classe implémente pour créer une méthode spécifique au type permettant de déterminer l'égalité des instances.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</source>
          <target state="translated">Cette interface est implémentée par les types dont les valeurs peuvent être comparées (pour les classes d’exemple, numérique et chaîne).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>A value type or class implements the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method to create a type-specific method suitable for determining equality of instances.</source>
          <target state="translated">Un type valeur ou une classe implémente la <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> méthode pour créer une méthode spécifique au type et permettant de déterminer l’égalité des instances.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method, which determines the sort order of instances of the implementing type.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> interface définit les <ph id="ph2">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> (méthode), qui détermine l’ordre de tri des instances de l’implémentation du type.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, which determines the equality of instances of the implementing type.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface définit les <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> (méthode), qui détermine l’égalité des instances de l’implémentation du type.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface is used by generic collection objects such as <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> when testing for equality in such methods as <ph id="ph5">`Contains`</ph>, <ph id="ph6">`IndexOf`</ph>, <ph id="ph7">`LastIndexOf`</ph>, and <ph id="ph8">`Remove`</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface est utilisée par les objets de collection générique, tel que <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, et <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> lors du test d’égalité dans des méthodes telles que <ph id="ph5">`Contains`</ph>, <ph id="ph6">`IndexOf`</ph>, <ph id="ph7">`LastIndexOf`</ph>, et <ph id="ph8">`Remove`</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>It should be implemented for any object that might be stored in a generic collection.</source>
          <target state="translated">Il doit être implémenté pour un objet qui peut être stocké dans une collection générique.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>See the example for the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Consultez l’exemple de la <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Replace the type parameter of the <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> interface with the type that is implementing this interface.</source>
          <target state="translated">Remplacez le paramètre de type de la <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> interface avec le type qui implémente cette interface.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, you should also override the base class implementations of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> so that their behavior is consistent with that of the <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> method.</source>
          <target state="translated">Si vous implémentez <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, vous devez également remplacer les implémentations de classe de base de <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> et <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> afin que leur comportement est cohérent avec celui de la <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you do override <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, your overridden implementation is also called in calls to the static <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> method on your class.</source>
          <target state="translated">Si vous substituez <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, votre implémentation substituée est également appelée dans les appels à la méthode statique <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> méthode sur votre classe.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>In addition, you should overload the <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> and <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operators.</source>
          <target state="translated">En outre, vous devez surcharger le <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> et <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> opérateurs.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>This ensures that all tests for equality return consistent results.</source>
          <target state="translated">Cela garantit que tous les tests d’égalité retournent des résultats cohérents.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>For information on overriding <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, see the <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> article.</source>
          <target state="translated">Pour plus d’informations sur la substitution <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, consultez la <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> l’article.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>For a value type, you should always implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> and override <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> for better performance.</source>
          <target state="translated">Pour un type valeur, vous devez toujours implémenter <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> et substituer <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> pour de meilleures performances.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source><ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> boxes value types and relies on reflection to compare two values for equality.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> zones de types valeur et repose sur la réflexion pour comparer deux valeurs sont égales.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Both your implementation of <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> and your override of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> should return consistent results.</source>
          <target state="translated">Votre mise en œuvre de <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> et la substitution de <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> doit retourner des résultats cohérents.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, you should also implement <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> if instances of your type can be ordered or sorted.</source>
          <target state="translated">Si vous implémentez <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, vous devez également implémenter <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> si les instances de votre type peuvent être ordonnées ou triées.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If your type implements <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>, you almost always also implement <ph id="ph2">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>.</source>
          <target state="translated">Si votre type implémente <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>, vous implémentez également presque toujours <ph id="ph2">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation.</source>
          <target state="translated">Notez qu’il existe certaines conceptions où un type prend en charge une relation d’ordre, mais l’égalité peut être différente d’une relation d’ordre de tri.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Consider a <ph id="ph1">`Person`</ph> class where you sort alphabetically.</source>
          <target state="translated">Considérez un <ph id="ph1">`Person`</ph> classe où vous triez par ordre alphabétique.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Two people with the same name sort the same, but are not the same person.</source>
          <target state="translated">Deux personnes avec le même nom de tri identiques, mais ne sont pas la même personne.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source>An object to compare with this object.</source>
          <target state="translated">Objet à comparer à cet objet.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">Indique si l'objet actuel est égal à un autre objet du même type.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'objet actuel est égal au paramètre <ph id="ph2">&lt;paramref name="other" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method is intended to perform a test for equality with another object of type <ph id="ph2">`T`</ph>, the same type as the current object.</source>
          <target state="translated">L’implémentation de la <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> méthode est conçue pour effectuer un test d’égalité avec un autre objet de type <ph id="ph2">`T`</ph>, le même type que l’objet actuel.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601.Equals(%600)&gt;</ph> method is called in the following circumstances:</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IEquatable%601.Equals(%600)&gt;</ph> méthode est appelée dans les circonstances suivantes :</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When the <ph id="ph1">`Equals`</ph> method is called and the <ph id="ph2">`other`</ph> argument is a strongly-typed object of type <ph id="ph3">`T`</ph>.</source>
          <target state="translated">Lorsque le <ph id="ph1">`Equals`</ph> méthode est appelée et la <ph id="ph2">`other`</ph> argument est un objet fortement typé de type <ph id="ph3">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>(If <ph id="ph1">`other`</ph> is not of type <ph id="ph2">`T`</ph>, the base <ph id="ph3">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method is called.</source>
          <target state="translated">(Si <ph id="ph1">`other`</ph> n’est pas de type <ph id="ph2">`T`</ph>, la base de <ph id="ph3">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Of the two methods, <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> offers slightly better performance.)</source>
          <target state="translated">Les deux méthodes, <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> légèrement offre de meilleures performances.)</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When the search methods of a number of generic collection objects are called.</source>
          <target state="translated">Lorsque les méthodes de recherche d’un nombre d’objets de collection générique sont appelées.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Some of these types and their methods include the following:</source>
          <target state="translated">Certaines de ces types et leurs méthodes sont les suivantes :</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Some of the generic overloads of the <ph id="ph1">&lt;xref:System.Array.BinarySearch%2A&gt;</ph> method.</source>
          <target state="translated">Certaines surcharges génériques de la <ph id="ph1">&lt;xref:System.Array.BinarySearch%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Les méthodes de recherche de la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe, y compris <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>, et <ph id="ph5">&lt;xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph>.</source>
          <target state="translated">Les méthodes de recherche de la <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe, y compris <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the generic <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Remove%2A&gt;</ph>.</source>
          <target state="translated">Les méthodes de recherche de l’objet générique <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> classe, y compris <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType&gt;</ph> et <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Remove%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> so that the object can be easily identified and manipulated.</source>
          <target state="translated">En d’autres termes, pour gérer le stockage des objets d’une classe dans un tableau ou un objet de collection générique, il est judicieux de mettre en œuvre <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> afin que l’objet peut être facilement identifié et manipulée.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When implementing the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, define equality appropriately for the type specified by the generic type argument.</source>
          <target state="translated">Lorsque vous implémentez le <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> (méthode), définir une égalité de manière appropriée pour le type spécifié par l’argument de type générique.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>For example, if the type argument is <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, define equality appropriately for the comparison of two 32-bit signed integers.</source>
          <target state="translated">Par exemple, si l’argument de type est <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, définir une égalité de manière appropriée pour la comparaison de deux entiers signés 32 bits.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The following example shows the partial implementation of a <ph id="ph1">`Person`</ph> class that implements <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> and has two properties, <ph id="ph3">`LastName`</ph> and <ph id="ph4">`SSN`</ph>.</source>
          <target state="translated">L’exemple suivant montre l’implémentation partielle d’un <ph id="ph1">`Person`</ph> classe qui implémente <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> et a deux propriétés, <ph id="ph3">`LastName`</ph> et <ph id="ph4">`SSN`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method returns <ph id="ph2">`True`</ph> if the <ph id="ph3">`SSN`</ph> property of two <ph id="ph4">`Person`</ph> objects is identical; otherwise, it returns <ph id="ph5">`False`</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> méthode retourne <ph id="ph2">`True`</ph> si le <ph id="ph3">`SSN`</ph> propriété deux <ph id="ph4">`Person`</ph> objets sont identiques ; sinon, elle retourne <ph id="ph5">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source><ph id="ph1">`Person`</ph> objects can then be stored in a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object and can be identified by the <ph id="ph3">`Contains`</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`Person`</ph> objets peuvent alors être stockées dans un <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de l’objet et peuvent être identifiés par le <ph id="ph3">`Contains`</ph> (méthode), comme le montre l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>If you implement <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>, you should also override the base class implementations of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> so that their behavior is consistent with that of the <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> method.</source>
          <target state="translated">Si vous implémentez <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>, vous devez également remplacer les implémentations de classe de base de <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> et <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> afin que leur comportement est cohérent avec celui de la <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>If you do override <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, your overridden implementation is also called in calls to the static <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> method on your class.</source>
          <target state="translated">Si vous substituez <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, votre implémentation substituée est également appelée dans les appels à la méthode statique <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> méthode sur votre classe.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>In addition, you should overload the <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> and <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operators.</source>
          <target state="translated">En outre, vous devez surcharger le <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> et <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> opérateurs.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>This ensures that all tests for equality return consistent results, which the example illustrates.</source>
          <target state="translated">Cela garantit que tous les tests d’égalité des résultats cohérents, illustrés dans l’exemple.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>