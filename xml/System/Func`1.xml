<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="480607eeba6a1c1badfd92906bfb9b87a52e39e4" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58690797" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">Type de la valeur de retour de la méthode encapsulée par ce délégué.</typeparam>
    <summary>Encapsule une méthode n'ayant aucun paramètre et retournant une valeur du type spécifié par le paramètre <typeparamref name="TResult" />.</summary>
    <returns>Valeur de retour de la méthode encapsulée par ce délégué.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser ce délégué pour représenter une méthode qui peut être passée en tant que paramètre sans déclarer explicitement un délégué personnalisé. La méthode encapsulée doit correspondre à la signature de méthode définie par ce délégué. Cela signifie que la méthode encapsulée doit avoir aucun paramètre et doit retourner une valeur.  
  
> [!NOTE]
>  Pour référencer une méthode qui n’a aucun paramètre et retourne `void` (ou en Visual Basic, qui est déclaré comme un `Sub` plutôt que comme un `Function`), utilisez le <xref:System.Action> déléguer à la place.  
  
 Lorsque vous utilisez le <xref:System.Func%601> délégué, vous n’avez pas à définir explicitement un délégué qui encapsule une méthode sans paramètre. Par exemple, le code suivant déclare explicitement un délégué nommé `WriteMethod` et assigne une référence à la `OutputTarget.SendToFile` méthode à son instance de délégué d’instance.  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 L’exemple suivant simplifie ce code en instanciant le <xref:System.Func%601> délégué au lieu de définir un nouveau délégué et lui assigner une méthode nommée explicitement.  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 Vous pouvez utiliser le <xref:System.Func%601> déléguer avec les méthodes anonymes en c#, comme l’illustre l’exemple suivant. (Pour une introduction aux méthodes anonymes, consultez [méthodes anonymes](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 Vous pouvez également affecter une expression lambda à une <xref:System.Func%602> déléguer, comme l’illustre l’exemple suivant. (Pour une introduction aux expressions lambda, consultez [Expressions Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) et [Expressions Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 Le type sous-jacent d’une expression lambda est un des génériques `Func` délégués. Cela rend possible de passer d’une expression lambda en tant que paramètre sans lui assigner explicitement à un délégué. En particulier, étant donné que de nombreuses méthodes des types dans le <xref:System.Linq> espace de noms a `Func` paramètres, vous pouvez passer ces méthodes une expression lambda sans instancier explicitement un `Func` déléguer.  
  
 Si vous avez un calcul coûteux que vous souhaitez exécuter uniquement si le résultat est réellement nécessaire, vous pouvez affecter à la fonction coûteuse à un <xref:System.Func%601> déléguer. L’exécution de la fonction peut alors être différée jusqu'à ce qu’une propriété qui accède à la valeur est utilisée dans une expression. L’exemple dans la section suivante montre comment effectuer cette opération.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser un délégué qui n’accepte aucun paramètre. Ce code crée une classe générique nommée `LazyValue` qui a un champ de type <xref:System.Func%601>. Ce champ délégué peut stocker une référence à n’importe quelle fonction qui retourne une valeur du type qui correspond au paramètre de type de la `LazyValue` objet. Le `LazyValue` type a également un `Value` propriété qui exécute la fonction (si elle n’a pas déjà été exécutée) et retourne la valeur résultante.  
  
 L’exemple crée deux méthodes et instancie deux `LazyValue` objets avec des expressions lambda qui appellent ces méthodes. Les expressions lambda ne prennent pas de paramètres, car ils doivent simplement appeler une méthode. Comme le montre la sortie, les deux méthodes sont exécutées uniquement lorsque la valeur de chaque `LazyValue` objet est récupéré.  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Expressions lambda (Guide de programmation C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Expressions lambda</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Délégués (Guide de programmation C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Délégués en Visual Basic</related>
  </Docs>
</Type>