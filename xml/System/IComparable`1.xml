<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ad58bbe6f970c82a7de71ab2688204451e6b35b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37728021" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Le type d’objet à comparer.</typeparam>
    <summary>Définit une méthode de comparaison généralisée qu'un type valeur ou une classe implémente pour créer une méthode de comparaison spécifique au type et permettant d'ordonnancer ou de trier ses instances.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette interface est implémentée par les types dont les valeurs peuvent être ordonnées ou triées et fournit une méthode de comparaison fortement typée pour classer les membres d’un objet de collection générique. Par exemple, un nombre peut être supérieur à un second nombre et une chaîne peut apparaître dans l’ordre alphabétique avant un autre. Types d’implémentation définissent une méthode unique, <xref:System.IComparable%601.CompareTo%28%600%29>, qui indique si la position de l’instance actuelle dans l’ordre de tri : avant, après ou identique à un deuxième objet du même type. En règle générale, la méthode n’est pas appelée directement à partir de code du développeur. Au lieu de cela, elle est appelée automatiquement par les méthodes telles que <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> et <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 En général, les types qui fournissent un <xref:System.IComparable%601> implémentation également implémenter le <xref:System.IEquatable%601> interface. Le <xref:System.IEquatable%601> interface définit le <xref:System.IEquatable%601.Equals%2A> (méthode), qui détermine l’égalité des instances du type d’implémentation.  
  
 L’implémentation de la <xref:System.IComparable%601.CompareTo%28%600%29> méthode doit retourner un <xref:System.Int32> qui a l’une des trois valeurs, comme indiqué dans le tableau suivant.  
  
|Value|Signification|  
|-----------|-------------|  
|Inférieure à zéro|Cet objet précède l’objet spécifié par le <xref:System.IComparable%601.CompareTo%2A> méthode dans l’ordre de tri.|  
|Zéro|L’instance actuelle se produit dans la même position dans l’ordre de tri que l’objet spécifié par le <xref:System.IComparable%601.CompareTo%2A> argument de méthode.|  
|Supérieure à zéro|Cette instance actuelle suit l’objet spécifié par le <xref:System.IComparable%601.CompareTo%2A> argument de méthode dans l’ordre de tri.|  
  
 Tous les types numériques (telles que <xref:System.Int32> et <xref:System.Double>) implémenter <xref:System.IComparable%601>, contrairement à <xref:System.String>, <xref:System.Char>, et <xref:System.DateTime>. Types personnalisés doivent également fournir leur propre implémentation de <xref:System.IComparable%601> pour permettre aux instances d’objet d’être ordonnées ou triées.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’implémentation de <xref:System.IComparable%601> pour une simple `Temperature` objet. L’exemple crée un <xref:System.Collections.Generic.SortedList%602> collection de chaînes avec `Temperature` clés de l’objet, et ajoute plusieurs paires de températures et de chaînes à la liste hors séquence. Dans l’appel à la <xref:System.Collections.Generic.SortedList%602.Add%2A> (méthode), le <xref:System.Collections.Generic.SortedList%602> collection utilise la <xref:System.IComparable%601> implémentation pour trier les entrées de liste, qui sont ensuite affichées par ordre croissant de température.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Remplacez le paramètre de type de la <see cref="T:System.IComparable`1" /> interface avec le type qui implémente cette interface.  Si vous implémentez <see cref="T:System.IComparable`1" />, vous devez surcharger les <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, et <see langword="op_LessThanOrEqual" /> opérateurs pour retourner des valeurs qui sont cohérents avec <see cref="M:System.IComparable`1.CompareTo(`0)" />. En outre, vous devez également implémenter <see cref="T:System.IEquatable`1" />. Consultez le <see cref="T:System.IEquatable`1" /> article pour obtenir des informations complètes.</para>
    </block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Objet à comparer à cette instance.</param>
        <summary>Compare l'instance actuelle avec un autre objet du même type et retourne un entier qui indique si l'instance actuelle précède ou suit un autre objet ou se trouve à la même position dans l'ordre de tri.</summary>
        <returns>Valeur qui indique l'ordre relatif des objets comparés. La valeur de retour a les significations suivantes : 
 <list type="table"><listheader><term> Valeur  </term><description> Signification  </description></listheader><item><term> Inférieure à zéro  </term><description> Cette instance précède <paramref name="other" /> dans l’ordre de tri.  </description></item><item><term> Zéro  </term><description> Cette instance se produit à la même position que <paramref name="other" /> dans l’ordre de tri.  </description></item><item><term> Supérieur à zéro  </term><description> Cette instance suit <paramref name="other" /> dans l’ordre de tri.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> Fournit une méthode de comparaison fortement typée pour classer les membres d’un objet de collection générique. Pour cette raison, il est en général pas appelée directement à partir de code du développeur. Au lieu de cela, elle est appelée automatiquement par les méthodes telles que <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> et <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Cette méthode est uniquement une définition et doit être implémentée par un type de classe ou une valeur spécifique pour que l’effet. La signification des comparaisons spécifiées dans les valeurs de retour section (« précède », « se produit dans la même position que » et « suit) dépend de l’implémentation particulière.  
  
 Par définition, n’importe quel objet compare supérieur `null`, et deux références null sont égales entre elles.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’implémentation de <xref:System.IComparable%601> pour une simple `Temperature` objet. L’exemple crée un <xref:System.Collections.Generic.SortedList%602> collection de chaînes avec `Temperature` clés de l’objet, et ajoute plusieurs paires de températures et de chaînes à la liste hors séquence. Dans l’appel à la <xref:System.Collections.Generic.SortedList%602.Add%2A> (méthode), le <xref:System.Collections.Generic.SortedList%602> collection utilise la <xref:System.IComparable%601> implémentation pour trier les entrées de liste, qui sont ensuite affichées par ordre croissant de température.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Pour les objets A, B et C, les éléments suivants doivent être remplies : <c>a.CompareTo (a)</c> est nécessaire pour retourner zéro.  Si <c>a.CompareTo (b)</c> retourne zéro, <c>b.CompareTo (a)</c> est nécessaire pour retourner zéro.  Si <c>a.CompareTo (b)</c> retourne la valeur zéro et <c>B.CompareTo(C)</c> retourne zéro, <c>a.CompareTo (c)</c> est nécessaire pour retourner zéro.  Si <c>a.CompareTo (b)</c> retourne une valeur différente de zéro, puis <c>b.CompareTo (a)</c> est nécessaire pour retourner une valeur du signe opposé.  Si <c>a.CompareTo (b)</c> retourne une valeur <paramref name="x" /> qui n’est pas égal à zéro, et <c>B.CompareTo(C)</c> retourne une valeur <paramref name="y" /> du même signe que <paramref name="x" />, puis <c>A. CompareTo(C)</c> est nécessaire pour retourner une valeur de la même signature que <paramref name="x" /> et <paramref name="y" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Utilisez le <see cref="M:System.IComparable`1.CompareTo(`0)" /> méthode pour déterminer l’ordre des instances d’une classe.</para>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>