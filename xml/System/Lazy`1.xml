<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a08e490433f3e23816cdfd6030b67d5925db996" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52590398" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="852a7-101">Type d’objet initialisé tardivement.</span><span class="sxs-lookup"><span data-stu-id="852a7-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="852a7-102">Prend en charge l'initialisation tardive.</span><span class="sxs-lookup"><span data-stu-id="852a7-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-103">Utilisez l’initialisation tardive pour différer la création d’un objet volumineux ou gourmandes en ressources ou l’exécution d’une tâche gourmande en ressources, en particulier lorsqu’une telle création ou exécution ne peut pas se produire pendant la durée de vie du programme.</span><span class="sxs-lookup"><span data-stu-id="852a7-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="852a7-104">Pour préparer l’initialisation tardive, vous créez une instance de <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="852a7-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="852a7-105">L’argument de type de la <xref:System.Lazy%601> objet que vous créez Spécifie le type de l’objet que vous souhaitez initialiser tardivement.</span><span class="sxs-lookup"><span data-stu-id="852a7-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="852a7-106">Le constructeur qui vous permet de créer le <xref:System.Lazy%601> objet détermine les caractéristiques de l’initialisation.</span><span class="sxs-lookup"><span data-stu-id="852a7-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="852a7-107">L’initialisation tardive se produit lors du premier accès à la propriété <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="852a7-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="852a7-108">Dans la plupart des cas, en choisissant un constructeur dépend de vos réponses aux deux questions :</span><span class="sxs-lookup"><span data-stu-id="852a7-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="852a7-109">L’objet initialisé tardivement est accessible à partir de plusieurs threads ?</span><span class="sxs-lookup"><span data-stu-id="852a7-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="852a7-110">Dans ce cas, le <xref:System.Lazy%601> objet peut créer le certificat sur n’importe quel thread.</span><span class="sxs-lookup"><span data-stu-id="852a7-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="852a7-111">Vous pouvez utiliser un des constructeurs simples dont le comportement par défaut consiste à créer un thread-safe <xref:System.Lazy%601> de l’objet, afin que seule une instance de l’objet instancié de manière différée est créée, quel que soit le nombre de threads essayez d’y accéder.</span><span class="sxs-lookup"><span data-stu-id="852a7-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="852a7-112">Pour créer un <xref:System.Lazy%601> objet qui n’est pas thread-safe, vous devez utiliser un constructeur qui vous permet de spécifier aucune sécurité des threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="852a7-113">Rendre le <xref:System.Lazy%601> objet thread-safe ne protège pas l’objet initialisé tardivement.</span><span class="sxs-lookup"><span data-stu-id="852a7-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="852a7-114">Si plusieurs threads peuvent accéder à l’objet initialisé tardivement, vous devez apporter ses propriétés et méthodes sécurisés pour l’accès multithread.</span><span class="sxs-lookup"><span data-stu-id="852a7-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="852a7-115">Initialisation tardive nécessite-t-il une grande quantité de code, ou l’objet initialisé tardivement ont un constructeur par défaut qui effectue tout ce dont vous avez besoin et ne lèvent des exceptions ?</span><span class="sxs-lookup"><span data-stu-id="852a7-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="852a7-116">Si vous avez besoin d’écrire du code d’initialisation ou si les exceptions doivent être traitées, utilisez un des constructeurs qui prend une méthode de fabrique.</span><span class="sxs-lookup"><span data-stu-id="852a7-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="852a7-117">Écrire votre code d’initialisation dans la méthode de fabrique.</span><span class="sxs-lookup"><span data-stu-id="852a7-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="852a7-118">Le tableau suivant montre le constructeur à choisir, en fonction de ces deux facteurs :</span><span class="sxs-lookup"><span data-stu-id="852a7-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="852a7-119">Objet est accessible par</span><span class="sxs-lookup"><span data-stu-id="852a7-119">Object will be accessed by</span></span>|<span data-ttu-id="852a7-120">Si aucun code d’initialisation n’est requis (constructeur par défaut), utilisez</span><span class="sxs-lookup"><span data-stu-id="852a7-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="852a7-121">Si le code d’initialisation est requis, utilisez</span><span class="sxs-lookup"><span data-stu-id="852a7-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="852a7-122">Plusieurs threads</span><span class="sxs-lookup"><span data-stu-id="852a7-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="852a7-123">Un thread</span><span class="sxs-lookup"><span data-stu-id="852a7-123">One thread</span></span>|<span data-ttu-id="852a7-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> avec `isThreadSafe` défini sur `false`.</span><span class="sxs-lookup"><span data-stu-id="852a7-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="852a7-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> avec `isThreadSafe` défini sur `false`.</span><span class="sxs-lookup"><span data-stu-id="852a7-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="852a7-126">Vous pouvez utiliser une expression lambda pour spécifier la méthode de fabrique.</span><span class="sxs-lookup"><span data-stu-id="852a7-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="852a7-127">Cela permet de conserver tout le code d’initialisation au même endroit.</span><span class="sxs-lookup"><span data-stu-id="852a7-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="852a7-128">L’expression lambda capture le contexte, y compris les arguments que vous passez au constructeur de l’objet initialisé tardivement.</span><span class="sxs-lookup"><span data-stu-id="852a7-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="852a7-129">**La mise en cache de l’exception** lorsque vous utilisez des méthodes de fabrique, les exceptions sont mises en cache.</span><span class="sxs-lookup"><span data-stu-id="852a7-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="852a7-130">Autrement dit, si la méthode de fabrique lève une heure de l’exception du premier un thread tente d’accéder à la <xref:System.Lazy%601.Value%2A> propriété de la <xref:System.Lazy%601> de l’objet, la même exception est levée à chaque tentative suivante.</span><span class="sxs-lookup"><span data-stu-id="852a7-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="852a7-131">Cela garantit que chaque appel à la <xref:System.Lazy%601.Value%2A> propriété produit le même résultat et permet d’éviter des erreurs subtiles qui peuvent survenir si différents threads obtiennent des résultats différents.</span><span class="sxs-lookup"><span data-stu-id="852a7-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="852a7-132">Le <xref:System.Lazy%601> est l’acronyme réel `T` qui sinon aurait été initialisé à un moment antérieur, généralement lors du démarrage.</span><span class="sxs-lookup"><span data-stu-id="852a7-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="852a7-133">Il est généralement irrécupérable d’une défaillance à ce point antérieur.</span><span class="sxs-lookup"><span data-stu-id="852a7-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="852a7-134">S’il existe un risque potentiel pour une erreur récupérable, nous vous recommandons de générer la logique de nouvelle tentative dans la routine d’initialisation (dans ce cas, la méthode de fabrique), comme vous le feriez si vous n’utilisiez l’initialisation tardive.</span><span class="sxs-lookup"><span data-stu-id="852a7-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="852a7-135">**Alternative au verrouillage** dans certaines situations, vous souhaiterez peut-être éviter la surcharge de la <xref:System.Lazy%601> comportement de verrouillage par défaut de l’objet.</span><span class="sxs-lookup"><span data-stu-id="852a7-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="852a7-136">Dans de rares cas, il existe peut-être des interblocages.</span><span class="sxs-lookup"><span data-stu-id="852a7-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="852a7-137">Dans ce cas, vous pouvez utiliser la <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> ou <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructeur et spécifiez <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="852a7-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="852a7-138">Cela permet la <xref:System.Lazy%601> objet pour créer une copie de l’objet initialisé tardivement sur chacun de plusieurs threads si les threads appellent le <xref:System.Lazy%601.Value%2A> propriété simultanément.</span><span class="sxs-lookup"><span data-stu-id="852a7-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="852a7-139">Le <xref:System.Lazy%601> objet garantit que tous les threads utilisent la même instance de l’objet initialisé tardivement et qu’il rejette les instances qui ne sont pas utilisés.</span><span class="sxs-lookup"><span data-stu-id="852a7-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="852a7-140">Par conséquent, le coût de réduire la surcharge de verrouillage est que votre programme peut parfois créer et à éliminer des copies supplémentaires d’un objet coûteux.</span><span class="sxs-lookup"><span data-stu-id="852a7-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="852a7-141">Dans la plupart des cas, il est peu probable.</span><span class="sxs-lookup"><span data-stu-id="852a7-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="852a7-142">Les exemples pour le <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> et <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructeurs illustrent ce comportement.</span><span class="sxs-lookup"><span data-stu-id="852a7-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="852a7-143">Lorsque vous spécifiez <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, les exceptions sont jamais mises en cache, même si vous spécifiez une méthode de fabrique.</span><span class="sxs-lookup"><span data-stu-id="852a7-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="852a7-144">**Constructeurs équivalents** en plus de permettre l’utilisation de <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, le <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> et <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructeurs peuvent dupliquer les fonctionnalités des autres constructeurs.</span><span class="sxs-lookup"><span data-stu-id="852a7-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="852a7-145">Le tableau suivant montre les valeurs de paramètre qui produisent un comportement équivalent.</span><span class="sxs-lookup"><span data-stu-id="852a7-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="852a7-146">Pour créer un <xref:System.Lazy%601> qui est l’objet</span><span class="sxs-lookup"><span data-stu-id="852a7-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="852a7-147">Pour les constructeurs qui ont un `LazyThreadSafetyMode` `mode` paramètre, la valeur `mode` à</span><span class="sxs-lookup"><span data-stu-id="852a7-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="852a7-148">Pour les constructeurs qui ont une valeur booléenne `isThreadSafe` paramètre, la valeur `isThreadSafe` à</span><span class="sxs-lookup"><span data-stu-id="852a7-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="852a7-149">Pour les constructeurs sans paramètres de sécurité de thread</span><span class="sxs-lookup"><span data-stu-id="852a7-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="852a7-150">Entièrement les thread-safe ; utilise le verrouillage pour vous assurer que seul un thread initialise la valeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="852a7-151">Tous les constructeurs de ce type sont entièrement thread-safe.</span><span class="sxs-lookup"><span data-stu-id="852a7-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="852a7-152">Pas thread-safe.</span><span class="sxs-lookup"><span data-stu-id="852a7-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="852a7-153">Non applicable.</span><span class="sxs-lookup"><span data-stu-id="852a7-153">Not applicable.</span></span>|  
|<span data-ttu-id="852a7-154">Entièrement les thread-safe ; concurrence de threads pour initialiser la valeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="852a7-155">Non applicable.</span><span class="sxs-lookup"><span data-stu-id="852a7-155">Not applicable.</span></span>|<span data-ttu-id="852a7-156">Non applicable.</span><span class="sxs-lookup"><span data-stu-id="852a7-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="852a7-157">**Autres fonctionnalités** pour plus d’informations sur l’utilisation de <xref:System.Lazy%601> avec les champs thread-static, ou en tant que magasin de stockage pour les propriétés, consultez [l’initialisation tardive](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="852a7-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="852a7-158">L’exemple suivant illustre l’utilisation de la <xref:System.Lazy%601> classe pour fournir l’initialisation tardive avec accès à partir de plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-159">L’exemple utilise le <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="852a7-160">Il illustre également l’utilisation de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructeur (spécifiant `true` pour `isThreadSafe`) et le <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructeur (spécifiant <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> pour `mode`).</span><span class="sxs-lookup"><span data-stu-id="852a7-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="852a7-161">Pour basculer vers un autre constructeur, modifiez simplement les constructeurs sont commentées.</span><span class="sxs-lookup"><span data-stu-id="852a7-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="852a7-162">Pour obtenir un exemple qui illustre l’exception, la mise en cache à l’aide des constructeurs de mêmes, consultez le <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="852a7-163">L'exemple définit une classe `LargeObject` qui sera initialisée tardivement par l'un des nombreux threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="852a7-164">Les quatre principales sections de code illustrent la création de l’initialiseur, la méthode de fabrique, l’initialisation réelle et le constructeur de la `LargeObject` (classe), qui affiche un message lorsque l’objet est créé.</span><span class="sxs-lookup"><span data-stu-id="852a7-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="852a7-165">Au début de la méthode `Main`, l'exemple crée l'initialiseur de type lazy thread-safe pour `LargeObject` :</span><span class="sxs-lookup"><span data-stu-id="852a7-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="852a7-166">La méthode de fabrique illustre la création de l’objet, avec un espace réservé pour une initialisation supplémentaire :</span><span class="sxs-lookup"><span data-stu-id="852a7-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="852a7-167">Notez que les sections de code tout d’abord deux peuvent être combinées à l’aide d’une fonction lambda, comme illustré ici :</span><span class="sxs-lookup"><span data-stu-id="852a7-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="852a7-168">L’exemple met en pause, pour indiquer qu’une période indéterminée peut-être s’écouler avant l’initialisation tardive se produit.</span><span class="sxs-lookup"><span data-stu-id="852a7-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="852a7-169">Quand vous appuyez sur la **entrée** clé, l’exemple crée et démarre trois threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="852a7-170">Le `ThreadProc` méthode qui est utilisée par tous les appels de trois threads le <xref:System.Lazy%601.Value%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="852a7-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="852a7-171">La première fois dans ce cas, le `LargeObject` instance est créée :</span><span class="sxs-lookup"><span data-stu-id="852a7-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="852a7-172">Le constructeur de la `LargeObject` (classe), qui inclut la dernière section clée du code, affiche un message et enregistre l’identité du thread lors de l’initialisation.</span><span class="sxs-lookup"><span data-stu-id="852a7-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="852a7-173">La sortie du programme s’affiche à la fin de la liste de code complet.</span><span class="sxs-lookup"><span data-stu-id="852a7-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="852a7-174">Pour plus de simplicité, cet exemple utilise une instance globale de <xref:System.Lazy%601> et toutes les méthodes sont `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="852a7-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="852a7-175">Ce ne sont pas des exigences pour l’utilisation de l’initialisation tardive.</span><span class="sxs-lookup"><span data-stu-id="852a7-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="852a7-176">Par défaut, tous les membres publics et protégés de la <see cref="T:System.Lazy`1" /> classe sont thread-safe et peuvent être utilisés simultanément par plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="852a7-177">Ces garanties de sécurité des threads peuvent être éventuellement supprimées par instance, à l’aide des paramètres pour les constructeurs du type.</span><span class="sxs-lookup"><span data-stu-id="852a7-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="852a7-178">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="852a7-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="852a7-179">Initialise une nouvelle instance de la classe <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="852a7-180">Initialise une nouvelle instance de la classe <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="852a7-181">Quand l’initialisation tardive se produit, le constructeur par défaut du type cible est utilisé.</span><span class="sxs-lookup"><span data-stu-id="852a7-181">When lazy initialization occurs, the default constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-182">Une instance est créée avec ce constructeur peut-être être utilisée simultanément par plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="852a7-183">Le mode de sécurité des threads d’un <xref:System.Lazy%601> instance qui est initialisée avec ce constructeur est <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="852a7-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="852a7-184">Le mode de sécurité des threads décrit le comportement lorsque plusieurs threads essaient d’initialiser le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="852a7-185">Un <xref:System.Lazy%601> instance est créée avec ce constructeur ne met pas en cache les exceptions.</span><span class="sxs-lookup"><span data-stu-id="852a7-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="852a7-186">Pour plus d'informations, consultez la classe <xref:System.Lazy%601> ou l'énumération <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="852a7-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="852a7-187">L’exemple suivant illustre l’utilisation de ce constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="852a7-188">Il illustre également l’utilisation de la <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructeur (spécifiant `true` pour `isThreadSafe`) et le <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructeur (spécifiant <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> pour `mode`).</span><span class="sxs-lookup"><span data-stu-id="852a7-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="852a7-189">Pour basculer vers un autre constructeur, modifiez simplement les constructeurs sont commentées.</span><span class="sxs-lookup"><span data-stu-id="852a7-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="852a7-190">L'exemple définit une classe `LargeObject` qui sera initialisée tardivement par l'un des nombreux threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="852a7-191">Les deux principales lignes de code dans cet exemple sont la création de l’initialiseur et l’initialisation réelle.</span><span class="sxs-lookup"><span data-stu-id="852a7-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="852a7-192">Au début de la méthode `Main`, l'exemple crée l'initialiseur de type lazy thread-safe pour `LargeObject` :</span><span class="sxs-lookup"><span data-stu-id="852a7-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="852a7-193">L’exemple crée et démarre trois threads se bloquent sur un <xref:System.Threading.ManualResetEvent> de l’objet, afin que l’exemple peut libérer les threads à la fois.</span><span class="sxs-lookup"><span data-stu-id="852a7-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="852a7-194">Le `ThreadProc` méthode qui est utilisée par tous les appels de trois threads le <xref:System.Lazy%601.Value%2A> propriété à obtenir le `LargeObject` instance :</span><span class="sxs-lookup"><span data-stu-id="852a7-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="852a7-195">Le <xref:System.Lazy%601> classe fournit le verrouillage, afin que seul un thread est autorisé à créer le `LargeObject` instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="852a7-196">L’exemple montre que tous les autres threads obtiennent la même instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-197">Pour plus de simplicité, cet exemple utilise une instance globale de <xref:System.Lazy%601> et toutes les méthodes sont `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="852a7-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="852a7-198">Ce ne sont pas des exigences pour l’utilisation de l’initialisation tardive.</span><span class="sxs-lookup"><span data-stu-id="852a7-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="852a7-199">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="852a7-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="852a7-200"><see langword="true" /> pour rendre cette instance utilisable simultanément par plusieurs threads ; <see langword="false" /> pour rendre l’instance utilisable par un seul thread à la fois.</span><span class="sxs-lookup"><span data-stu-id="852a7-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="852a7-201">Initialise une nouvelle instance de la classe <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="852a7-202">Quand une initialisation tardive se produit, le constructeur par défaut du type cible et le mode d’initialisation spécifié sont utilisés.</span><span class="sxs-lookup"><span data-stu-id="852a7-202">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-203">Le mode de sécurité des threads d’un <xref:System.Lazy%601> instance qui est initialisée avec ce constructeur est <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> si `isThreadSafe` est `true`; sinon, le mode est <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="852a7-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="852a7-204">Le mode de sécurité des threads décrit le comportement lorsque plusieurs threads essaient d’initialiser le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="852a7-205">Pour spécifier le <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, utilisez le <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> ou <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="852a7-206">Un <xref:System.Lazy%601> instance est créée avec ce constructeur ne met pas en cache les exceptions.</span><span class="sxs-lookup"><span data-stu-id="852a7-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="852a7-207">Pour plus d'informations, consultez la classe <xref:System.Lazy%601> ou l'énumération <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="852a7-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="852a7-208">L’exemple suivant illustre l’utilisation de ce constructeur pour créer un initialiseur de type lazy qui n’est pas thread-safe, pour les scénarios où tous les accès à l’objet initialisé tardivement se produit sur le même thread.</span><span class="sxs-lookup"><span data-stu-id="852a7-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="852a7-209">Il illustre également l’utilisation de la <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructeur (spécifiant <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> pour `mode`.</span><span class="sxs-lookup"><span data-stu-id="852a7-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="852a7-210">Pour basculer vers un autre constructeur, modifiez simplement le constructeur est commenté.</span><span class="sxs-lookup"><span data-stu-id="852a7-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-211">Pour le code qui montre comment utiliser ce constructeur dans les scénarios multithreads (spécifiant `true` pour `isThreadSafe`), consultez l’exemple de la <xref:System.Lazy%601.%23ctor> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="852a7-212">L’exemple définit un `LargeObject` classe sera initialisée tardivement.</span><span class="sxs-lookup"><span data-stu-id="852a7-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="852a7-213">Dans le `Main` (méthode), l’exemple crée un <xref:System.Lazy%601> instance, puis s’arrête.</span><span class="sxs-lookup"><span data-stu-id="852a7-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="852a7-214">Quand vous appuyez sur la **entrée** clé, l’exemple accède à la <xref:System.Lazy%601.Value%2A> propriété de la <xref:System.Lazy%601> instance, ce qui provoque l’initialisation se produise.</span><span class="sxs-lookup"><span data-stu-id="852a7-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="852a7-215">Le constructeur de la `LargeObject` classe affiche un message de console.</span><span class="sxs-lookup"><span data-stu-id="852a7-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-216">Pour plus de simplicité, cet exemple utilise une instance globale de <xref:System.Lazy%601> et toutes les méthodes sont `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="852a7-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="852a7-217">Ce ne sont pas des exigences pour l’utilisation de l’initialisation tardive.</span><span class="sxs-lookup"><span data-stu-id="852a7-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="852a7-218">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="852a7-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="852a7-219">Délégué qui est appelé pour produire la valeur initialisée tardivement si nécessaire.</span><span class="sxs-lookup"><span data-stu-id="852a7-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="852a7-220">Initialise une nouvelle instance de la classe <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="852a7-221">Quand l’initialisation tardive se produit, la fonction d’initialisation spécifiée est utilisée.</span><span class="sxs-lookup"><span data-stu-id="852a7-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-222">Une instance est créée avec ce constructeur peut-être être utilisée simultanément par plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="852a7-223">Le mode de sécurité des threads d’un <xref:System.Lazy%601> instance qui est initialisée avec ce constructeur est <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="852a7-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="852a7-224">Le mode de sécurité des threads décrit le comportement lorsque plusieurs threads essaient d’initialiser le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="852a7-225">Les exceptions levées par `valueFactory` sont mis en cache.</span><span class="sxs-lookup"><span data-stu-id="852a7-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="852a7-226">Pour plus d'informations, consultez la classe <xref:System.Lazy%601> ou l'énumération <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="852a7-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="852a7-227">L’exemple suivant illustre l’utilisation de ce constructeur pour fournir l’initialisation tardive avec la mise en cache de l’exception.</span><span class="sxs-lookup"><span data-stu-id="852a7-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="852a7-228">Il illustre également l’utilisation de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructeur (spécifiant `true` pour `isThreadSafe`) et le <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructeur (spécifiant <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> pour `mode`).</span><span class="sxs-lookup"><span data-stu-id="852a7-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="852a7-229">Pour basculer vers un autre constructeur, modifiez simplement les constructeurs sont commentées.</span><span class="sxs-lookup"><span data-stu-id="852a7-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="852a7-230">L'exemple définit une classe `LargeObject` qui sera initialisée tardivement par l'un des nombreux threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="852a7-231">Les trois principales sections de code illustrent la création de l’initialiseur, l’initialisation réelle et le constructeur de la `LargeObject` (classe), qui montre la mise en cache de l’exception.</span><span class="sxs-lookup"><span data-stu-id="852a7-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="852a7-232">Au début de la méthode `Main`, l'exemple crée l'initialiseur de type lazy thread-safe pour `LargeObject` :</span><span class="sxs-lookup"><span data-stu-id="852a7-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="852a7-233">L’exemple crée et démarre trois threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-233">The example creates and starts three threads.</span></span> <span data-ttu-id="852a7-234">Le `ThreadProc` méthode qui est utilisée par tous les appels de trois threads le <xref:System.Lazy%601.Value%2A> propriété à obtenir le `LargeObject` instance :</span><span class="sxs-lookup"><span data-stu-id="852a7-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="852a7-235">Dans le constructeur de la `LargeObject` (classe), la troisième section clée du code lève une exception de la première fois un `LargeObject` instance est créée, mais par la suite permet la création d’instance se produise :</span><span class="sxs-lookup"><span data-stu-id="852a7-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="852a7-236">Lorsque l’exemple est exécuté, le premier thread qui tente de créer une instance de `LargeObject` échoue et l’exception est interceptée.</span><span class="sxs-lookup"><span data-stu-id="852a7-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="852a7-237">Vous pouvez attendre que le thread suivant créerait avec succès une instance, mais le <xref:System.Lazy%601> objet a mis en cache de l’exception.</span><span class="sxs-lookup"><span data-stu-id="852a7-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="852a7-238">Pour cette raison, les trois threads lèvent l’exception.</span><span class="sxs-lookup"><span data-stu-id="852a7-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-239">Pour plus de simplicité, cet exemple utilise une instance globale de <xref:System.Lazy%601> et toutes les méthodes sont `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="852a7-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="852a7-240">Ce ne sont pas des exigences pour l’utilisation de l’initialisation tardive.</span><span class="sxs-lookup"><span data-stu-id="852a7-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="852a7-241"><paramref name="valueFactory" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="852a7-242">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="852a7-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="852a7-243">Une des valeurs d’énumération qui spécifie le mode de cohérence de thread.</span><span class="sxs-lookup"><span data-stu-id="852a7-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="852a7-244">Initialise une nouvelle instance de la classe <see cref="T:System.Lazy`1" /> qui utilise le constructeur par défaut de <paramref name="T" /> et le mode de cohérence de thread spécifié.</span><span class="sxs-lookup"><span data-stu-id="852a7-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-245">Le mode de sécurité des threads d’un <xref:System.Lazy%601> instance décrit le comportement lorsque plusieurs threads essaient d’initialiser le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="852a7-246">Un <xref:System.Lazy%601> instance est créée avec ce constructeur ne met pas en cache les exceptions.</span><span class="sxs-lookup"><span data-stu-id="852a7-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="852a7-247">Pour plus d'informations, consultez la classe <xref:System.Lazy%601> ou l'énumération <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="852a7-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="852a7-248">L’exemple suivant illustre l’utilisation de ce constructeur pour créer un initialiseur de type lazy qui permet à plusieurs threads à concurrence pour créer un objet de manière différée.</span><span class="sxs-lookup"><span data-stu-id="852a7-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="852a7-249">Plusieurs threads peuvent réussir à créer des instances, mais tous les threads utilisent l’instance qui a été créé en premier.</span><span class="sxs-lookup"><span data-stu-id="852a7-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-250">Pour obtenir un exemple qui montre comment utiliser ce constructeur dans les scénarios mono-thread (en spécifiant <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> pour `mode`), consultez le <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="852a7-251">Pour obtenir un exemple qui montre comment utiliser ce constructeur pour permettre un verrouillage au lieu de conditions de concurrence dans les scénarios multithreads (spécifiant <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> pour `mode`), consultez le <xref:System.Lazy%601.%23ctor> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="852a7-252">L’exemple définit un `LargeObject` classe sera initialisée tardivement par une de plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="852a7-253">Les trois principales sections de code illustrent la création de l’initialiseur, l’initialisation réelle et que le constructeur et le finaliseur de la `LargeObject` classe.</span><span class="sxs-lookup"><span data-stu-id="852a7-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="852a7-254">Au début de la `Main` (méthode), l’exemple crée le <xref:System.Lazy%601> objet qui effectue l’initialisation tardive de la `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="852a7-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="852a7-255">L’exemple crée et démarre trois threads se bloquent sur un <xref:System.Threading.ManualResetEvent> de l’objet, afin que l’exemple peut libérer les threads à la fois.</span><span class="sxs-lookup"><span data-stu-id="852a7-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="852a7-256">Dans le `ThreadProc` méthode qui est utilisée par les trois threads, en appelant le <xref:System.Lazy%601.Value%2A> propriété crée les `LargeObject` instance :</span><span class="sxs-lookup"><span data-stu-id="852a7-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="852a7-257">Étant donné que le constructeur de la <xref:System.Lazy%601> instance spécifiée <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, tous les trois threads sont autorisés à créer `LargeObject` instances.</span><span class="sxs-lookup"><span data-stu-id="852a7-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="852a7-258">L’exemple illustre cela en affichant des messages de la console dans le constructeur et le finaliseur de la `LargeObject` classe :</span><span class="sxs-lookup"><span data-stu-id="852a7-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="852a7-259">Toutefois, le <xref:System.Lazy%601> objet garantit que seule une instance est utilisée par tous les threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="852a7-260">La sortie de l’exemple montre que les trois threads utilisent la même instance et indique que les deux autres instances peuvent être récupérées par le garbage collection.</span><span class="sxs-lookup"><span data-stu-id="852a7-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-261">Pour plus de simplicité, cet exemple utilise une instance globale de <xref:System.Lazy%601> et toutes les méthodes sont `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="852a7-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="852a7-262">Ce ne sont pas des exigences pour l’utilisation de l’initialisation tardive.</span><span class="sxs-lookup"><span data-stu-id="852a7-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="852a7-263"><paramref name="mode" /> contient une valeur non valide.</span><span class="sxs-lookup"><span data-stu-id="852a7-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="852a7-264">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="852a7-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="852a7-265">Délégué qui est appelé pour produire la valeur initialisée tardivement si nécessaire.</span><span class="sxs-lookup"><span data-stu-id="852a7-265">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="852a7-266"><see langword="true" /> pour que cette instance puisse être utilisée simultanément par plusieurs threads ; <see langword="false" /> pour que l’instance ne puisse être utilisée que par un thread à la fois.</span><span class="sxs-lookup"><span data-stu-id="852a7-266"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="852a7-267">Initialise une nouvelle instance de la classe <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-267">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="852a7-268">Quand l’initialisation tardive se produit, la fonction d’initialisation spécifiée et le mode d’initialisation sont utilisés.</span><span class="sxs-lookup"><span data-stu-id="852a7-268">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-269">Le mode de sécurité des threads d’un <xref:System.Lazy%601> instance qui est initialisée avec ce constructeur est <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> si `isThreadSafe` est `true`; sinon, le mode est <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="852a7-269">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="852a7-270">Le mode de sécurité des threads décrit le comportement lorsque plusieurs threads essaient d’initialiser le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-270">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="852a7-271">Pour spécifier le <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, utilisez le <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> ou <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-271">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="852a7-272">Les exceptions levées par `valueFactory` sont mis en cache.</span><span class="sxs-lookup"><span data-stu-id="852a7-272">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="852a7-273">Pour plus d'informations, consultez la classe <xref:System.Lazy%601> ou l'énumération <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="852a7-273">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="852a7-274">L’exemple suivant illustre l’utilisation de ce constructeur pour fournir l’initialisation tardive avec l’exception de la mise en cache dans un scénario avec un seul thread.</span><span class="sxs-lookup"><span data-stu-id="852a7-274">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="852a7-275">Il illustre également l’utilisation de la <xref:System.Lazy%601.%23ctor%2A> constructeur (spécifiant <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> pour `mode`).</span><span class="sxs-lookup"><span data-stu-id="852a7-275">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="852a7-276">Pour basculer vers ce constructeur, modifiez simplement le constructeur est commenté.</span><span class="sxs-lookup"><span data-stu-id="852a7-276">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-277">Pour le code qui montre comment utiliser ce constructeur dans les scénarios multithreads (spécifiant `true` pour `isThreadSafe`), consultez l’exemple de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-277">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="852a7-278">L'exemple définit une classe `LargeObject` qui sera initialisée tardivement par l'un des nombreux threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-278">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="852a7-279">Les trois principales sections de code illustrent la création de l’initialiseur, l’initialisation réelle et le constructeur de la `LargeObject` (classe), qui montre la mise en cache de l’exception.</span><span class="sxs-lookup"><span data-stu-id="852a7-279">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="852a7-280">Au début de la méthode `Main`, l'exemple crée l'initialiseur de type lazy thread-safe pour `LargeObject` :</span><span class="sxs-lookup"><span data-stu-id="852a7-280">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="852a7-281">Dans l’appel au constructeur, le `isThreadSafe` paramètre est `false`, la <xref:System.Lazy%601> n’est pas thread-safe.</span><span class="sxs-lookup"><span data-stu-id="852a7-281">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="852a7-282">Comme il n’est pas thread-safe, l’exemple appelle la <xref:System.Lazy%601.Value%2A> propriété trois fois sur le même thread :</span><span class="sxs-lookup"><span data-stu-id="852a7-282">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="852a7-283">Dans le constructeur de la `LargeObject` (classe), la troisième section clée du code lève une exception de la première fois un `LargeObject` instance est créée, mais par la suite permet la création d’instance se produise :</span><span class="sxs-lookup"><span data-stu-id="852a7-283">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="852a7-284">Lorsque l’exemple est exécuté, la première tentative pour créer une instance de `LargeObject` échoue et l’exception est interceptée.</span><span class="sxs-lookup"><span data-stu-id="852a7-284">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="852a7-285">Vous pouvez attendre que la tentative suivante réussira, mais le <xref:System.Lazy%601> objet a mis en cache de l’exception.</span><span class="sxs-lookup"><span data-stu-id="852a7-285">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="852a7-286">Pour cette raison, les trois tentatives lèvent l’exception.</span><span class="sxs-lookup"><span data-stu-id="852a7-286">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-287">Pour plus de simplicité, cet exemple utilise une instance globale de <xref:System.Lazy%601> et toutes les méthodes sont `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="852a7-287">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="852a7-288">Ce ne sont pas des exigences pour l’utilisation de l’initialisation tardive.</span><span class="sxs-lookup"><span data-stu-id="852a7-288">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="852a7-289"><paramref name="valueFactory" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-289"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="852a7-290">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="852a7-290">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="852a7-291">Délégué qui est appelé pour produire la valeur initialisée tardivement si nécessaire.</span><span class="sxs-lookup"><span data-stu-id="852a7-291">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="852a7-292">Une des valeurs d’énumération qui spécifie le mode de cohérence de thread.</span><span class="sxs-lookup"><span data-stu-id="852a7-292">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="852a7-293">Initialise une nouvelle instance de la classe <see cref="T:System.Lazy`1" /> qui utilise la fonction d’initialisation et le mode de cohérence de thread spécifiés.</span><span class="sxs-lookup"><span data-stu-id="852a7-293">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-294">Le mode de sécurité des threads d’un <xref:System.Lazy%601> instance décrit le comportement lorsque plusieurs threads essaient d’initialiser le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-294">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="852a7-295">Les exceptions levées par `valueFactory` sont mis en cache, sauf si `mode` est <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="852a7-295">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="852a7-296">Pour plus d'informations, consultez la classe <xref:System.Lazy%601> ou l'énumération <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="852a7-296">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="852a7-297">L’exemple suivant illustre l’utilisation de ce constructeur pour créer un initialiseur de type lazy qui permet à plusieurs threads à concurrence pour créer un objet de manière différée.</span><span class="sxs-lookup"><span data-stu-id="852a7-297">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="852a7-298">Plusieurs threads peuvent réussir à créer des instances, mais tous les threads utilisent l’instance qui a été créé en premier.</span><span class="sxs-lookup"><span data-stu-id="852a7-298">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="852a7-299">En outre, l’exemple montre que les exceptions ne sont jamais être mis en cache lorsque vous spécifiez <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, même si l’initialisation est effectuée par une fonction au lieu de par le constructeur par défaut du type créé de manière différée.</span><span class="sxs-lookup"><span data-stu-id="852a7-299">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-300">Pour obtenir un exemple qui montre comment utiliser ce constructeur dans les scénarios mono-thread (en spécifiant <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> pour `mode`), consultez le <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-300">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="852a7-301">Pour obtenir un exemple qui montre comment utiliser ce constructeur pour permettre un verrouillage au lieu de conditions de concurrence dans les scénarios multithreads (spécifiant <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> pour `mode`), consultez le <xref:System.Lazy%601.%23ctor> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-301">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="852a7-302">L’exemple définit un `LargeObject` classe sera initialisée tardivement par une de plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="852a7-302">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="852a7-303">Les quatre principales sections de code illustrent la création de l’initialiseur, l’initialisation réelle, la fonction d’initialisation et le constructeur et le finaliseur de la `LargeObject` classe.</span><span class="sxs-lookup"><span data-stu-id="852a7-303">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="852a7-304">Au début de la `Main` (méthode), l’exemple crée le <xref:System.Lazy%601> objet qui effectue l’initialisation tardive de la `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="852a7-304">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="852a7-305">L’initialiseur de type lazy utilise une fonction pour effectuer l’initialisation.</span><span class="sxs-lookup"><span data-stu-id="852a7-305">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="852a7-306">Dans ce cas, une fonction est nécessaire, car il n’existe aucun constructeur par défaut pour le `LargeObject` classe.</span><span class="sxs-lookup"><span data-stu-id="852a7-306">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="852a7-307">L’exemple crée et démarre trois threads se bloquent sur un <xref:System.Threading.ManualResetEvent> de l’objet, afin que l’exemple peut libérer les threads à la fois.</span><span class="sxs-lookup"><span data-stu-id="852a7-307">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="852a7-308">Dans le `ThreadProc` méthode qui est utilisée par les trois threads, en appelant le <xref:System.Lazy%601.Value%2A> propriété crée les `LargeObject` instance :</span><span class="sxs-lookup"><span data-stu-id="852a7-308">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="852a7-309">Dans la troisième section clée du code, la fonction de l’initialisation tardive est appelée pour créer le `LargeObject` instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-309">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="852a7-310">La fonction lève une exception, le premier appel :</span><span class="sxs-lookup"><span data-stu-id="852a7-310">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="852a7-311">Avec n’importe quel autre <xref:System.Threading.LazyThreadSafetyMode> définition, une exception non gérée dans la fonction d’initialisation est mise en cache.</span><span class="sxs-lookup"><span data-stu-id="852a7-311">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="852a7-312">Toutefois, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> supprime la mise en cache de l’exception.</span><span class="sxs-lookup"><span data-stu-id="852a7-312">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="852a7-313">La sortie de l’exemple montre qu’une nouvelle tentative pour initialiser l’objet réussit.</span><span class="sxs-lookup"><span data-stu-id="852a7-313">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-314">Le message d’exception s’affiche généralement après les messages indiquant que les autres threads ont initialisé avec succès de l’objet.</span><span class="sxs-lookup"><span data-stu-id="852a7-314">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="852a7-315">Il s’agit en raison de la latence introduite par la levée et l’interception de l’exception.</span><span class="sxs-lookup"><span data-stu-id="852a7-315">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="852a7-316">Étant donné que le constructeur de la <xref:System.Lazy%601> instance spécifiée <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, tous les trois threads sont autorisés à créer `LargeObject` instances.</span><span class="sxs-lookup"><span data-stu-id="852a7-316">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="852a7-317">L’exemple illustre cela en affichant des messages de la console dans le constructeur et le finaliseur de la `LargeObject` classe :</span><span class="sxs-lookup"><span data-stu-id="852a7-317">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="852a7-318">Le <xref:System.Lazy%601> objet garantit que seule une instance est utilisée par tous les threads (, sauf celui où la fonction d’initialisation lève une exception).</span><span class="sxs-lookup"><span data-stu-id="852a7-318">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="852a7-319">La sortie de l’exemple illustre ce point.</span><span class="sxs-lookup"><span data-stu-id="852a7-319">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="852a7-320">Pour plus de simplicité, cet exemple utilise une instance globale de <xref:System.Lazy%601> et toutes les méthodes sont `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="852a7-320">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="852a7-321">Ce ne sont pas des exigences pour l’utilisation de l’initialisation tardive.</span><span class="sxs-lookup"><span data-stu-id="852a7-321">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="852a7-322"><paramref name="mode" /> contient une valeur non valide.</span><span class="sxs-lookup"><span data-stu-id="852a7-322"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="852a7-323"><paramref name="valueFactory" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-323"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="852a7-324">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="852a7-324">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="852a7-325">Obtient une valeur qui indique si une valeur a été créée pour cette instance de <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-325">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="852a7-326"><see langword="true" /> si une valeur a été créée pour cette instance de <see cref="T:System.Lazy`1" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-326"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-327">Lorsque l’initialisation tardive se produit pour un <xref:System.Lazy%601> instance, cela peut entraîner une valeur en cours de création ou une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="852a7-327">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="852a7-328">Si une exception est levé, le comportement suivant de la <xref:System.Lazy%601> instance varie selon que la mise en cache de l’exception est en vigueur.</span><span class="sxs-lookup"><span data-stu-id="852a7-328">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="852a7-329">Si le <xref:System.Lazy%601> instance a été créée à l’aide d’un constructeur qui ne spécifie pas une fonction d’initialisation, puis la mise en cache de l’exception n’est pas en vigueur.</span><span class="sxs-lookup"><span data-stu-id="852a7-329">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="852a7-330">Une nouvelle tentative pour initialiser le <xref:System.Lazy%601> peut réussir et après l’initialisation réussie du <xref:System.Lazy%601.IsValueCreated%2A> retourne de la propriété `true`.</span><span class="sxs-lookup"><span data-stu-id="852a7-330">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="852a7-331">Si le <xref:System.Lazy%601> instance a été créée avec une fonction d’initialisation (spécifié par le `valueFactory` paramètre de la <xref:System.Lazy%601> constructeur), puis la mise en cache de l’exception est contrôlée par le mode de cohérence de thread.</span><span class="sxs-lookup"><span data-stu-id="852a7-331">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="852a7-332">Si le mode est <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> ou <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, il n’existe pas de deuxième chance pour initialiser le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-332">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="852a7-333">Si une exception se produit et n’est pas gérée dans la fonction d’initialisation, cette exception est mis en cache et levée à nouveau lors des accès de le <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="852a7-333">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="852a7-334">Aucune valeur n’est créée si une exception est levée, donc dans ce cas <xref:System.Lazy%601.IsValueCreated%2A> retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="852a7-334">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="852a7-335">Si le mode est <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, le premier thread qui réussit l’exécution de la fonction d’initialisation (ou le constructeur par défaut) crée la valeur pour le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="852a7-336">Si la fonction d’initialisation lève une exception sur un thread, les autres threads peuvent toujours essayer d’initialiser le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-336">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="852a7-337">Jusqu'à ce que la valeur est créée, le <xref:System.Lazy%601.IsValueCreated%2A> retourne de la propriété `false`.</span><span class="sxs-lookup"><span data-stu-id="852a7-337">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="852a7-338">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="852a7-338">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="852a7-339">Crée et retourne une représentation sous forme de chaîne de la propriété <see cref="P:System.Lazy`1.Value" /> pour cette instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-339">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="852a7-340">Résultat de l’appel de la méthode <see cref="M:System.Object.ToString" /> sur la propriété <see cref="P:System.Lazy`1.Value" /> pour cette instance, si la valeur a été créée (autrement dit, si la propriété <see cref="P:System.Lazy`1.IsValueCreated" /> retourne <see langword="true" />).</span><span class="sxs-lookup"><span data-stu-id="852a7-340">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="852a7-341">Sinon, chaîne indiquant que la valeur n’a pas été créée.</span><span class="sxs-lookup"><span data-stu-id="852a7-341">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-342">Appel de cette méthode ne provoque pas l’initialisation.</span><span class="sxs-lookup"><span data-stu-id="852a7-342">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="852a7-343">Le <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriété peut être `null` après l’initialisation différée si la méthode de fabrique qui a été spécifié pour le `valueFactory` paramètre de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, ou <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructeur retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="852a7-343">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="852a7-344">La propriété <see cref="P:System.Lazy`1.Value" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="852a7-344">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="852a7-345">Obtient la valeur initialisée tardivement de l’instance de <see cref="T:System.Lazy`1" /> active.</span><span class="sxs-lookup"><span data-stu-id="852a7-345">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="852a7-346">Valeur initialisée tardivement de l’instance de <see cref="T:System.Lazy`1" /> active.</span><span class="sxs-lookup"><span data-stu-id="852a7-346">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="852a7-347">Si le <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> propriété est `false`, l’accès à la <xref:System.Lazy%601.Value%2A> propriété force l’initialisation.</span><span class="sxs-lookup"><span data-stu-id="852a7-347">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="852a7-348">Outre les exceptions qui sont répertoriées, le <xref:System.Lazy%601.Value%2A> propriété peut lever toute exception non gérée levée par la méthode de fabrique qui a été passée à la `valueFactory` paramètre de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, ou <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="852a7-348">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="852a7-349">L’instance de <see cref="T:System.Lazy`1" /> est initialisée pour utiliser le constructeur par défaut du type initialisé tardivement, et les autorisations pour accéder au constructeur sont manquantes.</span><span class="sxs-lookup"><span data-stu-id="852a7-349">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="852a7-350">L’instance de <see cref="T:System.Lazy`1" /> est initialisée pour utiliser le constructeur par défaut du type initialisé tardivement, et ce type ne dispose pas d’un constructeur sans paramètre public.</span><span class="sxs-lookup"><span data-stu-id="852a7-350">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="852a7-351">La fonction d’initialisation essaie d’accéder à <see cref="P:System.Lazy`1.Value" /> sur cette instance.</span><span class="sxs-lookup"><span data-stu-id="852a7-351">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="852a7-352">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="852a7-352">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>