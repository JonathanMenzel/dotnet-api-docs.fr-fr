<Type Name="IObservable&lt;T&gt;" FullName="System.IObservable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b254aa9b58fa22bb12d126a5a11607096ee177a5" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58717592" /></Metadata><TypeSignature Language="C#" Value="public interface IObservable&lt;out T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObservable`1&lt;+ T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObservable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObservable(Of Out T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObservable" />
  <TypeSignature Language="F#" Value="type IObservable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Objet qui fournit des informations de notification.</typeparam>
    <summary>Définit un fournisseur pour les notifications basées sur les transmissions de type push.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IObserver%601> et <xref:System.IObservable%601> interfaces fournissent un mécanisme généralisé pour la notification push, également connu sous le modèle de design observateur. Le <xref:System.IObservable%601> interface représente la classe qui envoie des notifications (fournisseur) ; le <xref:System.IObserver%601> interface représente la classe qui les reçoit (Observateur). `T` représente la classe qui fournit les informations de notification. Dans certaines notifications de type push, le <xref:System.IObserver%601> implémentation et `T` peut représenter le même type.  
  
 Le fournisseur doit implémenter une méthode unique, <xref:System.IObservable%601.Subscribe%2A>, qui indique qu’un observateur souhaite recevoir des notifications de type push. Les appelants à la méthode passer une instance de l’Observateur. La méthode retourne un <xref:System.IDisposable> implémentation qui permet aux observateurs d’annuler des notifications à tout moment avant que le fournisseur a cessé de les envoyer.  
  
 À un moment donné, un fournisseur donné peut avoir zéro, un ou plusieurs observateurs. Le fournisseur est chargé de stocker les références aux observateurs et s’assurer qu’ils sont valides avant d’envoyer des notifications. Le <xref:System.IObservable%601> interface ne fait pas d’hypothèses concernant le nombre d’observateurs ou à l’ordre dans lequel les notifications sont envoyées.  
  
 Le fournisseur envoie les trois types suivants de notifications à l’Observateur en appelant <xref:System.IObserver%601> méthodes :  
  
-   Les données actuelles. Le fournisseur peut appeler le <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType> méthode pour passer à l’Observateur un `T` objet qui a des données actuelles, les données modifiées ou les données actualisées.  
  
-   Une condition d’erreur. Le fournisseur peut appeler le <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType> méthode pour notifier l’observateur qu’une condition d’erreur s’est produite.  
  
-   Aucune autre donnée. Le fournisseur peut appeler le <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> méthode pour signaler à l’observateur qu’il a terminé l’envoi de notifications.  
  
   
  
## Examples  
 L’exemple suivant illustre le modèle de design observateur. Il définit un `Location` classe qui contient des informations de latitude et longitude.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 Le `LocationTracker` classe fournit le <xref:System.IObservable%601> implémentation. Son `TrackLocation` est transmis à la méthode nullable `Location` objet qui contient les données de latitude et longitude. Si le `Location` valeur n’est pas `null`, le `TrackLocation` les appels de méthode le <xref:System.IObserver%601.OnNext%2A> méthode de chaque observateur.  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Si le `Location` valeur est `null`, le `TrackLocation` méthode instancie un `LocationUnknownException` objet, ce qui est illustré dans l’exemple suivant. Il appelle ensuite chaque observateur <xref:System.IObserver%601.OnError%2A> (méthode) et le transmet le `LocationUnknownException` objet. Notez que `LocationUnknownException` dérive <xref:System.Exception>, mais n’ajoute ne pas tous les nouveaux membres.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Les observateurs s’inscrivent pour recevoir des notifications à partir d’un `TrackLocation` objet en appelant son <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> (méthode), qui assigne une référence à l’objet observateur générique privé <xref:System.Collections.Generic.List%601> objet. La méthode retourne un `Unsubscriber` objet, qui est un <xref:System.IDisposable> implémentation qui permet aux observateurs d’arrêter de recevoir des notifications. Le `LocationTracker` classe inclut également un `EndTransmission` (méthode). Lorsqu’aucune autre donnée de l’emplacement n’est disponible, la méthode appelle chaque observateur <xref:System.IObserver%601.OnCompleted%2A> (méthode), puis efface la liste interne des observateurs.  
  
 Dans cet exemple, le `LocationReporter` classe fournit le <xref:System.IObserver%601> implémentation. Il affiche des informations sur l’emplacement actuel dans la console. Son constructeur inclut un `name` paramètre, ce qui permet la `LocationReporter` instance identifier dans sa sortie de chaîne. Il inclut également un `Subscribe` (méthode), qui encapsule un appel vers le fournisseur <xref:System.IObservable%601.Subscribe%2A> (méthode). Cela permet à la méthode attribuer le retourné <xref:System.IDisposable> référence à une variable privée. Le `LocationReporter` classe inclut également un `Unsubscribe` (méthode), qui appelle le <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> méthode de l’objet retourné par la <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> (méthode). Le code suivant définit la `LocationReporter` classe.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 Le code suivant instancie ensuite le fournisseur et l’Observateur.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObserver`1" />
    <related type="Article" href="https://msdn.microsoft.com/library/3680171f-f522-453c-aa4a-54f755a78f88">Le modèle de Design Observateur</related>
  </Docs>
  <Members>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;out T&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;!T&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObservable`1.Subscribe(System.IObserver{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of Out T)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Subscribe(IObserver&lt;T&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;'T&gt; -&gt; IDisposable" Usage="iObservable.Subscribe observer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="observer">Objet devant recevoir les notifications.</param>
        <summary>Notifie le fournisseur qu'un observateur doit recevoir des notifications.</summary>
        <returns>Une référence à une interface qui permet aux observateurs d'arrêter de recevoir des notifications avant que le fournisseur n'ait terminé de les envoyer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IObservable%601.Subscribe%2A> méthode doit être appelée pour inscrire un observateur pour les notifications push. Une implémentation classique de la <xref:System.IObservable%601.Subscribe%2A> méthode effectue les opérations suivantes :  
  
-   Il stocke une référence à l’Observateur dans un objet de collection, comme un <xref:System.Collections.Generic.List%601> objet.  
  
-   Elle retourne une référence à un <xref:System.IDisposable> interface. Cela permet aux observateurs d’annuler l’abonnement (autrement dit, pour ne plus recevoir de notifications) avant que le fournisseur ait fini de les envoyer et appelé l’abonné <xref:System.IObserver%601.OnCompleted%2A> (méthode).  
  
 À tout moment donné, une instance particulière d’un <xref:System.IObservable%601> implémentation est chargée pour la gestion de tous les abonnements et de notification de tous les abonnés. À moins que la documentation relative à un particulier <xref:System.IObservable%601> implémentation n’indique le contraire, les observateurs doivent faire aucune hypothèse sur le <xref:System.IObservable%601> implémentation, telles que l’ordre des notifications que plusieurs observateurs recevront.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.IObservable%601.Subscribe%2A> méthode pour une application qui fournit des informations de latitude et longitude. Il définit un <xref:System.Collections.Generic.IList%601> objet de collection qui stocke des références à tous les observateurs. Elle retourne également une classe privée nommée `Unsubscriber` qui implémente le <xref:System.IDisposable> interface et permet aux abonnés d’arrêter de recevoir des notifications d’événements.  Consultez la section exemple de la <xref:System.IObservable%601> rubrique pour obtenir un exemple complet.  
  
 [!code-csharp[System.IObserver.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#13)]
 [!code-vb[System.IObserver.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IObserver`1" />
      </Docs>
    </Member>
  </Members>
</Type>