<Type Name="Func&lt;T1,T2,T3,T4,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d6b89bf2499bc10e4146be389e60826a24bfb782" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431636" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`5&lt;- T1, - T2, - T3, - T4, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'T4, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">
      <span data-ttu-id="7924f-101">Type du premier paramètre de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-101">The type of the first parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T2">
      <span data-ttu-id="7924f-102">Type du deuxième paramètre de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-102">The type of the second parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T3">
      <span data-ttu-id="7924f-103">Type du troisième paramètre de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-103">The type of the third parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T4">
      <span data-ttu-id="7924f-104">Type du quatrième paramètre de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-104">The type of the fourth parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="TResult">
      <span data-ttu-id="7924f-105">Type de la valeur de retour de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-105">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="arg1">
      <span data-ttu-id="7924f-106">Premier paramètre de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-106">The first parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg2">
      <span data-ttu-id="7924f-107">Deuxième paramètre de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-107">The second parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg3">
      <span data-ttu-id="7924f-108">Troisième paramètre de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-108">The third parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg4">
      <span data-ttu-id="7924f-109">Quatrième paramètre de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-109">The fourth parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="7924f-110">Encapsule une méthode ayant quatre paramètres et retournant une valeur du type spécifié par le paramètre <typeparamref name="TResult" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-110">Encapsulates a method that has four parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="7924f-111">Valeur de retour de la méthode encapsulée par ce délégué.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7924f-111">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7924f-112">Vous pouvez utiliser ce délégué pour représenter une méthode qui peut être passée en tant que paramètre sans déclarer explicitement un délégué personnalisé.</span><span class="sxs-lookup"><span data-stu-id="7924f-112">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="7924f-113">La méthode encapsulée doit correspondre à la signature de méthode définie par ce délégué.</span><span class="sxs-lookup"><span data-stu-id="7924f-113">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="7924f-114">Cela signifie que la méthode encapsulée doit avoir quatre paramètres, chacun d’eux est passé par valeur, et qu’elle doit retourner une valeur.</span><span class="sxs-lookup"><span data-stu-id="7924f-114">This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7924f-115">Référence à une méthode ayant quatre paramètres et retournant `void` (ou en Visual Basic, qui est déclaré comme un `Sub` plutôt que comme un `Function`), utiliser le type générique <xref:System.Action%604> déléguer à la place.</span><span class="sxs-lookup"><span data-stu-id="7924f-115">To reference a method that has four parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%604> delegate instead.</span></span>  
  
 <span data-ttu-id="7924f-116">Lorsque vous utilisez la <xref:System.Func%605> délégué, vous n’avez pas à définir explicitement un délégué qui encapsule une méthode avec quatre paramètres.</span><span class="sxs-lookup"><span data-stu-id="7924f-116">When you use the <xref:System.Func%605> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters.</span></span> <span data-ttu-id="7924f-117">Par exemple, le code suivant déclare explicitement un délégué générique nommé `Searcher` et assigne une référence à la <xref:System.String.IndexOf%2A> méthode à son instance de délégué.</span><span class="sxs-lookup"><span data-stu-id="7924f-117">For example, the following code explicitly declares a generic delegate named `Searcher` and assigns a reference to the <xref:System.String.IndexOf%2A> method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Delegate.cs#1)]
 [!code-vb[System.Func~5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="7924f-118">L’exemple suivant simplifie ce code en instanciant le <xref:System.Func%605> délégué au lieu de définir un nouveau délégué et lui assigner une méthode nommée explicitement.</span><span class="sxs-lookup"><span data-stu-id="7924f-118">The following example simplifies this code by instantiating the <xref:System.Func%605> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~5#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Func5.cs#2)]
 [!code-vb[System.Func~5#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Func5.vb#2)]  
  
 <span data-ttu-id="7924f-119">Vous pouvez utiliser la <xref:System.Func%605> délégué avec les méthodes anonymes en c#, comme l’illustre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="7924f-119">You can use the <xref:System.Func%605> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="7924f-120">(Pour une introduction aux méthodes anonymes, consultez [méthodes anonymes](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="7924f-120">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~5#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Anon.cs#3)]  
  
 <span data-ttu-id="7924f-121">Vous pouvez également affecter une expression lambda à une <xref:System.Func%605> délégué, comme l’illustre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="7924f-121">You can also assign a lambda expression to a <xref:System.Func%605> delegate, as the following example illustrates.</span></span> <span data-ttu-id="7924f-122">(Pour une introduction aux expressions lambda, consultez [Expressions Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) et [Expressions Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="7924f-122">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~5#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Lambda.cs#4)]
 [!code-vb[System.Func~5#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="7924f-123">Le type sous-jacent d’une expression lambda est un des générique `Func` délégués.</span><span class="sxs-lookup"><span data-stu-id="7924f-123">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="7924f-124">Cela rend possible de passer une expression lambda en tant que paramètre sans lui assigner explicitement à un délégué.</span><span class="sxs-lookup"><span data-stu-id="7924f-124">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="7924f-125">En particulier, car de nombreuses méthodes de types dans les <xref:System.Linq> ont de l’espace de noms `Func` paramètres, vous pouvez passer ces méthodes une expression lambda sans instancier explicitement un `Func` déléguer.</span><span class="sxs-lookup"><span data-stu-id="7924f-125">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7924f-126">L’exemple suivant montre comment déclarer et utiliser un <xref:System.Func%603> déléguer.</span><span class="sxs-lookup"><span data-stu-id="7924f-126">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="7924f-127">Cet exemple déclare un <xref:System.Func%603> variable et lui assigne une expression lambda qui prend un <xref:System.String> valeur et un <xref:System.Int32> valeur en tant que paramètres.</span><span class="sxs-lookup"><span data-stu-id="7924f-127">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="7924f-128">L’expression lambda retourne `true` si la longueur de la <xref:System.String> paramètre est égal à la valeur de le <xref:System.Int32> paramètre.</span><span class="sxs-lookup"><span data-stu-id="7924f-128">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="7924f-129">Le délégué qui encapsule cette méthode est ensuite utilisé dans une requête pour filtrer les chaînes dans un tableau de chaînes.</span><span class="sxs-lookup"><span data-stu-id="7924f-129">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>