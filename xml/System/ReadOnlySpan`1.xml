<Type Name="ReadOnlySpan&lt;T&gt;" FullName="System.ReadOnlySpan&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c2774692c3ee3f895c779124e0514bbd982af739" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52230561" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ReadOnlySpan`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ReadOnlySpan" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="caf50-101">Type des éléments dans le <see cref="System.ReadOnlySpan`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="caf50-101">The type of items in the <see cref="System.ReadOnlySpan`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="caf50-102">Fournit une représentation de type et de mémoire sécurisés en lecture seule d’une zone contiguë de mémoire arbitraire.</span>
      <span class="sxs-lookup">
        <span data-stu-id="caf50-102">Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-103">`ReadOnlySpan<T>` est un [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) qui est allouée sur la pile et puissent être échappées jamais vers le tas managé.</span><span class="sxs-lookup"><span data-stu-id="caf50-103">`ReadOnlySpan<T>` is a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) that is allocated on the stack and can never escape to the managed heap.</span></span> <span data-ttu-id="caf50-104">Types de struct REF ont un nombre de restrictions pour vous assurer qu’ils ne peut pas être promus vers le tas managé, y compris qu’ils ne peuvent pas être convertis, capturées dans les expressions lambda, affectées à des variables de type <xref:System.Object>, attribué à `dynamic` variables, et ils ne peuvent pas implémenter n’importe quel type interface.</span><span class="sxs-lookup"><span data-stu-id="caf50-104">Ref struct types have a number of restrictions to ensure that they cannot be promoted to the managed heap, including that they can't be boxed, captured in lambda expressions, assigned to variables of type <xref:System.Object>, assigned to `dynamic` variables, and they cannot implement any interface type.</span></span>

<span data-ttu-id="caf50-105">Un `ReadOnlySpan<T>` instance est souvent utilisée pour référencer les éléments d’un tableau ou une partie d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="caf50-105">A `ReadOnlySpan<T>` instance is often used to reference the elements of an array or a portion of an array.</span></span> <span data-ttu-id="caf50-106">Contrairement à un tableau, toutefois, un `ReadOnlySpan<T>` instance peut pointer vers la mémoire managée, la mémoire native, ou la mémoire gérée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="caf50-106">Unlike an array, however, a `ReadOnlySpan<T>` instance can point to managed memory, native memory, or memory managed on the stack.</span></span>]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="caf50-107">Tableau à partir duquel créer le <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-107">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-108">Crée un <see cref="T:System.ReadOnlySpan`1" /> sur l’intégralité d’un tableau spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-108">Creates a new <see cref="T:System.ReadOnlySpan`1" /> over the entirety of a specified array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-109">Si le tableau est null, ce constructeur retourne une valeur null `ReadOnlySpan<T>`.</span><span class="sxs-lookup"><span data-stu-id="caf50-109">If the array is null, this constructor returns a null `ReadOnlySpan<T>`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (void* pointer, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(void* pointer, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(void* pointer, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : nativeptr&lt;unit&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (pointer, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pointer" Type="System.Void*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="caf50-110">Pointeur vers l’adresse de départ d’un nombre spécifié d’objets <paramref name="T" /> en mémoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-110">A pointer to the starting address of a specified number of <paramref name="T" /> objects in memory.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="caf50-111">Nombre d’objets <paramref name="T" /> à inclure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-111">The number of <paramref name="T" /> objects to be included.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-112">Crée un <see cref="T:System.ReadOnlySpan`1" /> à partir d’un nombre spécifié d’octets commençant à une adresse mémoire spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-112">Creates a new <see cref="T:System.ReadOnlySpan`1" /> from a specified number of bytes starting at a specified memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-113">Ce constructeur doit être utilisé avec précaution, car elle crée arbitrairement typé `T`s à partir d’un bloc de mémoire.</span><span class="sxs-lookup"><span data-stu-id="caf50-113">This constructor should be used with care, since it creates arbitrarily typed `T`s from a block of memory.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf50-114">
            <paramref name="T" /> est un type référence ou contient des références et ne peut donc pas être stocké dans la mémoire non managée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-114">
              <paramref name="T" /> is a reference type or contains references and therefore cannot be stored in unmanaged memory.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="caf50-115">
            <paramref name="length" /> est un nombre négatif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-115">
              <paramref name="length" /> is negative.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array, int start);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (array, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="caf50-116">Tableau à partir duquel créer le <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-116">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="caf50-117">Index de départ à partir duquel commencer l’étendue en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-117">The starting index from which to begin the read-only span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-118">Crée un <see cref="T:System.ReadOnlySpan`1" /> à partir d’un tableau qui commence à l’index spécifié et continue jusqu’à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-118">Creates a new <see cref="T:System.ReadOnlySpan`1" /> from an array starting at the specified index and continuing until the end of the array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="caf50-119">
            <paramref name="start" /> est inférieur à 0 ou est supérieur à la longueur du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-119">
              <paramref name="start" /> is less-than 0 or greater-than the length of the array.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf50-120">
            <paramref name="array" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-120">
              <paramref name="array" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] * int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="caf50-121">Tableau à partir duquel créer le <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-121">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="caf50-122">Index du premier élément à inclure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-122">The index of the first element to include.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="caf50-123">Nombre d’éléments à inclure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-123">The number of elements to include.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-124">Crée un <see cref="T:System.ReadOnlySpan`1" /> qui inclut un nombre spécifié d’élément à partir d’un tableau commençant à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-124">Creates a new <see cref="T:System.ReadOnlySpan`1" /> that includes a specified number of elements of an array starting at a specified index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="caf50-125">
            <paramref name="array" /> est <see langword="null" />, mais <paramref name="start" /> ou <paramref name="length" /> est différent de zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-125">
              <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span>
          </span>
          <p />
          <span data-ttu-id="caf50-126">– ou –</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-126">--or--</span>
          </span>
          <p />
          <span data-ttu-id="caf50-127">
            <paramref name="start" /> est en dehors des limites du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-127">
              <paramref name="start" /> is outside the bounds of the array.</span>
          </span>
          <p />
          <span data-ttu-id="caf50-128">– ou –</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-128">--or--</span>
          </span>
          <p />
          <span data-ttu-id="caf50-129">
            <paramref name="start" /> et <paramref name="length" /> dépassent le nombre d’éléments dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-129">
              <paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Span&lt;'T&gt; -&gt; unit" Usage="readOnlySpan.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="caf50-130">Étendue dans laquelle copier les éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-130">The span to copy items into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-131">Copie le contenu de ce <see cref="System.ReadOnlySpan`1" /> dans un <see cref="System.Span`1" /> de destination.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-131">Copies the contents of this <see cref="System.ReadOnlySpan`1" /> into a destination <see cref="System.Span`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-132">Si le `source` et `destination` se chevauchent, l’intégralité de `source` est gérée comme s’il a été copié vers un emplacement temporaire avant d’être copiée vers `destination`.</span><span class="sxs-lookup"><span data-stu-id="caf50-132">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf50-133">
            <paramref name="destination" /> est plus court que la le <see cref="System.ReadOnlySpan`1" /> source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-133">
              <paramref name="destination" /> is shorter than the source <see cref="System.ReadOnlySpan`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DangerousCreate">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; DangerousCreate (object obj, ref T objectData, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!T&gt; DangerousCreate(object obj, !T&amp; objectData, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.DangerousCreate(System.Object,`0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DangerousCreate (obj As Object, ByRef objectData As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;T&gt; DangerousCreate(System::Object ^ obj, T % objectData, int length);" />
      <MemberSignature Language="F#" Value="static member DangerousCreate : obj *  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.DangerousCreate (obj, objectData, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="objectData" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="caf50-134">Objet managé qui contient les données que l’étendue couvre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-134">The managed object that contains the data the span will cover.</span>
          </span>
        </param>
        <param name="objectData">
          <span data-ttu-id="caf50-135">Référence aux données au sein de l’objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-135">A reference to data within the object.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="caf50-136">Nombre d’éléments <paramref name="T" /> à étendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-136">The number of <paramref name="T" /> elements to span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-137">Crée un <see cref="T:System.ReadOnlySpan`1" /> sur une partie d’un objet managé normal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-137">Creates a new <see cref="T:System.ReadOnlySpan`1" /> over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-138">
            <see cref="T:System.ReadOnlySpan`1" />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-138">A <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-139">Cette méthode est dangereuse, car il **ne vérifie pas** pour les conditions d’erreur suivant :</span><span class="sxs-lookup"><span data-stu-id="caf50-139">This method is dangerous because it **does not check** for the following error conditions:</span></span>

- <span data-ttu-id="caf50-140">Le paramètre `length` est incorrect.</span><span class="sxs-lookup"><span data-stu-id="caf50-140">The `length` parameter is incorrect.</span></span>
- <span data-ttu-id="caf50-141">Le paramètre `obj` est null.</span><span class="sxs-lookup"><span data-stu-id="caf50-141">The `obj` parameter is null.</span></span>
- <span data-ttu-id="caf50-142">Les objets `obj` pointe vers peut contenir un pointeur brut.</span><span class="sxs-lookup"><span data-stu-id="caf50-142">The objects `obj` points to may contain a raw pointer.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DangerousGetPinnableReference">
      <MemberSignature Language="C#" Value="public T DangerousGetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T DangerousGetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.DangerousGetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetPinnableReference () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T % DangerousGetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.DangerousGetPinnableReference : unit -&gt; " Usage="readOnlySpan.DangerousGetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="caf50-143">Retourne une référence à l’élément de <see cref="T:System.ReadOnlySpan`1" /> à l’index zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-143">Returns a reference to the element of the <see cref="T:System.ReadOnlySpan`1" /> at index zero.</span>
          </span>
          <span data-ttu-id="caf50-144">Si l’étendue en lecture seule est vide, retourne la référence à l’emplacement de mémoire où le premier élément aurait été stocké.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-144">If the read-only span is empty, returns the reference to the memory location where the first element would have been stored.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-145">Référence au premier élément de <see cref="T:System.ReadOnlySpan`1" /> à l’index zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-145">A reference to the first element of the <see cref="T:System.ReadOnlySpan`1" /> at index zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-146">Cette méthode retourne un [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span><span class="sxs-lookup"><span data-stu-id="caf50-146">This method returns a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span></span> <span data-ttu-id="caf50-147">Il peut être utilisé pour l’épinglage un <xref:System.ReadOnlySpan`1> en mémoire.</span><span class="sxs-lookup"><span data-stu-id="caf50-147">It can be used for pinning a <xref:System.ReadOnlySpan`1> in memory.</span></span> <span data-ttu-id="caf50-148">Il est nécessaire pour prendre en charge l’utilisation d’un <xref:System.ReadOnlySpan`1> au sein d’un [fixe](~/docs/csharp/language-reference/keywords/fixed-statement.md) instruction.</span><span class="sxs-lookup"><span data-stu-id="caf50-148">It is required to support the use of a <xref:System.ReadOnlySpan`1> within a [fixed](~/docs/csharp/language-reference/keywords/fixed-statement.md) statement.</span></span>

<span data-ttu-id="caf50-149">Cette référence est utilisée pour l’épinglage et ne doit jamais être déréférencée.</span><span class="sxs-lookup"><span data-stu-id="caf50-149">This reference is used for pinning and must never be dereferenced.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ReadOnlySpan`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ReadOnlySpan&lt;T&gt; Empty { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="caf50-150">Retourne un <see cref="T:System.ReadOnlySpan`1" /> vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-150">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="caf50-151">Retourne un <see cref="T:System.ReadOnlySpan`1" /> vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-151">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="readOnlySpan.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("Equals() on ReadOnlySpan will always throw an exception. Use == instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="caf50-152">Non pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-152">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-153">Non pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-153">Not supported.</span>
          </span>
          <span data-ttu-id="caf50-154">Lève un <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-154">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-155">Non pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-155">Not supported.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-156">Non pris en charge.</span><span class="sxs-lookup"><span data-stu-id="caf50-156">Not supported.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="caf50-157">Toujours levée par cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-157">Always thrown by this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ReadOnlySpan(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; ReadOnlySpan&lt;'T&gt;.Enumerator" Usage="readOnlySpan.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="caf50-158">Retourne un énumérateur pour ce <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-158">Returns an enumerator for this <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-159">Énumérateur pour cette étendue en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-159">An enumerator for this read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-160">Au lieu d’appeler le <xref:System.ReadOnlySpan%601.GetEnumerator%2A> (méthode) directement, vous pouvez utiliser le langage c# `foreach` instruction et Visual Basic `For Each`... `Next` construction pour énumérer un <xref:System.ReadOnlySpan%601>.</span><span class="sxs-lookup"><span data-stu-id="caf50-160">Instead of calling the <xref:System.ReadOnlySpan%601.GetEnumerator%2A> method directly, you can use the C# `foreach` statement and the Visual Basic `For Each`...`Next` construct to enumerate a <xref:System.ReadOnlySpan%601>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="readOnlySpan.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("GetHashCode() on ReadOnlySpan will always throw an exception.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="caf50-161">Non pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-161">Not supported.</span>
          </span>
          <span data-ttu-id="caf50-162">Lève un <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-162">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-163">Non pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-163">Not supported.</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="caf50-164">Non pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-164">Not supported.</span>
          </span>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="caf50-165">Toujours levée par cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-165">Always thrown by this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.ReadOnlySpan&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="caf50-166">Retourne une valeur qui indique que l’étendue en lecture seule actuelle est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-166">Returns a value that indicates the current read-only span is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="caf50-167">
            <see langword="true" /> Lorsque l’étendue actuelle est vide ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-167">
              <see langword="true" /> when the current span is empty; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T&amp; this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[int] { T&amp; ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="caf50-168">Index de base zéro de l'élément à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-168">The zero-based index of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-169">Obtient un élément de l’étendue en lecture seule à l’index de base zéro spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-169">Gets an item from the read-only span at the specified zero-based index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="caf50-170">L’élément à partir de l’étendue en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-170">The element from the read-only span.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="caf50-171">
            <paramref name="index" /> est inférieur à zéro ou supérieur ou égal à <see cref="P:System.ReadOnlySpan`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-171">
              <paramref name="index" /> is less then zero or greater than or equal to <see cref="P:System.ReadOnlySpan`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.ReadOnlySpan&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="caf50-172">Nombre d’éléments dans l’étendue en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-172">The number of items in the read-only span.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="caf50-173">Nombre d'éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-173">The number of items.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="caf50-174">Première étendue à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-174">The first span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="caf50-175">Deuxième étendue à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-175">The second span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-176">Retourne une valeur qui indique si deux instances de <see cref="T:System.ReadOnlySpan`1" /> sont égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-176">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-177">
            <see langword="true" /> si les deux instances <see cref="T:System.ReadOnlySpan`1" /> sont égales ; sinon, <see langword="false" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-177">
              <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are equal; otherwise, <see langword="false" /></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-178">Cela permet de tester si deux <xref:System.ReadOnlySpan`1> instances pointent vers le même emplacement de mémoire de départ et ont les mêmes <xref:System.ReadOnlySpan`1.Length> valeurs.</span><span class="sxs-lookup"><span data-stu-id="caf50-178">This tests if two <xref:System.ReadOnlySpan`1> instances point to the same starting memory location, and have the same <xref:System.ReadOnlySpan`1.Length> values.</span></span> <span data-ttu-id="caf50-179">Cela ne compare pas le contenu de deux <xref:System.ReadOnlySpan`1> instances.</span><span class="sxs-lookup"><span data-stu-id="caf50-179">This does not compare the contents of two <xref:System.ReadOnlySpan`1> instances.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(`0[])~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="caf50-180">Tableau à convertir en <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-180">The array to convert to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-181">Définit une conversion implicite d’un tableau en <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-181">Defines an implicit conversion of an array to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-182">Étendue en lecture seule qui correspond à <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-182">The read-only span that corresponds to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; arraySegment) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (arraySegment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlySpan{`0}" FrameworkAlternate="netcore-2.1;netcore-2.0;netcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arraySegment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      </Parameters>
      <Docs>
        <param name="arraySegment">
          <span data-ttu-id="caf50-183">Segment de tableau à convertir en <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-183">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="caf50-184">Segment de tableau à convertir en <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-184">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-185">Définit une conversion implicite d’un <see cref="T:System.ArraySegment`1" /> en <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-185">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-186">Étendue en lecture seule qui correspond au segment de tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-186">A read-only span that corresponds to the array segment.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="caf50-187">Première étendue en lecture seule à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-187">The first read-only span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="caf50-188">Seconde étendue en lecture seule à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-188">The second read-only span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-189">Retourne une valeur qui indique si deux instances de <see cref="T:System.ReadOnlySpan`1" /> ne sont pas égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-189">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-190">
            <see langword="true" /> si les deux instances <see cref="T:System.ReadOnlySpan`1" /> ne sont pas égales ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-190">
              <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-191">Deux <xref:System.ReadOnlySpan%601> instances ne sont pas égales si elles ont des longueurs différentes ou si les éléments correspondants de `left` et `right` pointent vers des emplacements de mémoire différentes.</span><span class="sxs-lookup"><span data-stu-id="caf50-191">Two <xref:System.ReadOnlySpan%601> instances are not equal if they have different lengths or if the corresponding elements of `left` and `right` point to different memory locations.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="caf50-192">Index à partir duquel commence la section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-192">The index at which to begin the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-193">Constitue une section en dehors de l’étendue en lecture seule actuelle qui commence à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-193">Forms a slice out of the current read-only span that begins at a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-194">Étendue qui comprend tous les éléments de l’étendue actuelle à partir de <paramref name="index" /> jusqu’à la fin de l’étendue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-194">A span that consists of all elements of the current span from <paramref name="index" /> to the end of the span.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="caf50-195">
            <paramref name="start" /> est supérieur au nombre d’éléments dans l’étendue en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-195">
              <paramref name="start" /> is greater than the number of items in the read-only span.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="caf50-196">Index auquel commence cette section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-196">The index at which to begin this slice.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="caf50-197">Longueur souhaitée de la section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-197">The desired length for the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-198">Constitue une section en dehors de l’étendue en lecture seule actuelle qui commence à un index spécifié pour une longueur spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-198">Forms a slice out of the current read-only span starting at a specified index for a specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-199">Étendue en lecture seule constituée d’éléments <paramref name="length" /> de l’étendue actuelle, qui commence à <paramref name="index" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-199">A read-only span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="index" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="caf50-200">
            <paramref name="start" /> est inférieur à zéro ou supérieur ou égal à <see cref="T:System.Span`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-200">
              <paramref name="start" /> is less than zero or greater than or equal to <see cref="T:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="readOnlySpan.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="caf50-201">Copie le contenu de cette étendue en lecture seule dans un nouveau tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-201">Copies the contents of this read-only span into a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-202">Tableau contenant les données dans l’étendue actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-202">An array containing the data in the current span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-203">Cette méthode effectue une copie de données d’allocation et de segment de mémoire et doit donc être évitée si possible.</span><span class="sxs-lookup"><span data-stu-id="caf50-203">This method performs a heap allocation and data copy, and therefore, should be avoided if possible.</span></span> <span data-ttu-id="caf50-204">Il s’il est parfois nécessaire lors de l’API qui prennent en charge <xref:System.ReadOnlySpan%601> ne sont pas disponibles, mais les API du travail avec des tableaux.</span><span class="sxs-lookup"><span data-stu-id="caf50-204">It it sometimes necessary when APIs that support <xref:System.ReadOnlySpan%601> are not available, but APIs that work with arrays are.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="readOnlySpan.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="caf50-205">Retourne la représentation sous forme de chaîne de <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-205">Returns the string representation of this <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-206">Représentation sous forme de chaîne de cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-206">The string representation of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-207">Pour un `ReadOnlySpan<Char>`, le `ToString` méthode retourne un <xref:System.String> qui contient les caractères désignées par l’étendue.</span><span class="sxs-lookup"><span data-stu-id="caf50-207">For a `ReadOnlySpan<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the span.</span></span> <span data-ttu-id="caf50-208">Sinon, elle retourne un <xref:System.String> avec le nom du type et le nombre d’éléments qui contient l’étendue.</span><span class="sxs-lookup"><span data-stu-id="caf50-208">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the span contains.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T&gt; -&gt; bool" Usage="readOnlySpan.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="caf50-209">Cible de l’opération de copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-209">The target of the copy operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf50-210">Tente de copier le contenu de ce <see cref="System.ReadOnlySpan`1" /> dans un <see cref="System.Span`1" /> et retourne une valeur pour indiquer si l’opération a réussi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-210">Attempts to copy the contents of this <see cref="System.ReadOnlySpan`1" /> into a <see cref="System.Span`1" /> and returns a value to indicate whether or not the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf50-211">
            <see langword="true" /> si l’opération de copie a abouti ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf50-211">
              <see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="caf50-212">Si le `source` et `destination` se chevauchent, l’intégralité de `source` est gérée comme s’il a été copié vers un emplacement temporaire avant d’être copiée vers `destination`.</span><span class="sxs-lookup"><span data-stu-id="caf50-212">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>

<span data-ttu-id="caf50-213">Si le `destination` est plus courte que `source`, aucun des éléments ne sont copiés et la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="caf50-213">If the `destination` length is shorter than `source`, no items are copied and the method returns `false`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>