<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8d682cfe7b52c931a13d9293d341bedadc228bc0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431038" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type IndexOutOfRangeException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exception levée au moment d’une tentative d’accès à un élément d’un tableau ou d’une collection ayant un index en dehors de ses limites.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.IndexOutOfRangeException> exception est levée lorsqu’un index non valide est utilisé pour accéder à un membre d’un tableau ou une collection, ou pour lire ou écrire à partir d’un emplacement particulier dans une mémoire tampon. Cette exception hérite la <xref:System.Exception> classe mais n’ajoute aucuns membres uniques.  
  
 En règle générale, un <xref:System.IndexOutOfRangeException> exception est levée en raison de l’erreur de développement. Au lieu de la gestion de l’exception, vous devez diagnostiquer la cause de l’erreur et de corriger votre code. Les causes les plus courantes de l’erreur sont :  
  
-   Oublier que la limite supérieure d’une collection ou un tableau de base zéro est une inférieure à son nombre de membres ou d’éléments, comme l’exemple suivant illustre.  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     Pour corriger l’erreur, vous pouvez utiliser le code suivant.  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     Au lieu d’une itération dans le tableau de tous les éléments par leur index, vous pouvez également utiliser le `foreach` instruction (c#) ou la `For Each` instruction (en Visual Basic).  
  
-   Essayez d’attribuer un élément de tableau à un autre tableau qui n’a pas été correctement dimensionné et qui a moins d’éléments à un tableau d’origine. L’exemple suivant tente d’assigner le dernier élément dans le `value1` tableau au même élément dans le `value2` tableau. Toutefois, le `value2` tableau a été correctement dimensionné pour avoir six au lieu de sept éléments. Par conséquent, l’affectation lève une <xref:System.IndexOutOfRangeException> exception.  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   À l’aide d’une valeur retournée par une méthode de recherche pour itérer au sein d’une partie d’un tableau ou une collection, en commençant à une position d’index particulière. Si vous oubliez de vérifier si l’opération de recherche a trouvé une correspondance, le runtime lève une <xref:System.IndexOutOfRangeException> exception, comme illustré dans cet exemple.  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     Dans ce cas, le <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> méthode retourne -1, ce qui est une valeur d’index non valide, en cas d’échec trouver une correspondance. Pour corriger cette erreur, vérifiez la valeur de retour de la méthode de recherche avant d’effectuer une itération au tableau, comme illustré dans cet exemple.  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   Essayez d’utiliser ou énumérer un jeu de résultats, la collection ou le tableau retourné par une requête sans les tester si l’objet retourné ne contient aucune donnée valide.  
  
-   À l’aide d’une valeur calculée pour définir l’index de départ, l’index de fin ou le nombre d’éléments à itérer. Si le résultat du calcul est inattendu, cela peut entraîner une <xref:System.IndexOutOfRangeException> exception. Vérifiez la logique de votre programme dans le calcul de la valeur d’index et valider la valeur avant d’effectuer une itération au tableau ou collection. Les conditions suivantes doivent toutes être vraies ; Sinon, un <xref:System.IndexOutOfRangeException> exception est levée :  
  
    -   Index de départ doit être supérieure ou égale à <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> pour la dimension du tableau que vous souhaitez effectuer une itération, ou supérieur ou égal à 0 pour une collection.  
  
    -   L’index de fin ne peut pas dépasser <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> pour la dimension du tableau que vous souhaitez effectuer une itération, ou ne peut pas être supérieure ou égale à la `Count` propriété d’une collection.  
  
    -   L’équation suivante doit être remplie pour la dimension du tableau que vous souhaitez effectuer une itération :  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate – 1 <= upper_bound  
        ```  
  
         Pour une collection, l’équation suivante doit être remplie :  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  Index de départ d’un tableau ou d’une collection ne peut jamais être un nombre négatif.  
  
-   En supposant que le tableau doit être de base zéro. Les tableaux qui ne sont pas de base zéro peuvent être créés par le <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> (méthode) et peuvent être retournées par COM interop, bien qu’ils ne sont pas conformes CLS. L’exemple suivant illustre la <xref:System.IndexOutOfRangeException> qui est levée lorsque vous essayez d’itérer au sein d’un tableau de base zéro non créé par le <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> (méthode).  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     Pour corriger l’erreur, comme dans l’exemple suivant, vous pouvez appeler la <xref:System.Array.GetLowerBound%2A> méthode au lieu d’émettre des hypothèses sur les index de départ d’un tableau.  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     Notez que lorsque vous appelez le <xref:System.Array.GetLowerBound%2A> méthode pour obtenir l’index de départ d’un tableau, vous devez également appeler la <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType> méthode pour obtenir son index de fin.  
  
-   Confusion entre un index et la valeur à cet index dans un tableau numérique ou une collection. Ce problème se produit généralement lorsque vous utilisez la `foreach` instruction (c#) ou la `For Each` instruction (en Visual Basic). L'exemple de code suivant illustre le problème.  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     La construction d’itération retourne chaque valeur dans un tableau ou collection, pas son index. Pour éliminer l’exception, utilisez ce code.  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   En fournissant un nom de colonne non valide pour le <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> propriété.  
  
-   Violation de sécurité des threads. Opérations, telles que la lecture à partir de la même <xref:System.IO.StreamReader> objet, l’écriture dans le même <xref:System.IO.StreamWriter> de l’objet à partir de plusieurs threads, ou énumérer les objets dans une <xref:System.Collections.Hashtable> provenant de plusieurs threads peut lever une <xref:System.IndexOutOfRangeException> si l’objet n’est pas accessible dans un façon thread-safe. Cette exception est généralement aléatoire, car il s’appuie sur une condition de concurrence.  
  
 À l’aide des valeurs codées en dur des index pour manipuler un tableau est susceptible de lever une exception si la valeur d’index est incorrect ou non valide, ou si la taille du tableau en cours de manipulation est inattendue. Pour empêcher une opération de lever une <xref:System.IndexOutOfRangeException> exception, vous pouvez procédez comme suit :  
  
-   Itérer les éléments du tableau en utilisant la [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) instruction (c#) ou [pour chaque... Suivant](https://msdn.microsoft.com/library/5ebk1751.aspx) construire (en Visual Basic) au lieu de l’itération des éléments par index.  
  
-   Itérer les éléments par index, en commençant par l’index retourné par la <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> (méthode) et en terminant par l’index retourné par la <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> (méthode).  
  
-   Si vous assignez des éléments dans un tableau à un autre, assurez-vous que le tableau cible a au moins autant d’éléments que le tableau source en comparant leurs <xref:System.Array.Length%2A?displayProperty=nameWithType> propriétés.  
  
 Pour obtenir la liste de valeurs de propriété initiales d’une instance de <xref:System.IndexOutOfRangeException>, consultez la <xref:System.IndexOutOfRangeException> constructeurs.  
  
 Les instructions de langage intermédiaire (IL) suivantes lèvent <xref:System.IndexOutOfRangeException>:  
  
-   ldelem. \<type >  
  
-   ldelema  
  
-   stelem. \<type >  
  
 <xref:System.IndexOutOfRangeException> utilise le HRESULT COR_E_INDEXOUTOFRANGE dont la valeur est 0 x 80131508.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IndexOutOfRangeException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IndexOutOfRangeException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Exception.Message%2A> propriété de la nouvelle instance à un message système qui décrit l’erreur, tel que « un index de tableau est hors limites. » Ce message prend en compte la culture système en cours.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.IndexOutOfRangeException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Référence Null (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur localisé.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message décrivant l'erreur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IndexOutOfRangeException" /> avec un message d'erreur spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Exception.Message%2A?displayProperty=nameWithType> propriété de l’exception à l’aide du `message` paramètre. Le contenu de `message` doit être compréhensible par les utilisateurs. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.IndexOutOfRangeException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Référence Null (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string * Exception -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
        <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <c>innerException</c> n’est pas une référence Null (<see langword="Nothing" /> en Visual Basic), l’exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l’exception interne.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IndexOutOfRangeException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une exception levée en conséquence directe d'une exception précédente doit contenir une référence à celle-ci dans la propriété <xref:System.Exception.InnerException%2A>. La propriété `InnerException` retourne la même valeur que celle qui a été passée dans le constructeur ou une référence Null (`Nothing` en Visual Basic), si la propriété `InnerException` ne fournit pas la valeur de l'exception interne au constructeur.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.IndexOutOfRangeException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|La référence à l'exception interne.|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>