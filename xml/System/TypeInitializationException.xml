<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f71195d360e197411970aa7505cd3ee4ab2282c2" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52344884" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exception levée comme wrapper pour l'exception levée par l'initialiseur de classe. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu'un initialiseur de classe ne réussit pas à initialiser un type, Lorsqu'un initialiseur de classe n'arrive pas à initialiser un type, une <xref:System.TypeInitializationException> est créée et passe une référence à l'exception levée par l'initialiseur de classe du type. Le <xref:System.Exception.InnerException%2A> propriété du <xref:System.TypeInitializationException> contient l’exception sous-jacente.  
  
 En règle générale, le <xref:System.TypeInitializationException> exception reflète une condition catastrophique (le runtime ne peut pas instancier un type) qui empêche une application de se poursuivre.  En règle générale, le <xref:System.TypeInitializationException> est levée en réponse à des modifications dans l’environnement d’exécution de l’application. Par conséquent, autre qu’éventuellement pour la résolution des problèmes de déboguer du code, l’exception ne doit pas être gérée dans un `try` / `catch` bloc. Au lieu de cela, la cause de l’exception doit être étudiée et éliminée.  
  
 <xref:System.TypeInitializationException> utilise le HRESULT COR_E_TYPEINITIALIZATION dont la valeur est 0 x 80131534.  
  
 Pour obtenir la liste des valeurs initiales des propriétés d’une instance de <xref:System.TypeInitializationException>, consultez le <xref:System.TypeInitializationException.%23ctor%2A> constructeurs.  
  
 Les sections suivantes décrivent certaines des situations dans lesquelles un <xref:System.TypeInitializationException> exception est levée.  
  
- [Les constructeurs statiques et l’exception TypeInitializationException](#Static)   
- [Valeurs de délai d’attente de correspondance expression régulière](#Timeout)   
- [Calendriers et des données culturelles](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a>Les constructeurs statiques et la TypeInitializationException

 Un constructeur statique, s’il en existe, est appelé automatiquement par le runtime avant de créer une nouvelle instance d’un type. Les constructeurs statiques peuvent être définis explicitement par un développeur. Si un constructeur statique n’est pas défini explicitement, compilateurs créent automatiquement un pour initialiser des `static` (en c#) ou `Shared` (en Visual Basic) des membres du type.  Pour plus d’informations sur les constructeurs statiques, consultez [constructeurs statiques](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).  
  
 En règle générale, un <xref:System.TypeInitializationException> exception est levée lorsqu’un constructeur statique est impossible d’instancier un type.  Le <xref:System.Exception.InnerException%2A> propriété indique pourquoi le constructeur statique a été impossible d’instancier le type. Certaines des causes plus courantes d’un <xref:System.TypeInitializationException> exception sont :  
  
- Une exception non gérée dans un constructeur statique  
 
   Si une exception est levée dans un constructeur statique, cette exception est encapsulée dans un <xref:System.TypeInitializationException> exception et le type ne peut pas être instanciée.  
  
   Fréquence à laquelle cette exception difficile à dépanner le fait que les constructeurs statiques ne sont pas toujours explicitement définies dans le code source. Un constructeur statique existe dans un type si :  
  
   -   Elle a été explicitement définie en tant que membre d’un type.  
  
   -   Le type a `static` (en c#) ou `Shared` (en Visual Basic) variables qui sont déclarés et initialisés dans une seule instruction. Dans ce cas, le compilateur de langage génère un constructeur statique pour le type. Vous pouvez le vérifier à l’aide d’un utilitaire tel que [désassembleur IL](~/docs/framework/tools/ildasm-exe-il-disassembler.md). Par exemple, lorsque les compilateurs c# et VB compilent l’exemple suivant, ils génèrent le langage intermédiaire pour un constructeur statique qui est similaire à ceci :  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   L’exemple suivant montre un <xref:System.TypeInitializationException> exception levée par un constructeur statique générée par le compilateur. Le `Example` classe inclut un `static` (en c#) ou `Shared` (en Visual Basic) champ de type `TestClass` qui est instancié en passant une valeur de 3 à son constructeur de classe.  Toutefois, cette valeur, est non conforme ; Seules les valeurs de 0 ou 1 sont autorisées. Par conséquent, le `TestClass` classe constructeur lève un <xref:System.ArgumentOutOfRangeException>. Étant donné que cette exception n’est pas gérée, il est encapsulé dans un <xref:System.TypeInitializationException> exception.  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   Notez que le message d’exception affiche des informations sur le <xref:System.Exception.InnerException%2A> propriété.  
  
- Un fichier de données ou d’assembly manquant  
 
   Une cause courante d’un <xref:System.TypeInitializationException> exception n’est qu’un fichier d’assembly ou de données qui était présent dans les environnements de développement et de test d’une application est manquant à partir de son environnement d’exécution. Par exemple, vous pouvez compiler l’exemple suivant dans un assembly nommé Missing1a.dll en utilisant cette syntaxe de ligne de commande :  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   Vous pouvez ensuite compiler l’exemple suivant dans un fichier exécutable nommé Missing1.exe en incluant une référence à Missing1a.dll :  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   Toutefois, si vous renommez, déplacez, ou supprimez Missing1a.dll et exécutez l’exemple, il lève une <xref:System.TypeInitializationException> exception et affiche la sortie illustrée dans l’exemple.  Notez que le message d’exception inclut des informations sur le <xref:System.Exception.InnerException%2A> propriété. Dans ce cas, l’exception interne est un <xref:System.IO.FileNotFoundException> qui est levée, car le runtime ne peut pas trouver l’assembly dépendant.  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  Dans cet exemple, un <xref:System.TypeInitializationException> exception a été levée, car un assembly n’a pas pu être chargé. L’exception peut également être levée si un constructeur statique tente d’ouvrir un fichier de données, comme un fichier de configuration, un fichier XML ou un fichier contenant des données, qu’il ne trouve pas sérialisées.  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>Valeurs de délai d’attente de correspondance expression régulière  
 Vous pouvez définir la valeur de délai d’expiration par défaut pour un modèle d’expression régulière correspondant à l’opération sur une base par domaine d’application. Le délai d’expiration est défini en spécifiant un <xref:System.TimeSpan> valeur pour la propriété « REGEX_DEFAULT_MATCH_TIMEOUT » à la <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> (méthode). L’intervalle de temps doit être un <xref:System.TimeSpan> objet est supérieur à zéro et inférieure à environ 24 jours. Si ces conditions ne sont pas remplies, la tentative de définir la valeur de délai d’expiration par défaut lève un <xref:System.ArgumentOutOfRangeException>, qui, à son tour, est encapsulé dans un <xref:System.TypeInitializationException> exception.  
  
 L’exemple suivant montre le <xref:System.TypeInitializationException> qui est levée lorsque la valeur affectée à la propriété « REGEX_DEFAULT_MATCH_TIMEOUT » n’est pas valide. Pour éliminer l’exception, la valeur est la propriété « REGEX_DEFAULT_MATCH_TIMEOUT » un <xref:System.TimeSpan> valeur est supérieure à zéro et inférieure à environ 24 jours.  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>Calendriers et des données culturelles  
 Si vous essayez d’instancier un calendrier, mais le runtime est impossible d’instancier le <xref:System.Globalization.CultureInfo> objet qui correspond à ce calendrier, elle lève une <xref:System.TypeInitializationException> exception. Cette exception peut être levée par les constructeurs de classe de calendrier suivantes :  
  
-   Le constructeur par défaut de la <xref:System.Globalization.JapaneseCalendar> classe.  
  
-   Le constructeur par défaut de la <xref:System.Globalization.KoreanCalendar> classe.  
  
-   Le constructeur par défaut de la <xref:System.Globalization.TaiwanCalendar> classe.  
  
 Dans la mesure où les données culturelles pour ces cultures doivent être disponibles sur tous les systèmes, vous devriez rarement, voire jamais, rencontrer cette exception.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Gestion et levée d’exceptions dans .NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">Nom qualifié complet du type dont l'initialisation a échoué.</param>
        <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas une référence null (<see langword="Nothing" /> en Visual Basic), l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.TypeInitializationException" /> avec le message d'erreur par défaut, le nom de type spécifié et une référence à l'exception interne qui est la cause première de cette exception.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une exception qui est levée en conséquence directe d'une exception précédente peut contenir une référence à l'exception précédente dans la propriété <xref:System.Exception.InnerException%2A>. La propriété <xref:System.Exception.InnerException%2A> retourne la même valeur que celle qui a été passée dans le constructeur ou une référence Null (`Nothing` en Visual Basic), si la propriété <xref:System.Exception.InnerException%2A> ne fournit pas la valeur de l'exception interne au constructeur.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.TypeInitializationException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|La référence à l'exception interne.|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur localisé.|  
|<xref:System.TypeInitializationException.TypeName%2A>|Nom du type.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Gestion et levée d’exceptions dans .NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données d'objet sérialisées concernant l'exception levée.</param>
        <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles relatives à la source ou à la destination.</param>
        <summary>Définit l'objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à l'aide du nom de type et d'autres informations se rapportant à l'exception.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiert une confiance totale pour l’appelant immédiat. Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom qualifié complet du type dont l'initialisation a échoué.</summary>
        <value>Nom qualifié complet du type dont l'initialisation a échoué.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>