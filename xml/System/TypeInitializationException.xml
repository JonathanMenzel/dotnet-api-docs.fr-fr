<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeInitializationException.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54e010e0c78c65b529ed1ad5c97ca2f1013dd01bc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e010e0c78c65b529ed1ad5c97ca2f1013dd01bc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.TypeInitializationException">
          <source>The exception that is thrown as a wrapper around the exception thrown by the class initializer.</source>
          <target state="translated">Exception levée comme wrapper pour l'exception levée par l'initialiseur de classe.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.TypeInitializationException">
          <source>This class cannot be inherited.</source>
          <target state="translated">Cette classe ne peut pas être héritée.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>When a class initializer fails to initialize a type, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> is created and passed a reference to the exception thrown by the type's class initializer.</source>
          <target state="translated">Lorsqu'un initialiseur de classe ne réussit pas à initialiser un type, Lorsqu'un initialiseur de classe n'arrive pas à initialiser un type, une <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> est créée et passe une référence à l'exception levée par l'initialiseur de classe du type.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> holds the underlying exception.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété du <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> contient l’exception sous-jacente.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Typically, the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.</source>
          <target state="translated">En règle générale, le <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception reflète une condition catastrophique (le runtime ne peut pas instancier un type) qui empêche une application de se poursuivre.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Most commonly, the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> is thrown in response to some change in the executing environment of the application.</source>
          <target state="translated">En règle générale, le <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> est levée en réponse à une modification dans l’environnement d’exécution de l’application.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">Par conséquent, autre qu’éventuellement pour la résolution des problèmes de code de débogage, l’exception ne doit pas être traitée dans un <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Instead, the cause of the exception should be investigated and eliminated.</source>
          <target state="translated">Au lieu de cela, la cause de l’exception doit être étudiée et éliminée.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> utilise le HRESULT COR_E_TYPEINITIALIZATION dont la valeur est 0 x 80131534.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.TypeInitializationException.%23ctor%2A&gt;</ph> constructors.</source>
          <target state="translated">Pour obtenir la liste de valeurs de propriété initiales d’une instance de <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>, consultez la <ph id="ph2">&lt;xref:System.TypeInitializationException.%23ctor%2A&gt;</ph> constructeurs.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The following sections describe some of the situations in which a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown.</source>
          <target state="translated">Les sections suivantes décrivent certaines des situations dans lesquelles un <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception est levée.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><bpt id="p1">[</bpt>Static constructors and the TypeInitializationException exception<ept id="p1">](#Static)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Les constructeurs statiques et la TypeInitializationException (exception)<ept id="p1">](#Static)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><bpt id="p1">[</bpt>Regular expression match timeout values<ept id="p1">](#Timeout)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Valeurs de délai d’attente de correspondance expression régulière<ept id="p1">](#Timeout)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><bpt id="p1">[</bpt>Calendars and cultural data<ept id="p1">](#Calendars)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Les calendriers et les données de culturels<ept id="p1">](#Calendars)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Static constructors and the TypeInitializationException exception</source>
          <target state="translated">Les constructeurs statiques et la TypeInitializationException (exception)</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type.</source>
          <target state="translated">Un constructeur statique, s’il en existe, est appelé automatiquement par le runtime avant de créer une nouvelle instance d’un type.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Static constructors can be explicitly defined by a developer.</source>
          <target state="translated">Les constructeurs statiques peuvent être définis explicitement par un développeur.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If a static  constructor is not explicitly defined, compilers automatically create one to initialize any <ph id="ph1">`static`</ph> (in C#) or <ph id="ph2">`Shared`</ph> (in Visual Basic) members of the type.</source>
          <target state="translated">Si un constructeur statique n’est pas défini explicitement, les compilateurs créent automatiquement un pour initialiser les <ph id="ph1">`static`</ph> (en c#) ou <ph id="ph2">`Shared`</ph> (en Visual Basic) des membres du type.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For more information on static constructors, see <bpt id="p1">[</bpt>Static Constructors<ept id="p1">](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur les constructeurs statiques, consultez <bpt id="p1">[</bpt>constructeurs statiques<ept id="p1">](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Most commonly, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown when a static constructor is unable to instantiate a type.</source>
          <target state="translated">En règle générale, un <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception est levée lorsqu’un constructeur statique ne peut pas instancier un type.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property indicates why the static constructor was unable to instantiate the type.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété indique pourquoi le constructeur statique a été impossible d’instancier le type.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Some of the more common causes of a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception are:</source>
          <target state="translated">Certaines des causes plus courantes d’un <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception sont :</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>An unhandled exception in a static constructor</source>
          <target state="translated">Une exception non gérée dans un constructeur statique</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If an exception is thrown in a static constructor, that exception is wrapped in a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception, and the type cannot be instantiated.</source>
          <target state="translated">Si une exception est levée dans un constructeur statique, cette exception est encapsulée dans un <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception et le type ne peut pas être instanciée.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code.</source>
          <target state="translated">Fréquence à laquelle cette exception difficile à dépanner fait que les constructeurs statiques ne sont pas toujours explicitement définis dans le code source.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A static constructor exists in a type if:</source>
          <target state="translated">Un constructeur statique existe dans un type si :</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>It has been explicitly defined as a member of a type.</source>
          <target state="translated">Il a été défini explicitement en tant que membre d’un type.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The type has  <ph id="ph1">`static`</ph> (in C#) or <ph id="ph2">`Shared`</ph> (in Visual Basic) variables that are declared and initialized in a single statement.</source>
          <target state="translated">Le type a <ph id="ph1">`static`</ph> (en c#) ou <ph id="ph2">`Shared`</ph> (en Visual Basic) pour les variables qui sont déclarés et initialisés dans une instruction unique.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>In this case, the language compiler generates a static constructor for the type.</source>
          <target state="translated">Dans ce cas, le compilateur de langage génère un constructeur statique pour le type.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>You can inspect it by using a utility such as <bpt id="p1">[</bpt>IL Disassembler<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</source>
          <target state="translated">Vous pouvez le vérifier à l’aide d’un utilitaire tel que <bpt id="p1">[</bpt>désassembleur IL<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:</source>
          <target state="translated">Par exemple, lorsque les compilateurs c# et VB compilent l’exemple suivant, ils génèrent le langage intermédiaire pour un constructeur statique est similaire à ceci :</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The following example shows a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception thrown by a compiler-generated static constructor.</source>
          <target state="translated">L’exemple suivant montre un <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception levée par un constructeur statique généré par le compilateur.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The <ph id="ph1">`Example`</ph> class includes a <ph id="ph2">`static`</ph> (in C#) or <ph id="ph3">`Shared`</ph> (in Visual Basic) field of type <ph id="ph4">`TestClass`</ph> that is instantiated by passing a value of 3 to its class constructor.</source>
          <target state="translated">Le <ph id="ph1">`Example`</ph> classe inclut un <ph id="ph2">`static`</ph> (en c#) ou <ph id="ph3">`Shared`</ph> (en Visual Basic) champ de type <ph id="ph4">`TestClass`</ph> qui est instancié en passant une valeur de 3 à son constructeur de classe.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>That value, however, is illegal; only values of 0 or 1 are permitted.</source>
          <target state="translated">Toutefois, cette valeur est non conforme ; Seules les valeurs 0 ou 1 sont autorisées.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>As a result, the <ph id="ph1">`TestClass`</ph> class constructor throws an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated">Par conséquent, le <ph id="ph1">`TestClass`</ph> classe constructeur lève une <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Since this exception is not handled, it is wrapped in a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
          <target state="translated">Étant donné que cette exception n’est pas gérée, il est encapsulé dans un <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Note that the exception message displays information about the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">Notez que le message d’exception affiche des informations sur le <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A missing assembly or data file</source>
          <target state="translated">Un fichier de données ou d’assembly manquant</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A common cause of a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment.</source>
          <target state="translated">Une cause courante d’un <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception est qu’un fichier d’assembly ou de données qui était présent dans les environnements de développement et de test d’une application est manquant dans son environnement d’exécution.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For example, you can compile the following example to an assembly named Missing1a.dll by using the this command-line syntax:</source>
          <target state="translated">Par exemple, vous pouvez compiler l’exemple suivant pour un assembly nommé Missing1a.dll à l’aide de la syntaxe de ligne de commande :</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:</source>
          <target state="translated">Vous pouvez ensuite compiler l’exemple suivant pour un fichier exécutable nommé Missing1.exe en incluant une référence à Missing1a.dll :</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception and displays the output shown in the example.</source>
          <target state="translated">Toutefois, si vous renommez, déplacez, ou supprimez Missing1a.dll et exécutez l’exemple, il lève une <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception et affiche la sortie affichée dans l’exemple.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Note that the exception message includes information about the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">Notez que le message d’exception inclut des informations sur le <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>In this case,  the inner exception is a <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> that is thrown because the runtime cannot find the dependent assembly.</source>
          <target state="translated">Dans ce cas, l’exception interne est un <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> qui est levée, car le runtime ne peut pas trouver l’assembly dépendant.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>In this example, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception was thrown because an assembly could not be loaded.</source>
          <target state="translated">Dans cet exemple, un <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception a été levée, car un assembly n’a pas pu être chargé.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.</source>
          <target state="translated">L’exception peut également être levée si un constructeur statique tente d’ouvrir un fichier de données, tel qu’un fichier de configuration, un fichier XML ou un fichier contenant des données, qu’il ne trouve pas sérialisées.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Regular expression match timeout values</source>
          <target state="translated">Valeurs de délai d’attente de correspondance expression régulière</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis.</source>
          <target state="translated">Vous pouvez définir la valeur de délai d’attente par défaut pour un modèle d’expression régulière correspondant à l’opération sur une base par domaine d’application.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The timeout is defined by a specifying a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property to the  <ph id="ph2">&lt;xref:System.AppDomain.SetData%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Le délai d’attente est défini en spécifiant un <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> la valeur de la propriété « REGEX_DEFAULT_MATCH_TIMEOUT » à la <ph id="ph2">&lt;xref:System.AppDomain.SetData%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The time interval must be a valid <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> object that is greater than zero and less than approximately 24 days.</source>
          <target state="translated">L’intervalle de temps doit être un <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> objet est supérieur à zéro et inférieure à environ 24 jours.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If these requirements are not met, the attempt to set the default timeout value throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, which in turn is wrapped in a <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
          <target state="translated">Si ces conditions ne sont pas remplies, la tentative de définir la valeur de délai d’attente par défaut lève une <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, qui à son tour est encapsulé dans un <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> that is thrown when the value assigned to the "REGEX_DEFAULT_MATCH_TIMEOUT" property is invalid.</source>
          <target state="translated">L’exemple suivant montre le <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> qui est levée lorsque la valeur affectée à la propriété « REGEX_DEFAULT_MATCH_TIMEOUT » n’est pas valide.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>To eliminate the exception, set the"REGEX_DEFAULT_MATCH_TIMEOUT" property to a  <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> value that is greater than zero and less than approximately 24 days.</source>
          <target state="translated">Pour éliminer l’exception, affectez à la propriété de « REGEX_DEFAULT_MATCH_TIMEOUT » un <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> valeur est supérieure à zéro et inférieure à environ 24 jours.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Calendars and cultural data</source>
          <target state="translated">Les calendriers et les données de culturels</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that corresponds to that calendar, it throws a <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
          <target state="translated">Si vous essayez d’instancier un calendrier, mais l’exécution est impossible d’instancier le <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objet qui correspond à ce calendrier, elle lève une <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>This exception can be thrown by the following calendar class constructors:</source>
          <target state="translated">Cette exception peut être levée par les constructeurs de classe de calendrier suivantes :</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> class.</source>
          <target state="translated">Le constructeur par défaut de la <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.KoreanCalendar&gt;</ph> class.</source>
          <target state="translated">Le constructeur par défaut de la <ph id="ph1">&lt;xref:System.Globalization.KoreanCalendar&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> class.</source>
          <target state="translated">Le constructeur par défaut de la <ph id="ph1">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.</source>
          <target state="translated">Étant donné que les données culturelles pour ces cultures doivent être disponibles sur tous les systèmes, vous devriez rarement, voire jamais, rencontrer cette exception.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The fully qualified name of the type that fails to initialize.</source>
          <target state="translated">Nom qualifié complet du type dont l'initialisation a échoué.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">Exception ayant provoqué l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> n’est pas une référence Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic), l’exception actuelle est levée dans un bloc <ph id="ph2">&lt;see langword="catch" /&gt;</ph> qui gère l’exception interne.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.TypeInitializationException" /&gt;</ph> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.TypeInitializationException" /&gt;</ph> avec le message d'erreur par défaut, le nom de type spécifié et une référence à l'exception interne qui est la cause première de cette exception.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">Une exception qui est levée en conséquence directe d'une exception précédente peut contenir une référence à l'exception précédente dans la propriété <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> retourne la même valeur que celle qui a été passée dans le constructeur ou une référence Null (<ph id="ph2">`Nothing`</ph> en Visual Basic), si la propriété <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> ne fournit pas la valeur de l'exception interne au constructeur.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>.</source>
          <target state="translated">Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">Value</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">La référence à l'exception interne.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The localized error message string.</source>
          <target state="translated">Chaîne du message d'erreur localisé.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The name of the type.</source>
          <target state="translated">Nom du type.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> qui contient les données d'objet sérialisées concernant l'exception levée.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> qui contient des informations contextuelles relatives à la source ou à la destination.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Sets the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with the type name and additional exception information.</source>
          <target state="translated">Définit l'objet <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> à l'aide du nom de type et d'autres informations se rapportant à l'exception.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.TypeInitializationException.TypeName">
          <source>Gets the fully qualified name of the type that fails to initialize.</source>
          <target state="translated">Obtient le nom qualifié complet du type dont l'initialisation a échoué.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.TypeInitializationException.TypeName">
          <source>The fully qualified name of the type that fails to initialize.</source>
          <target state="translated">Nom qualifié complet du type dont l'initialisation a échoué.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>