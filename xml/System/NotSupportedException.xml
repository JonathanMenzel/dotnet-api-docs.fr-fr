<Type Name="NotSupportedException" FullName="System.NotSupportedException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8efb79e649d8ac96df50ccdc12c788e3be082c83" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729983" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NotSupportedException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit NotSupportedException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.NotSupportedException" />
  <TypeSignature Language="VB.NET" Value="Public Class NotSupportedException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class NotSupportedException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exception levée quand une méthode appelée n'est pas prise en charge ou pendant une tentative de lecture, recherche ou écriture dans un flux qui ne prend pas en charge la fonctionnalité appelée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.NotSupportedException> Indique qu’aucune implémentation n’existe pour une méthode appelée ou une propriété.  
  
 <xref:System.NotSupportedException> utilise le HRESULT COR_E_NOTSUPPORTED dont la valeur est 0 x 80131515.  
  
 Pour obtenir la liste de valeurs de propriété initiales d’une instance de <xref:System.NotSupportedException>, consultez la <xref:System.NotSupportedException.%23ctor%2A> constructeurs.  
  
## <a name="throwing-a-notsupportedexception-exception"></a>Lever une exception NotSupportedException  
 Vous pouvez envisager de lever une <xref:System.NotSupportedException> exception dans les cas suivants :  
  
-   Vous implémentez une interface à usage général, et plusieurs méthodes n’ont aucune implémentation explicite. Par exemple, si vous créez une date et heure de type qui implémente le <xref:System.IConvertible> interface, vous devez lever une <xref:System.NotSupportedException> exception pour la plupart des conversions.  
  
-   Vous avez hérité d’une classe abstraite qui requiert que vous substituez un certain nombre de méthodes. Toutefois, vous êtes prêt uniquement à fournir une implémentation pour un sous-ensemble de ces. Pour les méthodes que vous décidez de ne pas mettre en œuvre, vous pouvez choisir de lever une <xref:System.NotSupportedException>.  
  
-   Vous définissez un type à usage général avec un état qui autorise des opérations conditionnellement. Par exemple, votre type peut être en lecture seule ou lecture-écriture. Dans ce cas :  
  
    -   Si l’objet est en lecture seule, essayez d’assigner des valeurs aux propriétés d’une instance ou appellent des méthodes qui modifient l’état de l’instance doit lever une <xref:System.NotSupportedException> exception.  
  
    -   Vous devez implémenter une propriété qui retourne un <xref:System.Boolean> valeur qui indique si la fonctionnalité spécifique est disponible. Par exemple, pour un type qui peut être en lecture seule ou en lecture-écriture, vous pouvez implémenter un `IsReadOnly` propriété qui indique si l’ensemble des méthodes de lecture-écriture sont disponibles ou non disponible.  
  
## <a name="handling-a-notsupportedexception-exception"></a>Gestion d’une exception NotSupportedException  
 Le <xref:System.NotSupportedException> exception indique qu’une méthode n’a aucune implémentation et que vous ne devez pas l’appeler.  Vous ne devez pas gérer l’exception. Au lieu de cela, vous devez effectuer varie sur la cause de l’exception : si une implémentation est totalement absente ou l’appel de membre n’est pas cohérente dans le but d’un objet (tel qu’un appel à la <xref:System.IO.FileStream.Read%2A?displayProperty=nameWithType> méthode en lecture seule <xref:System.IO.FileStream> objet .  
  
 **Une implémentation n’a pas été fournie, car l’opération ne peut pas être effectuée de manière explicite.**  
 Il s’agit d’une exception courante lorsque vous appelez des méthodes sur un objet qui fournit des implémentations pour les méthodes de classe de base abstraite, ou qui implémente une interface à usage général et la méthode n’a aucune implémentation explicite.  
  
 Par exemple, le <xref:System.Convert> la classe implémente le <xref:System.IConvertible> interface, ce qui signifie qu’il doit inclure une méthode pour convertir tous les types primitifs de tous les autres types primitifs. La plupart de ces conversions, toutefois, ne sont pas possibles. Par conséquent, un appel à la <xref:System.Convert.ToBoolean%28System.DateTime%29?displayProperty=nameWithType> (méthode), par exemple, lève un <xref:System.NotSupportedException> exception, car il n’existe aucune conversion possible entre un <xref:System.DateTime> et un <xref:System.Boolean> valeur  
  
 Pour éliminer l’exception, vous devez supprimer l’appel de méthode.  
  
 **L’appel de méthode n’est pas pris en charge l’état de l’objet.**  
 Vous tentez d’appeler un membre dont la fonctionnalité n’est pas disponible en raison de l’état de l’objet. Vous pouvez éliminer l’exception de trois manières :  
  
-   Vous connaissez l’état de l’objet à l’avance, mais que vous avez appelé une méthode non prise en charge ou une propriété. Dans ce cas, l’appel de membre est une erreur, et vous pouvez l’éliminer.  
  
-   Vous connaissez l’état de l’objet à l’avance (généralement parce que votre code a instancié), mais l’objet est mal configuré. L’exemple suivant illustre ce problème. Il crée en lecture seule <xref:System.IO.FileStream> objet, puis tente d’y écrire.  
  
     [!code-csharp[System.NotSupportedException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.NotSupportedException/cs/BadState1.cs#1)]
     [!code-vb[System.NotSupportedException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.NotSupportedException/vb/BadState1.vb#1)]  
  
     Vous pouvez éliminer l’exception en veillant à ce que l’objet instancié prend en charge les fonctionnalités que vous avez l’intention. L’exemple suivant résout le problème en lecture seule <xref:System.IO.FileStream> en fournissant les arguments appropriés pour le <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%29?displayProperty=nameWithType> constructeur.  
  
-   Vous ne connaissez pas l’état de l’objet à l’avance, et l’objet ne prend pas en charge une opération particulière. Dans la plupart des cas, l’objet doit inclure une propriété ou une méthode qui indique si elle prend en charge un ensemble spécifique d’opérations. Vous pouvez éliminer l’exception en vérifiant la valeur de l’objet et en appelant le membre uniquement si nécessaire.  
  
     L’exemple suivant définit un `DetectEncoding` méthode qui lève un <xref:System.NotSupportedException> exception lorsqu’il tente de lire à partir du début d’un flux qui ne prend pas en charge l’accès en lecture.  
  
     [!code-csharp[System.NotSupportedException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.NotSupportedException/cs/TestProp1.cs#3)]
     [!code-vb[System.NotSupportedException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.NotSupportedException/vb/TestProp1.vb#3)]  
  
     Vous pouvez éliminer l’exception en examinant la valeur de la <xref:System.IO.FileStream.CanRead%2A?displayProperty=nameWithType> de propriété et de sortie de la méthode si le flux est en lecture seule.  
  
     [!code-csharp[System.NotSupportedException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.NotSupportedException/cs/TestProp2.cs#4)]
     [!code-vb[System.NotSupportedException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.NotSupportedException/vb/TestProp2.vb#4)]  
  
## <a name="related-exception-types"></a>Types d’exceptions associées  
 Le <xref:System.NotSupportedException> exception est étroitement liée à deux autres types d’exception ;  
  
 <xref:System.NotImplementedException>.  
 Cette exception est levée lorsqu’une méthode peut être implémentée, mais n’est pas, soit parce que le membre sera implémenté dans une version ultérieure, le membre n’est pas disponible sur une plateforme spécifique, ou le membre appartient à une classe abstraite et une classe dérivée doit fournir un message instantané plementation.  
  
 <xref:System.InvalidOperationException>  
 Cette exception est levée dans les scénarios dans lesquels il est généralement parfois possible de l’objet effectuer l’opération demandée, et l’état de l’objet détermine si l’opération peut être effectuée.  
  
## <a name="net-compact-framework-notes"></a>Notes de .NET compact Framework  
 Lorsque vous utilisez [!INCLUDE[Compact](~/includes/compact-md.md)] et P/Invoke sur une fonction native, cette exception peut être levée dans les cas suivants :  
  
-   la déclaration dans le code managé est incorrecte ;  
  
-   [!INCLUDE[Compact](~/includes/compact-md.md)] ne prend pas en charge l'opération que vous tentez d'effectuer ;  
  
-   les noms de DLL sont tronqués lors de l'exportation.  
  
 Si un <xref:System.NotSupportedException.%23ctor%2A> exception est levée, vérifiez :  
  
-   Recherchez toutes violations des restrictions P/Invoke de [!INCLUDE[Compact](~/includes/compact-md.md)].  
  
-   Recherchez tous les arguments qui requièrent de la mémoire pré-allouée. Si vous en trouvez, vous devez passer une référence à une variable existante.  
  
-   Vérifiez que les noms des fonctions exportées sont corrects. Cela peut être vérifié avec [DumpBin.exe](https://msdn.microsoft.com/library/c1h23y6c.aspx).  
  
-   Vérifiez que vous n'essayez pas de passer un trop grand nombre d'arguments.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.IO.FileStream" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.NotSupportedException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NotSupportedException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NotSupportedException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NotSupportedException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.NotSupportedException" />, en affectant un message système décrivant l'erreur à la propriété <see cref="P:System.Exception.Message" /> de la nouvelle instance. Ce message prend en compte la culture système en cours.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.NotSupportedException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur localisé.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NotSupportedException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NotSupportedException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NotSupportedException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see cref="T:System.String" /> qui décrit l'erreur. Le contenu du <c>message</c> doit être compréhensible pour les utilisateurs. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.NotSupportedException" /> avec un message d'erreur spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.NotSupportedException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NotSupportedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; NotSupportedException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
        <param name="context">Informations contextuelles sur la source ou la destination.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.NotSupportedException" /> avec des données sérialisées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur est appelé lors de la désérialisation pour reconstituer l’objet exception transmis sur un flux. Pour plus d’informations, consultez [sérialisation XML et SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NotSupportedException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NotSupportedException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NotSupportedException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
        <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <c>innerException</c> n’est pas une référence Null, l’exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l’exception interne.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.NotSupportedException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une exception levée en conséquence directe d'une exception précédente doit contenir une référence à celle-ci dans la propriété <xref:System.Exception.InnerException%2A>. La propriété <xref:System.Exception.InnerException%2A> retourne la même valeur que celle qui a été passée dans le constructeur ou retourne `null` si la propriété <xref:System.Exception.InnerException%2A> ne fournit pas la valeur d'exception interne au constructeur.  
  
 Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <xref:System.NotSupportedException>.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|La référence à l'exception interne.|  
|<xref:System.Exception.Message%2A>|Chaîne du message d'erreur.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>