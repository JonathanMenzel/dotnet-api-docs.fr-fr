<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f1ee32cae285a624ff6ceecaa94663848cf18034" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728563" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit les fonctionnalités qui permettent de mettre en forme la valeur d'un objet en une représentation de chaîne.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IFormattable> interface convertit un objet en sa représentation sous forme de chaîne selon une chaîne de format et un fournisseur de format.  
  
 En règle générale, une chaîne de format définit l’aspect général d’un objet. Par exemple, le .NET Framework prend en charge les éléments suivants :  
  
-   Chaînes de format standard pour mettre en forme des valeurs d’énumération (consultez [chaînes de Format d’énumération](~/docs/standard/base-types/enumeration-format-strings.md)).  
  
-   Les chaînes de format standard et personnalisées pour la mise en forme des valeurs numériques (consultez [des chaînes de Format numériques Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) et [les chaînes de Format numériques personnalisées](~/docs/standard/base-types/custom-numeric-format-strings.md)).  
  
-   Les chaînes de format standard et personnalisées pour la mise en forme des valeurs de date et d’heure (consultez [Standard de Date et heure des chaînes de Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [personnalisé chaînes de Date et heure Format](~/docs/standard/base-types/custom-date-and-time-format-strings.md)).  
  
-   Chaînes de format standard et personnalisés pour mettre en forme les intervalles de temps (consultez [des chaînes de Format TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) et [des chaînes de Format TimeSpan personnalisées](~/docs/standard/base-types/custom-timespan-format-strings.md)).  
  
 Vous pouvez également définir vos propres chaînes de format pour prendre en charge la mise en forme de vos types définis par l’application.  
  
 Un fournisseur de format retourne un objet de mise en forme qui en général définit les symboles utilisés pour convertir un objet en sa représentation sous forme de chaîne. Par exemple, lorsque vous convertissez un nombre en une valeur monétaire, un fournisseur de format définit le symbole de devise qui apparaît dans la chaîne de résultat. Le .NET Framework définit trois fournisseurs de format :  
  
-   Le <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> (classe), qui retourne un <xref:System.Globalization.NumberFormatInfo> objet pour mettre en forme des valeurs numériques, ou un <xref:System.Globalization.DateTimeFormatInfo> objet pour mettre en forme des valeurs de date et d’heure.  
  
-   Le <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> (classe), qui retourne une instance d’elle-même pour mettre en forme des valeurs numériques.  
  
-   Le <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> (classe), qui retourne une instance d’elle-même pour mettre en forme des valeurs de date et d’heure.  
  
 En outre, vous pouvez définir vos propres fournisseurs de format personnalisée pour fournir spécifiques à la culture, profession spécifiques, ou des informations spécifiques de l’industrie utilisés dans la mise en forme. Pour plus d’informations sur l’implémentation de la mise en forme personnalisée à l’aide d’un fournisseur de format personnalisé, consultez <xref:System.ICustomFormatter>.  
  
 Le <xref:System.IFormattable> interface définit une méthode unique, <xref:System.IFormattable.ToString%2A>, qui fournit des services de mise en forme pour le type d’implémentation. Le <xref:System.IFormattable.ToString%2A> méthode peut être appelée directement. En outre, elle est appelée automatiquement par le <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> et <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthodes et par les méthodes qui utilisent la [la fonctionnalité de mise en forme composite](~/docs/standard/base-types/composite-formatting.md) dans le .NET Framework. Ces méthodes incluent <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, <xref:System.String.Format%2A?displayProperty=nameWithType>, et <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, entre autres. Le <xref:System.IFormattable.ToString%2A> méthode est appelée pour chaque élément de format de chaîne de format de la méthode.  
  
 Le <xref:System.IFormattable> interface est implémentée par les types de base de données.  
  
   
  
## Examples  
 L'exemple suivant définit une classe `Temperature` qui implémente l'interface <xref:System.IFormattable> . La classe prend en charge quatre spécificateurs de format : « G » et « C », qui indiquent que la température doit être affichée en degrés Celsius ; « F », ce qui indique que la température doit être affichée en degrés Fahrenheit ; et « K », qui indique que la température est à afficher en Kelvin. En outre, le <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implémentation peut également gérer une chaîne de format est `null` ou vide. Les deux autres `ToString` méthodes définies par le `Temperature` classe encapsulent simplement un appel à la <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implémentation.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 L’exemple suivant appelle ensuite la <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implémentation soit directement, soit à l’aide d’une chaîne de format composite.  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Les classes qui requièrent davantage de contrôle sur la mise en forme de chaînes à <see cref="M:System.Object.ToString" /> fournit doivent implémenter <see cref="T:System.IFormattable" />.  
  
 Une classe qui implémente <see cref="T:System.IFormattable" /> doit prendre en charge le spécificateur de format (général) « G ». Outre le spécificateur « G », la classe peut définir la liste des spécificateurs de format pris en charge. En outre, la classe doit être préparée à gérer un spécificateur de format est <see langword="null" />. Pour plus d’informations sur la mise en forme et les codes de mise en forme, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md)</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Format à utiliser.  
  
 - ou -  
  
 Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser le format par défaut défini pour le type de l'implémentation <see cref="T:System.IFormattable" />.</param>
        <param name="formatProvider">Fournisseur à utiliser pour mettre en forme la valeur.  
  
 - ou -  
  
 Référence null (<see langword="Nothing" /> en Visual Basic) pour obtenir les informations de mise en forme des nombres à partir des paramètres régionaux définis dans le système d'exploitation.</param>
        <summary>Met en forme la valeur de l’instance actuelle en utilisant le format spécifié.</summary>
        <returns>Valeur de l’instance actuelle dans le format spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IFormattable.ToString%2A> méthode convertit une valeur en une représentation sous forme de chaîne qui peut être exprimée de plusieurs façons. Son format précis dépend de symboles spécifiques ou d’un ordre spécifié défini par des cultures spécifiques, professions ou secteurs d’activité. Vous pouvez appeler la méthode directement. Il est également appelé automatiquement par le <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> et <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthodes et par les méthodes qui utilisent la mise en forme composite dans le .NET Framework, tel que <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, et <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. (Pour plus d’informations, consultez [mise en forme Composite](~/docs/standard/base-types/composite-formatting.md).)  
  
 Appel de méthodes de mise en forme composite du <xref:System.IFormattable.ToString%2A> méthode une fois pour chaque élément de format dans une chaîne de format. Les paramètres passés à la méthode dépendent de la méthode de mise en forme spécifique qui est appelée et du contenu de l’élément de format, comme suit :  
  
-   Si l’élément de format ne contient pas une chaîne de format (par exemple, si l’élément de format est simplement `{0}`), il est passé `null` comme valeur de le <xref:System.String?displayProperty=nameWithType> paramètre.  
  
-   Si l’élément de format contient une chaîne de format (par exemple, `{0:G}`), que la chaîne de format est passée en tant que la valeur de le <xref:System.String?displayProperty=nameWithType> paramètre.  
  
-   Si l’appel de méthode d’origine n’inclut pas un <xref:System.IFormatProvider?displayProperty=nameWithType> paramètre, <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> est passé en tant que la valeur de le <xref:System.IFormatProvider?displayProperty=nameWithType> paramètre.  
  
-   Si l’appel de méthode d’origine inclut un <xref:System.IFormatProvider?displayProperty=nameWithType> paramètre, le fournisseur qui est fourni dans l’appel de méthode est passé en tant que la valeur de le <xref:System.IFormatProvider?displayProperty=nameWithType> paramètre.  
  
> [!NOTE]
>  D’un objet <xref:System.IFormattable.ToString%2A> implémentation est appelée par les méthodes de mise en forme composite uniquement si elles ne sont pas transmis un <xref:System.ICustomFormatter> fournisseur de format, ou si le <xref:System.ICustomFormatter.Format%2A> méthode du fournisseur de format personnalisé retourne `null`.  
  
 Le .NET Framework inclut trois fournisseurs de format, qui implémentent la <xref:System.IFormatProvider> interface :  
  
-   <xref:System.Globalization.NumberFormatInfo> fournit les numérique mise en forme d’informations, telles que les caractères à utiliser pour décimale et séparateurs de groupes et l’orthographe et l’emplacement des symboles monétaires dans les valeurs monétaires.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Fournit des informations liées à la date et l’heure mise en forme, telles que la position du mois, le jour et l’année dans un modèle de date.  
  
-   <xref:System.Globalization.CultureInfo> contient la valeur par défaut de mise en forme des informations dans une culture spécifique, y compris les informations de format numérique, ainsi que les informations de mise en forme liées à la date et heure.  
  
 En outre, vous pouvez définir votre propre fournisseur de format personnalisé.  
  
   
  
## Examples  
 L’exemple suivant montre un `Temperature` classe qui implémente le <xref:System.IFormattable.ToString%2A> (méthode). Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.IFormattable> classe.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Le <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> méthode doit prendre en charge le spécificateur de format (général) « G ». Outre le spécificateur « G », la classe peut définir la liste des spécificateurs de format pris en charge. En outre, la classe doit être préparée à gérer un spécificateur de format est <see langword="null" />. Pour plus d’informations sur la mise en forme et les codes de mise en forme, consultez [mise en forme des Types](~/docs/standard/base-types/formatting-types.md).</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>