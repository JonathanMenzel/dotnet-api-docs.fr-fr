<Type Name="WindowsRuntimeSystemExtensions" FullName="System.WindowsRuntimeSystemExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="676d1214ee1c14d9eafe0ab9fda8c7f4fc6b18d5" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58455740" /></Metadata><TypeSignature Language="C#" Value="public static class WindowsRuntimeSystemExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WindowsRuntimeSystemExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.WindowsRuntimeSystemExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module WindowsRuntimeSystemExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsRuntimeSystemExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type WindowsRuntimeSystemExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="dotnet-uwp-10.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit les méthodes d’extension pour convertir les tâches en actions et opérations asynchrones Windows Runtime.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Le <xref:System.WindowsRuntimeSystemExtensions.AsTask%2A> surcharges de méthode d’extension vous permettent d’utiliser .NET <xref:System.Threading.Tasks.Task> objet pour gérer une opération asynchrone à partir de l’exécution de Windows.

Le <xref:System.WindowsRuntimeSystemExtensions.AsAsyncAction%2A> (méthode) et le <xref:System.WindowsRuntimeSystemExtensions.AsAsyncOperation%2A> méthode permettent à transmettre des tâches démarrées aux méthodes qui prennent des opérations et actions asynchrones Windows Runtime. Voir aussi les méthodes de la <xref:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo> classe.

Le <xref:System.WindowsRuntimeSystemExtensions.GetAwaiter%2A> méthodes sont utilisées par les compilateurs pour implémenter le <see langword="await" /> opération (<see langword="Await" /> en Visual Basic).

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsAsyncAction">
      <MemberSignature Language="C#" Value="public static Windows.Foundation.IAsyncAction AsAsyncAction (this System.Threading.Tasks.Task source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.Foundation.IAsyncAction AsAsyncAction(class System.Threading.Tasks.Task source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsAsyncAction(System.Threading.Tasks.Task)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsAsyncAction (source As Task) As IAsyncAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::Foundation::IAsyncAction ^ AsAsyncAction(System::Threading::Tasks::Task ^ source);" />
      <MemberSignature Language="F#" Value="static member AsAsyncAction : System.Threading.Tasks.Task -&gt; Windows.Foundation.IAsyncAction" Usage="System.WindowsRuntimeSystemExtensions.AsAsyncAction source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Task" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">Tâche démarrée.</param>
        <summary>Retourne une action asynchrone Windows Runtime qui représente une tâche initiée.</summary>
        <returns>Instance <see cref="T:Windows.Foundation.IAsyncAction" /> qui représente la tâche démarrée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.Threading.Tasks.Task>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode lorsque vous souhaitez passer d’une tâche à une méthode Windows Runtime qui effectue une action asynchrone.

Le <xref:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo> classe fournit des méthodes statiques (`Shared` méthodes en Visual Basic) qui créer et démarrer les actions asynchrones Windows Runtime qui représentent les tâches qui peuvent répondre aux demandes d’annulation et signaler la progression. 

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="source" /> est une tâche non démarrée.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsAsyncOperation&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static Windows.Foundation.IAsyncOperation&lt;TResult&gt; AsAsyncOperation&lt;TResult&gt; (this System.Threading.Tasks.Task&lt;TResult&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.Foundation.IAsyncOperation`1&lt;!!TResult&gt; AsAsyncOperation&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsAsyncOperation``1(System.Threading.Tasks.Task{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsAsyncOperation(Of TResult) (source As Task(Of TResult)) As IAsyncOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::Foundation::IAsyncOperation&lt;TResult&gt; ^ AsAsyncOperation(System::Threading::Tasks::Task&lt;TResult&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsAsyncOperation : System.Threading.Tasks.Task&lt;'Result&gt; -&gt; Windows.Foundation.IAsyncOperation&lt;'Result&gt;" Usage="System.WindowsRuntimeSystemExtensions.AsAsyncOperation source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Task&lt;TResult&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type qui retourne le résultat.</typeparam>
        <param name="source">Tâche démarrée.</param>
        <summary>Retourne une opération asynchrone Windows Runtime qui représente une tâche démarrée qui retourne un résultat.</summary>
        <returns>Instance <see cref="T:Windows.Foundation.IAsyncOperation`1" /> qui représente la tâche démarrée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.Threading.Tasks.Task>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode lorsque vous souhaitez passer une tâche qui retourne un résultat à une méthode Windows Runtime qui prend une opération asynchrone.

Le <xref:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo> classe fournit des méthodes statiques (`Shared` méthodes en Visual Basic) qui créer et démarrer des opérations asynchrones Windows Runtime qui représentent les tâches qui retournent des résultats et peuvent répondre aux demandes d’annulation et signaler la progression.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="source" /> est une tâche non démarrée.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AsTask (this Windows.Foundation.IAsyncAction source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AsTask(class Windows.Foundation.IAsyncAction source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsTask (source As IAsyncAction) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ AsTask(Windows::Foundation::IAsyncAction ^ source);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncAction -&gt; System.Threading.Tasks.Task" Usage="System.WindowsRuntimeSystemExtensions.AsTask source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncAction" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">Action asynchrone.</param>
        <summary>Retourne une tâche qui représente une action asynchrone Windows Runtime.</summary>
        <returns>Tâche qui représente l'action asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncAction>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task> objets simplifient la coordination des opérations asynchrones.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AsTask (this Windows.Foundation.IAsyncAction source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AsTask(class Windows.Foundation.IAsyncAction source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ AsTask(Windows::Foundation::IAsyncAction ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncAction * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.WindowsRuntimeSystemExtensions.AsTask (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncAction" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">Action asynchrone.</param>
        <param name="cancellationToken">Jeton qui peut être utilisé pour demander l'annulation de l'action asynchrone.</param>
        <summary>Retourne une tâche qui représente une action asynchrone Windows Runtime qui peut être annulée.</summary>
        <returns>Tâche qui représente l'action asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncAction>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task> objets simplifient la coordination des opérations asynchrones.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AsTask&lt;TProgress&gt; (this Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AsTask&lt;TProgress&gt;(class Windows.Foundation.IAsyncActionWithProgress`1&lt;!!TProgress&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsTask(Of TProgress) (source As IAsyncActionWithProgress(Of TProgress)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ AsTask(Windows::Foundation::IAsyncActionWithProgress&lt;TProgress&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncActionWithProgress&lt;'Progress&gt; -&gt; System.Threading.Tasks.Task" Usage="System.WindowsRuntimeSystemExtensions.AsTask source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Action asynchrone.</param>
        <summary>Retourne une tâche qui représente une action asynchrone Windows Runtime.</summary>
        <returns>Tâche qui représente l'action asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncActionWithProgress%601>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task> objets simplifient la coordination des opérations asynchrones.

Appel de cette surcharge de méthode revient à appeler le <xref:System.WindowsRuntimeSystemExtensions.AsTask%60%602(Windows.Foundation.IAsyncOperationWithProgress{%60%600,%60%601},System.IProgress{%60%601})> surcharge de méthode d’extension et en spécifiant <see langword="null" /> pour le <paramref name="progress" /> paramètre. Cela est utile lorsque vous ne souhaitez pas obtenir des rapports de progression à partir d’une action qui signale la progression.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AsTask&lt;TProgress&gt; (this Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt; source, IProgress&lt;TProgress&gt; progress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AsTask&lt;TProgress&gt;(class Windows.Foundation.IAsyncActionWithProgress`1&lt;!!TProgress&gt; source, class System.IProgress`1&lt;!!TProgress&gt; progress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.IProgress{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsTask(Of TProgress) (source As IAsyncActionWithProgress(Of TProgress), progress As IProgress(Of TProgress)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ AsTask(Windows::Foundation::IAsyncActionWithProgress&lt;TProgress&gt; ^ source, IProgress&lt;TProgress&gt; ^ progress);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncActionWithProgress&lt;'Progress&gt; * IProgress&lt;'Progress&gt; -&gt; System.Threading.Tasks.Task" Usage="System.WindowsRuntimeSystemExtensions.AsTask (source, progress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;" RefType="this" />
        <Parameter Name="progress" Type="System.IProgress&lt;TProgress&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Action asynchrone.</param>
        <param name="progress">Objet qui reçoit des mises à jour de progression.</param>
        <summary>Retourne une tâche qui représente une action asynchrone Windows Runtime qui signale la progression.</summary>
        <returns>Tâche qui représente l'action asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncActionWithProgress%601>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task> objets simplifient la coordination des opérations asynchrones.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AsTask&lt;TProgress&gt; (this Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AsTask&lt;TProgress&gt;(class Windows.Foundation.IAsyncActionWithProgress`1&lt;!!TProgress&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ AsTask(Windows::Foundation::IAsyncActionWithProgress&lt;TProgress&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncActionWithProgress&lt;'Progress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.WindowsRuntimeSystemExtensions.AsTask (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Action asynchrone.</param>
        <param name="cancellationToken">Jeton qui peut être utilisé pour demander l'annulation de l'action asynchrone.</param>
        <summary>Retourne une tâche qui représente une action asynchrone Windows Runtime qui peut être annulée.</summary>
        <returns>Tâche qui représente l'action asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncActionWithProgress%601>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task> objets simplifient la coordination des opérations asynchrones.

Appel de cette surcharge de méthode revient à appeler le <xref:System.WindowsRuntimeSystemExtensions.AsTask%60%602(Windows.Foundation.IAsyncOperationWithProgress{%60%600,%60%601},System.Threading.CancellationToken,System.IProgress{%60%601})> surcharge de méthode d’extension et en spécifiant <see langword="null" /> pour le <paramref name="progress" /> paramètre. Cela est utile lorsque vous ne souhaitez pas obtenir des rapports de progression à partir d’une action qui signale la progression.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AsTask&lt;TProgress&gt; (this Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt; source, System.Threading.CancellationToken cancellationToken, IProgress&lt;TProgress&gt; progress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AsTask&lt;TProgress&gt;(class Windows.Foundation.IAsyncActionWithProgress`1&lt;!!TProgress&gt; source, valuetype System.Threading.CancellationToken cancellationToken, class System.IProgress`1&lt;!!TProgress&gt; progress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken,System.IProgress{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ AsTask(Windows::Foundation::IAsyncActionWithProgress&lt;TProgress&gt; ^ source, System::Threading::CancellationToken cancellationToken, IProgress&lt;TProgress&gt; ^ progress);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncActionWithProgress&lt;'Progress&gt; * System.Threading.CancellationToken * IProgress&lt;'Progress&gt; -&gt; System.Threading.Tasks.Task" Usage="System.WindowsRuntimeSystemExtensions.AsTask (source, cancellationToken, progress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="progress" Type="System.IProgress&lt;TProgress&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Action asynchrone.</param>
        <param name="cancellationToken">Jeton qui peut être utilisé pour demander l'annulation de l'action asynchrone.</param>
        <param name="progress">Objet qui reçoit des mises à jour de progression.</param>
        <summary>Retourne une tâche qui représente une action asynchrone Windows Runtime qui signale une progression et peut être annulée.</summary>
        <returns>Tâche qui représente l'action asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncActionWithProgress%601>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task> objets simplifient la coordination des opérations asynchrones.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; AsTask&lt;TResult&gt; (this Windows.Foundation.IAsyncOperation&lt;TResult&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; AsTask&lt;TResult&gt;(class Windows.Foundation.IAsyncOperation`1&lt;!!TResult&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsTask(Of TResult) (source As IAsyncOperation(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ AsTask(Windows::Foundation::IAsyncOperation&lt;TResult&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncOperation&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.WindowsRuntimeSystemExtensions.AsTask source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncOperation&lt;TResult&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type d'objet qui retourne le résultat de l'opération asynchrone.</typeparam>
        <param name="source">Opération asynchrone.</param>
        <summary>Retourne une tâche qui représente une opération asynchrone Windows Runtime qui retourne un résultat.</summary>
        <returns>Tâche qui représente l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncActionWithProgress%601>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task%601> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task%601> objets simplifient la coordination des opérations asynchrones.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; AsTask&lt;TResult&gt; (this Windows.Foundation.IAsyncOperation&lt;TResult&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; AsTask&lt;TResult&gt;(class Windows.Foundation.IAsyncOperation`1&lt;!!TResult&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ AsTask(Windows::Foundation::IAsyncOperation&lt;TResult&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncOperation&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.WindowsRuntimeSystemExtensions.AsTask (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncOperation&lt;TResult&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type d'objet qui retourne le résultat de l'opération asynchrone.</typeparam>
        <param name="source">Opération asynchrone.</param>
        <param name="cancellationToken">Jeton qui peut être utilisé pour demander l'annulation de l'opération asynchrone.</param>
        <summary>Retourne une tâche qui représente une opération asynchrone Windows Runtime qui retourne un résultat et peut être annulée.</summary>
        <returns>Tâche qui représente l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncActionWithProgress%601>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task%601> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task%601> objets simplifient la coordination des opérations asynchrones.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TResult,TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; AsTask&lt;TResult,TProgress&gt; (this Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; AsTask&lt;TResult, TProgress&gt;(class Windows.Foundation.IAsyncOperationWithProgress`2&lt;!!TResult, !!TProgress&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsTask(Of TResult, TProgress) (source As IAsyncOperationWithProgress(Of TResult, TProgress)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult, typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ AsTask(Windows::Foundation::IAsyncOperationWithProgress&lt;TResult, TProgress&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncOperationWithProgress&lt;'Result, 'Progress&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.WindowsRuntimeSystemExtensions.AsTask source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type d'objet qui retourne le résultat de l'opération asynchrone.</typeparam>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Opération asynchrone.</param>
        <summary>Retourne une tâche qui représente une opération asynchrone Windows Runtime qui retourne un résultat.</summary>
        <returns>Tâche qui représente l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncOperationWithProgress%602>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task%601> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task%601> objets simplifient la coordination des opérations asynchrones. 

Appel de cette surcharge de méthode revient à appeler le <xref:System.WindowsRuntimeSystemExtensions.AsTask%60%602(Windows.Foundation.IAsyncOperationWithProgress{%60%600,%60%601},System.IProgress{%60%601})> surcharge de méthode d’extension et en spécifiant <see langword="null" /> pour le <paramref name="progress" /> paramètre. Cela est utile lorsque vous ne souhaitez pas obtenir des rapports de progression à partir d’une action qui signale la progression.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TResult,TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; AsTask&lt;TResult,TProgress&gt; (this Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt; source, IProgress&lt;TProgress&gt; progress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; AsTask&lt;TResult, TProgress&gt;(class Windows.Foundation.IAsyncOperationWithProgress`2&lt;!!TResult, !!TProgress&gt; source, class System.IProgress`1&lt;!!TProgress&gt; progress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.IProgress{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsTask(Of TResult, TProgress) (source As IAsyncOperationWithProgress(Of TResult, TProgress), progress As IProgress(Of TProgress)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult, typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ AsTask(Windows::Foundation::IAsyncOperationWithProgress&lt;TResult, TProgress&gt; ^ source, IProgress&lt;TProgress&gt; ^ progress);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncOperationWithProgress&lt;'Result, 'Progress&gt; * IProgress&lt;'Progress&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.WindowsRuntimeSystemExtensions.AsTask (source, progress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;" RefType="this" />
        <Parameter Name="progress" Type="System.IProgress&lt;TProgress&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type d'objet qui retourne le résultat de l'opération asynchrone.</typeparam>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Opération asynchrone.</param>
        <param name="progress">Objet qui reçoit des mises à jour de progression.</param>
        <summary>Retourne une tâche qui représente une opération asynchrone Windows Runtime qui retourne un résultat et signale une progression.</summary>
        <returns>Tâche qui représente l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncOperationWithProgress%602>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task%601> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task%601> objets simplifient la coordination des opérations asynchrones.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TResult,TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; AsTask&lt;TResult,TProgress&gt; (this Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; AsTask&lt;TResult, TProgress&gt;(class Windows.Foundation.IAsyncOperationWithProgress`2&lt;!!TResult, !!TProgress&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult, typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ AsTask(Windows::Foundation::IAsyncOperationWithProgress&lt;TResult, TProgress&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncOperationWithProgress&lt;'Result, 'Progress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.WindowsRuntimeSystemExtensions.AsTask (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type d'objet qui retourne le résultat de l'opération asynchrone.</typeparam>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Opération asynchrone.</param>
        <param name="cancellationToken">Jeton qui peut être utilisé pour demander l'annulation de l'opération asynchrone.</param>
        <summary>Retourne une tâche qui représente une opération asynchrone Windows Runtime qui retourne un résultat et peut être annulée.</summary>
        <returns>Tâche qui représente l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncOperationWithProgress%602>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task%601> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task%601> objets simplifient la coordination des opérations asynchrones.

Appel de cette surcharge de méthode revient à appeler le <xref:System.WindowsRuntimeSystemExtensions.AsTask%60%602(Windows.Foundation.IAsyncOperationWithProgress{%60%600,%60%601},System.Threading.CancellationToken,System.IProgress{%60%601})> surcharge de méthode d’extension et en spécifiant <see langword="null" /> pour le <paramref name="progress" /> paramètre. Cela est utile lorsque vous ne souhaitez pas obtenir des rapports de progression à partir d’une action qui signale la progression.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsTask&lt;TResult,TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; AsTask&lt;TResult,TProgress&gt; (this Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt; source, System.Threading.CancellationToken cancellationToken, IProgress&lt;TProgress&gt; progress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; AsTask&lt;TResult, TProgress&gt;(class Windows.Foundation.IAsyncOperationWithProgress`2&lt;!!TResult, !!TProgress&gt; source, valuetype System.Threading.CancellationToken cancellationToken, class System.IProgress`1&lt;!!TProgress&gt; progress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken,System.IProgress{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult, typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ AsTask(Windows::Foundation::IAsyncOperationWithProgress&lt;TResult, TProgress&gt; ^ source, System::Threading::CancellationToken cancellationToken, IProgress&lt;TProgress&gt; ^ progress);" />
      <MemberSignature Language="F#" Value="static member AsTask : Windows.Foundation.IAsyncOperationWithProgress&lt;'Result, 'Progress&gt; * System.Threading.CancellationToken * IProgress&lt;'Progress&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.WindowsRuntimeSystemExtensions.AsTask (source, cancellationToken, progress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="progress" Type="System.IProgress&lt;TProgress&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type d'objet qui retourne le résultat de l'opération asynchrone.</typeparam>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Opération asynchrone.</param>
        <param name="cancellationToken">Jeton qui peut être utilisé pour demander l'annulation de l'opération asynchrone.</param>
        <param name="progress">Objet qui reçoit des mises à jour de progression.</param>
        <summary>Retourne une tâche qui représente une opération asynchrone Windows Runtime qui retourne un résultat, signale une progression et peut être annulée.</summary>
        <returns>Tâche qui représente l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncOperationWithProgress%602>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Utilisez cette méthode pour obtenir un <xref:System.Threading.Tasks.Task%601> objet pour une opération asynchrone Windows Runtime. <xref:System.Threading.Tasks.Task%601> objets simplifient la coordination des opérations asynchrones.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.TaskAwaiter GetAwaiter (this Windows.Foundation.IAsyncAction source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.TaskAwaiter GetAwaiter(class Windows.Foundation.IAsyncAction source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.GetAwaiter(Windows.Foundation.IAsyncAction)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAwaiter (source As IAsyncAction) As TaskAwaiter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::TaskAwaiter GetAwaiter(Windows::Foundation::IAsyncAction ^ source);" />
      <MemberSignature Language="F#" Value="static member GetAwaiter : Windows.Foundation.IAsyncAction -&gt; System.Runtime.CompilerServices.TaskAwaiter" Usage="System.WindowsRuntimeSystemExtensions.GetAwaiter source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncAction" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">Action asynchrone à attendre.</param>
        <summary>Cette API prend en charge l'infrastructure .NET Framework et n'est pas destinée à être directement utilisée à partir de votre code.</summary>
        <returns>Objet qui attend l'action asynchrone spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type IAsyncAction. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter&lt;TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.TaskAwaiter GetAwaiter&lt;TProgress&gt; (this Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.TaskAwaiter GetAwaiter&lt;TProgress&gt;(class Windows.Foundation.IAsyncActionWithProgress`1&lt;!!TProgress&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncActionWithProgress{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAwaiter(Of TProgress) (source As IAsyncActionWithProgress(Of TProgress)) As TaskAwaiter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::TaskAwaiter GetAwaiter(Windows::Foundation::IAsyncActionWithProgress&lt;TProgress&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member GetAwaiter : Windows.Foundation.IAsyncActionWithProgress&lt;'Progress&gt; -&gt; System.Runtime.CompilerServices.TaskAwaiter" Usage="System.WindowsRuntimeSystemExtensions.GetAwaiter source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Action asynchrone à attendre.</param>
        <summary>Retourne un objet qui attend une action asynchrone qui signale une progression.</summary>
        <returns>Objet qui attend l'action asynchrone spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncActionWithProgress%601>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt; GetAwaiter&lt;TResult&gt; (this Windows.Foundation.IAsyncOperation&lt;TResult&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.TaskAwaiter`1&lt;!!TResult&gt; GetAwaiter&lt;TResult&gt;(class Windows.Foundation.IAsyncOperation`1&lt;!!TResult&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncOperation{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAwaiter(Of TResult) (source As IAsyncOperation(Of TResult)) As TaskAwaiter(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::TaskAwaiter&lt;TResult&gt; GetAwaiter(Windows::Foundation::IAsyncOperation&lt;TResult&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member GetAwaiter : Windows.Foundation.IAsyncOperation&lt;'Result&gt; -&gt; System.Runtime.CompilerServices.TaskAwaiter&lt;'Result&gt;" Usage="System.WindowsRuntimeSystemExtensions.GetAwaiter source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncOperation&lt;TResult&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type d'objet qui retourne le résultat de l'opération asynchrone.</typeparam>
        <param name="source">Opération asynchrone à attendre.</param>
        <summary>Retourne un objet qui attend une opération asynchrone qui retourne un résultat.</summary>
        <returns>Objet qui attend l'opération asynchrone spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type IAsyncOperation<TResult>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter&lt;TResult,TProgress&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt; GetAwaiter&lt;TResult,TProgress&gt; (this Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.TaskAwaiter`1&lt;!!TResult&gt; GetAwaiter&lt;TResult, TProgress&gt;(class Windows.Foundation.IAsyncOperationWithProgress`2&lt;!!TResult, !!TProgress&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.WindowsRuntimeSystemExtensions.GetAwaiter``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAwaiter(Of TResult, TProgress) (source As IAsyncOperationWithProgress(Of TResult, TProgress)) As TaskAwaiter(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult, typename TProgress&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::TaskAwaiter&lt;TResult&gt; GetAwaiter(Windows::Foundation::IAsyncOperationWithProgress&lt;TResult, TProgress&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member GetAwaiter : Windows.Foundation.IAsyncOperationWithProgress&lt;'Result, 'Progress&gt; -&gt; System.Runtime.CompilerServices.TaskAwaiter&lt;'Result&gt;" Usage="System.WindowsRuntimeSystemExtensions.GetAwaiter source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProgress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type d'objet qui retourne le résultat de l'opération asynchrone.</typeparam>
        <typeparam name="TProgress">Type d'objet qui fournit des données indiquant la progression.</typeparam>
        <param name="source">Opération asynchrone à attendre.</param>
        <summary>Retourne un objet qui attend une opération asynchrone qui signale une progression et retourne un résultat.</summary>
        <returns>Objet qui attend l'opération asynchrone spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:Windows.Foundation.IAsyncOperationWithProgress%602>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>