<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d48cebaf8bbea7d298b28ddcbd21a72d50046fb8" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57909981" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" Index="0" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Type du paramètre de la méthode encapsulée par ce délégué.</typeparam>
    <typeparam name="TResult">Type de la valeur de retour de la méthode encapsulée par ce délégué.</typeparam>
    <param name="arg">Paramètre de la méthode encapsulée par ce délégué.</param>
    <summary>Encapsule une méthode ayant un seul paramètre et retournant une valeur du type spécifié par le paramètre <typeparamref name="TResult" />.</summary>
    <returns>Valeur de retour de la méthode encapsulée par ce délégué.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser ce délégué pour représenter une méthode qui peut être passée en tant que paramètre sans déclarer explicitement un délégué personnalisé. La méthode encapsulée doit correspondre à la signature de méthode définie par ce délégué. Cela signifie que la méthode encapsulée doit avoir un paramètre qui est passé par valeur, et qu’elle doit retourner une valeur.  
  
> [!NOTE]
>  Pour référencer une méthode ayant un seul paramètre et retournant `void` (ou en Visual Basic, qui est déclaré comme un `Sub` plutôt que comme un `Function`), utiliser le modèle générique <xref:System.Action%601> déléguer à la place.  
  
 Lorsque vous utilisez le <xref:System.Func%602> délégué, vous n’avez pas à définir explicitement un délégué qui encapsule une méthode avec un seul paramètre. Par exemple, le code suivant déclare explicitement un délégué nommé `ConvertMethod` et assigne une référence à la `UppercaseString` méthode à son instance de délégué.  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 L’exemple suivant simplifie ce code en instanciant le <xref:System.Func%602> délégué au lieu de définir un nouveau délégué et lui assigner une méthode nommée explicitement.  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 Vous pouvez également utiliser le <xref:System.Func%602> déléguer avec les méthodes anonymes en c#, comme l’illustre l’exemple suivant. (Pour une introduction aux méthodes anonymes, consultez [méthodes anonymes](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 Vous pouvez également affecter une expression lambda à une <xref:System.Func%602> déléguer, comme l’illustre l’exemple suivant. (Pour une introduction aux expressions lambda, consultez [Expressions Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) et [Expressions Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 Le type sous-jacent d’une expression lambda est un des génériques `Func` délégués. Cela rend possible de passer d’une expression lambda en tant que paramètre sans lui assigner explicitement à un délégué. En particulier, étant donné que de nombreuses méthodes des types dans le <xref:System.Linq> espace de noms a <xref:System.Func%602> paramètres, vous pouvez passer ces méthodes une expression lambda sans instancier explicitement un <xref:System.Func%602> déléguer.  
  
   
  
## Examples  
 L’exemple suivant montre comment déclarer et utiliser un <xref:System.Func%602> déléguer. Cet exemple déclare un <xref:System.Func%602> variable et lui assigne une expression lambda qui convertit les caractères dans une chaîne en majuscules. Le délégué qui encapsule cette méthode est ensuite passé à la <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> méthode pour modifier les chaînes dans un tableau de chaînes en majuscules.  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Expressions lambda (Guide de programmation C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Expressions lambda (Visual Basic)</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Délégués (Guide de programmation C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Délégués (Visual Basic)</related>
  </Docs>
</Type>