<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Func`2.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac592c283526b5eff775e544f9b80f8037a8be49acc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92c283526b5eff775e544f9b80f8037a8be49acc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The type of the parameter of the method that this delegate encapsulates.</source>
          <target state="translated">Type du paramètre de la méthode encapsulée par ce délégué.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The type of the return value of the method that this delegate encapsulates.</source>
          <target state="translated">Type de la valeur de retour de la méthode encapsulée par ce délégué.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Func`2">
          <source>The parameter of the method that this delegate encapsulates.</source>
          <target state="translated">Paramètre de la méthode encapsulée par ce délégué.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Func`2">
          <source>Encapsulates a method that has one parameter and returns a value of the type specified by the <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> parameter.</source>
          <target state="translated">Encapsule une méthode ayant un seul paramètre et retournant une valeur du type spécifié par le paramètre <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Func`2">
          <source>The return value of the method that this delegate encapsulates.</source>
          <target state="translated">Valeur de retour de la méthode encapsulée par ce délégué.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</source>
          <target state="translated">Vous pouvez utiliser ce délégué pour représenter une méthode qui peut être passée en tant que paramètre sans déclarer explicitement un délégué personnalisé.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The encapsulated method must correspond to the method signature that is defined by this delegate.</source>
          <target state="translated">La méthode encapsulée doit correspondre à la signature de méthode définie par ce délégué.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</source>
          <target state="translated">Cela signifie que la méthode encapsulée doit avoir un paramètre qui est passé par valeur, et qu’elle doit retourner une valeur.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>To reference a method that has one parameter and returns <ph id="ph1">`void`</ph> (or in Visual Basic, that is declared as a <ph id="ph2">`Sub`</ph> rather than as a <ph id="ph3">`Function`</ph>), use the generic <ph id="ph4">&lt;xref:System.Action%601&gt;</ph> delegate instead.</source>
          <target state="translated">Référence à une méthode qui a un paramètre et retourne <ph id="ph1">`void`</ph> (ou en Visual Basic, qui est déclaré comme un <ph id="ph2">`Sub`</ph> plutôt que comme un <ph id="ph3">`Function`</ph>), utiliser le type générique <ph id="ph4">&lt;xref:System.Action%601&gt;</ph> déléguer à la place.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>When you use the <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</source>
          <target state="translated">Lorsque vous utilisez la <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> délégué, vous n’avez pas à définir explicitement un délégué qui encapsule une méthode avec un paramètre unique.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>For example, the following code explicitly declares a delegate named <ph id="ph1">`ConvertMethod`</ph> and assigns a reference to the <ph id="ph2">`UppercaseString`</ph> method to its delegate instance.</source>
          <target state="translated">Par exemple, le code suivant déclare explicitement un délégué nommé <ph id="ph1">`ConvertMethod`</ph> et assigne une référence à la <ph id="ph2">`UppercaseString`</ph> méthode à son instance de délégué.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The following example simplifies this code by instantiating the <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.</source>
          <target state="translated">L’exemple suivant simplifie ce code en instanciant le <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> délégué au lieu de définir un nouveau délégué et lui assigner une méthode nommée explicitement.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> délégué avec les méthodes anonymes en c#, comme l’illustre l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>(For an introduction to anonymous methods, see <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</source>
          <target state="translated">(Pour une introduction aux méthodes anonymes, consultez <bpt id="p1">[</bpt>méthodes anonymes<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>You can also assign a lambda expression to a <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate, as the following example illustrates.</source>
          <target state="translated">Vous pouvez également affecter une expression lambda à une <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> délégué, comme l’illustre l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>(For an introduction to lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</source>
          <target state="translated">(Pour une introduction aux expressions lambda, consultez <bpt id="p1">[</bpt>Expressions Lambda<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> et <bpt id="p2">[</bpt>Expressions Lambda<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The underlying type of a lambda expression is one of the generic <ph id="ph1">`Func`</ph> delegates.</source>
          <target state="translated">Le type sous-jacent d’une expression lambda est un des générique <ph id="ph1">`Func`</ph> délégués.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</source>
          <target state="translated">Cela rend possible de passer une expression lambda en tant que paramètre sans lui assigner explicitement à un délégué.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>In particular, because many methods of types in the <ph id="ph1">&lt;xref:System.Linq&gt;</ph> namespace have <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> parameters, you can pass these methods a lambda expression without explicitly instantiating a <ph id="ph3">&lt;xref:System.Func%602&gt;</ph> delegate.</source>
          <target state="translated">En particulier, car de nombreuses méthodes de types dans les <ph id="ph1">&lt;xref:System.Linq&gt;</ph> ont de l’espace de noms <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> paramètres, vous pouvez passer ces méthodes une expression lambda sans instancier explicitement un <ph id="ph3">&lt;xref:System.Func%602&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The following example demonstrates how to declare and use a <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate.</source>
          <target state="translated">L’exemple suivant montre comment déclarer et utiliser un <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>This example declares a <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> variable and assigns it a lambda expression that converts the characters in a string to uppercase.</source>
          <target state="translated">Cet exemple déclare un <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> variable et lui assigne une expression lambda qui convertit les caractères dans une chaîne en majuscules.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`2">
          <source>The delegate that encapsulates this method is subsequently passed to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType&gt;</ph> method to change the strings in an array of strings to uppercase.</source>
          <target state="translated">Le délégué qui encapsule cette méthode est ensuite passé à la <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType&gt;</ph> méthode pour modifier les chaînes dans un tableau de chaînes en majuscules.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>