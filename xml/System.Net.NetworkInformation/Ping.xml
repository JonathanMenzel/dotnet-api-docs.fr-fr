<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5fa7ba6d84ed2623ed1b3610b45ed32260e8d096" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733789" /></Metadata><TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permet à une application de déterminer si un ordinateur distant est accessible sur le réseau.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les applications utilisent la <xref:System.Net.NetworkInformation.Ping> classe pour détecter si un ordinateur distant est accessible.  
  
 Topologie de réseau peut déterminer si <xref:System.Net.NetworkInformation.Ping> peuvent contacter un hôte distant. La présence et la configuration des serveurs proxy, le matériel de traduction d’adresses réseau ou un pare-feu peuvent empêcher <xref:System.Net.NetworkInformation.Ping> de réussir. Un bon <xref:System.Net.NetworkInformation.Ping> indique uniquement que l’instance distante est accessible sur le réseau hôte ; la présence de services de niveau supérieur (par exemple, un serveur Web) sur l’hôte distant n’est pas garantie.  
  
 Cette classe fournit des fonctionnalités similaires à l’outil de ligne de commande Ping.exe. Le <xref:System.Net.NetworkInformation.Ping.Send%2A> et <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes envoient un message de demande d’écho ICMP Internet Control Message Protocol () pour un ordinateur distant et attend un message de réponse d’écho ICMP à partir de cet ordinateur. Pour obtenir une description détaillée des messages ICMP, consultez la RFC 792, disponible à l’adresse [ https://www.ietf.org ](https://www.ietf.org/).  
  
 Les types suivants sont utilisés avec la <xref:System.Net.NetworkInformation.Ping> classe et sont décrites en détail ci-dessous.  
  
|**Nom de type**|**Description**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|Définit les codes d’état qui décrivent le résultat d’un message de demande d’écho ICMP.|  
|<xref:System.Net.NetworkInformation.PingOptions>|Vous permet de configurer ou récupérer les paramètres qui contrôlent le nombre de fois où le paquet de demande peuvent être transférés (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>), et si elle peut être fragmenté (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ).|  
|<xref:System.Net.NetworkInformation.PingReply>|Contient les résultats d’une demande d’écho ICMP.|  
|<xref:System.Net.NetworkInformation.PingException>|Levée si une erreur irrécupérable se produit.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Contient les données associées <xref:System.Net.NetworkInformation.Ping.PingCompleted> événements, qui sont déclenchés lorsqu’un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appel se termine ou est annulé.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|Délégué qui fournit la méthode de rappel appelée quand un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appel se termine ou est annulé.|  
  
 Le <xref:System.Net.NetworkInformation.Ping.Send%2A> et <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes retournent la réponse dans un <xref:System.Net.NetworkInformation.PingReply> objet. Le <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType> propriété retourne un <xref:System.Net.NetworkInformation.IPStatus> valeur pour indiquer le résultat de la demande.  
  
 Lorsque vous envoyez la demande, vous devez spécifier l’ordinateur distant. Vous pouvez faire en fournissant un hôte de chaîne de nom, une adresse IP au format de chaîne, ou un <xref:System.Net.IPAddress> objet.  
  
 Vous pouvez également spécifier un des types suivants d’informations :  
  
-   Données accompagnant la demande. Spécification `buffer` permet de connaître la durée nécessaire au déplacement vers et depuis l’hôte distant et l’unité de transmission maximale du chemin d’accès réseau d’un paquet d’une taille particulière. (Consultez le <xref:System.Net.NetworkInformation.Ping.Send%2A> ou <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharges qui prennent un `buffer` paramètre.)  
  
-   Si le paquet d’écho ICMP peut être fragmenté en transit. (Consultez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété et la <xref:System.Net.NetworkInformation.Ping.Send%2A> ou <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharges qui prennent un `options` paramètre.)  
  
-   Combien de fois les nœuds de routage, tels que des routeurs ou des passerelles, peuvent transférer le paquet avant qu’il atteigne l’ordinateur de destination ou est ignoré. (Consultez <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> et <xref:System.Net.NetworkInformation.Ping.Send%2A> ou <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharges qui prennent un `options` paramètre.)  
  
-   La limite de temps au cours duquel la réponse doit être reçue. (Consultez le <xref:System.Net.NetworkInformation.Ping.Send%2A> ou <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharges qui prennent un `timeout` paramètre.  
  
 Le <xref:System.Net.NetworkInformation.Ping> classe propose des méthodes synchrones et asynchrones pour envoyer la requête. Si votre application doit être bloquée en attendant une réponse, utilisez le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes ; ces méthodes sont synchrones. Si votre application ne doit pas bloquer, utilisez asynchrone <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes. Un appel à <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> s’exécute dans son propre thread qui est alloué automatiquement du pool de threads. Quand l’opération asynchrone se termine, elle déclenche le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. Les applications utilisent un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué pour spécifier la méthode est appelée pour <xref:System.Net.NetworkInformation.Ping.PingCompleted> événements. Vous devez ajouter un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué à l’événement avant d’appeler <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. La méthode du délégué reçoit un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet qui contient un <xref:System.Net.NetworkInformation.PingReply> objet qui décrit le résultat de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler.  
  
 Vous ne pouvez pas utiliser la même instance de la <xref:System.Net.NetworkInformation.Ping> classe pour générer plusieurs demandes d’écho ICMP simultanées. Appelant <xref:System.Net.NetworkInformation.Ping.Send%2A> pendant un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appel est en cours ou l’appel <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> plusieurs fois avant que tous les appels précédents soient terminés provoque une <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Net.NetworkInformation.Ping> classe de façon synchrone.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Net.NetworkInformation.Ping> classe de façon asynchrone.  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/network-programming/how-to-ping-a-host.md">Procédure : exécution d’une requête ping</related>
    <related type="Article" href="~/docs/framework/network-programming/index.md">Programmation réseau dans le .NET Framework</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">Exemples de programmation réseau</related>
    <related type="Article" href="~/docs/framework/network-programming/networkinformation.md">NetworkInformation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.NetworkInformation.Ping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre la création d’un <xref:System.Net.NetworkInformation.Ping> instance. L’exemple complet est disponible dans le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
        <summary>Libère les ressources non managées utilisées par l'objet <see cref="T:System.Net.NetworkInformation.Ping" /> et supprime éventuellement les ressources managées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée par le public `Dispose()` (méthode) et le <xref:System.ComponentModel.Component.Finalize%2A> (méthode). Public `Dispose()` méthode appelle la méthode protégée <xref:System.Net.NetworkInformation.Ping.Dispose%2A> méthode avec le `disposing` paramètre défini sur `true`. <xref:System.ComponentModel.Component.Finalize%2A> appelle `Dispose` avec `disposing` défini sur `false`.  
  
 Lorsque le `disposing` paramètre est `true`, cette méthode libère toutes les ressources détenues par les objets managés par ce <xref:System.Net.NetworkInformation.Ping> références d’objet. Cette méthode appelle la méthode `Dispose()` de chaque objet référencé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> qui contient les données d’événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de la <xref:System.Net.NetworkInformation.Ping> classe peut substituer cette méthode pour effectuer des tâches supplémentaires, telles que la journalisation des données contenues dans le `e` paramètre.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lors de la substitution <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para></block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand une opération asynchrone pour envoyer un message ICMP d’écho et recevoir le message ICMP de réponse à écho correspondant se termine ou est annulée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les applications utilisent le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement pour obtenir des informations sur l’état d’achèvement et les données collectées par un appel à un de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes. Le <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué fournit l’appel de méthode de rappel appelée lorsque <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> déclenche cet événement.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la spécification d’une méthode de rappel pour le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. L’exemple complet est disponible dans le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Essaie d’envoyer un message ICMP d’écho à un ordinateur distant et de recevoir un message ICMP de réponse à écho correspondant de l’ordinateur distant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’adresse IP retournée par une de le <xref:System.Net.NetworkInformation.Ping.Send%2A> surcharges peuvent provenir d’un ordinateur distant malveillant. Ne connectez pas à l’ordinateur distant à l’aide de cela. Utiliser DNS pour déterminer l’adresse IP de l’ordinateur auquel vous souhaitez vous connecter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur.</summary>
        <returns>Objet <see cref="T:System.Net.NetworkInformation.PingReply" /> qui fournit des informations à propos du message ICMP de réponse à écho (le cas échéant) ou décrit la raison de l’échec si aucun message n’a été reçu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie à l’hôte spécifié par `address` 32 <xref:System.Byte> mémoire tampon de données avec le message ICMP d’écho. La méthode attend cinq secondes pour un message de réponse d’écho ICMP. Si elle ne reçoit pas une réponse pendant cette période, la méthode retourne et la <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Le paquet ou les fragments de paquet (en cas de fragmentation) peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.Send%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’appel de cette méthode.  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho à l’ordinateur spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur.</summary>
        <returns>Objet <see cref="T:System.Net.NetworkInformation.PingReply" /> qui fournit des informations à propos du message ICMP de réponse à écho (le cas échéant) ou fournit la raison de l’échec si aucun message n’a été reçu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie un 32 <xref:System.Byte> mémoire tampon de données avec le message ICMP d’écho. La méthode attend cinq secondes pour un message de réponse d’écho ICMP. Si elle ne reçoit pas une réponse pendant cette période, la méthode retourne et la <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Le paquet ou les fragments de paquet (en cas de fragmentation) peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.Send%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’appel de cette méthode.  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> a la valeur <see langword="null" /> ou est une chaîne vide ("").</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho. Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho avec le tampon de données spécifié à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette méthode vous permet de spécifier une valeur de délai d’attente pour l’opération.</summary>
        <returns>Objet <see cref="T:System.Net.NetworkInformation.PingReply" /> qui fournit des informations à propos du message ICMP de réponse à écho (le cas échéant) ou fournit la raison de l’échec si aucun message n’a été reçu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié dans le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Le paquet ou les fragments de paquet peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.Send%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Pour obtenir un exemple qui montre comment appeler un <xref:System.Net.NetworkInformation.Ping.Send%2A> (méthode), consultez le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho à l’ordinateur spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette méthode vous permet de spécifier une valeur de délai d’attente pour l’opération.</summary>
        <returns>Objet <see cref="T:System.Net.NetworkInformation.PingReply" /> qui fournit des informations à propos du message ICMP de réponse à écho (le cas échéant) ou fournit la raison de l’échec si aucun message n’a été reçu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié dans le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Le paquet ou les fragments de paquet (en cas de fragmentation) peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.Send%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Pour obtenir un exemple qui montre comment appeler un <xref:System.Net.NetworkInformation.Ping.Send%2A> (méthode), consultez le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> a la valeur <see langword="null" /> ou est une chaîne vide ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho avec le tampon de données spécifié à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai pour l’opération.</summary>
        <returns>Objet <see cref="T:System.Net.NetworkInformation.PingReply" /> qui fournit des informations à propos du message ICMP de réponse à écho (le cas échéant) ou fournit la raison de l’échec si aucun message n’a été reçu. La méthode retourne <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> si le paquet dépasse l’unité de transmission maximale (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié dans le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Le paquet ou les fragments de paquet peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.Send%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler cette méthode.  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.  
  
ou 
 <paramref name="buffer" /> a la valeur <see langword="null" />, ou la taille de la mémoire <paramref name="buffer" /> est supérieure à 65 500 octets.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho à l’ordinateur spécifié avec le tampon de données spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai pour l’opération.</summary>
        <returns>Objet <see cref="T:System.Net.NetworkInformation.PingReply" /> qui fournit des informations à propos du message ICMP de réponse à écho (le cas échéant) ou fournit la raison de l’échec si aucun message n’a été reçu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié dans le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Le paquet ou les fragments de paquet peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.Send%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Pour obtenir un exemple qui montre comment appeler un <xref:System.Net.NetworkInformation.Ping.Send%2A> de surcharge, consultez le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> a la valeur <see langword="null" /> ou est une chaîne vide ("").  
  
ou 
 <paramref name="buffer" /> a la valeur <see langword="null" />, ou la taille de la mémoire <paramref name="buffer" /> est supérieure à 65 500 octets.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <param name="options">Objet <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilisé pour contrôler la fragmentation et les valeurs de la durée de vie (Time-to-Live) du paquet de messages ICMP d’écho.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho avec le tampon de données spécifié à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai d’attente pour l’opération et de contrôler la fragmentation et les valeurs de durée de vie pour le paquet de message ICMP d’écho.</summary>
        <returns>Objet <see cref="T:System.Net.NetworkInformation.PingReply" /> qui fournit des informations à propos du message ICMP de réponse à écho (le cas échéant) ou fournit la raison de l’échec si aucun message n’a été reçu. La méthode retourne <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> si le paquet dépasse l’unité de transmission maximale (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié par le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Si le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Utilisez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété pour spécifier le nombre maximal de fois où le message ICMP d’écho peut être transféré avant d’atteindre sa destination. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler cette méthode.  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.  
  
ou 
 <paramref name="buffer" /> a la valeur <see langword="null" />, ou la taille de la mémoire <paramref name="buffer" /> est supérieure à 65 500 octets.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <param name="options">Objet <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilisé pour contrôler la fragmentation et les valeurs de la durée de vie (Time-to-Live) du paquet de messages ICMP d’écho.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho à l’ordinateur spécifié avec le tampon de données spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai d’attente pour l’opération et de contrôler la fragmentation et les valeurs de durée de vie pour le paquet ICMP.</summary>
        <returns>Objet <see cref="T:System.Net.NetworkInformation.PingReply" /> qui fournit des informations à propos du message ICMP de réponse à écho (le cas échéant) ou fournit la raison de l’échec si aucun message n’a été reçu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié par le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Si le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Utilisez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété pour spécifier le nombre maximal de fois où le message ICMP d’écho peut être transféré avant d’atteindre sa destination. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler cette méthode.  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> est <see langword="null" /> ou est une chaîne de longueur zéro.  
  
ou 
 <paramref name="buffer" /> a la valeur <see langword="null" />, ou la taille de la mémoire <paramref name="buffer" /> est supérieure à 65 500 octets.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Essaie d’envoyer un message ICMP d’écho de manière asynchrone à un ordinateur et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ces méthodes ne provoquent pas le thread principal de votre application bloquer. Si vous souhaitez bloquer en attendant le message ICMP de réponse à écho, utilisez le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes.  
  
> [!NOTE]
>  L’adresse IP retournée par une de le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes peuvent provenir d’un ordinateur distant malveillant. Ne connectez pas à l’ordinateur distant à l’aide de cela. Utiliser DNS pour déterminer l’adresse IP de l’ordinateur auquel vous souhaitez vous connecter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="userToken">Objet passé à la méthode appelée quand l’opération asynchrone est terminée.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho de manière asynchrone à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode envoie le message d’écho de manière asynchrone et, lorsque l’opération se termine (ou non), retourne l’état à votre application. Appelez le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode quand votre application ne doit pas bloquer. Chaque appel à cette méthode s’exécute dans un thread distinct qui est alloué automatiquement du pool de threads. Quand l’opération asynchrone se termine, elle déclenche le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. Pour spécifier la méthode est appelée lorsque <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> déclenche l’événement, vous devez ajouter un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué à l’événement avant d’appeler <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. La méthode du délégué reçoit un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet qui contient un <xref:System.Net.NetworkInformation.PingReply> objet qui décrit le résultat de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler. Le <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet hérite les <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété. Cette propriété comporte le `userToken` objet passé à la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler.  
  
> [!NOTE]
>  Si votre application doit être bloquée en attendant une réponse, utilisez une de la <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes ; ces méthodes sont synchrones.  
  
 Cette méthode envoie un 32 <xref:System.Byte> mémoire tampon de données avec le message ICMP d’écho. La méthode attend cinq secondes pour un message de réponse d’écho ICMP. Si elle ne reçoit pas une réponse pendant cette période, la méthode retourne et la <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Le paquet ou les fragments de paquet peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Pour obtenir un exemple de code qui montre comment appeler un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> (méthode), consultez le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à la méthode <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> n’est pas une adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="userToken">Objet passé à la méthode appelée quand l’opération asynchrone est terminée.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho de manière asynchrone à l’ordinateur spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode envoie le message d’écho de manière asynchrone et, lorsque l’opération se termine (ou non), retourne l’état à votre application. Appelez le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode quand votre application ne doit pas bloquer. Chaque appel à cette méthode s’exécute dans un thread distinct qui est alloué automatiquement du pool de threads. Quand l’opération asynchrone se termine, elle déclenche le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. Pour spécifier la méthode est appelée lorsque <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> déclenche l’événement, vous devez ajouter un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué à l’événement avant d’appeler <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. La méthode du délégué reçoit un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet qui contient un <xref:System.Net.NetworkInformation.PingReply> objet qui décrit le résultat de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler. Le <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet hérite les <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété. Cette propriété comporte le `userToken` objet passé à la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler.  
  
> [!NOTE]
>  Si votre application doit être bloquée en attendant une réponse, utilisez le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes ; ces méthodes sont synchrones.  
  
 Cette méthode envoie un 32 <xref:System.Byte> mémoire tampon de données avec le message ICMP d’écho. La méthode attend cinq secondes pour un message de réponse d’écho ICMP. Si elle ne reçoit pas une réponse pendant cette période la méthode est retournée et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Le paquet ou les fragments de paquet peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Pour obtenir un exemple de code qui montre comment appeler le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> (méthode), consultez le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> a la valeur <see langword="null" /> ou est une chaîne vide ("").</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à la méthode <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> n’a pas pu être résolu en adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="userToken">Objet passé à la méthode appelée quand l’opération asynchrone est terminée.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho de manière asynchrone à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai pour l’opération.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode envoie le message d’écho de manière asynchrone et, lorsque l’opération se termine (ou non), retourne l’état à votre application. Appelez le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode quand votre application ne doit pas bloquer. Chaque appel s’exécute dans un thread distinct qui est alloué automatiquement du pool de threads. Quand l’opération asynchrone se termine, elle déclenche le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. Les applications utilisent un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué pour spécifier la méthode est appelée lorsque <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> déclenche l’événement. Vous devez ajouter un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué à l’événement avant d’appeler <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. La méthode du délégué reçoit un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet qui contient un <xref:System.Net.NetworkInformation.PingReply> objet qui décrit le résultat de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler. Le <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet hérite les <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété. Cette propriété comporte le `userToken` objet passé à la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler.  
  
 Si votre application doit être bloquée en attendant une réponse, utilisez le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes ; ces méthodes sont synchrones.  
  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié par le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Le paquet ou les fragments de paquet (en cas de fragmentation) peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Pour obtenir un exemple de code qui montre comment appeler un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> de surcharge, consultez le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à la méthode <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> n’est pas une adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="userToken">Objet passé à la méthode appelée quand l’opération asynchrone est terminée.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho de manière asynchrone à l’ordinateur spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai pour l’opération.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode envoie le message d’écho de manière asynchrone et, lorsque l’opération se termine (ou non), retourne l’état à votre application. Appelez le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode quand votre application ne doit pas bloquer. Chaque appel s’exécute dans un thread distinct qui est alloué automatiquement du pool de threads. Quand l’opération asynchrone se termine, elle déclenche le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. Les applications utilisent un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué pour spécifier la méthode est appelée lorsque <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> déclenche l’événement. Vous devez ajouter un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué à l’événement avant d’appeler <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. La méthode du délégué reçoit un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet qui contient un <xref:System.Net.NetworkInformation.PingReply> objet qui décrit le résultat de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler. Le <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet hérite les <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété. Cette propriété comporte le `userToken` objet passé à la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler.  
  
 Si votre application doit être bloquée en attendant une réponse, utilisez le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes ; ces méthodes sont synchrones.  
  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié par le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Le paquet ou les fragments de paquet (en cas de fragmentation) peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Pour obtenir un exemple de code qui montre comment appeler le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> (méthode), consultez le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> a la valeur <see langword="null" /> ou est une chaîne vide ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> n’a pas pu être résolu en adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <param name="userToken">Objet passé à la méthode appelée quand l’opération asynchrone est terminée.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho de manière asynchrone avec le tampon de données spécifié à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai pour l’opération.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie le message d’écho de manière asynchrone et, lorsque l’opération se termine (ou non), retourne l’état à votre application. Appelez le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode quand votre application ne doit pas bloquer. Chaque appel s’exécute dans un thread distinct qui est alloué automatiquement du pool de threads. Quand l’opération asynchrone se termine, elle déclenche le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. Pour spécifier la méthode est appelée lorsque <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> déclenche l’événement, vous devez ajouter un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué à l’événement avant d’appeler <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. La méthode du délégué reçoit un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet qui contient un <xref:System.Net.NetworkInformation.PingReply> objet qui décrit le résultat de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler. Le <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet hérite les <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété. Cette propriété comporte le `userToken` objet passé à la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler.  
  
> [!NOTE]
>  Si votre application se bloque en attendant une réponse, utilisez le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes ; ces méthodes sont synchrones.  
  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié par le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Le paquet ou les fragments de paquet (en cas de fragmentation) peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Pour obtenir un exemple de code qui montre comment appeler un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> de surcharge, consultez le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> n’est pas une adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <param name="userToken">Objet passé à la méthode appelée quand l’opération asynchrone est terminée.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho de manière asynchrone à l’ordinateur spécifié avec le tampon de données spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai pour l’opération.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode envoie le message d’écho de manière asynchrone et, lorsque l’opération se termine (ou non), retourne l’état à votre application. Appelez le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode quand votre application ne doit pas bloquer. Chaque appel s’exécute dans un thread distinct qui est alloué automatiquement du pool de threads. Quand l’opération asynchrone se termine, elle déclenche le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. Les applications utilisent un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué pour spécifier la méthode est appelée lorsque <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> déclenche l’événement. Vous devez ajouter un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué à l’événement avant d’appeler <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. La méthode du délégué reçoit un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet contenant un <xref:System.Net.NetworkInformation.PingReply> objet qui décrit le résultat de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler. Le <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet hérite les <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété. Cette propriété comporte le `userToken` objet passé à la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler.  
  
 Si votre application doit être bloquée en attendant une réponse, utilisez le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes ; ces méthodes sont synchrones.  
  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié par le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Cette surcharge utilise les paramètres par défaut pour la fragmentation des paquets et le transfert des paquets. Le paquet qui contient le message d’écho ICMP peut être fragmenté en transit si la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants. Pour empêcher la fragmentation, utilisez une de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes acceptant une `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété `true`. Lorsque <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Le paquet ou les fragments de paquet (en cas de fragmentation) peuvent être transférés par les nœuds de routage 128 fois avant d’être supprimés. Pour modifier ce paramètre, utilisez un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> surcharge qui accepte un `options` paramètre et affectez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété la valeur souhaitée. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> de surcharge, consultez le <xref:System.Net.NetworkInformation.Ping> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> a la valeur <see langword="null" /> ou est une chaîne vide ("").  
  
ou 
 <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> n’a pas pu être résolu en adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="timeout">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <param name="options">Objet <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilisé pour contrôler la fragmentation et les valeurs de la durée de vie (Time-to-Live) du paquet de messages ICMP d’écho.</param>
        <param name="userToken">Objet passé à la méthode appelée quand l’opération asynchrone est terminée.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho de manière asynchrone avec le tampon de données spécifié à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai d’attente pour l’opération et de contrôler la fragmentation et les valeurs de durée de vie pour le paquet de message ICMP d’écho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode envoie le message d’écho de manière asynchrone et, lorsque l’opération se termine (ou non), retourne l’état à votre application. Appelez le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode quand votre application ne doit pas bloquer. Chaque appel s’exécute dans un thread distinct qui est alloué automatiquement du pool de threads. Quand l’opération asynchrone se termine, elle déclenche le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. Les applications utilisent un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué pour spécifier la méthode est appelée lorsque <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> déclenche l’événement. Vous devez ajouter un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué à l’événement avant d’appeler <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. La méthode du délégué reçoit un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet qui contient un <xref:System.Net.NetworkInformation.PingReply> objet qui décrit le résultat de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler. Le <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet hérite les <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété. Cette propriété comporte le `userToken` objet passé à la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler.  
  
 Si votre application se bloque en attendant une réponse, utilisez le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes ; ces méthodes sont synchrones.  
  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié par le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Si le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Utilisez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété pour spécifier le nombre maximal de fois où le message ICMP d’écho peut être transféré avant d’atteindre sa destination. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler cette méthode. Pour une implémentation de la méthode de rappel, consultez la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> section exemple de la surcharge de méthode.  
  
 L’exemple de code suivant requiert des espaces de noms suivants :  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 L’exemple de code suivant envoie un message ICMP d’écho de manière asynchrone.  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> n’est pas une adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> qui identifie l’ordinateur de destination pour le message ICMP d’écho. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="timeout">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <param name="buffer">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="options">Objet <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilisé pour contrôler la fragmentation et les valeurs de la durée de vie (Time-to-Live) du paquet de messages ICMP d’écho.</param>
        <param name="userToken">Objet passé à la méthode appelée quand l’opération asynchrone est terminée.</param>
        <summary>Essaie d’envoyer un message ICMP d’écho de manière asynchrone à l’ordinateur spécifié avec le tampon de données spécifié et de recevoir un message ICMP de réponse à écho correspondant de cet ordinateur. Cette surcharge vous permet de spécifier une valeur de délai d’attente pour l’opération et de contrôler la fragmentation et les valeurs de durée de vie pour le paquet ICMP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode envoie le message d’écho de manière asynchrone et, lorsque l’opération se termine (ou non), retourne l’état à votre application. Appelez le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthode quand votre application ne doit pas bloquer. Chaque appel s’exécute dans un thread distinct qui est alloué automatiquement du pool de threads. Quand l’opération asynchrone se termine, elle déclenche le <xref:System.Net.NetworkInformation.Ping.PingCompleted> événement. Les applications utilisent un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué pour spécifier la méthode est appelée lorsque <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> déclenche l’événement. Vous devez ajouter un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> délégué à l’événement avant d’appeler <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. La méthode du délégué reçoit un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet qui contient un <xref:System.Net.NetworkInformation.PingReply> objet qui décrit le résultat de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler. Le <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objet hérite les <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété. Cette propriété comporte le `userToken` objet passé à la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> appeler.  
  
 Si votre application doit être bloquée en attendant une réponse, utilisez le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes ; ces méthodes sont synchrones.  
  
 Si le message de réponse d’écho ICMP n’est pas reçu dans le délai spécifié par le `timeout` paramètre, le message ICMP d’écho échoue et le <xref:System.Net.NetworkInformation.PingReply.Status%2A> propriété est définie sur <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Lors de la spécification des nombres très petits pour `timeout`, la réponse Ping peut être reçue même si `timeout` millisecondes écoulées.  
  
 Si le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propriété est `true` et la taille totale du paquet dépasse la taille de paquet maximale pouvant être transmise par un des nœuds de routage entre les ordinateurs locaux et distants, la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Utilisez le <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propriété pour spécifier le nombre maximal de fois où le message ICMP d’écho peut être transféré avant d’atteindre sa destination. Si le paquet n’atteint pas sa destination après avoir été transféré le nombre de fois spécifié, le paquet est rejeté et la demande d’écho ICMP échoue. Dans ce cas, le <xref:System.Net.NetworkInformation.PingReply.Status%2A> est défini sur <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler cette méthode.  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> a la valeur <see langword="null" /> ou est une chaîne vide ("").  
  
ou 
 <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> est en cours.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> est une adresse IPv6 et l’ordinateur local exécute un système d’exploitation antérieur à Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> n’a pas pu être résolu en adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Pour envoyer un message ICMP d’écho.  
  
Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Annule toutes les demandes asynchrones en attente pour envoyer un message ICMP d’écho et reçoit un message ICMP de réponse à écho correspondant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour mettre fin à tous les appels à <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> qui ne sont pas terminées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envoie un message ICMP d’écho à un ordinateur et reçoit un message ICMP de réponse à écho correspondant de cet ordinateur en tant qu’opération asynchrone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Adresse IP qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <summary>Envoie un message ICMP d’écho avec le tampon de données spécifié à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et reçoit un message ICMP de réponse à écho correspondant de cet ordinateur en tant qu’opération asynchrone.</summary>
        <returns>Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601>> objet se termine une fois que le paquet ICMP a été envoyé et la réponse a été reçue.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> est en cours.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> n’est pas une adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ordinateur de destination pour le message d’écho ICMP. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <summary>Envoie un message ICMP d’écho à l’ordinateur spécifié avec le tampon de données spécifié et reçoit un message ICMP de réponse à écho correspondant de cet ordinateur en tant qu’opération asynchrone.</summary>
        <returns>Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601>> objet se termine une fois que le paquet ICMP a été envoyé et la réponse a été reçue.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Adresse IP qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="timeout">Nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <summary>Envoie un message ICMP d’écho avec le tampon de données spécifié à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et reçoit un message ICMP de réponse à écho correspondant de cet ordinateur en tant qu’opération asynchrone. Cette surcharge vous permet de spécifier une valeur de délai pour l’opération.</summary>
        <returns>Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601>> objet se termine une fois que le paquet ICMP a été envoyé et la réponse a été reçue.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ordinateur de destination pour le message d’écho ICMP. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="timeout">Nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <summary>Envoie un message ICMP d’écho à l’ordinateur spécifié avec le tampon de données spécifié et reçoit un message ICMP de réponse à écho correspondant de cet ordinateur en tant qu’opération asynchrone. Cette surcharge vous permet de spécifier une valeur de délai pour l’opération.</summary>
        <returns>Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601>> objet se termine une fois que le paquet ICMP a été envoyé et la réponse a été reçue.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Adresse IP qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="timeout">Nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <summary>Envoie un message ICMP d’écho avec le tampon de données spécifié à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et reçoit un message ICMP de réponse à écho correspondant de cet ordinateur en tant qu’opération asynchrone. Cette surcharge vous permet de spécifier une valeur de délai d’attente pour l’opération et une mémoire tampon à utiliser pour l’envoi et la réception.</summary>
        <returns>Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601>> objet se termine une fois que le paquet ICMP a été envoyé et la réponse a été reçue.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> est en cours.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> n’est pas une adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ordinateur de destination pour le message d’écho ICMP. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="timeout">Nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <summary>Envoie un message ICMP d’écho à l’ordinateur spécifié avec le tampon de données spécifié et reçoit un message ICMP de réponse à écho correspondant de cet ordinateur en tant qu’opération asynchrone. Cette surcharge vous permet de spécifier une valeur de délai d’attente pour l’opération et une mémoire tampon à utiliser pour l’envoi et la réception.</summary>
        <returns>Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601>> objet se termine une fois que le paquet ICMP a été envoyé et la réponse a été reçue.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Adresse IP qui identifie l’ordinateur de destination pour le message ICMP d’écho.</param>
        <param name="timeout">Nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <param name="options">Objet <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilisé pour contrôler la fragmentation et les valeurs de la durée de vie (Time-to-Live) du paquet de messages ICMP d’écho.</param>
        <summary>Envoie un message ICMP d’écho avec le tampon de données spécifié à l’ordinateur qui a le <see cref="T:System.Net.IPAddress" /> spécifié et reçoit un message ICMP de réponse à écho correspondant de cet ordinateur en tant qu’opération asynchrone. Cette surcharge vous permet de spécifier une valeur de délai d’attente pour l’opération, une mémoire tampon à utiliser pour les envois et les réceptions, et de contrôler la fragmentation et les valeurs de durée de vie pour le paquet de message ICMP d’écho.</summary>
        <returns>Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601>> objet se termine une fois que le paquet ICMP a été envoyé et la réponse a été reçue.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">Un appel à <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> est en cours.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Une exception a été levée lors de l’envoi ou de la réception des messages ICMP. Consultez l’exception interne de l’exception exacte qui a été levée.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> n’est pas une adresse IP valide.</exception>
        <exception cref="T:System.ObjectDisposedException">Cet objet a été supprimé.</exception>
        <exception cref="T:System.ArgumentException">La taille de <paramref name="buffer" /> dépasse 65 500 octets.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ordinateur de destination pour le message d’écho ICMP. La valeur spécifiée pour ce paramètre peut être un nom d’hôte ou la représentation sous forme de chaîne d’une adresse IP.</param>
        <param name="timeout">Nombre maximal de millisecondes (après envoi du message d’écho) d’attente du message ICMP de réponse à écho.</param>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer avec le message ICMP d’écho et à retourner dans le message ICMP de réponse à écho. Le tableau ne peut pas contenir plus de 65 500 octets.</param>
        <param name="options">Objet <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilisé pour contrôler la fragmentation et les valeurs de la durée de vie (Time-to-Live) du paquet de messages ICMP d’écho.</param>
        <summary>Envoie un message ICMP d’écho à l’ordinateur spécifié avec le tampon de données spécifié et reçoit un message ICMP de réponse à écho correspondant de cet ordinateur en tant qu’opération asynchrone. Cette surcharge vous permet de spécifier une valeur de délai d’attente pour l’opération, une mémoire tampon à utiliser pour les envois et les réceptions, et de contrôler la fragmentation et les valeurs de durée de vie pour le paquet de message ICMP d’écho.</summary>
        <returns>Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601>> objet se termine une fois que le paquet ICMP a été envoyé et la réponse a été reçue.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par des instances de la classe <see cref="T:System.Net.NetworkInformation.Ping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Si vous appelez une méthode sur un <xref:System.Net.NetworkInformation.Ping> objet qui a été supprimé, vous recevez un <xref:System.ObjectDisposedException>.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>