<Type Name="IPv4InterfaceProperties" FullName="System.Net.NetworkInformation.IPv4InterfaceProperties">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a425b4a0a92fcc2edf5eeea723be6248167db7e" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39753186" /></Metadata><TypeSignature Language="C#" Value="public abstract class IPv4InterfaceProperties" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IPv4InterfaceProperties extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.IPv4InterfaceProperties" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class IPv4InterfaceProperties" />
  <TypeSignature Language="C++ CLI" Value="public ref class IPv4InterfaceProperties abstract" />
  <TypeSignature Language="F#" Value="type IPv4InterfaceProperties = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.NetworkInformation</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="59cc2-101">Fournit des informations sur les interfaces réseau qui prennent en charge le protocole IPv4 (Internet Protocol version 4).</span><span class="sxs-lookup"><span data-stu-id="59cc2-101">Provides information about network interfaces that support Internet Protocol version 4 (IPv4).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59cc2-102">Cette classe fournit l’accès à la configuration et les informations d’adresse pour les interfaces réseau qui prennent en charge IPv4.</span><span class="sxs-lookup"><span data-stu-id="59cc2-102">This class provides access to configuration and address information for network interfaces that support IPv4.</span></span> <span data-ttu-id="59cc2-103">Vous ne créez pas d’instances de cette classe ; ils sont retournés par le <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="59cc2-103">You do not create instances of this class; they are returned by the <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties%2A> method.</span></span>  
  
 <span data-ttu-id="59cc2-104">Pour les propriétés IPV6, consultez <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties%2A>.</span><span class="sxs-lookup"><span data-stu-id="59cc2-104">For IPV6 properties, see <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59cc2-105">Le code suivant exemple obtient un <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties%2A> de l’objet et affiche ses données.</span><span class="sxs-lookup"><span data-stu-id="59cc2-105">The following code example gets an <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties%2A> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IPv4InterfaceProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.IPv4InterfaceProperties.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IPv4InterfaceProperties();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59cc2-106">Initialise une nouvelle instance de la classe <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties" />.</span><span class="sxs-lookup"><span data-stu-id="59cc2-106">Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59cc2-107">Ce constructeur peut être appelé uniquement par les classes qui dérivent de <xref:System.Net.NetworkInformation.IPv4InterfaceProperties>.</span><span class="sxs-lookup"><span data-stu-id="59cc2-107">This constructor can be called only by classes that derive from <xref:System.Net.NetworkInformation.IPv4InterfaceProperties>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public abstract int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Index" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59cc2-108">Obtient l'index de l'interface réseau associée à l'adresse IPv4 (Internet Protocol version 4).</span><span class="sxs-lookup"><span data-stu-id="59cc2-108">Gets the index of the network interface associated with the Internet Protocol version 4 (IPv4) address.</span></span></summary>
        <value><span data-ttu-id="59cc2-109"><see cref="T:System.Int32" /> qui contient l'index de l'interface IPv4.</span><span class="sxs-lookup"><span data-stu-id="59cc2-109">An <see cref="T:System.Int32" /> that contains the index of the IPv4 interface.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59cc2-110">Si la valeur de cette propriété est zéro, IPv4 n’est pas pris en charge par cette interface.</span><span class="sxs-lookup"><span data-stu-id="59cc2-110">If the value of this property is zero, IPv4 is not supported by this interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59cc2-111">Le code suivant exemple obtient un <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> de l’objet et affiche ses données.</span><span class="sxs-lookup"><span data-stu-id="59cc2-111">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutomaticPrivateAddressingActive">
      <MemberSignature Language="C#" Value="public abstract bool IsAutomaticPrivateAddressingActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutomaticPrivateAddressingActive" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsAutomaticPrivateAddressingActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsAutomaticPrivateAddressingActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutomaticPrivateAddressingActive : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59cc2-112">Obtient une valeur <see cref="T:System.Boolean" /> qui indique si cette interface a une adresse APIPA (Automatic Private IP Addressing).</span><span class="sxs-lookup"><span data-stu-id="59cc2-112">Gets a <see cref="T:System.Boolean" /> value that indicates whether this interface has an automatic private IP addressing (APIPA) address.</span></span></summary>
        <value><span data-ttu-id="59cc2-113"><see langword="true" /> si l'interface utilise une adresse APIPA ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="59cc2-113"><see langword="true" /> if the interface uses an APIPA address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59cc2-114">Adressage IP privé automatique permet aux ordinateurs n’ont pas accès à un serveur DHCP Dynamic Host Configuration Protocol () à affecter automatiquement une adresse IP qui ne sont pas en conflit avec des adresses publiques.</span><span class="sxs-lookup"><span data-stu-id="59cc2-114">Automatic private IP addressing allows computers that do not have access to a Dynamic Host Configuration Protocol (DHCP) server to be automatically assigned an IP address that does not conflict with public addresses.</span></span> <span data-ttu-id="59cc2-115">Ces adresses sont dans la plage 169.254.0.0 à 169.254.255.255.</span><span class="sxs-lookup"><span data-stu-id="59cc2-115">These addresses are in the range 169.254.0.0 to 169.254.255.255.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59cc2-116">Le code suivant exemple obtient un <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> de l’objet et affiche ses données.</span><span class="sxs-lookup"><span data-stu-id="59cc2-116">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutomaticPrivateAddressingEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsAutomaticPrivateAddressingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutomaticPrivateAddressingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsAutomaticPrivateAddressingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsAutomaticPrivateAddressingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutomaticPrivateAddressingEnabled : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59cc2-117">Obtient une valeur <see cref="T:System.Boolean" /> qui indique si l'adressage IP privé automatique (APIPA) est activé sur cette interface.</span><span class="sxs-lookup"><span data-stu-id="59cc2-117">Gets a <see cref="T:System.Boolean" /> value that indicates whether this interface has automatic private IP addressing (APIPA) enabled.</span></span></summary>
        <value><span data-ttu-id="59cc2-118"><see langword="true" /> si l'interface utilise l'adressage IP privé automatique ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="59cc2-118"><see langword="true" /> if the interface uses APIPA; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59cc2-119">Adressage IP privé automatique permet aux ordinateurs n’ont pas accès à un serveur DHCP Dynamic Host Configuration Protocol () à affecter automatiquement une adresse IP qui ne sont pas en conflit avec des adresses publiques.</span><span class="sxs-lookup"><span data-stu-id="59cc2-119">Automatic private IP addressing allows computers that do not have access to a Dynamic Host Configuration Protocol (DHCP) server to be automatically assigned an IP address that does not conflict with public addresses.</span></span> <span data-ttu-id="59cc2-120">Ces adresses sont dans la plage 169.254.0.0 à 169.254.255.255.</span><span class="sxs-lookup"><span data-stu-id="59cc2-120">These addresses are in the range 169.254.0.0 to 169.254.255.255.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59cc2-121">Le code suivant exemple obtient un <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> de l’objet et affiche ses données.</span><span class="sxs-lookup"><span data-stu-id="59cc2-121">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDhcpEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsDhcpEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDhcpEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsDhcpEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsDhcpEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDhcpEnabled : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59cc2-122">Obtient une valeur <see cref="T:System.Boolean" /> qui indique si l'interface est configurée pour utiliser un serveur DHCP pour obtenir une adresse IP.</span><span class="sxs-lookup"><span data-stu-id="59cc2-122">Gets a <see cref="T:System.Boolean" /> value that indicates whether the interface is configured to use a Dynamic Host Configuration Protocol (DHCP) server to obtain an IP address.</span></span></summary>
        <value><span data-ttu-id="59cc2-123"><see langword="true" /> si l'interface est configurée pour obtenir une adresse IP à partir d'un serveur DHCP ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="59cc2-123"><see langword="true" /> if the interface is configured to obtain an IP address from a DHCP server; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59cc2-124">Lorsque cette propriété est `true`, un serveur DHCP attribue l’adresse IP à l’interface lorsque l’ordinateur établit ses connexions réseau.</span><span class="sxs-lookup"><span data-stu-id="59cc2-124">When this property is `true`, a DHCP server assigns the IP address to the interface when the computer establishes its network connections.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59cc2-125">Le code suivant exemple obtient un <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> de l’objet et affiche ses données.</span><span class="sxs-lookup"><span data-stu-id="59cc2-125">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsForwardingEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsForwardingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsForwardingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsForwardingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsForwardingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsForwardingEnabled : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59cc2-126">Obtient une valeur <see cref="T:System.Boolean" /> qui indique si cette interface peut transférer (acheminer) des paquets.</span><span class="sxs-lookup"><span data-stu-id="59cc2-126">Gets a <see cref="T:System.Boolean" /> value that indicates whether this interface can forward (route) packets.</span></span></summary>
        <value><span data-ttu-id="59cc2-127"><see langword="true" /> si cette interface acheminent des paquets ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="59cc2-127"><see langword="true" /> if this interface routes packets; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59cc2-128">Si le routage est désactivé, les paquets qui sont reçus par l’interface avec une adresse de destination n’est pas détenue par l’interface sont ignorés.</span><span class="sxs-lookup"><span data-stu-id="59cc2-128">If routing is disabled, packets that are received by the interface with a destination address that is not held by the interface are discarded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59cc2-129">Le code suivant exemple obtient un <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> de l’objet et affiche ses données.</span><span class="sxs-lookup"><span data-stu-id="59cc2-129">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mtu">
      <MemberSignature Language="C#" Value="public abstract int Mtu { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Mtu" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Mtu As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Mtu { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Mtu : int" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59cc2-130">Obtient l’unité de transmission maximale (MTU) de cette interface réseau.</span><span class="sxs-lookup"><span data-stu-id="59cc2-130">Gets the maximum transmission unit (MTU) for this network interface.</span></span></summary>
        <value><span data-ttu-id="59cc2-131">Valeur <see cref="T:System.Int64" /> qui spécifie l'unité de transmission maximale.</span><span class="sxs-lookup"><span data-stu-id="59cc2-131">An <see cref="T:System.Int64" /> value that specifies the MTU.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59cc2-132">La taille MTU d’une interface réseau est le plus grand paquet qui peut être transmis.</span><span class="sxs-lookup"><span data-stu-id="59cc2-132">The MTU of a network interface is the largest packet that can be transmitted.</span></span> <span data-ttu-id="59cc2-133">Elle est mesurée en octets (8 bits).</span><span class="sxs-lookup"><span data-stu-id="59cc2-133">It is measured in octets (8-bit bytes).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59cc2-134">Le code suivant exemple obtient un <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> de l’objet et affiche ses données.</span><span class="sxs-lookup"><span data-stu-id="59cc2-134">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesWins">
      <MemberSignature Language="C#" Value="public abstract bool UsesWins { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesWins" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UsesWins As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool UsesWins { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UsesWins : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59cc2-135">Obtient une valeur <see cref="T:System.Boolean" /> qui indique si une interface utilise le service WINS (Windows Internet Name Service).</span><span class="sxs-lookup"><span data-stu-id="59cc2-135">Gets a <see cref="T:System.Boolean" /> value that indicates whether an interface uses Windows Internet Name Service (WINS).</span></span></summary>
        <value><span data-ttu-id="59cc2-136"><see langword="true" /> si l'interface utilise le service WINS ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="59cc2-136"><see langword="true" /> if the interface uses WINS; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59cc2-137">WINS fournit une base de données distribuée pour l’inscription et l’interrogation de noms NetBIOS dynamiques à des mappages d’adresses IPv4.</span><span class="sxs-lookup"><span data-stu-id="59cc2-137">WINS provides a distributed database for registering and querying dynamic NetBIOS names to IPv4 address mappings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59cc2-138">Le code suivant exemple obtient un <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> de l’objet et affiche ses données.</span><span class="sxs-lookup"><span data-stu-id="59cc2-138">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>