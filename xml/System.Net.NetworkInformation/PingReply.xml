<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32bc4bb9e15257bd0e0354a58210c82b2b416c6f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37477892" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des informations sur l'état et les données résultant d'une opération <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> ou <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.NetworkInformation.Ping> classe tente d’envoyer une demande d’écho ICMP Internet Control Message Protocol () à un ordinateur distant et de recevoir des informations de l’ordinateur via un message de réponse d’écho ICMP. Le <xref:System.Net.NetworkInformation.Ping> classe utilise des instances de la <xref:System.Net.NetworkInformation.PingReply> classe pour retourner des informations sur l’opération, telles que son état et le temps nécessaire pour envoyer la demande et de recevoir la réponse.  
  
 Le <xref:System.Net.NetworkInformation.Ping.Send%2A> méthodes retournent des instances de la <xref:System.Net.NetworkInformation.PingReply> classe directement. Le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> méthodes retournent un <xref:System.Net.NetworkInformation.PingReply> dans le <xref:System.Net.NetworkInformation.PingCompletedEventHandler> la méthode <xref:System.Net.NetworkInformation.PingCompletedEventArgs> paramètre. Le <xref:System.Net.NetworkInformation.PingReply> est accessible via la <xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A> propriété.  
  
 Si la valeur de <xref:System.Net.NetworkInformation.PingReply.Status%2A> n’est pas <xref:System.Net.NetworkInformation.IPStatus.Success>, vous ne devez pas utiliser les valeurs retournées par la <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> ou <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propriétés. Le <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> propriété revient à zéro, le <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propriété retournera un tableau vide et le <xref:System.Net.NetworkInformation.PingReply.Options%2A> propriété retournera `null`.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser <xref:System.Net.NetworkInformation.Ping> classe pour envoyer une demande d’écho ICMP de façon synchrone et afficher la réponse.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'adresse de l'hôte qui envoie la réponse à écho ICMP.</summary>
        <value>
          <see cref="T:System.Net.IPAddress" /> contenant la destination du message d'écho ICMP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.NetworkInformation.PingReply.Address%2A> retournée par une de le <xref:System.Net.NetworkInformation.Ping.Send%2A> surcharges peuvent provenir d’un ordinateur distant malveillant. Ne connectez pas à l’ordinateur distant à l’aide de cette adresse. Utiliser DNS pour déterminer l’adresse IP de l’ordinateur auquel vous souhaitez vous connecter.  
  
   
  
## Examples  
 L’exemple de code suivant envoie une demande d’écho ICMP de façon synchrone et affiche la valeur de cette propriété.  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la mémoire tampon des données reçues dans un message de réponse à écho ICMP.</summary>
        <value>Tableau <see cref="T:System.Byte" /> contenant les données reçues dans un message de réponse à écho ICMP ou tableau vide, si aucune réponse n'a été reçue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tampon de données envoyé avec la demande d’écho ICMP est renvoyé à l’expéditeur dans la réponse à écho de sorte que la durée du trajet aller-retour d’un paquet de taille connue puisse être calculée. Le tampon de données, combiné avec le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> peut être utilisée pour découvrir l’unité de transmission maximale pour le chemin d’accès réseau entre les ordinateurs source et de destination, l’option. Pour plus d’informations, consultez « Traceroute » dans la RFC 1574, Section 3.2, disponible à l’adresse [ https://www.ietf.org ](https://www.ietf.org).  
  
 La mémoire tampon par défaut utilisé avec <xref:System.Net.NetworkInformation.Ping.Send%2A> et <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> contient 32 octets de données.  
  
   
  
## Examples  
 L’exemple de code suivant envoie une demande d’écho ICMP de façon synchrone et affiche la taille de la mémoire tampon retournée par cette propriété.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les options utilisées pour transmettre la réponse à une demande d'écho ICMP.</summary>
        <value>Objet <see cref="T:System.Net.NetworkInformation.PingOptions" /> qui contient la durée de vie (TTL, Time-to-Live) et la directive de fragmentation utilisée pour transmettre la réponse si <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> est <see cref="F:System.Net.NetworkInformation.IPStatus.Success" /> ; sinon, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La durée de vie définit le nombre de nœuds peuvent transférer un paquet lorsqu’elles transitent entre sa source et de destination. Si le nombre de transferts, également appelés sauts, dépasse la valeur spécifiée pour la durée de vie, le paquet est jugé non remis et est ignoré.  
  
 Le <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> valeur spécifiée dans la demande d’écho ICMP contrôle la fragmentation du paquet. Si <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> est `true` et la taille du paquet dépasse l’unité de transmission maximale du chemin d’accès réseau emprunté par le paquet, le paquet est rejeté et le <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig> erreur est retournée.  
  
   
  
## Examples  
 L’exemple de code suivant envoie une demande d’écho ICMP de façon synchrone et affiche les valeurs stockées dans le <xref:System.Net.NetworkInformation.PingOptions> objet retourné par cette propriété.  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de millisecondes que prennent l’envoi d’une demande d’écho ICMP (Internet Control Message Protocol) et la réception du message de réponse d’écho ICMP correspondant.</summary>
        <value>
          <see cref="T:System.Int64" /> qui spécifie le temps d’aller-retour en millisecondes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la demande d’écho échoue, la <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> fois est signalée comme 0, qui constitue également une valeur valide lorsque la demande réussit. Vous devez vérifier le <xref:System.Net.NetworkInformation.PingReply.Status%2A> pour déterminer si la valeur retournée par cette propriété doit être ignorée.  
  
   
  
## Examples  
 L’exemple de code suivant envoie une demande d’écho ICMP de façon synchrone et affiche la taille de la mémoire tampon retournée par cette propriété.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'état d'une tentative d'envoi de demande d'écho ICMP et de réception du message ICMP de réponse à écho correspondant.</summary>
        <value>Valeur <see cref="T:System.Net.NetworkInformation.IPStatus" /> indiquant le résultat de la demande.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la valeur de <xref:System.Net.NetworkInformation.PingReply.Status%2A> n’est pas <xref:System.Net.NetworkInformation.IPStatus.Success>, vous ne devez pas utiliser les valeurs retournées par la <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> ou <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propriétés. Le <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> et <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propriétés revient sont zéro et le <xref:System.Net.NetworkInformation.PingReply.Options%2A> propriété retournera `null`.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser <xref:System.Net.NetworkInformation.Ping> classe pour envoyer une demande d’écho ICMP de façon synchrone et afficher la réponse.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>