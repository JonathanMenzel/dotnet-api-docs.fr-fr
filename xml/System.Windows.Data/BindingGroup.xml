<Type Name="BindingGroup" FullName="System.Windows.Data.BindingGroup">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="75e5aedb20ccf9bd83f94de09ef1c9ab7f3863a2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30630613" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BindingGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BindingGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingGroup" />
  <TypeSignature Language="VB.NET" Value="Public Class BindingGroup&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingGroup : System::Windows::DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contient une collection de liaisons et d'objets <see cref="T:System.Windows.Controls.ValidationRule" /> utilisés pour valider un objet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Data.BindingGroup> crée une relation entre plusieurs liaisons, qui peuvent être validées et mises à jour ensemble. Par exemple, supposons qu’une application invite l’utilisateur à entrer une adresse. L’application remplit ensuite un objet de type `Address`, qui a les propriétés, `Street`, `City`, `ZipCode`, et `Country`, avec les valeurs fournies par l’utilisateur. L’application a un panneau qui contient quatre <xref:System.Windows.Controls.TextBox> contrôles, chacun d’eux est liées à une des propriétés de l’objet de données. Vous pouvez utiliser un <xref:System.Windows.Controls.ValidationRule> dans un <xref:System.Windows.Data.BindingGroup> pour valider le `Address` objet. Si les liaisons participent au même <xref:System.Windows.Data.BindingGroup>, vous pouvez vous assurer que le code postal est valide pour le pays de l’adresse.  
  
 Vous définissez la <xref:System.Windows.FrameworkElement.BindingGroup%2A> propriété sur <xref:System.Windows.FrameworkElement> ou <xref:System.Windows.FrameworkContentElement>. Les éléments enfants héritent le <xref:System.Windows.Data.BindingGroup> à partir de leurs éléments parents, tout comme avec n’importe quelle autre propriété pouvant être héritées. Une liaison sur un élément descendant est ajoutée à un <xref:System.Windows.Data.BindingGroup> si une des situations suivantes se produit :  
  
-   Les sources de la liaison et la <xref:System.Windows.FrameworkElement.DataContext%2A> de l’élément qui a le <xref:System.Windows.Data.BindingGroup> sont le même objet et la <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> propriété n’est pas définie.  
  
-   Le <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> propriété de la liaison est égale à la <xref:System.Windows.Data.BindingGroup.Name%2A> de la <xref:System.Windows.FrameworkContentElement.BindingGroup%2A> et ils ne sont pas définies explicitement `null`.  
  
 Dans l’exemple de l’adresse, supposez que la <xref:System.Windows.FrameworkElement.DataContext%2A> de la <xref:System.Windows.Controls.Panel> est défini sur l’objet de type `Address`. La liaison pour chaque <xref:System.Windows.Controls.TextBox> est ajouté à la <xref:System.Windows.Data.BindingGroup> du panneau.  
  
 Vous ajoutez <xref:System.Windows.Controls.ValidationRule> des objets sur un <xref:System.Windows.Data.BindingGroup>. Le <xref:System.Windows.Data.BindingGroup> est passée comme premier paramètre de la <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode) lorsque le <xref:System.Windows.Controls.ValidationRule> s’exécute. Vous pouvez utiliser la <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> ou <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> méthode sur cet <xref:System.Windows.Data.BindingGroup> pour obtenir les valeurs proposées de l’objet et le <xref:System.Windows.Data.BindingGroup.Items%2A> propriété à obtenir les sources des liaisons.  
  
 A <xref:System.Windows.Data.BindingGroup> met à jour les sources de la liaison en même temps au lieu de chaque liaison de mise à jour séparément. Lorsque vous appelez une des méthodes pour valider les données (<xref:System.Windows.Data.BindingGroup.ValidateWithoutUpdate%2A>, <xref:System.Windows.Data.BindingGroup.UpdateSources%2A>, ou <xref:System.Windows.Data.BindingGroup.CommitEdit%2A>), la liaison pour chaque <xref:System.Windows.Controls.TextBox> dans l’exemple est validé et potentiellement mise à jour. Lorsqu’une liaison fait partie d’un <xref:System.Windows.Data.BindingGroup>, la source de la liaison n’est pas mis à jour jusqu'à ce que vous appeliez <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> ou <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> sur la <xref:System.Windows.Data.BindingGroup>, sauf si vous définissez explicitement la <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> propriété.  
  
   
  
## Examples  
 Les exemples suivants créent une application qui invite l’utilisateur à entrer la description et le prix d’un article et la date d’expiration de l’offre. L’application affiche les informations actuelles de l’élément sous le formulaire. L’utilisateur peut envoyer ou annuler les modifications.  
  
 L’application effectue les opérations suivantes pour obtenir ce comportement.  
  
-   Crée un <xref:System.Windows.Data.BindingGroup> et l’ajoute à la racine <xref:System.Windows.Controls.StackPanel> lorsqu’il crée le [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] de l’application.  
  
-   Appels <xref:System.Windows.Data.BindingGroup.BeginEdit%2A>, <xref:System.Windows.Data.BindingGroup.CommitEdit%2A>, et <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> dans la logique de l’application pour activer la restauration des modifications.  
  
-   Appels <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> dans un <xref:System.Windows.Controls.ValidationRule.Validate%2A> méthode pour obtenir l’entrée d’utilisateur, puis à vérifier qu’un élément plus de 100 dollars est disponible pendant au moins sept jours.  
  
 L’exemple suivant crée la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] de l’application. La racine <xref:System.Windows.Controls.StackPanel> a un <xref:System.Windows.Data.BindingGroup> qui contient un <xref:System.Windows.Controls.ValidationRule> qui valide l’élément, comme décrit précédemment. Les objets de liaison sur le `Price` propriété et la `OfferExpires` partie de la propriété devienne le <xref:System.Windows.Data.BindingGroup> et chaque liaison a un <xref:System.Windows.Controls.ValidationRule> pour vous assurer que le prix et la date, respectivement, sont des valeurs valides. Les règles de validation pour les propriétés individuelles s’exécuter avant le <xref:System.Windows.Controls.ValidationRule> sur la <xref:System.Windows.Data.BindingGroup>.  
  
 [!code-xaml[BindingGroupSnippets#WindowLayout](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#windowlayout)]  
  
 L’exemple suivant montre les gestionnaires d’événements pour l’application. Lorsque l’utilisateur clique sur le bouton Soumettre, l’application appelle <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> pour exécuter chaque <xref:System.Windows.Controls.ValidationRule> qui est associé à le <xref:System.Windows.Data.BindingGroup>. Si chaque <xref:System.Windows.Controls.ValidationRule> réussit, <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> enregistre les valeurs dans l’objet et termine la transaction de modification. Si <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> est réussie, l’application commence à une autre transaction de modification. Lorsqu’un <xref:System.Windows.Controls.ValidationRule> échoue, le <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> événement se produit, car la valeur de l’application <xref:System.Windows.Data.BindingGroup.NotifyOnValidationError%2A> à `true` sur la <xref:System.Windows.Data.BindingGroup> (dans l’exemple précédent). `ItemError` gère la <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> événement et affiche des informations sur l’erreur de validation pour l’utilisateur. L’exemple gère également le <xref:System.Windows.FrameworkElement.Loaded> événement pour le <xref:System.Windows.Controls.StackPanel> et <xref:System.Windows.Controls.Primitives.ButtonBase.Click> événement pour le **Annuler** bouton.  
  
 [!code-csharp[BindingGroupSnippets#WindowLogic](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#windowlogic)]
 [!code-vb[BindingGroupSnippets#WindowLogic](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#windowlogic)]  
  
 L’exemple suivant montre le personnalisé <xref:System.Windows.Controls.ValidationRule> `ValidateDateAndPrice`, ce qui a été ajouté à la <xref:System.Windows.Data.BindingGroup> dans le premier exemple. Le <xref:System.Windows.Controls.ValidationRule> utilise le <xref:System.Windows.Data.BindingGroup> dans son <xref:System.Windows.Controls.ValidationRule.Validate%2A> méthode pour obtenir les valeurs entrées dans le formulaire et vérifie que si un élément est de plus de 100 dollars, il sera disponible pendant au moins sept jours par l’utilisateur.  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BindingGroup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public void BeginEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.BeginEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginEdit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Commence une transaction de modification sur les sources dans <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si les sources dans le <xref:System.Windows.Data.BindingGroup> prennent en charge le rejet des modifications en attente, vous pouvez appeler <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> pour commencer la transaction de modification, appelez <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> pour enregistrer les modifications en attente, appelez <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> pour ignorer les modifications en attente.  
  
 Pour chaque objet de <xref:System.Windows.Data.BindingGroup.Items%2A> qui implémente <xref:System.ComponentModel.IEditableObject>, <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> appels <xref:System.ComponentModel.IEditableObject.BeginEdit%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 L’exemple suivant appelle <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> lorsqu’une fenêtre se charge pour commencer la transaction de modification.  
  
 [!code-csharp[BindingGroupSnippets#BeginEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#beginedit)]
 [!code-vb[BindingGroupSnippets#BeginEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#beginedit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingExpressions">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Data.BindingExpressionBase&gt; BindingExpressions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Data.BindingExpressionBase&gt; BindingExpressions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.BindingExpressions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingExpressions As Collection(Of BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ BindingExpressions { System::Collections::ObjectModel::Collection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Data.BindingExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection d'objets <see cref="T:System.Windows.Data.BindingExpression" /> qui contient des informations pour chaque liaison dans <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <value>Collection d'objets <see cref="T:System.Windows.Data.BindingExpression" /> qui contient des informations pour chaque liaison dans <see cref="T:System.Windows.Data.BindingGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Data.BindingExpression> appartient à un <xref:System.Windows.Data.BindingGroup> si un des cas suivants se produit :  
  
-   Les sources de la liaison et la <xref:System.Windows.FrameworkElement.DataContext%2A> de l’élément qui a le <xref:System.Windows.Data.BindingGroup> sont le même objet et la <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> n’est pas définie.  
  
-   Le <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> propriété de la liaison et la <xref:System.Windows.Data.BindingGroup.Name%2A> de la <xref:System.Windows.Data.BindingGroup> sont définies sur la même valeur non null et le <xref:System.Windows.Data.BindingGroup> appartient à un élément parent de l’élément cible de la liaison.  
  
-   Vous ajoutez un <xref:System.Windows.Data.BindingExpression> à <xref:System.Windows.Data.BindingGroup.BindingExpressions%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelEdit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Met fin à la transaction de modification et ignore les modifications en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode entraîne les sources à ignorer les modifications en attente, si un objet source est capable de faire et de fin de la transaction de modification. Puis la méthode met à jour les propriétés cibles avec les valeurs sources enregistrées.  
  
 Pour chaque objet de <xref:System.Windows.Data.BindingGroup.Items%2A> qui implémente <xref:System.ComponentModel.IEditableObject>, <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> appels <xref:System.ComponentModel.IEditableObject.CancelEdit%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 L’exemple suivant appelle <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> pour ignorer les modifications en attente, puis appelle <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> pour préparer la source pour être ré-édition.  
  
 [!code-csharp[BindingGroupSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[BindingGroupSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRestoreValues">
      <MemberSignature Language="C#" Value="public bool CanRestoreValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRestoreValues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.CanRestoreValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRestoreValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRestoreValues { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Détermine si chaque source dans la liaison peut ignorer les modifications en attente et restaurer les valeurs d'origine.</summary>
        <value>
          <see langword="true" /> si chaque source dans la liaison peut ignorer les modifications en attente et restaurer les valeurs d'origine ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une source peut ignorer les modifications en attente si elle implémente <xref:System.ComponentModel.IEditableObject>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public bool CommitEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CommitEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.CommitEdit" />
      <MemberSignature Language="VB.NET" Value="Public Function CommitEdit () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CommitEdit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute tous les objets <see cref="T:System.Windows.Controls.ValidationRule" /> et met à jour les sources de liaison si toutes les règles de validation réussissent.</summary>
        <returns>
          <see langword="true" /> si chaque <see cref="T:System.Windows.Controls.ValidationRule" /> réussit et les valeurs sont validées dans les sources ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si chaque <xref:System.Windows.Controls.ValidationRule> réussit, cette méthode provoque les sources valider les modifications en attente et de fin de la transaction de modification, si un objet source est capable de faire.  
  
 Pour chaque objet de <xref:System.Windows.Data.BindingGroup.Items%2A> qui implémente <xref:System.ComponentModel.IEditableObject>, <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> appels <xref:System.ComponentModel.IEditableObject.EndEdit%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 L’exemple suivant appelle <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> pour enregistrer les modifications en attente, puis appelle <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> pour préparer la source pour être ré-édition.  
  
 [!code-csharp[BindingGroupSnippets#BeginEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#beginedit)]
 [!code-vb[BindingGroupSnippets#BeginEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#beginedit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object item, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(object item, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.GetValue(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (item As Object, propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ item, System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="item">Objet qui contient la propriété spécifiée.</param>
        <param name="propertyName">Propriété dont la valeur proposée doit être obtenue.</param>
        <summary>Retourne la valeur proposée pour la propriété et l'élément spécifiés.</summary>
        <returns>Valeur de propriété proposée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode dans le <xref:System.Windows.Controls.ValidationRule.Validate%2A?displayProperty=nameWithType> méthode pour obtenir la valeur validée à la source. Le type de la valeur de retour dépend de la phase à laquelle le <xref:System.Windows.Controls.ValidationRule> se produit. Par exemple, si un <xref:System.Windows.Controls.TextBox> est lié aux données à une propriété de type entier et le <xref:System.Windows.Controls.ValidationRule> qui appelle <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> a son <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> la valeur <xref:System.Windows.Controls.ValidationStep.RawProposedValue>, la méthode retourne une chaîne. Si le <xref:System.Windows.Controls.ValidationRule> a son <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> la valeur <xref:System.Windows.Controls.ValidationStep.ConvertedProposedValue>, la méthode retourne le type retourné par convertisseur de la liaison. Dans cet exemple, <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> retourne généralement un entier.  
  
   
  
## Examples  
 L’exemple suivant fait partie d’une application qui invite l’utilisateur à entrer plusieurs clients et affecter un représentant commercial à chaque client. L’application vérifie que le commercial et le client appartiennent à la même région. L’exemple montre le <xref:System.Windows.Controls.ValidationRule.Validate%2A> méthode, qui utilise le <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> méthode pour obtenir les valeurs entrées par le client.  
  
 [!code-csharp[BindingGroupSnippets#ItemBindGroupValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml.cs#itembindgroupvalidationrule)]
 [!code-vb[BindingGroupSnippets#ItemBindGroupValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window2.xaml.vb#itembindgroupvalidationrule)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il n'y a pas de liaison pour l'élément et la propriété spécifiés.</exception>
        <exception cref="T:System.Windows.Data.ValueUnavailableException">La valeur de la propriété spécifiée n'est pas disponible, en raison d'une erreur de conversion ou car une règle de validation antérieure a échoué.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasValidationError">
      <MemberSignature Language="C#" Value="public bool HasValidationError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.HasValidationError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValidationError { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si le <see cref="T:System.Windows.Data.BindingGroup" /> a une règle de validation non réussie.</summary>
        <value>
          <see langword="true" /> si le <see cref="T:System.Windows.Data.BindingGroup" /> a une règle de validation non réussie ; sinon <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le <see cref="T:System.Windows.Data.BindingGroup" /> contient une valeur proposée qui n'a pas été écrite dans la source.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Windows.Data.BindingGroup" /> contient une valeur proposée qui n'a pas été écrite dans la source ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Collections.IList Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Items { System::Collections::IList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les sources utilisées par les objets de liaison dans <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <value>Sources utilisées par les objets de liaison dans <see cref="T:System.Windows.Data.BindingGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque objet qui est utilisé comme une source est ajoutée dans le <xref:System.Windows.Data.BindingGroup.Items%2A> propriété qu’une seule fois, même si l’objet est utilisé comme source pour plusieurs liaisons. Souvent, il y a qu’un seul élément dans <xref:System.Windows.Data.BindingGroup.Items%2A>, qui est l’objet qui est la <xref:System.Windows.FrameworkElement.DataContext%2A> de l’élément qui utilise le <xref:System.Windows.Data.BindingGroup>. Il est possible pour un <xref:System.Windows.Data.BindingGroup> d’avoir plusieurs sources, cependant. Par exemple, si des objets de liaison partagent la même <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> mais utilisent des objets sources différents, chaque objet qui est utilisé comme source est dans <xref:System.Windows.Data.BindingGroup.Items%2A>.  
  
 Il peut également y avoir plusieurs objets dans <xref:System.Windows.Data.BindingGroup.Items%2A> si le chemin d’accès d’une liaison correspond à une propriété imbriquée de la source. Par exemple, un <xref:System.Windows.Controls.TextBox> liaison du contrôle fait partie d’un <xref:System.Windows.Data.BindingGroup> et son <xref:System.Windows.FrameworkElement.DataContext%2A> est un `Customer` object, qui a une propriété de type `Address`. Si le <xref:System.Windows.Data.Binding.Path%2A> de la <xref:System.Windows.Data.Binding> est la `Address.ZipCode` propriété, le `Address` est ajouté à la <xref:System.Windows.Data.BindingGroup.Items%2A> propriété.  
  
   
  
## Examples  
 Les exemples suivants font partie d’une application qui vérifie si l’utilisateur a défini les propriétés de deux objets de valeurs identiques. Le premier exemple crée deux <xref:System.Windows.Controls.TextBox> contrôles, chacune d’elles sont liées à une autre source de données. La liaison de la première <xref:System.Windows.Controls.TextBox> obtient sa source, `object1`, à partir de la <xref:System.Windows.FrameworkElement.DataContext%2A> de la <xref:System.Windows.Controls.TextBox> élément parent du contrôle (le <xref:System.Windows.Controls.StackPanel>). Dans la deuxième <xref:System.Windows.Controls.TextBox>, la source de la liaison est définie `object2`. L’exemple crée également un <xref:System.Windows.Controls.Label> qui affiche les erreurs de validation.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 L’exemple suivant illustre la <xref:System.Windows.Controls.ValidationRule> par l’exemple précédent. Dans le <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode), l’exemple obtient chaque objet source à partir de la <xref:System.Windows.Data.BindingGroup> et vérifie si les propriétés des objets sont égale.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom qui identifie le <see cref="T:System.Windows.Data.BindingGroup" />, qui peut être utilisé pour inclure et exclure des objets de liaison dans <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <value>Nom qui identifie <see cref="T:System.Windows.Data.BindingGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Windows.Data.BindingGroup.Name%2A> est `null`, les liaisons qui ont une source qui est le même objet que le <xref:System.Windows.FrameworkElement.DataContext%2A> de l’élément qui a le <xref:System.Windows.Data.BindingGroup> participer à la <xref:System.Windows.Data.BindingGroup>.  
  
 Vous pouvez inclure des liaisons qui ont une source différente de la <xref:System.Windows.FrameworkElement.DataContext%2A> de l’élément parent qui a le <xref:System.Windows.Data.BindingGroup> en définissant <xref:System.Windows.Data.BindingGroup.Name%2A> de la <xref:System.Windows.Data.BindingGroup> et <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> propriété d’une liaison à la même valeur. Vous pouvez exclure des liaisons qui ont la même source en tant que <xref:System.Windows.FrameworkElement.DataContext%2A> de l’élément parent qui a le <xref:System.Windows.Data.BindingGroup> en définissant <xref:System.Windows.Data.BindingGroup.Name%2A> de la <xref:System.Windows.Data.BindingGroup> et <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> propriété d’une liaison à des valeurs différentes.  
  
   
  
## Examples  
 Les exemples suivants font partie d’une application qui vérifie si l’utilisateur a défini les propriétés de deux objets de valeurs identiques. Le premier exemple crée deux <xref:System.Windows.Controls.TextBox> contrôles, chacune d’elles sont liées à une autre source de données. La liaison de la première <xref:System.Windows.Controls.TextBox> fait partie de la <xref:System.Windows.Data.BindingGroup> , car le <xref:System.Windows.Controls.TextBox> hérite le <xref:System.Windows.FrameworkElement.DataContext%2A> et <xref:System.Windows.Data.BindingGroup> à partir de son parent <xref:System.Windows.Controls.StackPanel>.  
  
 La liaison sur le deuxième <xref:System.Windows.Controls.TextBox> fait partie de la <xref:System.Windows.Data.BindingGroup> , car le <xref:System.Windows.Data.BindingGroup.Name%2A> de la <xref:System.Windows.Data.BindingGroup> et le <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> de la <xref:System.Windows.Data.Binding> sont toutes deux définies sur `bindingGroup`.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 L’exemple suivant illustre la <xref:System.Windows.Controls.ValidationRule> par l’exemple précédent. Dans le <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode), l’exemple obtient chaque objet source à partir de la <xref:System.Windows.Data.BindingGroup> et vérifie si les propriétés des objets sont égale.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnValidationError">
      <MemberSignature Language="C#" Value="public bool NotifyOnValidationError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.NotifyOnValidationError" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnValidationError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit si l'événement <see cref="E:System.Windows.Controls.Validation.Error" /> se produit lorsque l'état de <see cref="T:System.Windows.Controls.ValidationRule" /> change.</summary>
        <value>
          <see langword="true" /> si l'événement <see cref="E:System.Windows.Controls.Validation.Error" /> se produit lorsque l'état de <see cref="T:System.Windows.Controls.ValidationRule" /> change ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> événement attaché se produit sur l’élément qui a le <xref:System.Windows.Data.BindingGroup>.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Data.BindingGroup> et définit <xref:System.Windows.Data.BindingGroup.NotifyOnValidationError%2A> à `true` afin que l’application peut gérer le <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> événement quand un <xref:System.Windows.Controls.ValidationRule> échoue.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroup](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#bindinggroup)]  
  
 L’exemple suivant gère le <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> événement.  
  
 [!code-csharp[BindingGroupSnippets#ErrorHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#errorhandler)]
 [!code-vb[BindingGroupSnippets#ErrorHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#errorhandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Owner { System::Windows::DependencyObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet auquel ce <see cref="T:System.Windows.Data.BindingGroup" /> est assigné.</summary>
        <value>Objet auquel ce <see cref="T:System.Windows.Data.BindingGroup" /> est assigné.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharesProposedValues">
      <MemberSignature Language="C#" Value="public bool SharesProposedValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SharesProposedValues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.SharesProposedValues" />
      <MemberSignature Language="VB.NET" Value="Public Property SharesProposedValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SharesProposedValues { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le <see cref="T:System.Windows.Data.BindingGroup" /> réutilise des valeurs cible qui n'ont pas été validées à la source.</summary>
        <value>
          <see langword="true" /> si le <see cref="T:System.Windows.Data.BindingGroup" /> réutilise des valeurs cible qui n'ont pas été validées à la source ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une valeur proposée est une valeur qui a été modifiée sur la cible d’une liaison, mais n’a pas été validée dans la source. Par exemple, supposons qu’il y a une liaison bidirectionnelle sur un <xref:System.Windows.Controls.TextBox> et <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> est définie sur <xref:System.Windows.Data.UpdateSourceTrigger.Explicit>. Si l’utilisateur modifie la valeur de la <xref:System.Windows.Controls.TextBox>, la valeur proposée est la valeur qui se trouve dans le <xref:System.Windows.Controls.TextBox> avant qu’il soit validée dans la source.  
  
 Lorsque <xref:System.Windows.Data.BindingGroup.SharesProposedValues%2A> est `true`, le <xref:System.Windows.Data.BindingGroup> utilise la valeur proposée lorsqu’une liaison quitte le BindingGroup et une autre liaison ayant la même source rejoint le BindingGroup.  Par exemple, supposons qu’une application permet à un utilisateur de modifier plusieurs champs et de mettre à jour de l’objet source en cliquant sur un bouton. Lorsqu’un champ n’est pas modifié, l’application l’affiche dans un <xref:System.Windows.Controls.TextBlock>. Lorsque l’utilisateur commence à modifier un champ, l’application remplace le <xref:System.Windows.Controls.TextBlock> avec un <xref:System.Windows.Controls.TextBox>. Lorsque l’utilisateur a fini de modifier ce champ, l’application remplace le <xref:System.Windows.Controls.TextBox> avec un <xref:System.Windows.Controls.TextBlock>. Étant donné que la source n’est pas mis à jour jusqu'à ce que l’utilisateur clique sur le bouton, il doit y avoir un moyen pour le <xref:System.Windows.Controls.TextBlock> pour afficher la valeur proposée. En définissant <xref:System.Windows.Data.BindingGroup.SharesProposedValues%2A> à `true`, l’application affiche les modifications apportées par l’utilisateur à un champ même lorsque la source n’a pas été mis à jour.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (object item, string propertyName, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(object item, string propertyName, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.TryGetValue(System.Object,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (item As Object, propertyName As String, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(System::Object ^ item, System::String ^ propertyName, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="item">Objet qui contient la propriété spécifiée.</param>
        <param name="propertyName">Propriété dont la valeur proposée doit être obtenue.</param>
        <param name="value">Lorsque cette méthode est retournée, contient un objet qui représente la valeur de propriété proposée. Ce paramètre est passé sans être initialisé.</param>
        <summary>Tente d'obtenir la valeur proposée pour la propriété et l'élément spécifiés.</summary>
        <returns>
          <see langword="true" /> si la valeur est la valeur proposée pour la propriété spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> Retourne `false` s’il n’existe pas une liaison pour l’élément spécifié et la propriété ou si la valeur de la propriété spécifiée n’est pas disponible, en raison d’une erreur de conversion ou car une règle de validation antérieure a échoué.  
  
 Utilisez cette méthode dans le <xref:System.Windows.Controls.ValidationRule.Validate%2A?displayProperty=nameWithType> méthode pour obtenir la valeur validée à la source. Le type `value` dépend du stade auquel le <xref:System.Windows.Controls.ValidationRule> se produit. Par exemple, si un <xref:System.Windows.Controls.TextBox> est lié aux données d’une propriété de type entier, `value` est une chaîne si le <xref:System.Windows.Controls.ValidationRule> qui appelle <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> a son <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> la valeur <xref:System.Windows.Controls.ValidationStep.RawProposedValue>. Si le <xref:System.Windows.Controls.ValidationRule> a son <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> la valeur <xref:System.Windows.Controls.ValidationStep.ConvertedProposedValue>, le type de `value` est le type retourné par convertisseur de la liaison. Dans cet exemple, `value` est généralement un entier.  
  
   
  
## Examples  
 L’exemple suivant crée une personnalisée <xref:System.Windows.Controls.ValidationRule> nommé `ValidateDateAndPrice`. Dans le <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode), l’exemple utilise le <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> (méthode) et le <xref:System.Windows.Data.BindingGroup.Items%2A> propriété à obtenir les valeurs entrées dans le formulaire par l’utilisateur. L’exemple vérifie ensuite que si un élément est de plus de 100 dollars, il sera disponible pendant au moins sept jours. Cet exemple fait partie d’un exemple plus complet sur la <xref:System.Windows.Data.BindingGroup> classe  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSources">
      <MemberSignature Language="C#" Value="public bool UpdateSources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UpdateSources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.UpdateSources" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdateSources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool UpdateSources();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute le convertisseur sur la liaison et les objets <see cref="T:System.Windows.Controls.ValidationRule" /> qui ont la propriété <see cref="P:System.Windows.Controls.ValidationRule.ValidationStep" /> définie à <see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" />, <see cref="F:System.Windows.Controls.ValidationStep.ConvertedProposedValue" /> ou <see cref="F:System.Windows.Controls.ValidationStep.UpdatedValue" /> et enregistre les valeurs des cibles dans les objets sources si toutes les règles de validation réussissent.</summary>
        <returns>
          <see langword="true" /> si toutes les règles de validation réussissent ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode met à jour la source si chaque <xref:System.Windows.Controls.ValidationRule> réussit, mais elle n’entraîne pas les sources valider les modifications en attente et de fin de la transaction de modification. Autrement dit, si l’objet source implémente <xref:System.ComponentModel.IEditableObject>. Cette méthode ne provoque pas l’appel <xref:System.ComponentModel.IEditableObject.EndEdit%2A> à appeler. Utilisez la <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> méthode pour que les sources de valider les modifications en attente.  
  
   
  
## Examples  
 L’exemple suivant fait partie d’une application qui invite l’utilisateur à entrer plusieurs clients et affecter un représentant commercial à chaque client. L’application vérifie que le commercial et le client appartiennent à la même région. L’exemple appelle <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> pour valider les liaisons et enregistrer les valeurs dans la source si toutes les règles de validation réussissent.  
  
 [!code-csharp[BindingGroupSnippets#UpdateSources](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml.cs#updatesources)]
 [!code-vb[BindingGroupSnippets#UpdateSources](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window2.xaml.vb#updatesources)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnNotifyDataError">
      <MemberSignature Language="C#" Value="public bool ValidatesOnNotifyDataError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnNotifyDataError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnNotifyDataError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnNotifyDataError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s'il faut inclure <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />.</summary>
        <value>
          <see langword="true" /> pour inclure <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque <xref:System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError%2A> est `true`, la liaison vérifie et signale les erreurs qui sont déclenchés par une source de données qui implémente <xref:System.ComponentModel.INotifyDataErrorInfo>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateWithoutUpdate">
      <MemberSignature Language="C#" Value="public bool ValidateWithoutUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValidateWithoutUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.ValidateWithoutUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateWithoutUpdate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValidateWithoutUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute le convertisseur sur la liaison et les objets <see cref="T:System.Windows.Controls.ValidationRule" /> qui ont la propriété <see cref="P:System.Windows.Controls.ValidationRule.ValidationStep" /> définie à <see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" /> ou <see cref="F:System.Windows.Controls.ValidationStep.ConvertedProposedValue" />.</summary>
        <returns>
          <see langword="true" /> si les règles de validation réussissent ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les sources ne sont pas mis à jour lorsque vous appelez cette méthode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationErrors">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt; ValidationErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Controls.ValidationError&gt; ValidationErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.ValidationErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationErrors As ReadOnlyCollection(Of ValidationError)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Controls::ValidationError ^&gt; ^ ValidationErrors { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Controls::ValidationError ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection d'objets d'<see cref="T:System.Windows.Controls.ValidationError" /> qui ont rendu le <see cref="T:System.Windows.Data.BindingGroup" /> non valide.</summary>
        <value>Collection d'objets de <see cref="T:System.Windows.Controls.ValidationError" /> qui ont rendu <see cref="T:System.Windows.Data.BindingGroup" /> invalide.  La valeur est <see langword="null" /> s'il n'existe aucune erreur.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt; ValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.ValidationRule&gt; ValidationRules" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.ValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationRules As Collection(Of ValidationRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ ValidationRules { System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection d'objets <see cref="T:System.Windows.Controls.ValidationRule" /> qui valident les objets sources dans <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <value>Collection d'objets <see cref="T:System.Windows.Controls.ValidationRule" /> qui valident les objets sources dans <see cref="T:System.Windows.Data.BindingGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quand un <xref:System.Windows.Controls.ValidationRule> est ajouté à un <xref:System.Windows.Data.BindingGroup>, le <xref:System.Windows.Data.BindingGroup> est passée comme premier paramètre de la <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode). Vous pouvez obtenir les valeurs proposées de l’objet à l’aide de la <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> ou <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> (méthode). Vous pouvez obtenir les objets qui sont les sources des liaisons à partir de la <xref:System.Windows.Data.BindingGroup.Items%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant ajoute la personnalisée <xref:System.Windows.Controls.ValidationRule>, `ValidateDateAndPrice`, à le <xref:System.Windows.Data.BindingGroup>.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroup](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#bindinggroup)]  
  
 L’exemple suivant montre la classe `ValidateDateAndPrice`. Le <xref:System.Windows.Controls.ValidationRule.Validate%2A> utilise le <xref:System.Windows.Data.BindingGroup> pour obtenir les valeurs entrées dans le formulaire et vérifie que si un élément est de plus de 100 dollars, il sera disponible pendant au moins sept jours par l’utilisateur.  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>