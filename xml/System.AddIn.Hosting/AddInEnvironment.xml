<Type Name="AddInEnvironment" FullName="System.AddIn.Hosting.AddInEnvironment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="03861fa059d5a59ed3db5e037b00de56a98d2c50" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51892619" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AddInEnvironment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInEnvironment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInEnvironment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInEnvironment" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInEnvironment sealed" />
  <TypeSignature Language="F#" Value="type AddInEnvironment = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit l'accès au domaine d'application et au processus d'un complément.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette classe pour charger des compléments dans un environnement souhaité, qui peut prendre l’une des opérations suivantes :  
  
-   Un domaine d’application existant pour lequel vous avez le <xref:System.AppDomain> objet.  
  
-   Un domaine d’application qui a été généré automatiquement pour activer un complément.  
  
-   Un processus externe existant.  
  
 Pour obtenir le <xref:System.AddIn.Hosting.AddInEnvironment> objet pour un complément, passez domaine d’application du complément à le <xref:System.AddIn.Hosting.AddInEnvironment> constructeur de classe. Vous pouvez également utiliser le <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> propriété de la <xref:System.AddIn.Hosting.AddInController> classe pour obtenir le complément <xref:System.AddIn.Hosting.AddInEnvironment> objet.  
  
 Après avoir obtenu le <xref:System.AddIn.Hosting.AddInEnvironment> de l’objet, vous pouvez procédez comme suit :  
  
-   Passez qui <xref:System.AddIn.Hosting.AddInEnvironment> objet appropriés <xref:System.AddIn.Hosting.AddInToken.Activate%2A> surcharge de méthode. Le complément sera activé dans le domaine d’application et les processus qui est représentée par le <xref:System.AddIn.Hosting.AddInEnvironment> objet.  
  
-   Utilisez le <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A> propriété pour obtenir un <xref:System.AddIn.Hosting.AddInProcess> objet. Passez ensuite cet objet appropriés <xref:System.AddIn.Hosting.AddInToken.Activate%2A> surcharge de méthode. Le complément sera activé dans le processus qui est représenté par le <xref:System.AddIn.Hosting.AddInProcess> objet, mais dans un nouveau domaine d’application.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8dd45b02-7218-40f9-857d-40d7b98b850b">Compléments et extensibilité</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInEnvironment (AppDomain appDomain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.AppDomain appDomain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AddInEnvironment(AppDomain ^ appDomain);" />
      <MemberSignature Language="F#" Value="new System.AddIn.Hosting.AddInEnvironment : AppDomain -&gt; System.AddIn.Hosting.AddInEnvironment" Usage="new System.AddIn.Hosting.AddInEnvironment appDomain" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appDomain" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <param name="appDomain">Domaine d'application qui contient le complément.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.AddIn.Hosting.AddInEnvironment" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous avez accès au domaine d’application qui contient le complément que vous avez besoin, vous pouvez utiliser ce constructeur pour obtenir le complément <xref:System.AddIn.Hosting.AddInEnvironment> objet. Sinon, vous pouvez utiliser la <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> propriété de la <xref:System.AddIn.Hosting.AddInController> classe pour obtenir le <xref:System.AddIn.Hosting.AddInEnvironment> objet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appDomain" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Une autorisation de confiance totale est requise. Un appelant dans la chaîne d'appel ne dispose pas de l'autorisation suffisante.</exception>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInProcess Process { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInProcess Process" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Process As AddInProcess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInProcess ^ Process { System::AddIn::Hosting::AddInProcess ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Process : System.AddIn.Hosting.AddInProcess" Usage="System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInProcess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet <see cref="T:System.AddIn.Hosting.AddInProcess" /> qui représente le processus dans lequel le complément est exécuté.</summary>
        <value>Processus dans lequel le complément est exécuté.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette propriété pour activer plusieurs compléments dans le même processus, mais dans des domaines différents.  
  
 Passer le <xref:System.AddIn.Hosting.AddInProcess> objet obtenu avec cette propriété appropriés <xref:System.AddIn.Hosting.AddInToken.Activate%2A> surcharge de méthode.  
  
 Si vous souhaitez les activer dans le même domaine dans un processus externe, vous devez passer le <xref:System.AddIn.Hosting.AddInEnvironment> objet directement à la <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInEnvironment%29?displayProperty=nameWithType> surcharge de méthode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>