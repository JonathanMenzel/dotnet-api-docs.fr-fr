<Type Name="AddInToken" FullName="System.AddIn.Hosting.AddInToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="801a6848ba8c9b990784fc18f84a0e3335463c64" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37705148" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AddInToken : System.Collections.Generic.IEnumerable&lt;System.AddIn.Hosting.QualificationDataItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit AddInToken extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;valuetype System.AddIn.Hosting.QualificationDataItem&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInToken" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInToken&#xA;Implements IEnumerable(Of QualificationDataItem)" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInToken sealed : System::Collections::Generic::IEnumerable&lt;System::AddIn::Hosting::QualificationDataItem&gt;" />
  <TypeSignature Language="F#" Value="type AddInToken = class&#xA;    interface seq&lt;QualificationDataItem&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.AddIn.Hosting.QualificationDataItem&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Représente un complément qui peut être activé.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.AddIn.Hosting.AddInToken> objet représente un complément et ses segments de pipeline associés, qui peuvent être activés. Le jeton contient le nom, nom de l’assembly, description, éditeur et la version du complément qu’il représente.  
  
 Utilisez le <xref:System.AddIn.Hosting.AddInStore.FindAddIns%2A?displayProperty=nameWithType> méthode pour obtenir une collection de jetons qui représentent des compléments dont les pipelines correspondent à une vue d’hôte spécifié. Utilisez le <xref:System.AddIn.Hosting.AddInStore.FindAddIn%2A?displayProperty=nameWithType> méthode pour obtenir une collection de jetons qui représentent tous les pipelines d’un complément qui correspondent à une vue d’hôte spécifié.  
  
 Pour activer un complément, passez le jeton qui représente le complément souhaité pour le <xref:System.AddIn.Hosting.AddInToken.Activate%2A> (méthode). Cette méthode retourne une instance du type qui représente la vue hôte du complément.  
  
 Le <xref:System.AddIn.Hosting.AddInToken.Activate%2A> méthode a plusieurs surcharges. Lorsque vous utilisez une surcharge qui ne nécessite pas le nom d’un domaine d’application en tant qu’un de ses paramètres, un nouveau domaine d’application pour le complément est automatiquement créé.  
  
 Vous pouvez utiliser les méthodes d’extension Language-Integrated Query (LINQ) pour effectuer des requêtes sur un <xref:System.AddIn.Hosting.AddInToken>, en traitant le jeton comme une collection de <xref:System.AddIn.Hosting.QualificationDataItem> structures.  
  
   
  
## Examples  
 Cette section contient deux exemples. Le premier exemple active un complément qui a été sélectionné à l’aide de la `ChooseAddIn` (méthode) et le second exemple illustre la `ChooseAddIn` (méthode).  
  
 **Exemple 1**  
  
 L’exemple suivant montre comment activer un complément avec un jeton.  
  
 [!code-csharp[AddInP3Host#5](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#5)]
 [!code-vb[AddInP3Host#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#5)]  
  
 **Exemple 2**  
  
 L’exemple suivant montre le personnalisé `ChooseAddIn` (méthode), qui énumère un <xref:System.AddIn.Hosting.AddInToken> collection. L’utilisateur sélectionne un jeton à partir de cette collection pour activer le complément correspondant.  
  
 [!code-csharp[AddInP3Host#13](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#13)]
 [!code-vb[AddInP3Host#13](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Activate&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Active un complément.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInEnvironment environment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AddIn.Hosting.AddInEnvironment environment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInEnvironment)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (environment As AddInEnvironment) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInEnvironment ^ environment);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInEnvironment -&gt; 'T" Usage="addInToken.Activate environment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="environment" Type="System.AddIn.Hosting.AddInEnvironment" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interface ou type de base abstrait qui représente la vue hôte du complément.</typeparam>
        <param name="environment">Domaine d'application et processus contenant le complément d'origine.</param>
        <summary>Active un complément dans l'environnement d'un autre complément.</summary>
        <returns>Vue de l'hôte du complément.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de méthode active le complément dans le même domaine d’application et le même processus que le complément à partir de laquelle `environment` a été obtenu.  
  
   
  
## Examples  
 L’exemple suivant active un complément dans un domaine d’application généré automatiquement avec un niveau de sécurité spécifié. Il active ensuite un deuxième complément dans le même domaine d’application et processus comme tout d’abord en utilisant le premier complément <xref:System.AddIn.Hosting.AddInEnvironment> objet.  
  
 [!code-csharp[AddInP3Host#8](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#8)]
 [!code-vb[AddInP3Host#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInSecurityLevel trustLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(valuetype System.AddIn.Hosting.AddInSecurityLevel trustLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (trustLevel As AddInSecurityLevel) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInSecurityLevel trustLevel);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInSecurityLevel -&gt; 'T" Usage="addInToken.Activate trustLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="trustLevel" Type="System.AddIn.Hosting.AddInSecurityLevel" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interface ou type de base abstrait qui représente la vue hôte du complément.</typeparam>
        <param name="trustLevel">Une des valeurs d'énumération qui spécifie le niveau de confiance.</param>
        <summary>Active un complément avec un niveau de confiance spécifié dans un nouveau domaine d'application.</summary>
        <returns>Vue de l'hôte du complément.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de méthode charge le complément dans un domaine d’application généré automatiquement. Si vous souhaitez spécifier un nom pour le nouveau domaine d’application, utilisez la <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%2CSystem.String%29> de surcharge.  
  
 Cette méthode définit le répertoire de base pour le domaine d’application à l’emplacement de l’assembly du complément. Elle recherche également le fichier de configuration [addinassemblyname].dll et, si trouvée, la définit comme le fichier de configuration pour le nouveau domaine d’application.  
  
   
  
## Examples  
 L’exemple suivant montre comment activer un complément, identifié par le jeton choisi, dans un domaine d’application généré automatiquement avec un niveau de sécurité spécifié.  
  
 [!code-csharp[AddInP3Host#5](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#5)]
 [!code-vb[AddInP3Host#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (AppDomain target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AppDomain target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AppDomain)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (target As AppDomain) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(AppDomain ^ target);" />
      <MemberSignature Language="F#" Value="member this.Activate : AppDomain -&gt; 'T" Usage="addInToken.Activate target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interface ou type de base abstrait qui représente la vue hôte du complément.</typeparam>
        <param name="target">Domaine d'application dans lequel le complément doit être activé.</param>
        <summary>Active un complément dans un domaine d'application existant.</summary>
        <returns>Vue de l'hôte du complément.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour activer un complément dans un domaine d’application généré automatiquement, utilisez le <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> surcharge pour générer un nouveau domaine d’application avec un niveau de sécurité spécifié ou le <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%2CSystem.String%29> surcharge pour inclure un nom convivial pour le domaine d’application.  
  
   
  
## Examples  
 L’exemple suivant active un complément dans un domaine d’application qui est utilisé par un autre complément. Le code pour le premier complément est fourni dans le <xref:System.AddIn.Hosting.AddInToken> classe.  
  
 [!code-csharp[AddInP3Host#9](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#9)]
 [!code-vb[AddInP3Host#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Une autorisation de confiance totale est requise. Un appelant dans la chaîne d'appel ne dispose pas de l'autorisation suffisante.</exception>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.Security.PermissionSet permissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.Security.PermissionSet permissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (permissions As PermissionSet) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::Security::PermissionSet ^ permissions);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.Security.PermissionSet -&gt; 'T" Usage="addInToken.Activate permissions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="permissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interface ou type de base abstrait qui représente la vue hôte du complément.</typeparam>
        <param name="permissions">Autorisations accordées pour le complément.</param>
        <summary>Active un complément avec un jeu d'autorisations spécifié dans un nouveau domaine d'application.</summary>
        <returns>Vue de l'hôte du complément.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de méthode charge le complément dans un domaine d’application généré automatiquement. Il définit le répertoire de base pour le domaine d’application à l’emplacement de l’assembly du complément. Il recherche également le fichier de configuration `[addinassemblyname].dll.config` et, s’il existe, jeux qu’il soit le fichier de configuration pour le nouveau domaine d’application.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="permissions" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInProcess process, System.AddIn.Hosting.AddInSecurityLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AddIn.Hosting.AddInProcess process, valuetype System.AddIn.Hosting.AddInSecurityLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.AddIn.Hosting.AddInSecurityLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (process As AddInProcess, level As AddInSecurityLevel) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInProcess ^ process, System::AddIn::Hosting::AddInSecurityLevel level);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInProcess * System.AddIn.Hosting.AddInSecurityLevel -&gt; 'T" Usage="addInToken.Activate (process, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="process" Type="System.AddIn.Hosting.AddInProcess" />
        <Parameter Name="level" Type="System.AddIn.Hosting.AddInSecurityLevel" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interface ou type de base abstrait qui représente la vue hôte du complément.</typeparam>
        <param name="process">le processus externe dans lequel activer le complément.</param>
        <param name="level">Une des valeurs d'énumération qui spécifie le niveau de confiance.</param>
        <summary>Active un complément dans un processus externe, dans un nouveau domaine d'application, et avec un niveau de confiance spécifié.</summary>
        <returns>Vue de l'hôte du complément.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode définit le répertoire de base pour le domaine d’application à l’emplacement de l’assembly du complément. Il recherche également le fichier de configuration `[addinassemblyname].dll.config` et, s’il existe, jeux qu’il soit le fichier de configuration pour le nouveau domaine d’application.  
  
   
  
## Examples  
 L’exemple suivant crée un nouveau processus et Active un complément dans ce processus avec un niveau de sécurité de confiance totale.  
  
 [!code-csharp[AddInP3Host#10](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#10)]
 [!code-vb[AddInP3Host#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#10)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">confiance totale accordée à l’appelant immédiat. Ce membre ne peut pas être utilisé par du code d'un niveau de confiance partiel.</permission>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInProcess process, System.Security.PermissionSet permissionSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AddIn.Hosting.AddInProcess process, class System.Security.PermissionSet permissionSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInProcess ^ process, System::Security::PermissionSet ^ permissionSet);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInProcess * System.Security.PermissionSet -&gt; 'T" Usage="addInToken.Activate (process, permissionSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="process" Type="System.AddIn.Hosting.AddInProcess" />
        <Parameter Name="permissionSet" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interface ou type de base abstrait qui représente la vue hôte du complément.</typeparam>
        <param name="process">le processus externe dans lequel activer le complément.</param>
        <param name="permissionSet">Jeu d'autorisations requis accordé pour le complément.</param>
        <summary>Active un complément dans un processus externe, dans un nouveau domaine d'application, et avec un jeu d'autorisations spécifié.</summary>
        <returns>Vue de l'hôte du complément.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode définit le répertoire de base pour le domaine d’application à l’emplacement de l’assembly du complément. Il recherche également le fichier de configuration `[addinassemblyname].dll.config` et, s’il existe, jeux qu’il soit le fichier de configuration pour le nouveau domaine d’application.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">confiance totale accordée à l’appelant immédiat. Ce membre ne peut pas être utilisé par du code d'un niveau de confiance partiel.</permission>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInSecurityLevel trustLevel, string appDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(valuetype System.AddIn.Hosting.AddInSecurityLevel trustLevel, string appDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (trustLevel As AddInSecurityLevel, appDomainName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInSecurityLevel trustLevel, System::String ^ appDomainName);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInSecurityLevel * string -&gt; 'T" Usage="addInToken.Activate (trustLevel, appDomainName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="trustLevel" Type="System.AddIn.Hosting.AddInSecurityLevel" />
        <Parameter Name="appDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interface ou type de base abstrait qui représente la vue hôte du complément.</typeparam>
        <param name="trustLevel">Une des valeurs d'énumération qui spécifie le niveau de confiance.</param>
        <param name="appDomainName">Nom convivial à assigner au nouveau domaine d'application.</param>
        <summary>Active un complément dans un nouveau domaine d'application avec un nom et un niveau de confiance spécifiés.</summary>
        <returns>Vue de l'hôte du complément.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous n’avez pas besoin de spécifier un nom de domaine d’application, utilisez la <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> de surcharge.  
  
 Cette méthode définit le répertoire de base pour le domaine d’application à l’emplacement de l’assembly du complément. Il recherche également le fichier de configuration `[addinassemblyname].dll.config` et, s’il existe, jeux qu’il soit le fichier de configuration pour le nouveau domaine d’application.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInFullName">
      <MemberSignature Language="C#" Value="public string AddInFullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AddInFullName" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.AddInFullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddInFullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AddInFullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AddInFullName : string" Usage="System.AddIn.Hosting.AddInToken.AddInFullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'espace de noms et le type du complément.</summary>
        <value>Type du complément, complètement qualifié par son espace de noms.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété obtient le nom complet du complément, comme il serait retourné par la <xref:System.Type.FullName%2A?displayProperty=nameWithType> propriété. Cette valeur est toujours disponible sur une instance d’un <xref:System.AddIn.Hosting.AddInToken> objet.  
  
   
  
## Examples  
 L’exemple suivant affiche la valeur de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, et <xref:System.AddIn.Hosting.AddInToken.Version%2A> propriétés dans la console. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.AddIn.Hosting.AddInToken> classe.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.AssemblyName AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.AssemblyName AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::AssemblyName ^ AssemblyName { System::Reflection::AssemblyName ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : System.Reflection.AssemblyName" Usage="System.AddIn.Hosting.AddInToken.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de l'assembly qui contient le complément.</summary>
        <value>Nom de l'assembly.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété obtient le nom complet de l’assembly qui contient le complément, comme il serait retourné par la <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> propriété. Cette valeur est toujours disponible sur une instance d’un <xref:System.AddIn.Hosting.AddInToken> objet.  
  
   
  
## Examples  
 L’exemple suivant affiche la valeur de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, et <xref:System.AddIn.Hosting.AddInToken.Version%2A> propriétés dans la console. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.AddIn.Hosting.AddInToken> classe.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Description" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.AddIn.Hosting.AddInToken.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la description du complément.</summary>
        <value>Description du complément, ou <see langword="null" /> si la description n'est pas spécifiée dans l'attribut <see cref="T:System.AddIn.AddInAttribute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété obtient la description du complément comme spécifié dans le <xref:System.AddIn.AddInAttribute> attribut.  
  
   
  
## Examples  
 L’exemple suivant affiche la valeur de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, et <xref:System.AddIn.Hosting.AddInToken.Version%2A> propriétés dans la console. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.AddIn.Hosting.AddInToken> classe.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDirectConnect">
      <MemberSignature Language="C#" Value="public static bool EnableDirectConnect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableDirectConnect" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.EnableDirectConnect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property EnableDirectConnect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnableDirectConnect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDirectConnect : bool with get, set" Usage="System.AddIn.Hosting.AddInToken.EnableDirectConnect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient et définit une valeur qui indique si les compléments doivent être connectés directement à leurs hôtes lorsque les conditions le permettent.</summary>
        <value>
          <see langword="true" /> si le complément doit être connecté directement à l'hôte ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les conditions suivantes doivent exister pour la connexion directe à se produire :  
  
-   Cette propriété doit être définie sur `true`.  
  
-   Le complément doit être dans le même domaine d’application en tant que l’ordinateur hôte.  
  
-   La vue de complément et la vue hôte du complément, doivent être du même type.  
  
-   Tous les segments du pipeline doivent être disponibles.  
  
 Lorsqu’une connexion directe est établie, l’adaptateur côté complément et l’adaptateur côté hôte ne sont pas instanciés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="addInToken.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objet à comparer à l'instance actuelle.</param>
        <summary>Détermine si un objet spécifié est identique à l'instance actuelle.</summary>
        <returns>
          <see langword="true" /> si l'objet spécifié et l'instance actuelle sont identiques ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.AddIn.Hosting.QualificationDataItem&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of QualificationDataItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::AddIn::Hosting::QualificationDataItem&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt;" Usage="addInToken.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un énumérateur pour les données de qualification des segments de pipeline associés à ce jeton.</summary>
        <returns>Énumérateur qui peut être utilisé pour itérer au sein des données de qualification des segments de pipeline associés au jeton actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour traiter un jeton comme s’il s’agissait d’une collection d’éléments de données de qualification, par exemple, dans un `foreach` instruction (`For Each` en Visual Basic, `for each` dans Visual C++).  
  
 Utilisez l’énumérateur retourné par cette méthode pour effectuer une itération dans les éléments de données de qualification des segments de pipeline associés au jeton actuel. Chaque élément de données de qualification est un <xref:System.AddIn.Hosting.QualificationDataItem> structure qui identifie le segment de pipeline et contient une paire nom/valeur à partir d’un <xref:System.AddIn.Pipeline.QualificationDataAttribute> attribut appliqué à ce segment.  
  
> [!NOTE]
>  Le modèle de complément n’utilise pas les données de qualification qui sont appliquées à la vue hôte du complément en. Par conséquent, lorsque vous énumérez les données de qualification vous ne trouverez pas tous les éléments dont <xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A> propriété est <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn?displayProperty=nameWithType>.  
  
 Vous pouvez également utiliser le <xref:System.AddIn.Hosting.AddInToken.QualificationData%2A> propriété à obtenir un ensemble imbriqué de dictionnaires qui contiennent les données de qualification des segments de pipeline.  
  
   
  
## Examples  
 L’exemple suivant répertorie les données de qualification pour les segments de pipeline associés à chaque <xref:System.AddIn.Hosting.AddInToken> dans une collection de jetons.  
  
 [!code-csharp[AddInP3Host#12](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#12)]
 [!code-vb[AddInP3Host#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="addInToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sert de fonction de hachage pour un jeton.</summary>
        <returns>Code de hachage du jeton en cours.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.AddIn.Hosting.AddInToken.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom du complément.</summary>
        <value>Nom du complément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété obtient le nom du complément comme spécifié dans le <xref:System.AddIn.AddInAttribute> attribut. Cette valeur est toujours disponible sur une instance d’un <xref:System.AddIn.Hosting.AddInToken> objet.  
  
   
  
## Examples  
 L’exemple suivant affiche la valeur de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, et <xref:System.AddIn.Hosting.AddInToken.Version%2A> propriétés dans la console. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.AddIn.Hosting.AddInToken> classe.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Publisher">
      <MemberSignature Language="C#" Value="public string Publisher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Publisher" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Publisher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Publisher As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Publisher { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Publisher : string" Usage="System.AddIn.Hosting.AddInToken.Publisher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'éditeur du complément.</summary>
        <value>Éditeur du complément, ou <see langword="null" /> si l'éditeur n'est pas spécifié dans l'attribut <see cref="T:System.AddIn.AddInAttribute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété obtient l’Éditeur du complément comme spécifié dans le <xref:System.AddIn.AddInAttribute> attribut.  
  
   
  
## Examples  
 L’exemple suivant affiche la valeur de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, et <xref:System.AddIn.Hosting.AddInToken.Version%2A> propriétés dans la console. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.AddIn.Hosting.AddInToken> classe.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QualificationData">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;System.AddIn.Hosting.AddInSegmentType,System.Collections.Generic.IDictionary&lt;string,string&gt;&gt; QualificationData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;valuetype System.AddIn.Hosting.AddInSegmentType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt;&gt; QualificationData" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.QualificationData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QualificationData As IDictionary(Of AddInSegmentType, IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::AddIn::Hosting::AddInSegmentType, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^&gt; ^ QualificationData { System::Collections::Generic::IDictionary&lt;System::AddIn::Hosting::AddInSegmentType, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QualificationData : System.Collections.Generic.IDictionary&lt;System.AddIn.Hosting.AddInSegmentType, System.Collections.Generic.IDictionary&lt;string, string&gt;&gt;" Usage="System.AddIn.Hosting.AddInToken.QualificationData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.AddIn.Hosting.AddInSegmentType,System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un dictionnaire de données relatif aux segments dans le pipeline associé au jeton actuel.</summary>
        <value>Dictionnaire dont les clés correspondent aux segments de pipeline et dont les valeurs sont des dictionnaires contenant des paires nom/valeur représentant les données de qualification de chaque segment.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette propriété pour obtenir des données qui a été appliquées pour les segments de pipeline avec le <xref:System.AddIn.Pipeline.QualificationDataAttribute> attribut. Vous pouvez utiliser ces données pour identifier et utiliser les types qui composent vos pipelines.  
  
 Cette propriété retourne un dictionnaire de dictionnaires. Le dictionnaire supérieur a toujours six clés. Chaque clé est une <xref:System.AddIn.Hosting.AddInSegmentType> valeur pour un segment dans le pipeline. Chaque valeur est générique <xref:System.Collections.Generic.IDictionary%602> de chaînes avec des clés de chaîne qui contient les données de qualification du segment.  
  
 Les clés et valeurs de ces dictionnaires internes sont les noms et valeurs spécifiées dans le <xref:System.AddIn.Pipeline.QualificationDataAttribute> attributs pour les segments. Si aucune donnée de qualification n’a été appliquée à un segment, son dictionnaire est vide.  
  
> [!NOTE]
>  Le modèle de complément n’utilise pas les données de qualification qui sont appliquées à la vue hôte du complément en. Par conséquent, le dictionnaire pour <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn?displayProperty=nameWithType> est toujours vide.  
  
 Ou bien, vous pouvez obtenir des données de qualification en énumérant un <xref:System.AddIn.Hosting.AddInToken> comme s’il s’agissait d’une collection de <xref:System.AddIn.Hosting.QualificationDataItem> structures, à l’aide un `foreach` instruction (`For Each` en Visual Basic, `for each` dans Visual C++). Consultez l’exemple fourni pour la <xref:System.AddIn.Hosting.QualificationDataItem> structure.  
  
   
  
## Examples  
 L’exemple suivant montre comment examiner données de qualification d’un complément.  
  
 [!code-csharp[AddInP3Host#11](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#11)]
 [!code-vb[AddInP3Host#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un énumérateur pour les données de qualification des segments de pipeline associés à ce jeton.</summary>
        <returns>Énumérateur qui peut être utilisé pour itérer au sein des données de qualification des segments de pipeline associés au jeton actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode permet à un jeton pour les traiter comme une collection d’éléments de données de qualification, par exemple dans un `foreach` instruction (`For Each` en Visual Basic, `for each` dans Visual C++).  
  
 Utilisez l’énumérateur retourné par cette méthode pour effectuer une itération dans les éléments de données de qualification des segments de pipeline associés au jeton actuel. Chaque élément de données de qualification est un <xref:System.AddIn.Hosting.QualificationDataItem> structure qui identifie le segment de pipeline et contient la paire nom/valeur à partir d’un <xref:System.AddIn.Pipeline.QualificationDataAttribute> attribut appliqué à ce segment.  
  
> [!NOTE]
>  Le modèle de complément n’utilise pas les données de qualification qui sont appliquées à la vue hôte du complément en. Par conséquent, lorsque vous énumérez les données de qualification vous ne trouverez pas tous les éléments dont <xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A> propriété est <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn?displayProperty=nameWithType>.  
  
 Vous pouvez également utiliser le <xref:System.AddIn.Hosting.AddInToken.QualificationData%2A> propriété à obtenir un ensemble imbriqué de dictionnaires contenant les données de qualification des segments de pipeline.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="addInToken.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une chaîne qui représente le jeton.</summary>
        <returns>Chaîne qui représente le jeton.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public string Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Version" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Version { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : string" Usage="System.AddIn.Hosting.AddInToken.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la version du complément, comme spécifié dans l'attribut <see cref="T:System.AddIn.AddInAttribute" />.</summary>
        <value>Version du complément, ou <see langword="null" /> si le numéro de version n'est pas spécifié dans l'attribut <see cref="T:System.AddIn.AddInAttribute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le numéro de version est une chaîne de format libre.  
  
   
  
## Examples  
 L’exemple suivant affiche la valeur de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, et <xref:System.AddIn.Hosting.AddInToken.Version%2A> propriétés dans la console. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.AddIn.Hosting.AddInToken> classe.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>