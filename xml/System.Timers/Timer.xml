<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="85e0c0d7fac03c6196d3ad44416b613fe20113c1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609080" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="321b2-101">Generates an event after a set interval, with an option to generate recurring events.</span>
      <span class="sxs-lookup">
        <span data-stu-id="321b2-101">Generates an event after a set interval, with an option to generate recurring events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-102">Le <xref:System.Timers.Timer> composant est un composant timer serveur qui déclenche un <xref:System.Timers.Timer.Elapsed> événements dans votre application après le nombre de millisecondes dans le <xref:System.Timers.Timer.Interval%2A> propriété s’est écoulé.</span><span class="sxs-lookup"><span data-stu-id="321b2-102">The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed.</span></span> <span data-ttu-id="321b2-103">Vous pouvez configurer le <xref:System.Timers.Timer> objet pour déclencher l’événement qu’une seule fois ou à plusieurs reprises à l’aide du <xref:System.Timers.Timer.AutoReset%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="321b2-103">You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property.</span></span> <span data-ttu-id="321b2-104">En règle générale, un <xref:System.Timers.Timer> objet est déclaré au niveau de la classe afin qu’elle reste dans la portée tant que cela est nécessaire.</span><span class="sxs-lookup"><span data-stu-id="321b2-104">Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed.</span></span> <span data-ttu-id="321b2-105">Vous pouvez ensuite gérer ses <xref:System.Timers.Timer.Elapsed> événement afin de fournir le traitement normal.</span><span class="sxs-lookup"><span data-stu-id="321b2-105">You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing.</span></span> <span data-ttu-id="321b2-106">Par exemple, supposons que vous avez un serveur critique qui doit être conservé en cours d’exécution 24 heures sur 24, 7 jours par semaine.</span><span class="sxs-lookup"><span data-stu-id="321b2-106">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="321b2-107">Vous pouvez créer un service qui utilise un <xref:System.Timers.Timer> objet régulièrement de vérifier le serveur et de vous assurer que le système est en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="321b2-107">You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="321b2-108">Si le système ne répond pas, le service peut tenter de redémarrer le serveur ou avertir un administrateur.</span><span class="sxs-lookup"><span data-stu-id="321b2-108">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="321b2-109">Le <xref:System.Timers.Timer> classe n’est pas disponible pour toutes les implémentations de .NET et les versions, telles que .NET Standard 1.6 et versions inférieures.</span><span class="sxs-lookup"><span data-stu-id="321b2-109">The <xref:System.Timers.Timer> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</span></span>
> <span data-ttu-id="321b2-110">Dans ce cas, vous pouvez utiliser la <xref:System.Threading.Timer?displayProperty=nameWithType> classe à la place.</span><span class="sxs-lookup"><span data-stu-id="321b2-110">In these cases, you can use the <xref:System.Threading.Timer?displayProperty=nameWithType> class instead.</span></span>
  
 <span data-ttu-id="321b2-111">Ce type implémente le <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="321b2-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="321b2-112">Lorsque vous avez fini d’utiliser le type, vous devez supprimer il directement ou indirectement.</span><span class="sxs-lookup"><span data-stu-id="321b2-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="321b2-113">Pour supprimer le type directement, appelez sa <xref:System.IDisposable.Dispose%2A> méthode dans un `try` / `catch` bloc.</span><span class="sxs-lookup"><span data-stu-id="321b2-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="321b2-114">Pour supprimer indirectement, utiliser une construction de langage tel que `using` (en c#) ou `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="321b2-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="321b2-115">Pour plus d’informations, consultez la section « À l’aide un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique de l’interface.</span><span class="sxs-lookup"><span data-stu-id="321b2-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="321b2-116">Basée sur le serveur <xref:System.Timers.Timer?displayProperty=nameWithType> classe est conçue pour une utilisation avec des threads de travail dans un environnement multithread.</span><span class="sxs-lookup"><span data-stu-id="321b2-116">The server-based <xref:System.Timers.Timer?displayProperty=nameWithType> class is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="321b2-117">Minuteries serveur peuvent se déplacer entre les threads pour gérer le relief <xref:System.Timers.Timer.Elapsed> événement, ce qui entraîne plus précises que les minuteurs Windows dans le déclenchement de l’événement sur l’heure.</span><span class="sxs-lookup"><span data-stu-id="321b2-117">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 <span data-ttu-id="321b2-118">Le <xref:System.Timers.Timer?displayProperty=nameWithType> composant déclenche le <xref:System.Timers.Timer.Elapsed> événement, basée sur la valeur (en millisecondes) de la <xref:System.Timers.Timer.Interval%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="321b2-118">The <xref:System.Timers.Timer?displayProperty=nameWithType> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property.</span></span> <span data-ttu-id="321b2-119">Vous pouvez gérer cet événement pour exécuter le traitement que vous avez besoin.</span><span class="sxs-lookup"><span data-stu-id="321b2-119">You can handle this event to perform the processing you need.</span></span> <span data-ttu-id="321b2-120">Par exemple, supposons que vous disposez d’une application de vente en ligne qui publie en permanence des commandes à une base de données.</span><span class="sxs-lookup"><span data-stu-id="321b2-120">For example, suppose that you have an online sales application that continuously posts sales orders to a database.</span></span> <span data-ttu-id="321b2-121">Le service qui compile les instructions pour l’expédition exécute un lot de commandes plutôt que de traiter chaque commande individuellement.</span><span class="sxs-lookup"><span data-stu-id="321b2-121">The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</span></span> <span data-ttu-id="321b2-122">Vous pouvez utiliser un <xref:System.Timers.Timer> pour démarrer toutes les 30 minutes de traitement par lots.</span><span class="sxs-lookup"><span data-stu-id="321b2-122">You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="321b2-123">La classe System.Timers.Timer a la même résolution que l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="321b2-123">The System.Timers.Timer class has the same resolution as the system clock.</span></span> <span data-ttu-id="321b2-124">Cela signifie que le <xref:System.Timers.Timer.Elapsed> événement se déclenche selon un intervalle défini par la résolution de l’horloge système si le <xref:System.Timers.Timer.Interval%2A> propriété est inférieure à la résolution de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="321b2-124">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="321b2-125">Pour plus d'informations, consultez la propriété <xref:System.Timers.Timer.Interval%2A>.</span><span class="sxs-lookup"><span data-stu-id="321b2-125">For more information, see the <xref:System.Timers.Timer.Interval%2A> property.</span></span>  
  
 <span data-ttu-id="321b2-126">Lorsque <xref:System.Timers.Timer.AutoReset%2A> a la valeur `false`, un <xref:System.Timers.Timer?displayProperty=nameWithType> objet déclenche le <xref:System.Timers.Timer.Elapsed> événement une seule fois, après le premier <xref:System.Timers.Timer.Interval%2A> s’est écoulé.</span><span class="sxs-lookup"><span data-stu-id="321b2-126">When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=nameWithType> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed.</span></span> <span data-ttu-id="321b2-127">Conserver qui déclenche le <xref:System.Timers.Timer.Elapsed> événements régulièrement à l’intervalle défini par le <xref:System.Timers.Timer.Interval%2A>, affectez la valeur <xref:System.Timers.Timer.AutoReset%2A> à `true`, qui est la valeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="321b2-127">To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.</span></span>  
  
 <span data-ttu-id="321b2-128">Le <xref:System.Timers.Timer> composant intercepte et supprime toutes les exceptions levées par les gestionnaires d’événements pour le <xref:System.Timers.Timer.Elapsed> événement.</span><span class="sxs-lookup"><span data-stu-id="321b2-128">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="321b2-129">Ce comportement est susceptible de changer dans les futures versions du .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="321b2-129">This behavior is subject to change in future releases of the .NET Framework.</span></span> <span data-ttu-id="321b2-130">Notez, cependant, qu’il ne s’agit pas d’un vrai des gestionnaires d’événements exécuter de façon asynchrone et incluent la `await` opérateur (en c#) ou le `Await` opérateur (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="321b2-130">Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic).</span></span> <span data-ttu-id="321b2-131">Exceptions levées dans ces gestionnaires d’événements sont propagées vers le thread appelant, comme l’illustre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="321b2-131">Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</span></span> <span data-ttu-id="321b2-132">Pour plus d’informations sur les exceptions levées dans les méthodes asynchrones, consultez [gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="321b2-132">For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <span data-ttu-id="321b2-133">Si le <xref:System.Timers.Timer.SynchronizingObject%2A> propriété est `null`, le <xref:System.Timers.Timer.Elapsed> événement est déclenché sur un <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="321b2-133">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="321b2-134">Si le traitement de la <xref:System.Timers.Timer.Elapsed> événement dure plus longtemps que <xref:System.Timers.Timer.Interval%2A>, l’événement peut être déclenché à nouveau sur un autre <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="321b2-134">If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="321b2-135">Dans ce cas, le Gestionnaire d’événements doit être réentrant.</span><span class="sxs-lookup"><span data-stu-id="321b2-135">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="321b2-136">La méthode de gestion d’événements peut s’exécuter sur un thread en même temps qu’un autre thread appelle la <xref:System.Timers.Timer.Stop%2A> méthode ou définit le <xref:System.Timers.Timer.Enabled%2A> propriété `false`.</span><span class="sxs-lookup"><span data-stu-id="321b2-136">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="321b2-137">Cela peut entraîner la <xref:System.Timers.Timer.Elapsed> événement déclenché après l’arrêt du minuteur.</span><span class="sxs-lookup"><span data-stu-id="321b2-137">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="321b2-138">L’exemple de code pour le <xref:System.Timers.Timer.Stop%2A> méthode montre une manière d’éviter cette condition de concurrence.</span><span class="sxs-lookup"><span data-stu-id="321b2-138">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="321b2-139">Même si <xref:System.Timers.Timer.SynchronizingObject%2A> n’est pas `null`, <xref:System.Timers.Timer.Elapsed> événements peuvent se produire après la <xref:System.Timers.Timer.Dispose%2A> ou <xref:System.Timers.Timer.Stop%2A> méthode a été appelée ou après le <xref:System.Timers.Timer.Enabled%2A> propriété a été définie sur `false`, car le signal pour déclencher le <xref:System.Timers.Timer.Elapsed> événement est toujours en file d’attente pour l’exécution sur un thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="321b2-139">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="321b2-140">Une façon de résoudre cette condition de concurrence consiste à définir un indicateur qui indique le Gestionnaire d’événements pour le <xref:System.Timers.Timer.Elapsed> événement à ignorer les événements suivants.</span><span class="sxs-lookup"><span data-stu-id="321b2-140">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="321b2-141">Si vous utilisez le <xref:System.Timers.Timer?displayProperty=nameWithType> classe avec un élément d’interface utilisateur, tel qu’un formulaire ou un contrôle, sans placer la minuterie sur cet élément d’interface utilisateur, assignez le formulaire ou un contrôle qui contient le <xref:System.Timers.Timer> à la <xref:System.Timers.Timer.SynchronizingObject%2A> propriété, afin que l’événement est marshalés vers le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="321b2-141">If you use the <xref:System.Timers.Timer?displayProperty=nameWithType> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.</span></span>  
  
 <span data-ttu-id="321b2-142">Pour obtenir la liste de valeurs de propriété par défaut d’une instance de <xref:System.Timers.Timer>, consultez le <xref:System.Timers.Timer.%23ctor%2A> constructeur.</span><span class="sxs-lookup"><span data-stu-id="321b2-142">For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="321b2-143">N’oubliez pas que .NET inclut quatre classes nommées `Timer`, chacun de qui offre des fonctionnalités différentes :</span><span class="sxs-lookup"><span data-stu-id="321b2-143">Be aware that .NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>   
> - <span data-ttu-id="321b2-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (cette rubrique) : déclenche un événement à intervalles réguliers.</span><span class="sxs-lookup"><span data-stu-id="321b2-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (this topic): fires an event at regular intervals.</span></span> <span data-ttu-id="321b2-145">La classe est destinée à servir basée sur un serveur ou un composant de service dans un environnement multithread ; Il ne possède aucune interface utilisateur et n’est pas visible lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="321b2-145">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="321b2-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: exécute une méthode de rappel unique sur un thread de pool de threads à intervalles réguliers.</span><span class="sxs-lookup"><span data-stu-id="321b2-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="321b2-147">La méthode de rappel est définie lors de la minuterie est instanciée et ne peut pas être modifiée.</span><span class="sxs-lookup"><span data-stu-id="321b2-147">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="321b2-148">Comme le <xref:System.Timers.Timer?displayProperty=nameWithType> (classe), cette classe est destinée à être utilisée comme un composant basé sur le serveur ou service dans un environnement multithread ; il ne possède aucune interface utilisateur et n’est pas visible lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="321b2-148">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="321b2-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework uniquement) : un composant Windows Forms qui déclenche un événement à intervalles réguliers.</span><span class="sxs-lookup"><span data-stu-id="321b2-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</span></span> <span data-ttu-id="321b2-150">Le composant ne possède aucune interface utilisateur et est conçu pour une utilisation dans un environnement à thread unique.</span><span class="sxs-lookup"><span data-stu-id="321b2-150">The component has no user interface and is designed for use in a single-threaded environment.</span></span>  
> - <span data-ttu-id="321b2-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework uniquement) : un composant ASP.NET qui effectue des publications de page web asynchrones ou synchrones à intervalles réguliers.</span><span class="sxs-lookup"><span data-stu-id="321b2-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>  

## Examples  
 <span data-ttu-id="321b2-152">L’exemple suivant instancie un `System.Timers.Timer` objet qui déclenche son <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> événement toutes les deux secondes (2 000 millisecondes), configure un gestionnaire d’événements pour l’événement et démarre la minuterie.</span><span class="sxs-lookup"><span data-stu-id="321b2-152">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="321b2-153">Le Gestionnaire d’événements affiche la valeur de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriété chaque fois qu’il est déclenché.</span><span class="sxs-lookup"><span data-stu-id="321b2-153">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="321b2-154">Tout membre <see langword="static" /> de ce type sont thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="321b2-154">Any public <see langword="static" /> members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="321b2-155">Il n'est pas garanti que les membres d'instance soient thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="321b2-155">Any instance members are not guaranteed to be thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="321b2-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="321b2-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-158">Le tableau suivant montre les valeurs initiales des propriétés d’une instance de <xref:System.Timers.Timer>.</span><span class="sxs-lookup"><span data-stu-id="321b2-158">The following table shows initial property values for an instance of <xref:System.Timers.Timer>.</span></span>  
  
|<span data-ttu-id="321b2-159">Propriété</span><span class="sxs-lookup"><span data-stu-id="321b2-159">Property</span></span>|<span data-ttu-id="321b2-160">Valeur initiale</span><span class="sxs-lookup"><span data-stu-id="321b2-160">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|<span data-ttu-id="321b2-161">100 millisecondes</span><span class="sxs-lookup"><span data-stu-id="321b2-161">100 milliseconds</span></span>|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|<span data-ttu-id="321b2-162">Référence Null (`Nothing` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="321b2-162">A null reference (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="321b2-163">L’exemple suivant instancie un <xref:System.Timers.Timer> objet qui déclenche son <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> événement toutes les deux secondes (2 000 millisecondes), configure un gestionnaire d’événements pour l’événement et démarre la minuterie.</span><span class="sxs-lookup"><span data-stu-id="321b2-163">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="321b2-164">Le Gestionnaire d’événements affiche la valeur de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriété chaque fois qu’il est déclenché.</span><span class="sxs-lookup"><span data-stu-id="321b2-164">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">
          <span data-ttu-id="321b2-165">The time, in milliseconds, between events.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-165">The time, in milliseconds, between events.</span>
          </span>
          <span data-ttu-id="321b2-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="321b2-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-168">Ce constructeur affecte la <xref:System.Timers.Timer.Interval%2A> propriété de la nouvelle instance de la minuterie, mais n’active ne pas la minuterie.</span><span class="sxs-lookup"><span data-stu-id="321b2-168">This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="321b2-169">L’exemple suivant instancie un <xref:System.Timers.Timer> objet qui déclenche son <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> événement toutes les deux secondes (2 000 millisecondes), configure un gestionnaire d’événements pour l’événement et démarre la minuterie.</span><span class="sxs-lookup"><span data-stu-id="321b2-169">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="321b2-170">Le Gestionnaire d’événements affiche la valeur de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriété chaque fois qu’il est déclenché.</span><span class="sxs-lookup"><span data-stu-id="321b2-170">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="321b2-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="321b2-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="321b2-173">
            <see langword="true" /> si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> chaque fois que l'intervalle expire ; <see langword="false" /> s'il doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> une seule fois, à la première expiration de l'intervalle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-173">
              <see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the interval elapses; <see langword="false" /> if it should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once, after the first time the interval elapses.</span>
          </span>
          <span data-ttu-id="321b2-174">La valeur par défaut est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-174">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-175">Si le <xref:System.Timers.Timer> est déjà activé lorsque la <xref:System.Timers.Timer.Start%2A> est appelée, l’intervalle est réinitialisé.</span><span class="sxs-lookup"><span data-stu-id="321b2-175">If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset.</span></span> <span data-ttu-id="321b2-176">Si <xref:System.Timers.Timer.AutoReset%2A> est `false`, le <xref:System.Timers.Timer.Start%2A> méthode doit être appelée afin de redémarrer le compteur.</span><span class="sxs-lookup"><span data-stu-id="321b2-176">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="321b2-177">Réinitialisation de l’intervalle prend effet lorsque la <xref:System.Timers.Timer.Elapsed> événement est déclenché.</span><span class="sxs-lookup"><span data-stu-id="321b2-177">Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised.</span></span> <span data-ttu-id="321b2-178">Par exemple, si vous définissez l’intervalle de 5 secondes, puis affectez le <xref:System.Timers.Timer.Enabled%2A> propriété `true`, le compteur démarre au moment <xref:System.Timers.Timer.Enabled%2A> est définie.</span><span class="sxs-lookup"><span data-stu-id="321b2-178">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="321b2-179">Si vous réinitialisez l’intervalle à 10 secondes lorsque le compteur est à 3 secondes, le <xref:System.Timers.Timer.Elapsed> événement est déclenché pour la première fois 13 secondes après le <xref:System.Timers.Timer.Enabled%2A> propriété a été définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="321b2-179">If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="321b2-180">L’exemple suivant crée un <xref:System.Timers.Timer> dont <xref:System.Timers.Timer.Elapsed> événement est déclenché après 1,5 secondes.</span><span class="sxs-lookup"><span data-stu-id="321b2-180">The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds.</span></span> <span data-ttu-id="321b2-181">Son gestionnaire d’événements puis affiche « Hello World ! »</span><span class="sxs-lookup"><span data-stu-id="321b2-181">Its event handler then displays "Hello World!"</span></span> <span data-ttu-id="321b2-182">sur la console.</span><span class="sxs-lookup"><span data-stu-id="321b2-182">on the console.</span></span>  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="321b2-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-184">Le [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] environnement utilise cette méthode pour démarrer l’initialisation d’un composant qui est utilisé dans un formulaire ou par un autre composant de conception.</span><span class="sxs-lookup"><span data-stu-id="321b2-184">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="321b2-185">Le <xref:System.Timers.Timer.EndInit%2A> méthode termine l’initialisation.</span><span class="sxs-lookup"><span data-stu-id="321b2-185">The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="321b2-186">À l’aide de la <xref:System.Timers.Timer.BeginInit%2A> et <xref:System.Timers.Timer.EndInit%2A> méthodes empêche le contrôle de l’utilisation avant son initialisation complète.</span><span class="sxs-lookup"><span data-stu-id="321b2-186">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="321b2-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-188">Le <xref:System.Timers.Timer.Close%2A> méthode appelle à son tour le `Dispose` (méthode).</span><span class="sxs-lookup"><span data-stu-id="321b2-188">The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="321b2-189">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-189">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="321b2-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="321b2-191">Occurs when the interval elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-191">Occurs when the interval elapses.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-192">Le <xref:System.Timers.Timer.Elapsed> événement est déclenché si le <xref:System.Timers.Timer.Enabled%2A> propriété est `true` et l’intervalle de temps (en millisecondes) défini par le <xref:System.Timers.Timer.Interval%2A> au terme de la propriété.</span><span class="sxs-lookup"><span data-stu-id="321b2-192">The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses.</span></span> <span data-ttu-id="321b2-193">Si le <xref:System.Timers.Timer.AutoReset%2A> propriété est `true`, l’événement est déclenché à plusieurs reprises à un intervalle défini par le <xref:System.Timers.Timer.Interval%2A> propriété ; sinon, l’événement est déclenché une seule fois, la première fois le <xref:System.Timers.Timer.Interval%2A> valeur d’expiration.</span><span class="sxs-lookup"><span data-stu-id="321b2-193">If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.</span></span>  
  
 <span data-ttu-id="321b2-194">Si <xref:System.Timers.Timer.Interval%2A> est définie après la <xref:System.Timers.Timer> a démarré, le nombre est réinitialisé.</span><span class="sxs-lookup"><span data-stu-id="321b2-194">If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="321b2-195">Par exemple, si vous définissez l’intervalle de 5 secondes, puis affectez <xref:System.Timers.Timer.Enabled%2A> à `true`, le compteur démarre au moment <xref:System.Timers.Timer.Enabled%2A> est définie.</span><span class="sxs-lookup"><span data-stu-id="321b2-195">For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="321b2-196">Si vous réinitialisez l’intervalle à 10 secondes lorsque le nombre est 3 secondes, le <xref:System.Timers.Timer.Elapsed> événement est déclenché pour la première fois 13 secondes après <xref:System.Timers.Timer.Enabled%2A> a été défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="321b2-196">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="321b2-197">Si le <xref:System.Timers.Timer.SynchronizingObject%2A> propriété est `null`, le <xref:System.Timers.Timer.Elapsed> événement est déclenché sur un <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="321b2-197">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="321b2-198">Si le traitement de la <xref:System.Timers.Timer.Elapsed> événement dure plus longtemps que <xref:System.Timers.Timer.Interval%2A>, l’événement peut être déclenché à nouveau sur un autre <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="321b2-198">If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="321b2-199">Dans ce cas, le Gestionnaire d’événements doit être réentrant.</span><span class="sxs-lookup"><span data-stu-id="321b2-199">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="321b2-200">La méthode de gestion d’événements peut s’exécuter sur un thread en même temps qu’un autre thread appelle la <xref:System.Timers.Timer.Stop%2A> méthode ou définit le <xref:System.Timers.Timer.Enabled%2A> propriété `false`.</span><span class="sxs-lookup"><span data-stu-id="321b2-200">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="321b2-201">Cela peut entraîner la <xref:System.Timers.Timer.Elapsed> événement déclenché après l’arrêt du minuteur.</span><span class="sxs-lookup"><span data-stu-id="321b2-201">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="321b2-202">L’exemple de code pour le <xref:System.Timers.Timer.Stop%2A> méthode montre une manière d’éviter cette condition de concurrence.</span><span class="sxs-lookup"><span data-stu-id="321b2-202">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="321b2-203">Même si <xref:System.Timers.Timer.SynchronizingObject%2A> n’est pas `null`, <xref:System.Timers.Timer.Elapsed> événements peuvent se produire après la <xref:System.Timers.Timer.Dispose%2A> ou <xref:System.Timers.Timer.Stop%2A> méthode a été appelée ou après le <xref:System.Timers.Timer.Enabled%2A> propriété a été définie sur `false`, car le signal pour déclencher le <xref:System.Timers.Timer.Elapsed> événement est toujours en file d’attente pour l’exécution sur un thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="321b2-203">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="321b2-204">Une façon de résoudre cette condition de concurrence consiste à définir un indicateur qui indique le Gestionnaire d’événements pour le <xref:System.Timers.Timer.Elapsed> événement à ignorer les événements suivants.</span><span class="sxs-lookup"><span data-stu-id="321b2-204">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="321b2-205">Le <xref:System.Timers.Timer> composant intercepte et supprime toutes les exceptions levées par les gestionnaires d’événements pour le <xref:System.Timers.Timer.Elapsed> événement.</span><span class="sxs-lookup"><span data-stu-id="321b2-205">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="321b2-206">Ce comportement est susceptible de changer dans les futures versions du .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="321b2-206">This behavior is subject to change in future releases of the .NET Framework.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="321b2-207">L’exemple suivant instancie un <xref:System.Timers.Timer> objet qui déclenche son <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> événement toutes les deux secondes (2 000 millisecondes), configure un gestionnaire d’événements pour l’événement et démarre la minuterie.</span><span class="sxs-lookup"><span data-stu-id="321b2-207">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="321b2-208">Le Gestionnaire d’événements affiche la valeur de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriété chaque fois qu’il est déclenché.</span><span class="sxs-lookup"><span data-stu-id="321b2-208">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="321b2-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="321b2-210">
            <see langword="true" /> si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-210">
              <see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="321b2-211">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-211">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-212">Paramètre <xref:System.Timers.Timer.Enabled%2A> à `true` est le même que si vous appelez <xref:System.Timers.Timer.Start%2A>, tandis que le paramètre <xref:System.Timers.Timer.Enabled%2A> à `false` est le même que si vous appelez <xref:System.Timers.Timer.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="321b2-212">Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="321b2-213">Le signal pour déclencher le <xref:System.Timers.Timer.Elapsed> événement est toujours en file d’attente pour l’exécution sur un <xref:System.Threading.ThreadPool> thread.</span><span class="sxs-lookup"><span data-stu-id="321b2-213">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="321b2-214">Cela peut entraîner la <xref:System.Timers.Timer.Elapsed> événement déclenché après le <xref:System.Timers.Timer.Enabled%2A> propriété est définie sur `false`.</span><span class="sxs-lookup"><span data-stu-id="321b2-214">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`.</span></span> <span data-ttu-id="321b2-215">L’exemple de code pour le <xref:System.Timers.Timer.Stop%2A> méthode illustre une façon de contourner cette condition de concurrence.</span><span class="sxs-lookup"><span data-stu-id="321b2-215">The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.</span></span>  
  
 <span data-ttu-id="321b2-216">Si <xref:System.Timers.Timer.Enabled%2A> a la valeur `true` et <xref:System.Timers.Timer.AutoReset%2A> a la valeur `false`, le <xref:System.Timers.Timer> déclenche le <xref:System.Timers.Timer.Elapsed> événement une seule fois, la première fois que l’intervalle est écoulé.</span><span class="sxs-lookup"><span data-stu-id="321b2-216">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span>  
  
 <span data-ttu-id="321b2-217">Si l’intervalle est défini après la <xref:System.Timers.Timer> a démarré, le nombre est réinitialisé.</span><span class="sxs-lookup"><span data-stu-id="321b2-217">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="321b2-218">Par exemple, si vous définissez l’intervalle de 5 secondes, puis affectez le <xref:System.Timers.Timer.Enabled%2A> propriété `true`, le compteur démarre au moment <xref:System.Timers.Timer.Enabled%2A> est définie.</span><span class="sxs-lookup"><span data-stu-id="321b2-218">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="321b2-219">Si vous réinitialisez l’intervalle à 10 secondes lorsque le nombre est 3 secondes, le <xref:System.Timers.Timer.Elapsed> événement est déclenché pour la première fois 13 secondes après <xref:System.Timers.Timer.Enabled%2A> a été défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="321b2-219">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="321b2-220">Certains concepteurs visuels, telles que celles dans Microsoft Visual Studio, définissent le <xref:System.Timers.Timer.Enabled%2A> propriété `true` lorsque vous insérez un nouveau <xref:System.Timers.Timer>.</span><span class="sxs-lookup"><span data-stu-id="321b2-220">Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="321b2-221">L’exemple suivant instancie un <xref:System.Timers.Timer> objet qui déclenche son <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> événement toutes les deux secondes (2 000 millisecondes), configure un gestionnaire d’événements pour l’événement et démarre la minuterie.</span><span class="sxs-lookup"><span data-stu-id="321b2-221">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="321b2-222">Le Gestionnaire d’événements affiche la valeur de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriété chaque fois qu’il est déclenché.</span><span class="sxs-lookup"><span data-stu-id="321b2-222">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="321b2-223">This property cannot be set because the timer has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-223">This property cannot be set because the timer has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="321b2-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span>
          </span>
        </exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="321b2-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-226">Le [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] environnement utilise cette méthode pour terminer l’initialisation d’un composant qui est utilisé dans un formulaire ou par un autre composant de conception.</span><span class="sxs-lookup"><span data-stu-id="321b2-226">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="321b2-227">Le <xref:System.Timers.Timer.BeginInit%2A> méthode démarre l’initialisation.</span><span class="sxs-lookup"><span data-stu-id="321b2-227">The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="321b2-228">À l’aide de la <xref:System.Timers.Timer.BeginInit%2A> et <xref:System.Timers.Timer.EndInit%2A> méthodes empêche le contrôle de l’utilisation avant son initialisation complète.</span><span class="sxs-lookup"><span data-stu-id="321b2-228">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="321b2-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="321b2-230">Intervalle en millisecondes séparant les événements <see cref="E:System.Timers.Timer.Elapsed" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-230">The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed" /> events.</span>
          </span>
          <span data-ttu-id="321b2-231">La valeur doit être supérieure à zéro et inférieure ou égale à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-231">The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
          <span data-ttu-id="321b2-232">La valeur par défaut est 100 millisecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-232">The default is 100 milliseconds.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-233">Vous utilisez le <xref:System.Timers.Timer.Interval%2A> propriété afin de déterminer la fréquence à laquelle le <xref:System.Timers.Timer.Elapsed> événement est déclenché.</span><span class="sxs-lookup"><span data-stu-id="321b2-233">You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired.</span></span> <span data-ttu-id="321b2-234">Étant donné que la <xref:System.Timers.Timer> classe dépendant de l’horloge système, il a la même résolution que l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="321b2-234">Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock.</span></span> <span data-ttu-id="321b2-235">Cela signifie que le <xref:System.Timers.Timer.Elapsed> événement se déclenche selon un intervalle défini par la résolution de l’horloge système si le <xref:System.Timers.Timer.Interval%2A> propriété est inférieure à la résolution de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="321b2-235">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="321b2-236">L’exemple suivant définit le <xref:System.Timers.Timer.Interval%2A> propriété 5 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="321b2-236">The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds.</span></span> <span data-ttu-id="321b2-237">Lorsque vous travaillez sur un [!INCLUDE[win7](~/includes/win7-md.md)] système dont l’horloge système a une résolution d’environ 15 millisecondes, l’événement se déclenche toutes les 15 millisecondes environ plutôt que toutes les 5 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="321b2-237">When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 <span data-ttu-id="321b2-238">Vous pouvez utiliser le code suivant pour déterminer la résolution de l’horloge système sur le système actuel :</span><span class="sxs-lookup"><span data-stu-id="321b2-238">You can use the following code to determine the resolution of the system clock on the current system:</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 <span data-ttu-id="321b2-239">Si votre application requiert une résolution supérieure à celle offerte par le <xref:System.Timers.Timer> classe ou l’horloge système, utilisez les minuteurs multimédias haute résolution, consultez [Comment : utiliser le chronomètre à haute résolution](http://msdn.microsoft.com/library/aa964692.aspx).</span><span class="sxs-lookup"><span data-stu-id="321b2-239">If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](http://msdn.microsoft.com/library/aa964692.aspx).</span></span>  
  
 <span data-ttu-id="321b2-240">Si l’intervalle est défini après la <xref:System.Timers.Timer> a démarré, le nombre est réinitialisé.</span><span class="sxs-lookup"><span data-stu-id="321b2-240">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="321b2-241">Par exemple, si vous définissez l’intervalle de 5 secondes, puis affectez le <xref:System.Timers.Timer.Enabled%2A> propriété `true`, le compteur démarre au moment <xref:System.Timers.Timer.Enabled%2A> est définie.</span><span class="sxs-lookup"><span data-stu-id="321b2-241">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="321b2-242">Si vous réinitialisez l’intervalle à 10 secondes lorsque le nombre est 3 secondes, le <xref:System.Timers.Timer.Elapsed> événement est déclenché pour la première fois 13 secondes après <xref:System.Timers.Timer.Enabled%2A> a été défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="321b2-242">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="321b2-243">Si <xref:System.Timers.Timer.Enabled%2A> a la valeur `true` et <xref:System.Timers.Timer.AutoReset%2A> a la valeur `false`, le <xref:System.Timers.Timer> déclenche le <xref:System.Timers.Timer.Elapsed> événement une seule fois, la première fois que l’intervalle est écoulé.</span><span class="sxs-lookup"><span data-stu-id="321b2-243">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="321b2-244"><xref:System.Timers.Timer.Enabled%2A> est ensuite définie sur `false`.</span><span class="sxs-lookup"><span data-stu-id="321b2-244"><xref:System.Timers.Timer.Enabled%2A> is then set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="321b2-245">Si <xref:System.Timers.Timer.Enabled%2A> et <xref:System.Timers.Timer.AutoReset%2A> sont toutes deux définies sur `false`, et le minuteur a été précédemment activé, définissant le <xref:System.Timers.Timer.Interval%2A> causes de la propriété le <xref:System.Timers.Timer.Elapsed> événement est déclenché une fois, comme si le <xref:System.Timers.Timer.Enabled%2A> propriété a été définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="321b2-245">If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`.</span></span> <span data-ttu-id="321b2-246">Pour définir l’intervalle sans déclencher l’événement, vous pouvez temporairement définir le <xref:System.Timers.Timer.Enabled%2A> propriété `true`, définissez le <xref:System.Timers.Timer.Interval%2A> propriété pour l’intervalle de temps souhaitée, puis définissez immédiatement la <xref:System.Timers.Timer.Enabled%2A> propriété retour au `false`.</span><span class="sxs-lookup"><span data-stu-id="321b2-246">To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="321b2-247">L’exemple suivant instancie un <xref:System.Timers.Timer> objet qui déclenche son <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> événement toutes les deux secondes (2 000 millisecondes), configure un gestionnaire d’événements pour l’événement et démarre la minuterie.</span><span class="sxs-lookup"><span data-stu-id="321b2-247">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="321b2-248">Le Gestionnaire d’événements affiche la valeur de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriété chaque fois qu’il est déclenché.</span><span class="sxs-lookup"><span data-stu-id="321b2-248">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="321b2-249">The interval is less than or equal to zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-249">The interval is less than or equal to zero.</span>
          </span>
          <span data-ttu-id="321b2-250">-or-  The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-250">-or-  The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span>
          </span>
          <span data-ttu-id="321b2-251">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-251">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span>
          </span>
        </exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="321b2-252">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-252">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="321b2-253">Interface <see cref="T:System.ComponentModel.ISite" /> représentant le site qui lie l'objet <see cref="T:System.Timers.Timer" /> à son conteneur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-253">An <see cref="T:System.ComponentModel.ISite" /> interface representing the site that binds the <see cref="T:System.Timers.Timer" /> object to its container.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-254">Sites lient un <xref:System.ComponentModel.Component> à un <xref:System.ComponentModel.Container> et activer la communication entre eux, ainsi que fournir un moyen pour le conteneur gérer ses composants.</span><span class="sxs-lookup"><span data-stu-id="321b2-254">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="321b2-255">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-255">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-256">Si <xref:System.Timers.Timer.Start%2A> est appelée et <xref:System.Timers.Timer.AutoReset%2A> a la valeur `false`, le <xref:System.Timers.Timer> déclenche le <xref:System.Timers.Timer.Elapsed> événement une seule fois, la première fois que l’intervalle est écoulé.</span><span class="sxs-lookup"><span data-stu-id="321b2-256">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="321b2-257">Si <xref:System.Timers.Timer.Start%2A> est appelée et <xref:System.Timers.Timer.AutoReset%2A> est `true`, le <xref:System.Timers.Timer> déclenche le <xref:System.Timers.Timer.Elapsed> heure de l’événement le premier l’intervalle s’écoule et continue à déclencher l’événement sur l’intervalle spécifié.</span><span class="sxs-lookup"><span data-stu-id="321b2-257">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.</span></span>  
  
 <span data-ttu-id="321b2-258">Vous pouvez également démarrer la minuterie en définissant <xref:System.Timers.Timer.Enabled%2A> à `true`.</span><span class="sxs-lookup"><span data-stu-id="321b2-258">You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="321b2-259">Si <xref:System.Timers.Timer.AutoReset%2A> est `false`, le <xref:System.Timers.Timer.Start%2A> méthode doit être appelée afin de redémarrer le compteur.</span><span class="sxs-lookup"><span data-stu-id="321b2-259">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="321b2-260">Un appel à la <xref:System.Timers.Timer.Start%2A> méthode lors de la minuterie est activée n’a aucun effet.</span><span class="sxs-lookup"><span data-stu-id="321b2-260">A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="321b2-261">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-261">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span>
          </span>
        </exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="321b2-262">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-262">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-263">Vous pouvez également arrêter la minuterie en définissant <xref:System.Timers.Timer.Enabled%2A> à `false`.</span><span class="sxs-lookup"><span data-stu-id="321b2-263">You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="321b2-264">Le signal pour déclencher le <xref:System.Timers.Timer.Elapsed> événement est toujours en file d’attente pour l’exécution sur un <xref:System.Threading.ThreadPool> de threads, donc la méthode de gestion des événements peut s’exécuter sur un thread en même temps qu’un appel à la <xref:System.Timers.Timer.Stop%2A> méthode s’exécute sur un autre thread.</span><span class="sxs-lookup"><span data-stu-id="321b2-264">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread.</span></span> <span data-ttu-id="321b2-265">Cela peut entraîner la <xref:System.Timers.Timer.Elapsed> événement déclenché après le <xref:System.Timers.Timer.Stop%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="321b2-265">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called.</span></span> <span data-ttu-id="321b2-266">L’exemple de code dans la section suivante montre une façon de contourner cette condition de concurrence.</span><span class="sxs-lookup"><span data-stu-id="321b2-266">The code example in the next section shows one way to work around this race condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="321b2-267">L’exemple suivant instancie un `System.Timers.Timer` objet qui déclenche son <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> événement toutes les deux secondes (2 000 millisecondes), configure un gestionnaire d’événements pour l’événement et démarre la minuterie.</span><span class="sxs-lookup"><span data-stu-id="321b2-267">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="321b2-268">Le Gestionnaire d’événements affiche la valeur de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propriété chaque fois qu’il est déclenché.</span><span class="sxs-lookup"><span data-stu-id="321b2-268">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span> <span data-ttu-id="321b2-269">Lorsque l’utilisateur appuie sur la touche entrée, l’application appelle la <xref:System.Timers.Timer.Stop%2A> méthode avant de mettre fin à l’application.</span><span class="sxs-lookup"><span data-stu-id="321b2-269">When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 <span data-ttu-id="321b2-270">L’exemple de code suivant montre une façon d’empêcher le thread qui appelle le <xref:System.Timers.Timer.Stop%2A> méthode de se poursuivre jusqu'à ce qu’un en cours d’exécution <xref:System.Timers.Timer.Elapsed> événement se termine et d’empêcher également deux <xref:System.Timers.Timer.Elapsed> événements à partir de l’exécution du Gestionnaire d’événements au même heure (communément appelée réentrance).</span><span class="sxs-lookup"><span data-stu-id="321b2-270">The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).</span></span>  
  
 <span data-ttu-id="321b2-271">L’exemple exécute 100 séries de tests.</span><span class="sxs-lookup"><span data-stu-id="321b2-271">The example executes 100 test runs.</span></span> <span data-ttu-id="321b2-272">Chaque fois que le test est exécuté, la minuterie est démarrée avec un intervalle de 150 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="321b2-272">Each time the test is run, the timer is started with an interval of 150 milliseconds.</span></span> <span data-ttu-id="321b2-273">Le Gestionnaire d’événements utilise la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> méthode pour simuler une tâche qui varie de façon aléatoire dans la longueur de 50 à 200 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="321b2-273">The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</span></span> <span data-ttu-id="321b2-274">La méthode de test démarre également un thread de contrôle qui attend une seconde, puis arrête la minuterie.</span><span class="sxs-lookup"><span data-stu-id="321b2-274">The test method also starts a control thread that waits for a second and then stops the timer.</span></span> <span data-ttu-id="321b2-275">Si un événement est géré lorsque le thread de contrôle arrête la minuterie, le thread de contrôle doit attendre la fin de l’événement avant de continuer.</span><span class="sxs-lookup"><span data-stu-id="321b2-275">If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</span></span>  
  
 <span data-ttu-id="321b2-276">Le <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> surcharge de méthode est utilisée pour éviter la réentrance et pour empêcher le thread de contrôle de continuer jusqu'à la fin d’un événement en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="321b2-276">The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</span></span> <span data-ttu-id="321b2-277">Le Gestionnaire d’événements utilise la <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> méthode pour définir un contrôle variable à 1, mais uniquement si la valeur est actuellement zéro.</span><span class="sxs-lookup"><span data-stu-id="321b2-277">The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero.</span></span> <span data-ttu-id="321b2-278">Il s’agit d’une opération atomique.</span><span class="sxs-lookup"><span data-stu-id="321b2-278">This is an atomic operation.</span></span> <span data-ttu-id="321b2-279">Si la valeur de retour est zéro, la variable de contrôle a été définie sur 1 et le Gestionnaire d’événements s’exécute.</span><span class="sxs-lookup"><span data-stu-id="321b2-279">If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</span></span> <span data-ttu-id="321b2-280">Si la valeur de retour est différent de zéro, l’événement est simplement ignoré, pour éviter la réentrance.</span><span class="sxs-lookup"><span data-stu-id="321b2-280">If the return value is non-zero, the event is simply discarded to avoid reentrancy.</span></span> <span data-ttu-id="321b2-281">(S’il s’agissait nécessaire pour l’exécution de chaque événement, le <xref:System.Threading.Monitor> classe serait une meilleure méthode de synchronisation des événements.) Lorsque le Gestionnaire d’événements se termine, il définit la variable de contrôle précédent à zéro.</span><span class="sxs-lookup"><span data-stu-id="321b2-281">(If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</span></span> <span data-ttu-id="321b2-282">L’exemple enregistre le nombre total d’événements exécutés, qui ont été ignorés en raison de la réentrance, et qui se produit après la <xref:System.Timers.Timer.Stop%2A> méthode a été appelée.</span><span class="sxs-lookup"><span data-stu-id="321b2-282">The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.</span></span>  
  
 <span data-ttu-id="321b2-283">Le thread de contrôle utilise la <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> méthode pour définir le contrôle de la variable en -1 (moins un), mais uniquement si la valeur est actuellement zéro.</span><span class="sxs-lookup"><span data-stu-id="321b2-283">The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero.</span></span> <span data-ttu-id="321b2-284">Si l’opération atomique retourne zéro, un événement est en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="321b2-284">If the atomic operation returns non-zero, an event is currently executing.</span></span> <span data-ttu-id="321b2-285">Le thread de contrôle attend et essaie à nouveau.</span><span class="sxs-lookup"><span data-stu-id="321b2-285">The control thread waits and tries again.</span></span> <span data-ttu-id="321b2-286">L’exemple enregistre le nombre de fois que le thread de contrôle a dû attendre un événement se termine.</span><span class="sxs-lookup"><span data-stu-id="321b2-286">The example records the number of times the control thread had to wait for an event to finish.</span></span>  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="321b2-287">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-287">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="321b2-288">
            <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> représentant l'objet utilisé pour marshaler les appels du gestionnaire d'événements émis quand un intervalle a expiré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-288">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</span>
          </span>
          <span data-ttu-id="321b2-289">La valeur par défaut est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="321b2-289">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="321b2-290">Lorsque <xref:System.Timers.Timer.SynchronizingObject%2A> est `null`, la méthode qui gère le <xref:System.Timers.Timer.Elapsed> événement est appelé sur un thread du pool de threads système.</span><span class="sxs-lookup"><span data-stu-id="321b2-290">When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool.</span></span> <span data-ttu-id="321b2-291">Pour plus d’informations sur les pools de threads système, consultez <xref:System.Threading.ThreadPool>.</span><span class="sxs-lookup"><span data-stu-id="321b2-291">For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="321b2-292">Lorsque le <xref:System.Timers.Timer.Elapsed> événement est géré par un composant Windows Forms visuel, tel qu’un bouton, l’accès au composant par le biais du pool de threads système peut les résultats dans une exception ou simplement peut ne pas fonctionner.</span><span class="sxs-lookup"><span data-stu-id="321b2-292">When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</span></span> <span data-ttu-id="321b2-293">Éviter cet effet en définissant <xref:System.Timers.Timer.SynchronizingObject%2A> à un composant Windows Forms, ce qui entraîne la méthode qui gère le <xref:System.Timers.Timer.Elapsed> événement à appeler sur le même thread que le composant a été créé.</span><span class="sxs-lookup"><span data-stu-id="321b2-293">Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="321b2-294">Même si le <xref:System.Timers.Timer.SynchronizingObject%2A> propriété n’est pas `null`, <xref:System.Timers.Timer.Elapsed> événements peuvent se produire après la <xref:System.Timers.Timer.Dispose%2A> ou <xref:System.Timers.Timer.Stop%2A> méthode a été appelée ou après le <xref:System.Timers.Timer.Enabled%2A> propriété a été définie sur `false`, car le signal pour déclencher le <xref:System.Timers.Timer.Elapsed> événement est toujours en file d’attente pour l’exécution sur un thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="321b2-294">Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="321b2-295">Une façon de résoudre cette condition de concurrence consiste à définir un indicateur qui indique le Gestionnaire d’événements pour le <xref:System.Timers.Timer.Elapsed> événement à ignorer les événements suivants.</span><span class="sxs-lookup"><span data-stu-id="321b2-295">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="321b2-296">Si le <xref:System.Timers.Timer> est utilisé à l’intérieur de Visual Studio dans un concepteur Windows Forms, <xref:System.Timers.Timer.SynchronizingObject%2A> est automatiquement défini sur le contrôle qui contient le <xref:System.Timers.Timer>.</span><span class="sxs-lookup"><span data-stu-id="321b2-296">If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>.</span></span> <span data-ttu-id="321b2-297">Par exemple, si vous placez un <xref:System.Timers.Timer> sur un concepteur pour `Form1` (qui hérite <xref:System.Windows.Forms.Form>), la <xref:System.Timers.Timer.SynchronizingObject%2A> propriété du <xref:System.Timers.Timer> est défini sur l’instance de `Form1`.</span><span class="sxs-lookup"><span data-stu-id="321b2-297">For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="321b2-298">L’exemple suivant est une application Windows Forms qui sert d’un éditeur de fichier texte très simple.</span><span class="sxs-lookup"><span data-stu-id="321b2-298">The following example is a Windows Forms app that serves as a very simple text file editor.</span></span> <span data-ttu-id="321b2-299">Lorsque le texte dans la zone de texte n’a pas été enregistré, l’application demande à l’utilisateur à des intervalles d’une minute souhaite enregistrer le contenu de la zone de texte.</span><span class="sxs-lookup"><span data-stu-id="321b2-299">When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</span></span>  <span data-ttu-id="321b2-300">Pour ce faire, le <xref:System.Timers.Timer.Interval%2A> propriété est définie sur une minute (60 000 millisecondes) et le <xref:System.Timers.Timer.SynchronizingObject%2A> propriété est définie sur le <xref:System.Windows.Forms.Form> objet.</span><span class="sxs-lookup"><span data-stu-id="321b2-300">To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.</span></span>  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 <span data-ttu-id="321b2-301">L’exemple nécessite que vous ajoutez les contrôles suivants au formulaire :</span><span class="sxs-lookup"><span data-stu-id="321b2-301">The example requires that you add the following controls to the form:</span></span>  
  
-   <span data-ttu-id="321b2-302">Un <xref:System.Windows.Forms.TextBox> contrôle nommé `TextBox1` (son nom par défaut).</span><span class="sxs-lookup"><span data-stu-id="321b2-302">A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).</span></span>  
  
-   <span data-ttu-id="321b2-303">Un <xref:System.Windows.Forms.Button> contrôle nommé `Button1` (son nom par défaut).</span><span class="sxs-lookup"><span data-stu-id="321b2-303">A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).</span></span>  
  
-   <span data-ttu-id="321b2-304">Un <xref:System.Windows.Forms.SaveFileDialog> contrôle nommé `SaveSaveFileDialog1` (son nom par défaut).</span><span class="sxs-lookup"><span data-stu-id="321b2-304">A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>