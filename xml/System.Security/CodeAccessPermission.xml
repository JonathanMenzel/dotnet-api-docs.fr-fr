<Type Name="CodeAccessPermission" FullName="System.Security.CodeAccessPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24a39147c59af9596068ec31442a51552b9ecdf7" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39782663" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit CodeAccessPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.CodeAccessPermission" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeAccessPermission&#xA;Implements IPermission, IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeAccessPermission abstract : System::Security::IPermission, System::Security::IStackWalk" />
  <TypeSignature Language="F#" Value="type CodeAccessPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IStackWalk</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c4810-101">Définit la structure sous-jacente de toutes les autorisations d’accès au code.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c4810-101">Defines the underlying structure of all code access permissions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-102">Autorisations d’accès de code utilisent un parcours de pile pour vous assurer que tous les appelants du code ont reçu une autorisation.</span><span class="sxs-lookup"><span data-stu-id="c4810-102">Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission.</span></span> <span data-ttu-id="c4810-103">Si un objet d’autorisation est `null`, il est géré comme un objet d’autorisation avec l’état <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c4810-103">If a permission object is `null`, it is handled the same as a permission object with the state <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c4810-104">La pile des appels est généralement représentée comme étant descendante, afin que plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="c4810-104">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="c4810-105">Les héritiers de la <xref:System.Security.CodeAccessPermission> classe doit être de confiance totale pour fonctionner correctement en tant qu’extension de l’infrastructure de sécurité des autorisations.</span><span class="sxs-lookup"><span data-stu-id="c4810-105">Inheritors of the <xref:System.Security.CodeAccessPermission> class must be granted full trust to function correctly as permissions extending the security infrastructure.</span></span> <span data-ttu-id="c4810-106">Pour déterminer que les héritiers sont entièrement fiables, <xref:System.Security.CodeAccessPermission> problèmes un <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> pour <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence>  =  `true` et <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy>  =  `true`.</span><span class="sxs-lookup"><span data-stu-id="c4810-106">To determine that the inheritors are fully trusted, <xref:System.Security.CodeAccessPermission> issues an <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> for <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence> = `true` and <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy> = `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4810-107">L’exemple de code suivant montre une autorisation dérivée de la <xref:System.Security.CodeAccessPermission> classe.</span><span class="sxs-lookup"><span data-stu-id="c4810-107">The following code example shows a permission derived from the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#1)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#1)]
 [!code-vb[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="c4810-108">pour la capacité des héritiers pour fournir la preuve, d’afficher et modifier la stratégie.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c4810-108">for the ability of inheritors to provide evidence and view and modify policy.</span>
      </span>
      <span data-ttu-id="c4810-109">Énumérations associées : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c4810-109">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />.</span>
      </span>
    </permission>
    <block subset="none" type="overrides">
      <span data-ttu-id="c4810-110">
        <para>Lorsque vous héritez de <see cref="T:System.Security.CodeAccessPermission" />, vous devez également implémenter la <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> interface.  Ce qui suit <see cref="T:System.Security.CodeAccessPermission" /> membres doivent être substitués : <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, et <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />.  Vous devez également définir un constructeur qui accepte un <see cref="T:System.Security.Permissions.PermissionState" /> comme seul paramètre.  Vous devez appliquer le <see cref="T:System.SerializableAttribute" /> attribut à une classe qui hérite de <see cref="T:System.Security.CodeAccessPermission" />.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="c4810-110">
          <para>When you inherit from <see cref="T:System.Security.CodeAccessPermission" />, you must also implement the <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> interface.  The following <see cref="T:System.Security.CodeAccessPermission" /> members must be overridden: <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, and <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />.  You must also define a constructor that takes a <see cref="T:System.Security.Permissions.PermissionState" /> as its only parameter.  You must apply the <see cref="T:System.SerializableAttribute" /> attribute to a class that inherits from <see cref="T:System.Security.CodeAccessPermission" />.</para>
        </span>
      </span>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeAccessPermission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeAccessPermission();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-111">Initialise une nouvelle instance de la classe <see cref="T:System.Security.CodeAccessPermission" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-111">Initializes a new instance of the <see cref="T:System.Security.CodeAccessPermission" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-112">Ce constructeur est appelé pour initialiser l’état dans le type chaque fois qu’une instance de la classe dérivée est créée.</span><span class="sxs-lookup"><span data-stu-id="c4810-112">This constructor is called to initialize state in the type whenever an instance of the derived class is created.</span></span> <span data-ttu-id="c4810-113">Bien que vous pouvez appeler explicitement ce constructeur dans la déclaration de constructeur du constructeur de classe dérivée, il est généralement pas nécessaire ; la plupart des compilateurs généreront automatiquement l’appel pour vous.</span><span class="sxs-lookup"><span data-stu-id="c4810-113">Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit&#xA;override this.Assert : unit -&gt; unit" Usage="codeAccessPermission.Assert " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-114">Déclare que le code appelant peut accéder à la ressource protégée par une demande d’autorisation via le code qui appelle cette méthode, même si les appelants situés plus haut dans la pile n’ont pas reçu l’autorisation d’accéder à la ressource.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-114">Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</span>
          </span>
          <span data-ttu-id="c4810-115">L’utilisation de <see cref="M:System.Security.CodeAccessPermission.Assert" /> peut créer des problèmes de sécurité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-115">Using <see cref="M:System.Security.CodeAccessPermission.Assert" /> can create security issues.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-116">La pile des appels est généralement représentée comme étant descendante, afin que plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="c4810-116">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="c4810-117">Appel <xref:System.Security.CodeAccessPermission.Assert%2A> empêche un parcours de pile provenant de réduire la pile des appels de procédure de la pile des appels au-delà du code qui appelle cette méthode.</span><span class="sxs-lookup"><span data-stu-id="c4810-117">Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method.</span></span> <span data-ttu-id="c4810-118">Par conséquent, même si les appelants plus hauts dans la pile des appels n’ont pas les autorisations requises pour accéder à une ressource, ils peuvent toujours y accéder via le code qui appelle cette méthode sur l’autorisation nécessaire.</span><span class="sxs-lookup"><span data-stu-id="c4810-118">Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission.</span></span> <span data-ttu-id="c4810-119">Une assertion est efficace uniquement si le code qui appelle <xref:System.Security.CodeAccessPermission.Assert%2A> passe la vérification de sécurité pour l’autorisation qu’il confirme.</span><span class="sxs-lookup"><span data-stu-id="c4810-119">An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="c4810-120">L’appel à <xref:System.Security.CodeAccessPermission.Assert%2A> est effectif jusqu'à ce que le code appelant retourne à son appelant.</span><span class="sxs-lookup"><span data-stu-id="c4810-120">The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="c4810-121">Seul <xref:System.Security.CodeAccessPermission.Assert%2A> peut être actif sur un frame.</span><span class="sxs-lookup"><span data-stu-id="c4810-121">Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame.</span></span> <span data-ttu-id="c4810-122">Toute tentative d’appel <xref:System.Security.CodeAccessPermission.Assert%2A> quand un actif <xref:System.Security.CodeAccessPermission.Assert%2A> existe sur les résultats du frame dans une <xref:System.Security.SecurityException>.</span><span class="sxs-lookup"><span data-stu-id="c4810-122">An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="c4810-123">Appelez <xref:System.Security.CodeAccessPermission.RevertAssert%2A> ou <xref:System.Security.CodeAccessPermission.RevertAll%2A> pour supprimer un actif <xref:System.Security.CodeAccessPermission.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="c4810-123">Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span>  
  
 <span data-ttu-id="c4810-124"><xref:System.Security.CodeAccessPermission.Assert%2A> est ignoré pour une autorisation refusée, car une demande pour cette autorisation ne réussira pas.</span><span class="sxs-lookup"><span data-stu-id="c4810-124"><xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="c4810-125">Toutefois, si le code situé plus bas dans la pile des appels appelle <xref:System.Security.CodeAccessPermission.Demand%2A> pour cette autorisation, un <xref:System.Security.SecurityException> est levée lorsque le parcours de pile atteint le code qui a tenté d’appeler <xref:System.Security.CodeAccessPermission.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="c4810-125">However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="c4810-126">Cela se produit car le code qui a appelé <xref:System.Security.CodeAccessPermission.Assert%2A> n’a pas reçu l’autorisation, même si elle a tenté un <xref:System.Security.CodeAccessPermission.Assert%2A> il.</span><span class="sxs-lookup"><span data-stu-id="c4810-126">This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="c4810-127">Étant donné que l’appel <xref:System.Security.CodeAccessPermission.Assert%2A> supprime l’exigence que tout le code dans la chaîne d’appel doit être autorisé à accéder à la ressource spécifiée, il peut ouvrir des problèmes de sécurité si l’utilisation incorrecte ou inappropriée.</span><span class="sxs-lookup"><span data-stu-id="c4810-127">Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately.</span></span> <span data-ttu-id="c4810-128">Par conséquent, il doit être utilisé avec précaution.</span><span class="sxs-lookup"><span data-stu-id="c4810-128">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c4810-129">Le code appelant n’a pas <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-129">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span>
          </span>
          <span data-ttu-id="c4810-130">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-130">-or-</span>
          </span>
          <span data-ttu-id="c4810-131">Il existe déjà un <see cref="M:System.Security.CodeAccessPermission.Assert" /> actif pour l’image actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-131">There is already an active <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="c4810-132">pour la possibilité d’appeler <see cref="M:System.Security.CodeAccessPermission.Assert" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-132">for the ability to call <see cref="M:System.Security.CodeAccessPermission.Assert" />.</span>
          </span>
          <span data-ttu-id="c4810-133">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-133">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span>
          </span>
        </permission>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-134">
            <para>Vous ne pouvez pas substituer cette méthode.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-134">
              <para>You cannot override this method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission" Usage="codeAccessPermission.Copy " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-135">En cas d’implémentation par une classe dérivée, crée et retourne une copie identique de l’objet d’autorisation actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-135">When implemented by a derived class, creates and returns an identical copy of the current permission object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c4810-136">Copie de l’objet d’autorisation actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-136">A copy of the current permission object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-137">Une copie d’un objet d’autorisation représente le même accès aux ressources que l’objet d’autorisation d’origine.</span><span class="sxs-lookup"><span data-stu-id="c4810-137">A copy of a permission object represents the same access to resources as the original permission object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4810-138">L’exemple de code suivant illustre une substitution de la <xref:System.Security.CodeAccessPermission.Copy%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c4810-138">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Copy%2A> method.</span></span> <span data-ttu-id="c4810-139">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Security.CodeAccessPermission> classe.</span><span class="sxs-lookup"><span data-stu-id="c4810-139">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#2)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#2)]
 [!code-vb[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-140">
            <para>Vous devez substituer cette méthode dans une classe dérivée.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-140">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="codeAccessPermission.Demand " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-141">Force un <see cref="T:System.Security.SecurityException" /> au moment de l’exécution si tous les appelants figurant plus haut dans la pile des appels ne disposent pas des autorisations spécifiées par l’instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-141">Forces a <see cref="T:System.Security.SecurityException" /> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-142">Cette méthode est généralement utilisée par des bibliothèques sécurisées pour vous assurer que les appelants sont autorisés à accéder à une ressource.</span><span class="sxs-lookup"><span data-stu-id="c4810-142">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="c4810-143">Par exemple, une classe de fichier dans une bibliothèque de classes sécurisée appelle <xref:System.Security.CodeAccessPermission.Demand%2A> pour nécessaires <xref:System.Security.Permissions.FileIOPermission> avant d’effectuer une opération de fichier demandée par l’appelant.</span><span class="sxs-lookup"><span data-stu-id="c4810-143">For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="c4810-144">Les autorisations du code qui appelle cette méthode ne sont pas examinées ; la vérification commence à partir de l’appelant immédiat de ce code et remonte la pile.</span><span class="sxs-lookup"><span data-stu-id="c4810-144">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="c4810-145">La pile des appels est généralement représentée comme étant descendante, afin que plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="c4810-145">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="c4810-146"><xref:System.Security.CodeAccessPermission.Demand%2A> réussit uniquement si aucune <xref:System.Security.SecurityException> est déclenché.</span><span class="sxs-lookup"><span data-stu-id="c4810-146"><xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c4810-147">Un appelant figurant plus haut dans la pile des appels ne dispose pas de l’autorisation spécifiée par l’instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-147">A caller higher in the call stack does not have the permission specified by the current instance.</span>
          </span>
          <span data-ttu-id="c4810-148">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-148">-or-</span>
          </span>
          <span data-ttu-id="c4810-149">Un appelant figurant plus haut dans la pile des appels a appelé <see cref="M:System.Security.CodeAccessPermission.Deny" /> sur l’objet d’autorisation actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-149">A caller higher in the call stack has called <see cref="M:System.Security.CodeAccessPermission.Deny" /> on the current permission object.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-150">
            <para>Vous ne pouvez pas substituer cette méthode.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-150">
              <para>You cannot override this method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit&#xA;override this.Deny : unit -&gt; unit" Usage="codeAccessPermission.Deny " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("Deny is obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-151">Empêche les appelants plus hauts dans la pile des appels d’utiliser le code qui appelle cette méthode pour accéder à la ressource spécifiée par l’instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-151">Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="c4810-152">Le <xref:System.Security.CodeAccessPermission.Deny%2A> méthode doit être utilisée uniquement pour protéger les ressources contre tout accès accidentel par le code totalement approuvé.</span><span class="sxs-lookup"><span data-stu-id="c4810-152">The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="c4810-153">Il ne doit pas servir à protéger les ressources à partir d’abusive par du code non approuvé.</span><span class="sxs-lookup"><span data-stu-id="c4810-153">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="c4810-154">Par exemple, si méthode `A` problèmes un <xref:System.Security.CodeAccessPermission.Deny%2A> pour une autorisation, puis appelle la méthode `B`, méthode `B` peut substituer ouvertement la <xref:System.Security.CodeAccessPermission.Deny%2A> en émettant un <xref:System.Security.CodeAccessPermission.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="c4810-154">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="c4810-155">La méthode appelée est toujours plus haut dans la pile.</span><span class="sxs-lookup"><span data-stu-id="c4810-155">The called method is always higher in the stack.</span></span> <span data-ttu-id="c4810-156">Par conséquent, si méthode `B` tente d’accéder à une ressource protégée, le système de sécurité commence la vérification des autorisations avec lui, car méthode `B` est l’appelant immédiat, puis parcourt la pile pour confirmer qu’il y a aucune <xref:System.Security.CodeAccessPermission.Deny%2A> ou <xref:System.Security.CodeAccessPermission.PermitOnly%2A> plus bas dans la pile.</span><span class="sxs-lookup"><span data-stu-id="c4810-156">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="c4810-157">Méthode `B`, qui tente d’accéder à la ressource, peut arrêter le parcours de pile immédiatement à l’aide de la <xref:System.Security.CodeAccessPermission.Assert%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c4810-157">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="c4810-158">Dans ce cas, le <xref:System.Security.CodeAccessPermission.Deny%2A> placée sur la pile par la méthode `A` (la méthode d’appel) n’est jamais découverts.</span><span class="sxs-lookup"><span data-stu-id="c4810-158">In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="c4810-159">Cette méthode empêche les appelants plus hauts dans la pile des appels de l’accès à la ressource protégée via le code qui appelle cette méthode, même si les appelants ont reçu l’autorisation d’y accéder.</span><span class="sxs-lookup"><span data-stu-id="c4810-159">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="c4810-160">La pile des appels est généralement représentée comme étant descendante, afin que plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="c4810-160">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="c4810-161"><xref:System.Security.CodeAccessPermission.Deny%2A> peut limiter la responsabilité du programmeur ou empêcher les problèmes de sécurité accidentels, car elle contribue à empêcher la méthode qui appelle <xref:System.Security.CodeAccessPermission.Deny%2A> soit utilisé pour accéder à la ressource protégée par l’autorisation refusée.</span><span class="sxs-lookup"><span data-stu-id="c4810-161"><xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="c4810-162">Si une méthode appelle <xref:System.Security.CodeAccessPermission.Deny%2A> sur une autorisation et si un <xref:System.Security.CodeAccessPermission.Demand%2A> pour cette autorisation est appelée par un appelant plus bas dans la pile des appels, cette vérification de sécurité échoue lorsqu’elle atteint le <xref:System.Security.CodeAccessPermission.Deny%2A>.</span><span class="sxs-lookup"><span data-stu-id="c4810-162">If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span>  
  
 <span data-ttu-id="c4810-163">L’appel à <xref:System.Security.CodeAccessPermission.Deny%2A> est effectif jusqu'à ce que le code appelant retourne à son appelant.</span><span class="sxs-lookup"><span data-stu-id="c4810-163">The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="c4810-164">Seul <xref:System.Security.CodeAccessPermission.Deny%2A> peut être actif sur un frame.</span><span class="sxs-lookup"><span data-stu-id="c4810-164">Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame.</span></span> <span data-ttu-id="c4810-165">Toute tentative d’appel <xref:System.Security.CodeAccessPermission.Deny%2A> quand un actif <xref:System.Security.CodeAccessPermission.Deny%2A> existe sur les résultats du frame dans une <xref:System.Security.SecurityException>.</span><span class="sxs-lookup"><span data-stu-id="c4810-165">An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="c4810-166">Appelez <xref:System.Security.CodeAccessPermission.RevertDeny%2A> ou <xref:System.Security.CodeAccessPermission.RevertAll%2A> pour supprimer un actif <xref:System.Security.CodeAccessPermission.Deny%2A>.</span><span class="sxs-lookup"><span data-stu-id="c4810-166">Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span> <span data-ttu-id="c4810-167"><xref:System.Security.CodeAccessPermission.Deny%2A> est ignoré pour une autorisation refusée, car une demande pour cette autorisation ne réussira pas.</span><span class="sxs-lookup"><span data-stu-id="c4810-167"><xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c4810-168">Il existe déjà un <see cref="M:System.Security.CodeAccessPermission.Deny" /> actif pour l’image actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-168">There is already an active <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-169">
            <para>Vous ne pouvez pas substituer cette méthode.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-169">
              <para>You cannot override this method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="codeAccessPermission.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c4810-170">Objet <see cref="T:System.Security.CodeAccessPermission" /> à comparer au <see cref="T:System.Security.CodeAccessPermission" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-170">The <see cref="T:System.Security.CodeAccessPermission" /> object to compare with the current <see cref="T:System.Security.CodeAccessPermission" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c4810-171">Détermine si l’objet <see cref="T:System.Security.CodeAccessPermission" /> spécifié est égal au <see cref="T:System.Security.CodeAccessPermission" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-171">Determines whether the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c4810-172">
            <see langword="true" /> si l’objet <see cref="T:System.Security.CodeAccessPermission" /> spécifié est égal à l’élément <see cref="T:System.Security.CodeAccessPermission" /> actuel ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-172">
              <see langword="true" /> if the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-173">Pour plus d'informations, consultez <xref:System.Object.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="c4810-173">For more information, see <xref:System.Object.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public abstract void FromXml (System.Security.SecurityElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub FromXml (elem As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void FromXml(System::Security::SecurityElement ^ elem);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit" Usage="codeAccessPermission.FromXml elem" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elem" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="elem">
          <span data-ttu-id="c4810-174">Encodage XML à utiliser pour reconstruire l’objet de sécurité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-174">The XML encoding to use to reconstruct the security object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c4810-175">En cas de remplacement dans une classe dérivée, reconstruit un objet de sécurité avec un état spécifié à partir d’un encodage XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-175">When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-176">Code personnalisé qui étend les objets de sécurité doit implémenter les <xref:System.Security.CodeAccessPermission.ToXml%2A> et <xref:System.Security.CodeAccessPermission.FromXml%2A> méthodes pour rendre les objets puissent être codés en sécurité.</span><span class="sxs-lookup"><span data-stu-id="c4810-176">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4810-177">L’exemple de code suivant illustre une substitution de la <xref:System.Security.CodeAccessPermission.FromXml%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c4810-177">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.FromXml%2A> method.</span></span> <span data-ttu-id="c4810-178">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Security.CodeAccessPermission> classe.</span><span class="sxs-lookup"><span data-stu-id="c4810-178">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#10)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#10)]
 [!code-vb[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4810-179">Le paramètre <paramref name="elem" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-179">The <paramref name="elem" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4810-180">Le paramètre <paramref name="elem" /> ne contient pas l'encodage XML pour une instance du même type que l'instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-180">The <paramref name="elem" /> parameter does not contain the XML encoding for an instance of the same type as the current instance.</span>
          </span>
          <span data-ttu-id="c4810-181">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-181">-or-</span>
          </span>
          <span data-ttu-id="c4810-182">Le numéro de version du paramètre <paramref name="elem" /> n'est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-182">The version number of the <paramref name="elem" /> parameter is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-183">
            <para>Vous devez substituer cette méthode dans une classe dérivée.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-183">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="codeAccessPermission.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-184">Obtient un code de hachage pour l’objet <see cref="T:System.Security.CodeAccessPermission" /> qui peut être utilisé dans des structures de données et des algorithmes de hachage, comme une table de hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-184">Gets a hash code for the <see cref="T:System.Security.CodeAccessPermission" /> object that is suitable for use in hashing algorithms and data structures such as a hash table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c4810-185">Code de hachage pour l’objet <see cref="T:System.Security.CodeAccessPermission" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-185">A hash code for the current <see cref="T:System.Security.CodeAccessPermission" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-186">Code de hachage de deux instances de la même autorisation pouvant différer, par conséquent, un code de hachage ne doit pas être utilisé pour comparer deux <xref:System.Security.CodeAccessPermission> objets.</span><span class="sxs-lookup"><span data-stu-id="c4810-186">The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.CodeAccessPermission> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="codeAccessPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="c4810-187">Autorisation à croiser avec l’autorisation actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-187">A permission to intersect with the current permission.</span>
          </span>
          <span data-ttu-id="c4810-188">Elle doit être du même type que l’autorisation actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-188">It must be of the same type as the current permission.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c4810-189">En cas d’implémentation par une classe dérivée, crée et retourne une autorisation qui constitue l’intersection entre l’autorisation actuelle et l’autorisation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-189">When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c4810-190">Nouvelle autorisation qui représente l’intersection entre l’autorisation actuelle et l’autorisation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-190">A new permission that represents the intersection of the current permission and the specified permission.</span>
          </span>
          <span data-ttu-id="c4810-191">Cette nouvelle autorisation est <see langword="null" /> si l'intersection est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-191">This new permission is <see langword="null" /> if the intersection is empty.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-192">L’intersection de deux autorisations est une autorisation qui décrit l’ensemble des opérations qu’elles décrivent en commun.</span><span class="sxs-lookup"><span data-stu-id="c4810-192">The intersection of two permissions is a permission that describes the set of operations they both describe in common.</span></span> <span data-ttu-id="c4810-193">Seule une demande qui passe les deux autorisations d’origine transmettra l’intersection.</span><span class="sxs-lookup"><span data-stu-id="c4810-193">Only a demand that passes both original permissions will pass the intersection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4810-194">L’exemple de code suivant illustre une substitution de la <xref:System.Security.CodeAccessPermission.Intersect%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c4810-194">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Intersect%2A> method.</span></span> <span data-ttu-id="c4810-195">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Security.CodeAccessPermission> classe.</span><span class="sxs-lookup"><span data-stu-id="c4810-195">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#5)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#5)]
 [!code-vb[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4810-196">Le paramètre <paramref name="target" /> n'est pas <see langword="null" /> et n'est pas une instance de la même classe que l'autorisation en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-196">The <paramref name="target" /> parameter is not <see langword="null" /> and is not an instance of the same class as the current permission.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-197">
            <para>Vous devez substituer cette méthode dans une classe dérivée.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-197">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public abstract bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="codeAccessPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="c4810-198">Autorisation qui doit être testée pour la relation de sous-ensemble.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-198">A permission that is to be tested for the subset relationship.</span>
          </span>
          <span data-ttu-id="c4810-199">Cette autorisation doit être du même type que l’autorisation actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-199">This permission must be of the same type as the current permission.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c4810-200">En cas d’implémentation par une classe dérivée, détermine si l’autorisation actuelle est un sous-ensemble de l’autorisation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-200">When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c4810-201">
            <see langword="true" /> si l'autorisation en cours est un sous-ensemble de l'autorisation spécifiée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-201">
              <see langword="true" /> if the current permission is a subset of the specified permission; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-202">L’autorisation actuelle est un sous-ensemble de l’autorisation spécifiée si l’autorisation en cours spécifie un ensemble d’opérations qui est entièrement contenu par l’autorisation spécifiée.</span><span class="sxs-lookup"><span data-stu-id="c4810-202">The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.</span></span> <span data-ttu-id="c4810-203">Par exemple, une autorisation qui représente l’accès à C:\example.txt est un sous-ensemble d’une autorisation qui représente l’accès à C:\\.</span><span class="sxs-lookup"><span data-stu-id="c4810-203">For example, a permission that represents access to C:\example.txt is a subset of a permission that represents access to C:\\.</span></span> <span data-ttu-id="c4810-204">Si cette méthode retourne `true`, l’autorisation en cours ne représente pas plus d’accès à la ressource protégée que l’autorisation spécifiée.</span><span class="sxs-lookup"><span data-stu-id="c4810-204">If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.</span></span>  
  
 <span data-ttu-id="c4810-205">Les instructions suivantes sont requises pour être `true` pour tous les remplacements de la <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c4810-205">The following statements are required to be `true` for all overrides of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="c4810-206">*X*, *Y*, et *Z* représentent des objets d’autorisation d’accès code personnalisé qui ne sont pas des références null, *U* représente une autorisation d’accès de code non restreint, et *N* représente une autorisation vide avec un <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.None>.</span><span class="sxs-lookup"><span data-stu-id="c4810-206">*X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState.None>.</span></span>  
  
-   <span data-ttu-id="c4810-207">*X*. IsSubsetOf (*X*) renvoie `true`.</span><span class="sxs-lookup"><span data-stu-id="c4810-207">*X*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
-   <span data-ttu-id="c4810-208">*X*. IsSubsetOf (*Y*) retourne la même valeur que *Y*. IsSubsetOf (*X*) si et seulement si *X* et *Y* représentent le même jeu d’autorisations.</span><span class="sxs-lookup"><span data-stu-id="c4810-208">*X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.</span></span>  
  
-   <span data-ttu-id="c4810-209">Si *X*. IsSubsetOf (*Y*) et *Y*. IsSubsetOf (*Z*) retournent `true`, *X*. IsSubsetOf (*Z*) renvoie `true`.</span><span class="sxs-lookup"><span data-stu-id="c4810-209">If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.</span></span>  
  
-   <span data-ttu-id="c4810-210">*X*. IsSubsetOf (*U*) renvoie `true`.</span><span class="sxs-lookup"><span data-stu-id="c4810-210">*X*.IsSubsetOf(*U*) returns `true`.</span></span>  
  
-   <span data-ttu-id="c4810-211">*X*. IsSubsetOf (*N*) renvoie `false`.</span><span class="sxs-lookup"><span data-stu-id="c4810-211">*X*.IsSubsetOf(*N*) returns `false`.</span></span>  
  
-   <span data-ttu-id="c4810-212">*N*. IsSubsetOf (*X*) renvoie `true`.</span><span class="sxs-lookup"><span data-stu-id="c4810-212">*N*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
 <span data-ttu-id="c4810-213">Si *X* et *Y* représentent des objets d’autorisation d’accès code personnalisé qui sont des références null, *X*. IsSubsetOf (*Y*) renvoie `true`.</span><span class="sxs-lookup"><span data-stu-id="c4810-213">If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`.</span></span> <span data-ttu-id="c4810-214">Si *Z* est également null, l’opération ensembliste composée *X*. Union (*Y*). IsSubsetOf (*Z*) retourne également `true` , car l’union de deux autorisations null constitue une autorisation null.</span><span class="sxs-lookup"><span data-stu-id="c4810-214">If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4810-215">L’exemple de code suivant illustre une substitution de la <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c4810-215">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="c4810-216">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Security.CodeAccessPermission> classe.</span><span class="sxs-lookup"><span data-stu-id="c4810-216">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#4)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#4)]
 [!code-vb[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4810-217">Le paramètre <paramref name="target" /> n'est pas <see langword="null" /> et n'est pas du même type que l'autorisation en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-217">The <paramref name="target" /> parameter is not <see langword="null" /> and is not of the same type as the current permission.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-218">
            <para>Vous devez substituer cette méthode dans une classe dérivée.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-218">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit&#xA;override this.PermitOnly : unit -&gt; unit" Usage="codeAccessPermission.PermitOnly " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-219">Empêche les appelants plus hauts dans la pile des appels d’utiliser le code qui appelle cette méthode pour accéder à toutes les ressources à l’exception de la ressource spécifiée par l’instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-219">Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="c4810-220">Le <xref:System.Security.CodeAccessPermission.PermitOnly%2A> méthode doit être utilisée uniquement pour protéger les ressources contre tout accès accidentel par le code totalement approuvé.</span><span class="sxs-lookup"><span data-stu-id="c4810-220">The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="c4810-221">Il ne doit pas servir à protéger les ressources à partir d’abusive par du code non approuvé.</span><span class="sxs-lookup"><span data-stu-id="c4810-221">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="c4810-222">Par exemple, si méthode `A` problèmes un <xref:System.Security.CodeAccessPermission.PermitOnly%2A> pour une autorisation, puis appelle la méthode `B`, méthode `B` peut substituer ouvertement la <xref:System.Security.CodeAccessPermission.PermitOnly%2A> en émettant un <xref:System.Security.CodeAccessPermission.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="c4810-222">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="c4810-223">La méthode appelée est toujours plus haut dans la pile.</span><span class="sxs-lookup"><span data-stu-id="c4810-223">The called method is always higher in the stack.</span></span> <span data-ttu-id="c4810-224">Par conséquent, si méthode `B` tente d’accéder à une ressource protégée, le système de sécurité commence la vérification des autorisations avec lui, car méthode `B` est l’appelant immédiat, puis parcourt la pile pour confirmer qu’il y a aucune <xref:System.Security.CodeAccessPermission.Deny%2A> ou <xref:System.Security.CodeAccessPermission.PermitOnly%2A> plus bas dans la pile.</span><span class="sxs-lookup"><span data-stu-id="c4810-224">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="c4810-225">Méthode `B`, qui tente d’accéder à la ressource, peut arrêter le parcours de pile immédiatement à l’aide de la <xref:System.Security.CodeAccessPermission.Assert%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c4810-225">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="c4810-226">Dans ce cas, le <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placée sur la pile par la méthode `A` (la méthode d’appel) n’est jamais découverts.</span><span class="sxs-lookup"><span data-stu-id="c4810-226">In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="c4810-227"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> est similaire à <xref:System.Security.CodeAccessPermission.Deny%2A>, car les deux font échouent lorsqu’ils réussirait autrement des parcours de pile.</span><span class="sxs-lookup"><span data-stu-id="c4810-227"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="c4810-228">La différence est que <xref:System.Security.CodeAccessPermission.Deny%2A> spécifie les autorisations que le parcours de pile à échouer, mais <xref:System.Security.CodeAccessPermission.PermitOnly%2A> spécifie les seules autorisations qui ne provoquent pas l’échec du parcours de pile.</span><span class="sxs-lookup"><span data-stu-id="c4810-228">The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span>  
  
 <span data-ttu-id="c4810-229">Appelez cette méthode pour vous assurer que votre code peut être utilisé pour accéder uniquement aux ressources spécifiées.</span><span class="sxs-lookup"><span data-stu-id="c4810-229">Call this method to ensure that your code can be used to access only the specified resources.</span></span> <span data-ttu-id="c4810-230">L’appel à <xref:System.Security.CodeAccessPermission.PermitOnly%2A> est effectif jusqu'à ce que le code appelant retourne à son appelant.</span><span class="sxs-lookup"><span data-stu-id="c4810-230">The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="c4810-231">Seul <xref:System.Security.CodeAccessPermission.PermitOnly%2A> peut être actif sur un frame.</span><span class="sxs-lookup"><span data-stu-id="c4810-231">Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame.</span></span> <span data-ttu-id="c4810-232">Toute tentative d’appel <xref:System.Security.CodeAccessPermission.PermitOnly%2A> quand un actif <xref:System.Security.CodeAccessPermission.PermitOnly%2A> existe sur les résultats du frame dans une <xref:System.Security.SecurityException>.</span><span class="sxs-lookup"><span data-stu-id="c4810-232">An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="c4810-233">Appelez <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> ou <xref:System.Security.CodeAccessPermission.RevertAll%2A> pour supprimer un actif <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="c4810-233">Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span>  
  
 <span data-ttu-id="c4810-234"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> est ignoré pour une autorisation refusée, car une demande pour cette autorisation ne réussira pas.</span><span class="sxs-lookup"><span data-stu-id="c4810-234"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="c4810-235">Toutefois, si le code plus bas dans l’appel de la pile ultérieurement appels <xref:System.Security.CodeAccessPermission.Demand%2A> pour cette autorisation, un <xref:System.Security.SecurityException> est levée lorsque le parcours de pile atteint le code qui a tenté d’appeler <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="c4810-235">However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span> <span data-ttu-id="c4810-236">Il s’agit, car le code qui a appelé <xref:System.Security.CodeAccessPermission.PermitOnly%2A> n’a pas reçu l’autorisation, même s’il a appelé <xref:System.Security.CodeAccessPermission.PermitOnly%2A> pour cette autorisation.</span><span class="sxs-lookup"><span data-stu-id="c4810-236">This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="c4810-237">La pile des appels est généralement représentée comme étant descendante, afin que plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="c4810-237">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c4810-238">Il existe déjà un <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> actif pour l’image actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-238">There is already an active <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-239">
            <para>Vous ne pouvez pas substituer cette méthode.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-239">
              <para>You cannot override this method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RevertAll">
      <MemberSignature Language="C#" Value="public static void RevertAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAll" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAll();" />
      <MemberSignature Language="F#" Value="static member RevertAll : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-240">Entraîne la suppression définitive de toutes les substitutions antérieures pour le frame actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-240">Causes all previous overrides for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-241">S’il y a aucune substitution (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, ou <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) pour le frame actuel, un <xref:System.ExecutionEngineException> est levée.</span><span class="sxs-lookup"><span data-stu-id="c4810-241">If there are no overrides (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, or <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4810-242">Il n'existe aucun <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" /> ou <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> précédent pour le frame en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-242">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" />, or <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RevertAssert">
      <MemberSignature Language="C#" Value="public static void RevertAssert ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAssert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAssert" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAssert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAssert();" />
      <MemberSignature Language="F#" Value="static member RevertAssert : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertAssert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-243">Provoque la suppression et la désactivation du <see cref="M:System.Security.CodeAccessPermission.Assert" /> précédent pour le frame en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-243">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-244">S’il existe aucune <xref:System.Security.CodeAccessPermission.Assert%2A> pour le frame actuel, un <xref:System.ExecutionEngineException> est levée.</span><span class="sxs-lookup"><span data-stu-id="c4810-244">If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4810-245">Il n'existe aucun <see cref="M:System.Security.CodeAccessPermission.Assert" /> précédent pour le frame en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-245">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RevertDeny">
      <MemberSignature Language="C#" Value="public static void RevertDeny ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertDeny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertDeny" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertDeny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertDeny();" />
      <MemberSignature Language="F#" Value="static member RevertDeny : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertDeny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("Deny is obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-246">Provoque la suppression et la désactivation du <see cref="M:System.Security.CodeAccessPermission.Deny" /> précédent pour le frame en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-246">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-247">S’il existe aucune <xref:System.Security.CodeAccessPermission.Deny%2A> pour le frame actuel, un <xref:System.ExecutionEngineException> est levée.</span><span class="sxs-lookup"><span data-stu-id="c4810-247">If there is no <xref:System.Security.CodeAccessPermission.Deny%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4810-248">Il n'existe aucun <see cref="M:System.Security.CodeAccessPermission.Deny" /> précédent pour le frame en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-248">There is no previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RevertPermitOnly">
      <MemberSignature Language="C#" Value="public static void RevertPermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertPermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertPermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertPermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertPermitOnly();" />
      <MemberSignature Language="F#" Value="static member RevertPermitOnly : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertPermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-249">Provoque la suppression et la désactivation du <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> précédent pour le frame en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-249">Causes any previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-250">S’il existe aucune <xref:System.Security.CodeAccessPermission.PermitOnly%2A> pour le frame actuel, un <xref:System.ExecutionEngineException> est levée.</span><span class="sxs-lookup"><span data-stu-id="c4810-250">If there is no <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4810-251">Il n'existe aucun <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> précédent pour le frame en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-251">There is no previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IPermission.Demand">
      <MemberSignature Language="C#" Value="void IPermission.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IPermission.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IPermission#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IPermission.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IPermission.Demand() = System::Security::IPermission::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Assert">
      <MemberSignature Language="C#" Value="void IStackWalk.Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert" />
      <MemberSignature Language="VB.NET" Value="Sub Assert () Implements IStackWalk.Assert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Assert() = System::Security::IStackWalk::Assert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Demand">
      <MemberSignature Language="C#" Value="void IStackWalk.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IStackWalk.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Demand() = System::Security::IStackWalk::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Deny">
      <MemberSignature Language="C#" Value="void IStackWalk.Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny" />
      <MemberSignature Language="VB.NET" Value="Sub Deny () Implements IStackWalk.Deny" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Deny() = System::Security::IStackWalk::Deny;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.PermitOnly">
      <MemberSignature Language="C#" Value="void IStackWalk.PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Sub PermitOnly () Implements IStackWalk.PermitOnly" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.PermitOnly() = System::Security::IStackWalk::PermitOnly;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="codeAccessPermission.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-252">Crée et retourne une chaîne représentant l’objet d’autorisation actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-252">Creates and returns a string representation of the current permission object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c4810-253">Chaîne représentant l’objet d’autorisation actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-253">A string representation of the current permission object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-254">Cette méthode est utile pour déboguer lorsque vous avez besoin afficher l’autorisation en tant que chaîne.</span><span class="sxs-lookup"><span data-stu-id="c4810-254">This method is useful in debugging when you need to display the permission as a string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public abstract System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement" Usage="codeAccessPermission.ToXml " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4810-255">En cas de substitution dans une classe dérivée, crée un encodage XML de l’objet de sécurité et de son état actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-255">When overridden in a derived class, creates an XML encoding of the security object and its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c4810-256">Encodage XML de l’objet de sécurité, y compris les informations d’état éventuelles.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-256">An XML encoding of the security object, including any state information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-257">Code personnalisé qui étend les objets de sécurité doit implémenter les <xref:System.Security.CodeAccessPermission.ToXml%2A> et <xref:System.Security.CodeAccessPermission.FromXml%2A> méthodes pour rendre les objets puissent être codés en sécurité.</span><span class="sxs-lookup"><span data-stu-id="c4810-257">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4810-258">L’exemple de code suivant illustre une substitution de la <xref:System.Security.CodeAccessPermission.ToXml%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c4810-258">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.ToXml%2A> method.</span></span> <span data-ttu-id="c4810-259">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Security.CodeAccessPermission> classe.</span><span class="sxs-lookup"><span data-stu-id="c4810-259">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#11)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#11)]
 [!code-vb[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-260">
            <para>Vous devez substituer cette méthode dans une classe dérivée.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-260">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public virtual System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Union (other As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="codeAccessPermission.Union other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="c4810-261">Autorisation à combiner avec l’autorisation actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-261">A permission to combine with the current permission.</span>
          </span>
          <span data-ttu-id="c4810-262">Elle doit être du même type que l’autorisation actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-262">It must be of the same type as the current permission.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c4810-263">Lors de son remplacement dans une classe dérivée, crée une autorisation qui est l’union de l’autorisation actuelle et de l’autorisation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-263">When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c4810-264">Nouvelle autorisation qui représente l’union de l’autorisation actuelle et de l’autorisation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-264">A new permission that represents the union of the current permission and the specified permission.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4810-265">Le résultat d’un appel à <xref:System.Security.CodeAccessPermission.Union%2A> est une autorisation qui représente toutes les opérations représentées par l’autorisation actuelle et l’autorisation spécifiée.</span><span class="sxs-lookup"><span data-stu-id="c4810-265">The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission.</span></span> <span data-ttu-id="c4810-266">Toutes les demandes qui transmet une autorisation passent leur union.</span><span class="sxs-lookup"><span data-stu-id="c4810-266">Any demand that passes either permission passes their union.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4810-267">L’exemple de code suivant illustre une substitution de la <xref:System.Security.CodeAccessPermission.Union%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c4810-267">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Union%2A> method.</span></span> <span data-ttu-id="c4810-268">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Security.CodeAccessPermission> classe.</span><span class="sxs-lookup"><span data-stu-id="c4810-268">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#12)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#12)]
 [!code-vb[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c4810-269">Le paramètre <paramref name="other" /> n'est pas <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-269">The <paramref name="other" /> parameter is not <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c4810-270">Cette méthode est uniquement prise en charge à ce niveau lorsqu'elle est passée <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-270">This method is only supported at this level when passed <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4810-271">
            <para>Vous devez substituer cette méthode dans une classe dérivée. Vous devez retourner une copie de l’autorisation si la valeur de la <paramref name="other" /> paramètre est <see langword="null" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4810-271">
              <para>You must override this method in a derived class. You should return a copy of the permission if the value of the <paramref name="other" /> parameter is <see langword="null" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>