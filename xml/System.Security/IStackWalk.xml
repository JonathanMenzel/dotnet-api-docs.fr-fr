<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68bb1d581343b243676d9e52c3b1ec47ab5eed42" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49143196" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <TypeSignature Language="F#" Value="type IStackWalk = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gère le parcours de pile qui détermine si tous les appelants dans la pile des appels ont les autorisations nécessaires pour accéder à une ressource protégée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Code partiellement fiable présente toujours un risque de sécurité. Il peut parfois être manipulé pour effectuer des actions pour le compte d’un code malveillant qui n’est pas autorisé à accéder à une ressource. De cette façon, un code malveillant peut obtenir des accès de sécurité plus élevé qu’il doit être autorisé.  
  
 Le common language runtime protège le code managé à partir de ces attaques en exécutant un parcours de pile sur tous les appels. Le parcours de pile requiert que tout le code dans la pile des appels est autorisé à accéder à une ressource protégée. Étant donné que le code qui tente de l’attaque sera toujours quelque part dans la pile des appels, il sera impossible de dépasser ses propres autorisations de sécurité.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit" Usage="iStackWalk.Assert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Déclare que le code appelant peut accéder à la ressource identifiée par l’objet d’autorisation actuel, même si les appelants situés plus haut dans la pile n’ont pas reçu l’autorisation d’accéder à la ressource.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel <xref:System.Security.IStackWalk.Assert%2A> arrête la vérification des autorisations sur les appelants plus hauts dans la pile des appels. Par conséquent, même si ces appelants n’ont pas les autorisations requises, ils peuvent toujours accéder aux ressources. Une assertion est efficace uniquement si le code qui appelle <xref:System.Security.IStackWalk.Assert%2A> passe la vérification de sécurité pour l’autorisation qu’il confirme.  
  
 Un appel à <xref:System.Security.IStackWalk.Assert%2A> est effectif jusqu'à ce que le code appelant retourne à son appelant ou jusqu'à ce que d’un appel ultérieur à <xref:System.Security.IStackWalk.Assert%2A> rende l’assertion précédente inefficace. En outre, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> ou <xref:System.Security.CodeAccessPermission.RevertAll%2A> supprime un en attente <xref:System.Security.IStackWalk.Assert%2A>.  
  
 <xref:System.Security.IStackWalk.Assert%2A> est ignoré pour une autorisation refusée, car une demande pour cette autorisation ne réussira pas. Toutefois, si le code situé plus bas dans la pile des appels appelle <xref:System.Security.IStackWalk.Demand%2A> pour cette autorisation, un <xref:System.Security.SecurityException> est levée lorsque le parcours de pile atteint le code qui a tenté d’appeler <xref:System.Security.IStackWalk.Assert%2A>. Cela se produit car le code qui a appelé <xref:System.Security.IStackWalk.Assert%2A> n’a pas reçu l’autorisation, même si elle a tenté un <xref:System.Security.IStackWalk.Assert%2A> il.  
  
> [!CAUTION]
>  Étant donné que l’appel <xref:System.Security.IStackWalk.Assert%2A> supprime l’exigence que tout le code dans la chaîne d’appel doit être autorisé à accéder à la ressource spécifiée, il peut ouvrir des failles de sécurité si l’utilisation incorrecte ou inappropriée. Par conséquent, il doit être utilisé avec précaution.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Le code appelant n’a pas <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</exception>
        <related type="Article" href="~/docs/framework/misc/using-the-assert-method.md">Utilisation de la méthode Assert</related>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iStackWalk.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Détermine au moment de l’exécution si tous les appelants dans la pile des appels ont reçu l’autorisation spécifiée par l’objet d’autorisation actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est généralement utilisée par des bibliothèques sécurisées pour vous assurer que les appelants sont autorisés à accéder à une ressource. Par exemple, une classe de fichier dans une bibliothèque de classes sécurisée appelle <xref:System.Security.IStackWalk.Demand%2A> pour nécessaires <xref:System.Security.Permissions.FileIOPermission> avant d’effectuer une opération de fichier demandée par l’appelant.  
  
 Les autorisations du code qui appelle cette méthode ne sont pas examinées ; la vérification commence à partir de l’appelant immédiat de ce code et remonte la pile. <xref:System.Security.IStackWalk.Demand%2A> réussit uniquement si aucune <xref:System.Security.SecurityException> est déclenché.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation spécifiée par l’objet d’autorisation actuel.  
  
- ou - 
Un appelant dans la pile des appels a appelé <see cref="M:System.Security.IStackWalk.Deny" /> sur l’objet d’autorisation actuel.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit" Usage="iStackWalk.Deny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provoque l’échec de chaque <see cref="M:System.Security.IStackWalk.Demand" /> pour l’objet actuel qui passe par le code appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode empêche les appelants plus hauts dans la pile des appels de l’accès à la ressource protégée via le code qui appelle cette méthode, même si les appelants ont reçu l’autorisation d’y accéder. La pile des appels est généralement représentée comme étant descendante, afin que plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.  
  
 <xref:System.Security.IStackWalk.Deny%2A> peut limiter la responsabilité du programmeur ou éviter de failles de sécurité accidentelle, car elle contribue à empêcher la méthode qui appelle <xref:System.Security.IStackWalk.Deny%2A> soit utilisé pour accéder à la ressource protégée par l’autorisation refusée. Si une méthode appelle <xref:System.Security.IStackWalk.Deny%2A> sur une autorisation et si un <xref:System.Security.IStackWalk.Demand%2A> pour cette autorisation est appelée par un appelant plus bas dans la pile des appels, cette vérification de sécurité échoue lorsqu’elle atteint le <xref:System.Security.IStackWalk.Deny%2A>.  
  
 <xref:System.Security.IStackWalk.Deny%2A> est ignoré pour une autorisation refusée, car une demande pour cette autorisation ne réussira pas.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Vous ne pouvez pas substituer cette méthode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit" Usage="iStackWalk.PermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entraîne l’échec de chaque <see cref="M:System.Security.IStackWalk.Demand" /> pour tous les objets à l’exception de l’objet actuel qui passe via le code appelant, même si le code plus haut dans la pile des appels a reçu l’autorisation d’accéder aux autres ressources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IStackWalk.PermitOnly%2A> est similaire à <xref:System.Security.IStackWalk.Deny%2A>, car les deux font échouent lorsqu’ils réussirait autrement des parcours de pile. La différence est que <xref:System.Security.IStackWalk.Deny%2A> spécifie les autorisations que le parcours de pile à échouer, mais <xref:System.Security.IStackWalk.PermitOnly%2A> spécifie les seules autorisations qui ne provoquent pas l’échec du parcours de pile. Appelez cette méthode pour vous assurer que votre code peut être utilisé pour accéder uniquement aux ressources spécifiées.  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A> est ignoré pour une autorisation refusée, car une demande pour cette autorisation ne réussira pas. Toutefois, si le code plus bas dans l’appel de la pile ultérieurement appels <xref:System.Security.IStackWalk.Demand%2A> pour cette autorisation, un <xref:System.Security.SecurityException> est levée lorsque le parcours de pile atteint le code qui a tenté d’appeler <xref:System.Security.IStackWalk.PermitOnly%2A>. Il s’agit, car le code qui a appelé <xref:System.Security.IStackWalk.PermitOnly%2A> n’a pas reçu l’autorisation, même s’il a appelé <xref:System.Security.IStackWalk.PermitOnly%2A> pour cette autorisation. La pile des appels est généralement représentée comme étant descendante, afin que plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>