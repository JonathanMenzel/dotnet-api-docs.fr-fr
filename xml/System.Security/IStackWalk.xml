<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="958cb-101">Gère le parcours de pile qui détermine si tous les appelants dans la pile des appels ont les autorisations nécessaires pour accéder à une ressource protégée.</span><span class="sxs-lookup"><span data-stu-id="958cb-101">Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958cb-102">Code partiellement fiable présente toujours un risque de sécurité.</span><span class="sxs-lookup"><span data-stu-id="958cb-102">Partially trusted code always presents a security risk.</span></span> <span data-ttu-id="958cb-103">Il peut parfois être manipulé pour effectuer des actions au nom d’un code malveillant qui n’est pas autorisé à accéder à une ressource.</span><span class="sxs-lookup"><span data-stu-id="958cb-103">It can sometimes be manipulated to perform actions on behalf of malicious code that does not have permission to access a resource.</span></span> <span data-ttu-id="958cb-104">De cette façon, le code nuisible peut atteindre des accès de sécurité plus élevé qu’il doit être autorisé.</span><span class="sxs-lookup"><span data-stu-id="958cb-104">In this way, malicious code can achieve higher security access than it should be allowed.</span></span>  
  
 <span data-ttu-id="958cb-105">Le common language runtime permet de protéger le code managé à partir de ces attaques en exécutant un parcours de pile sur tous les appels.</span><span class="sxs-lookup"><span data-stu-id="958cb-105">The common language runtime helps protect managed code from these attacks by running a stack walk on all calls.</span></span> <span data-ttu-id="958cb-106">Le parcours de pile requiert que tout le code dans la pile des appels a l’autorisation d’accéder à une ressource protégée.</span><span class="sxs-lookup"><span data-stu-id="958cb-106">The stack walk requires that all code in the call stack has permission to access a protected resource.</span></span> <span data-ttu-id="958cb-107">Étant donné que le code de l’attaque sera toujours quelque part dans la pile des appels, il sera pas aller au-delà de ses propres autorisations de sécurité.</span><span class="sxs-lookup"><span data-stu-id="958cb-107">Because the code attempting the attack will always be somewhere in the call stack, it will be unable to exceed its own security permissions.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="958cb-108">Déclare que le code appelant peut accéder à la ressource identifiée par l’objet d’autorisation actuel, même si les appelants situés plus haut dans la pile n’ont pas reçu l’autorisation d’accéder à la ressource.</span><span class="sxs-lookup"><span data-stu-id="958cb-108">Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958cb-109">Appel de <xref:System.Security.IStackWalk.Assert%2A> arrête le contrôle d’autorisation des appelants plus hauts dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="958cb-109">Calling <xref:System.Security.IStackWalk.Assert%2A> stops the permission check on callers higher in the call stack.</span></span> <span data-ttu-id="958cb-110">Par conséquent, même si ces appelants n’ont pas les autorisations requises, ils peuvent toujours accéder aux ressources.</span><span class="sxs-lookup"><span data-stu-id="958cb-110">Therefore, even if these callers do not have the requisite permissions, they can still access resources.</span></span> <span data-ttu-id="958cb-111">Une assertion n’est efficace uniquement si le code qui appelle <xref:System.Security.IStackWalk.Assert%2A> passe la vérification de sécurité pour l’autorisation qu’il confirme.</span><span class="sxs-lookup"><span data-stu-id="958cb-111">An assertion is effective only if the code that calls <xref:System.Security.IStackWalk.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="958cb-112">Un appel à <xref:System.Security.IStackWalk.Assert%2A> est effective jusqu'à ce que le code appelant retourne à son appelant ou jusqu'à ce que d’un appel ultérieur à <xref:System.Security.IStackWalk.Assert%2A> rende l’assertion précédente inefficace.</span><span class="sxs-lookup"><span data-stu-id="958cb-112">A call to <xref:System.Security.IStackWalk.Assert%2A> is effective until the calling code returns to its caller or until a subsequent call to <xref:System.Security.IStackWalk.Assert%2A> renders the previous assertion ineffective.</span></span> <span data-ttu-id="958cb-113">En outre, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> ou <xref:System.Security.CodeAccessPermission.RevertAll%2A> supprime une attente <xref:System.Security.IStackWalk.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="958cb-113">Also, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> removes a pending <xref:System.Security.IStackWalk.Assert%2A>.</span></span>  
  
 <span data-ttu-id="958cb-114"><xref:System.Security.IStackWalk.Assert%2A> est ignoré pour une autorisation refusée, car une demande concernant cette autorisation ne réussira pas.</span><span class="sxs-lookup"><span data-stu-id="958cb-114"><xref:System.Security.IStackWalk.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="958cb-115">Toutefois, si le code situé plus bas dans la pile des appels appelle <xref:System.Security.IStackWalk.Demand%2A> pour cette autorisation, un <xref:System.Security.SecurityException> est levée lorsque le parcours de pile atteint le code qui a tenté d’appeler <xref:System.Security.IStackWalk.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="958cb-115">However, if code lower on the call stack calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.Assert%2A>.</span></span> <span data-ttu-id="958cb-116">Cela se produit car le code qui a appelé <xref:System.Security.IStackWalk.Assert%2A> n’a pas reçu l’autorisation, même s’il a tenté de <xref:System.Security.IStackWalk.Assert%2A> il.</span><span class="sxs-lookup"><span data-stu-id="958cb-116">This happens because the code that called <xref:System.Security.IStackWalk.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.IStackWalk.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="958cb-117">Étant donné que l’appel <xref:System.Security.IStackWalk.Assert%2A> supprime l’exigence que tout le code dans la chaîne d’appel doit être autorisé à accéder à la ressource spécifiée, il peut ouvrir des failles de sécurité si l’utilisation incorrecte ou inappropriée.</span><span class="sxs-lookup"><span data-stu-id="958cb-117">Because calling <xref:System.Security.IStackWalk.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately.</span></span> <span data-ttu-id="958cb-118">Par conséquent, elle doit être utilisée avec précaution.</span><span class="sxs-lookup"><span data-stu-id="958cb-118">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="958cb-119">Le code appelant n’a pas <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span><span class="sxs-lookup"><span data-stu-id="958cb-119">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="958cb-120">Détermine au moment de l’exécution si tous les appelants dans la pile des appels ont reçu l’autorisation spécifiée par l’objet d’autorisation actuel.</span><span class="sxs-lookup"><span data-stu-id="958cb-120">Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958cb-121">Cette méthode est généralement utilisée par des bibliothèques sécurisées pour garantir que les appelants ont l’autorisation d’accéder à une ressource.</span><span class="sxs-lookup"><span data-stu-id="958cb-121">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="958cb-122">Par exemple, une classe de fichier dans une bibliothèque de classes sécurisée appelle <xref:System.Security.IStackWalk.Demand%2A> pour nécessaires <xref:System.Security.Permissions.FileIOPermission> avant d’effectuer une opération de fichier demandée par l’appelant.</span><span class="sxs-lookup"><span data-stu-id="958cb-122">For example, a file class in a secure class library calls <xref:System.Security.IStackWalk.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="958cb-123">Les autorisations du code qui appelle cette méthode ne sont pas examinées ; la vérification commence à partir de l’appelant immédiat de ce code et se déroule la pile.</span><span class="sxs-lookup"><span data-stu-id="958cb-123">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="958cb-124"><xref:System.Security.IStackWalk.Demand%2A> réussit uniquement si aucune <xref:System.Security.SecurityException> est déclenché.</span><span class="sxs-lookup"><span data-stu-id="958cb-124"><xref:System.Security.IStackWalk.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="958cb-125">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation spécifiée par l’objet d’autorisation actuel.</span><span class="sxs-lookup"><span data-stu-id="958cb-125">A caller higher in the call stack does not have the permission specified by the current permission object.</span></span>  
  
 <span data-ttu-id="958cb-126">- ou -</span><span class="sxs-lookup"><span data-stu-id="958cb-126">-or-</span></span>  
  
 <span data-ttu-id="958cb-127">Un appelant dans la pile des appels a appelé <see cref="M:System.Security.IStackWalk.Deny" /> sur l’objet d’autorisation actuel.</span><span class="sxs-lookup"><span data-stu-id="958cb-127">A caller in the call stack has called <see cref="M:System.Security.IStackWalk.Deny" /> on the current permission object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="958cb-128">Provoque l’échec de chaque <see cref="M:System.Security.IStackWalk.Demand" /> pour l’objet actuel qui passe par le code appelant.</span><span class="sxs-lookup"><span data-stu-id="958cb-128">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for the current object that passes through the calling code to fail.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958cb-129">Cette méthode empêche les appelants situés plus haut dans la pile des appels d’accéder à la ressource protégée via le code qui appelle cette méthode, même si les appelants ont reçu l’autorisation d’y accéder.</span><span class="sxs-lookup"><span data-stu-id="958cb-129">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="958cb-130">La pile des appels est généralement représentée comme étant descendante, afin que le plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="958cb-130">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="958cb-131"><xref:System.Security.IStackWalk.Deny%2A> peut limiter la responsabilité du programmeur ou éviter de failles de sécurité accidentelle, car elle contribue à empêcher la méthode qui appelle <xref:System.Security.IStackWalk.Deny%2A> d’être utilisé pour accéder à la ressource protégée par l’autorisation refusée.</span><span class="sxs-lookup"><span data-stu-id="958cb-131"><xref:System.Security.IStackWalk.Deny%2A> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <xref:System.Security.IStackWalk.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="958cb-132">Si une méthode appelle <xref:System.Security.IStackWalk.Deny%2A> sur une autorisation et si un <xref:System.Security.IStackWalk.Demand%2A> pour cette autorisation est appelée par un appelant plus bas dans la pile des appels, cette vérification de sécurité échoue lorsqu’elle atteint la <xref:System.Security.IStackWalk.Deny%2A>.</span><span class="sxs-lookup"><span data-stu-id="958cb-132">If a method calls <xref:System.Security.IStackWalk.Deny%2A> on a permission, and if a <xref:System.Security.IStackWalk.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.IStackWalk.Deny%2A>.</span></span>  
  
 <span data-ttu-id="958cb-133"><xref:System.Security.IStackWalk.Deny%2A> est ignoré pour une autorisation refusée, car une demande concernant cette autorisation ne réussira pas.</span><span class="sxs-lookup"><span data-stu-id="958cb-133"><xref:System.Security.IStackWalk.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="958cb-134">Vous ne pouvez pas substituer cette méthode.</span><span class="sxs-lookup"><span data-stu-id="958cb-134">You cannot override this method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="958cb-135">Entraîne l'échec de chaque <see cref="M:System.Security.IStackWalk.Demand" /> pour tous les objets excepté celui en cours qui passe par le code appelant, même si des autorisations d'accès à d'autres ressources ont été attribuées au code qui plus haut dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="958cb-135">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958cb-136"><xref:System.Security.IStackWalk.PermitOnly%2A> est semblable à <xref:System.Security.IStackWalk.Deny%2A>, dans la mesure où les deux font des parcours de pile échouent lorsqu’ils devraient normalement réussir.</span><span class="sxs-lookup"><span data-stu-id="958cb-136"><xref:System.Security.IStackWalk.PermitOnly%2A> is similar to <xref:System.Security.IStackWalk.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="958cb-137">La différence est que <xref:System.Security.IStackWalk.Deny%2A> spécifie les autorisations qui provoqueront l’échec, le parcours de pile mais <xref:System.Security.IStackWalk.PermitOnly%2A> spécifie les seules autorisations qui ne provoquent pas l’échec du parcours de pile.</span><span class="sxs-lookup"><span data-stu-id="958cb-137">The difference is that <xref:System.Security.IStackWalk.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.IStackWalk.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span> <span data-ttu-id="958cb-138">Appelez cette méthode pour vous assurer que votre code peut être utilisé pour accéder uniquement aux ressources spécifiées.</span><span class="sxs-lookup"><span data-stu-id="958cb-138">Call this method to ensure that your code can be used to access only the specified resources.</span></span>  
  
 <span data-ttu-id="958cb-139"><xref:System.Security.IStackWalk.PermitOnly%2A> est ignoré pour une autorisation refusée, car une demande concernant cette autorisation ne réussira pas.</span><span class="sxs-lookup"><span data-stu-id="958cb-139"><xref:System.Security.IStackWalk.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="958cb-140">Toutefois, si le code plus bas dans l’appel de pile ultérieurement les appels <xref:System.Security.IStackWalk.Demand%2A> pour cette autorisation, un <xref:System.Security.SecurityException> est levée lorsque le parcours de pile atteint le code qui a tenté d’appeler <xref:System.Security.IStackWalk.PermitOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="958cb-140">However, if code lower on the call stack later calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.PermitOnly%2A>.</span></span> <span data-ttu-id="958cb-141">C’est parce que le code qui a appelé <xref:System.Security.IStackWalk.PermitOnly%2A> n’a pas reçu l’autorisation, même s’il a appelé <xref:System.Security.IStackWalk.PermitOnly%2A> pour cette autorisation.</span><span class="sxs-lookup"><span data-stu-id="958cb-141">This is because the code that called <xref:System.Security.IStackWalk.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.IStackWalk.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="958cb-142">La pile des appels est généralement représentée comme étant descendante, afin que le plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="958cb-142">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>