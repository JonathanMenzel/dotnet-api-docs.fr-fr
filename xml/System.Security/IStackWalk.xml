<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IStackWalk.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b37ff083eff27618aa07c0a744562f3f8a613708.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b37ff083eff27618aa07c0a744562f3f8a613708</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.IStackWalk">
          <source>Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</source>
          <target state="translated">Gère le parcours de pile qui détermine si tous les appelants dans la pile des appels ont les autorisations nécessaires pour accéder à une ressource protégée.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>Partially trusted code always presents a security risk.</source>
          <target state="translated">Code partiellement fiable présente toujours un risque de sécurité.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>It can sometimes be manipulated to perform actions on behalf of malicious code that does not have permission to access a resource.</source>
          <target state="translated">Il peut parfois être manipulé pour effectuer des actions au nom d’un code malveillant qui n’est pas autorisé à accéder à une ressource.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>In this way, malicious code can achieve higher security access than it should be allowed.</source>
          <target state="translated">De cette façon, le code nuisible peut atteindre des accès de sécurité plus élevé qu’il doit être autorisé.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>The common language runtime helps protect managed code from these attacks by running a stack walk on all calls.</source>
          <target state="translated">Le common language runtime permet de protéger le code managé à partir de ces attaques en exécutant un parcours de pile sur tous les appels.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>The stack walk requires that all code in the call stack has permission to access a protected resource.</source>
          <target state="translated">Le parcours de pile requiert que tout le code dans la pile des appels a l’autorisation d’accéder à une ressource protégée.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>Because the code attempting the attack will always be somewhere in the call stack, it will be unable to exceed its own security permissions.</source>
          <target state="translated">Étant donné que le code de l’attaque sera toujours quelque part dans la pile des appels, il sera pas aller au-delà de ses propres autorisations de sécurité.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Assert">
          <source>Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</source>
          <target state="translated">Déclare que le code appelant peut accéder à la ressource identifiée par l’objet d’autorisation actuel, même si les appelants situés plus haut dans la pile n’ont pas reçu l’autorisation d’accéder à la ressource.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Calling <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> stops the permission check on callers higher in the call stack.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> arrête le contrôle d’autorisation des appelants plus hauts dans la pile des appels.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Therefore, even if these callers do not have the requisite permissions, they can still access resources.</source>
          <target state="translated">Par conséquent, même si ces appelants n’ont pas les autorisations requises, ils peuvent toujours accéder aux ressources.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>An assertion is effective only if the code that calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> passes the security check for the permission that it is asserting.</source>
          <target state="translated">Une assertion n’est efficace uniquement si le code qui appelle <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> passe la vérification de sécurité pour l’autorisation qu’il confirme.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>A call to <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> is effective until the calling code returns to its caller or until a subsequent call to <ph id="ph2">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> renders the previous assertion ineffective.</source>
          <target state="translated">Un appel à <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> est effective jusqu'à ce que le code appelant retourne à son appelant ou jusqu'à ce que d’un appel ultérieur à <ph id="ph2">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> rende l’assertion précédente inefficace.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Also, <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> removes a pending <ph id="ph3">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph>.</source>
          <target state="translated">En outre, <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> supprime une attente <ph id="ph3">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> est ignoré pour une autorisation refusée, car une demande concernant cette autorisation ne réussira pas.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>However, if code lower on the call stack calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> for that permission, a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id="ph3">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph>.</source>
          <target state="translated">Toutefois, si le code situé plus bas dans la pile des appels appelle <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> pour cette autorisation, un <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> est levée lorsque le parcours de pile atteint le code qui a tenté d’appeler <ph id="ph3">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>This happens because the code that called <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> has not been granted the permission, even though it tried to <ph id="ph2">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> it.</source>
          <target state="translated">Cela se produit car le code qui a appelé <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> n’a pas reçu l’autorisation, même s’il a tenté de <ph id="ph2">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> il.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Because calling <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately.</source>
          <target state="translated">Étant donné que l’appel <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> supprime l’exigence que tout le code dans la chaîne d’appel doit être autorisé à accéder à la ressource spécifiée, il peut ouvrir des failles de sécurité si l’utilisation incorrecte ou inappropriée.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Therefore, it should be used with great caution.</source>
          <target state="translated">Par conséquent, elle doit être utilisée avec précaution.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Assert">
          <source>The calling code does not have <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /&gt;</ph>.</source>
          <target state="translated">Le code appelant n’a pas <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Demand">
          <source>Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</source>
          <target state="translated">Détermine au moment de l’exécution si tous les appelants dans la pile des appels ont reçu l’autorisation spécifiée par l’objet d’autorisation actuel.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Demand">
          <source>This method is typically used by secure libraries to ensure that callers have permission to access a resource.</source>
          <target state="translated">Cette méthode est généralement utilisée par des bibliothèques sécurisées pour garantir que les appelants ont l’autorisation d’accéder à une ressource.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Demand">
          <source>For example, a file class in a secure class library calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> for the necessary <ph id="ph2">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> before performing a file operation requested by the caller.</source>
          <target state="translated">Par exemple, une classe de fichier dans une bibliothèque de classes sécurisée appelle <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> pour nécessaires <ph id="ph2">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> avant d’effectuer une opération de fichier demandée par l’appelant.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Demand">
          <source>The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</source>
          <target state="translated">Les autorisations du code qui appelle cette méthode ne sont pas examinées ; la vérification commence à partir de l’appelant immédiat de ce code et se déroule la pile.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Demand">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> succeeds only if no <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is raised.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> réussit uniquement si aucune <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> est déclenché.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Demand">
          <source>A caller higher in the call stack does not have the permission specified by the current permission object.</source>
          <target state="translated">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation spécifiée par l’objet d’autorisation actuel.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Demand">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Demand">
          <source>A caller in the call stack has called <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Deny" /&gt;</ph> on the current permission object.</source>
          <target state="translated">Un appelant dans la pile des appels a appelé <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Deny" /&gt;</ph> sur l’objet d’autorisation actuel.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Deny">
          <source>Causes every <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Demand" /&gt;</ph> for the current object that passes through the calling code to fail.</source>
          <target state="translated">Provoque l’échec de chaque <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Demand" /&gt;</ph> pour l’objet actuel qui passe par le code appelant.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source>This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</source>
          <target state="translated">Cette méthode empêche les appelants situés plus haut dans la pile des appels d’accéder à la ressource protégée via le code qui appelle cette méthode, même si les appelants ont reçu l’autorisation d’y accéder.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
          <target state="translated">La pile des appels est généralement représentée comme étant descendante, afin que le plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <ph id="ph2">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> from being used to access the resource protected by the denied permission.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> peut limiter la responsabilité du programmeur ou éviter de failles de sécurité accidentelle, car elle contribue à empêcher la méthode qui appelle <ph id="ph2">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> d’être utilisé pour accéder à la ressource protégée par l’autorisation refusée.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source>If a method calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> on a permission, and if a <ph id="ph2">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <ph id="ph3">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph>.</source>
          <target state="translated">Si une méthode appelle <ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> sur une autorisation et si un <ph id="ph2">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> pour cette autorisation est appelée par un appelant plus bas dans la pile des appels, cette vérification de sécurité échoue lorsqu’elle atteint la <ph id="ph3">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> est ignoré pour une autorisation refusée, car une demande concernant cette autorisation ne réussira pas.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source>You cannot override this method.</source>
          <target state="translated">Vous ne pouvez pas substituer cette méthode.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>Causes every <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Demand" /&gt;</ph> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</source>
          <target state="translated">Entraîne l'échec de chaque <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Demand" /&gt;</ph> pour tous les objets excepté celui en cours qui passe par le code appelant, même si des autorisations d'accès à d'autres ressources ont été attribuées au code qui plus haut dans la pile des appels.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> is similar to <ph id="ph2">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph>, in that both cause stack walks to fail when they would otherwise succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> est semblable à <ph id="ph2">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph>, dans la mesure où les deux font des parcours de pile échouent lorsqu’ils devraient normalement réussir.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>The difference is that <ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> specifies permissions that will cause the stack walk to fail, but <ph id="ph2">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> specifies the only permissions that do not cause the stack walk to fail.</source>
          <target state="translated">La différence est que <ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> spécifie les autorisations qui provoqueront l’échec, le parcours de pile mais <ph id="ph2">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> spécifie les seules autorisations qui ne provoquent pas l’échec du parcours de pile.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>Call this method to ensure that your code can be used to access only the specified resources.</source>
          <target state="translated">Appelez cette méthode pour vous assurer que votre code peut être utilisé pour accéder uniquement aux ressources spécifiées.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> est ignoré pour une autorisation refusée, car une demande concernant cette autorisation ne réussira pas.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>However, if code lower on the call stack later calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> for that permission, a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id="ph3">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph>.</source>
          <target state="translated">Toutefois, si le code plus bas dans l’appel de pile ultérieurement les appels <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> pour cette autorisation, un <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> est levée lorsque le parcours de pile atteint le code qui a tenté d’appeler <ph id="ph3">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>This is because the code that called <ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> has not been granted the permission, even though it called <ph id="ph2">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> for that permission.</source>
          <target state="translated">C’est parce que le code qui a appelé <ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> n’a pas reçu l’autorisation, même s’il a appelé <ph id="ph2">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> pour cette autorisation.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
          <target state="translated">La pile des appels est généralement représentée comme étant descendante, afin que le plus haut dans la pile des appels de méthodes appelle des méthodes inférieur dans la pile des appels.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>