<Type Name="SecurityContext" FullName="System.Security.SecurityContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19deaf58cc4ef80ad473aaa036612750728c0284" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30500883" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecurityContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecurityContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecurityContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecurityContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityContext sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Encapsule et propage toutes les données liées à la sécurité pour les contextes d'exécution transférés sur les threads. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Security.SecurityContext> objet capture toutes les informations relatives à la sécurité pour un thread logique, y compris les informations contenues dans le <xref:System.Security.Principal.WindowsIdentity> et <xref:System.Threading.CompressedStack> objets.  Cette configuration permet à l’identité Windows et des sécurité des éléments sur la pile soient propagées automatiquement lorsque le <xref:System.Security.SecurityContext> est copié et transféré entre des threads asynchrones.  
  
> [!NOTE]
>  Le common language runtime (CLR) est informé de l’emprunt d’identité opérations effectuées avec uniquement du code managé, pas de l’emprunt d’identité effectuée en dehors du code managé, comme par plate-forme code non managé au code non managé ou via des appels directs aux fonctions Win32. Managé <xref:System.Security.Principal.WindowsIdentity> objets peuvent être transmis entre des points asynchrones, à moins que le `alwaysFlowImpersonationPolicy` élément a été défini sur `true` (`<alwaysFlowImpersonationPolicy enabled="true"/>`). Définition de la `alwaysFlowImpersonationPolicy` élément `true` Spécifie que l’identité Windows est toujours transmise entre des points asynchrones, quelle que soit la façon dont l’emprunt d’identité a été effectuée. Pour plus d’informations sur la transmission non managé à l’emprunt d’identité entre des points asynchrones, consultez [ &lt;alwaysFlowImpersonationPolicy&gt; élément](~/docs/framework/configure-apps/file-schema/runtime/alwaysflowimpersonationpolicy-element.md).  
  
 Le <xref:System.Security.SecurityContext> fait partie de la plus grande <xref:System.Threading.ExecutionContext> et circule ou migre lorsque le <xref:System.Threading.ExecutionContext> circule ou migre.  
  
> [!IMPORTANT]
>  Ce type implémente le <xref:System.IDisposable> interface. Lorsque vous avez fini d’utiliser le type, vous devez la supprimer directement ou indirectement. Pour supprimer le type directement, vous devez appeler sa <xref:System.IDisposable.Dispose%2A> méthode dans un `try` / `catch` bloc. Pour la supprimer indirectement, utiliser une construction de langage telles que `using` (en c#) ou `Using` (en Visual Basic). Pour plus d’informations, consultez la section « Utilisant un objet qui implémente IDisposable » dans la <xref:System.IDisposable> rubrique de l’interface.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static System.Security.SecurityContext Capture ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.SecurityContext Capture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.Capture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Capture () As SecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::SecurityContext ^ Capture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Capture le contexte de sécurité du thread actuel.</summary>
        <returns>Contexte de sécurité du thread actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le contexte de sécurité capturées peut être appliqué à un autre thread. Le <xref:System.Security.SecurityContext> se compose de la <xref:System.Threading.CompressedStack> et <xref:System.Security.Principal.WindowsIdentity> pour le thread en cours d’exécution.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public System.Security.SecurityContext CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecurityContext CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.CreateCopy" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCopy () As SecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecurityContext ^ CreateCopy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une copie du contexte de sécurité actuel.</summary>
        <returns>Contexte de sécurité du thread actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le contexte actuel doit avoir été acquis via une capture ou d’une opération de copie. Cette méthode est utile pour appliquer un capturées <xref:System.Security.SecurityContext> à plusieurs threads.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le contexte de sécurité actuel a été utilisé précédemment, a été marshalé sur des domaines d'application ou n'a pas été acquis à l'aide de la méthode <see cref="M:System.Security.SecurityContext.Capture" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Security.SecurityContext" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez la méthode `Dispose` une fois que vous avez terminé d'utiliser <xref:System.Security.SecurityContext>. La méthode `Dispose` rend le <xref:System.Security.SecurityContext> inutilisable. Après avoir appelé `Dispose`, vous devez libérer toutes les références à la <xref:System.Security.SecurityContext> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.Security.SecurityContext> occupée.  
  
 Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentant une méthode de suppression](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Appelez toujours `Dispose` avant de libérer votre dernière référence à <xref:System.Security.SecurityContext>. Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.Security.SecurityContext> de l'objet `Finalize`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFlowSuppressed">
      <MemberSignature Language="C#" Value="public static bool IsFlowSuppressed ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFlowSuppressed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.IsFlowSuppressed" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFlowSuppressed () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFlowSuppressed();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Détermine si le flux du contexte de sécurité a été supprimé.</summary>
        <returns>
          <see langword="true" /> si le flux a été supprimé ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Security.SecurityContext.IsFlowSuppressed%2A> méthode est utilisée par les composants d’infrastructure afin de déterminer s’il faut transférer le <xref:System.Security.SecurityContext> informations pendant des opérations asynchrones.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWindowsIdentityFlowSuppressed">
      <MemberSignature Language="C#" Value="public static bool IsWindowsIdentityFlowSuppressed ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWindowsIdentityFlowSuppressed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWindowsIdentityFlowSuppressed () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWindowsIdentityFlowSuppressed();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Détermine si le flux de la partie de l'identité Windows du contexte de sécurité actuel a été supprimé.</summary>
        <returns>
          <see langword="true" /> si le flux a été supprimé ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed%2A> méthode est utilisée par les composants d’infrastructure afin de déterminer s’il faut transférer les informations d’identité Windows lorsque la <xref:System.Security.SecurityContext> migre pendant des opérations asynchrones.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFlow">
      <MemberSignature Language="C#" Value="public static void RestoreFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RestoreFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.RestoreFlow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RestoreFlow ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RestoreFlow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restaure le flux du contexte de sécurité sur les threads asynchrones.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Security.SecurityContext.RestoreFlow%2A> méthode est appelée par le <xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=nameWithType> méthode pour annuler l’effet d’un précédent <xref:System.Security.SecurityContext.SuppressFlow%2A> appel de méthode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le contexte de sécurité est <see langword="null" /> ou une chaîne vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Security.SecurityContext securityContext, System.Threading.ContextCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Security.SecurityContext securityContext, class System.Threading.ContextCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Security::SecurityContext ^ securityContext, System::Threading::ContextCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityContext" Type="System.Security.SecurityContext" />
        <Parameter Name="callback" Type="System.Threading.ContextCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="securityContext">Contexte de sécurité à définir.</param>
        <param name="callback">Délégué qui représente la méthode à exécuter dans le contexte de sécurité spécifié.</param>
        <param name="state">Objet à passer à la méthode de rappel.</param>
        <summary>Exécute la méthode spécifiée dans le contexte de sécurité déterminé sur le thread actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le contexte de sécurité pour le thread actuel est retourné à son état précédent lorsque l’appel de méthode est terminé.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser la <xref:System.Security.SecurityContext.Run%2A> méthode pour exécuter une méthode dans un contexte de sécurité spécifié.  
  
 [!code-csharp[System.Security.SecurityContext.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecurityContext.Run/CS/form1.cs#1)]
 [!code-vb[System.Security.SecurityContext.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecurityContext.Run/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="securityContext" /> est <see langword="null" />.  
  
 - ou -  
  
 Le <paramref name="securityContext" /> n'a pas été acquis à l'aide d'une opération de capture.  
  
 - ou -  
  
 <paramref name="securityContext" /> a déjà été utilisé comme argument pour un appel à la méthode <see cref="M:System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiert une confiance totale pour l’appelant immédiat. Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</permission>
      </Docs>
    </Member>
    <Member MemberName="SuppressFlow">
      <MemberSignature Language="C#" Value="public static System.Threading.AsyncFlowControl SuppressFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.AsyncFlowControl SuppressFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.SuppressFlow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SuppressFlow () As AsyncFlowControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::AsyncFlowControl SuppressFlow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.AsyncFlowControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime le flux du contexte de sécurité sur les threads asynchrones.</summary>
        <returns>Structure <see cref="T:System.Threading.AsyncFlowControl" /> pour restaurer le flux.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour supprimer le flux de <xref:System.Security.SecurityContext> plus d’informations sur le thread actuel pour les opérations asynchrones.  
  
 Le common language runtime (CLR) est uniquement prenant en charge des opérations d’emprunt d’identité effectuées à l’aide de code managé. Le CLR n’a aucune connaissance de l’emprunt d’identité effectuée en dehors du code managé, telles que les appels de plateforme au code non managé qui effectue l’emprunt d’identité, ou via des appels aux fonctions Win32. Pour étendre l’identité entre des points asynchrones, vous devez utiliser managé <xref:System.Security.Principal.WindowsIdentity> et <xref:System.Security.Principal.WindowsImpersonationContext> méthodes.  
  
 Utilisez le <xref:System.Threading.AsyncFlowControl.Undo%2A> méthode sur le <xref:System.Threading.AsyncFlowControl> structure pour retourner le <xref:System.Security.SecurityContext> objet à son état précédent.  
  
 Cette méthode est protégée par un <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> pour <xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=nameWithType> autorisation. Un composant de niveau de confiance totale peut appeler cette méthode pour supprimer le flux de la <xref:System.Security.SecurityContext> informations pendant les appels asynchrones. Lorsque le flux est supprimé, le <xref:System.Security.SecurityContext.Capture%2A> méthode renvoie `null`.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiert une confiance totale pour l’appelant immédiat. Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</permission>
      </Docs>
    </Member>
    <Member MemberName="SuppressFlowWindowsIdentity">
      <MemberSignature Language="C#" Value="public static System.Threading.AsyncFlowControl SuppressFlowWindowsIdentity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.AsyncFlowControl SuppressFlowWindowsIdentity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.SuppressFlowWindowsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SuppressFlowWindowsIdentity () As AsyncFlowControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::AsyncFlowControl SuppressFlowWindowsIdentity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.AsyncFlowControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime le flux de la partie de l'identité Windows du contexte de sécurité actuel sur les threads asynchrones.</summary>
        <returns>Structure de restauration du flux.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour supprimer le flux de l’identité Windows lorsque la <xref:System.Security.SecurityContext> migre sur les threads asynchrones.  
  
 Utilisez le <xref:System.Threading.AsyncFlowControl.Undo%2A> méthode sur le <xref:System.Threading.AsyncFlowControl> structure pour retourner le <xref:System.Security.SecurityContext> objet à son état précédent.  
  
> [!NOTE]
>  Le common language runtime (CLR) est informé de l’emprunt d’identité opérations effectuées avec uniquement du code managé, pas de l’emprunt d’identité effectuée en dehors du code managé, comme par plate-forme code non managé au code non managé ou via des appels directs aux fonctions Win32. Managé <xref:System.Security.Principal.WindowsIdentity> objets peuvent être transmis entre des points asynchrones, à moins que le `alwaysFlowImpersonationPolicy` élément a été défini sur `true` (`<alwaysFlowImpersonationPolicy enabled="true"/>`). Définition de la `alwaysFlowImpersonationPolicy` élément `true` Spécifie que l’identité Windows est toujours transmise entre des points asynchrones, quelle que soit la façon dont l’emprunt d’identité a été effectuée. Pour plus d’informations sur la transmission non managé à l’emprunt d’identité entre des points asynchrones, consultez [ \<alwaysFlowImpersonationPolicy > élément](~/docs/framework/configure-apps/file-schema/runtime/alwaysflowimpersonationpolicy-element.md).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiert une confiance totale pour l’appelant immédiat. Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</permission>
      </Docs>
    </Member>
  </Members>
</Type>