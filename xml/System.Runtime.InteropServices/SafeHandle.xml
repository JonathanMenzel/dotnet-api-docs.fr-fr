<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SafeHandle.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56c4334868cde5130ed9da65bfda7e798c24b12cd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c4334868cde5130ed9da65bfda7e798c24b12cd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Represents a wrapper class for operating system handles.</source>
          <target state="translated">Représente une classe wrapper pour des handles de système d'exploitation.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This class must be inherited.</source>
          <target state="translated">Cette classe doit être héritée.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class provides critical finalization of handle resources, preventing handles from being reclaimed prematurely by garbage collection and from being recycled by Windows to reference unintended unmanaged objects.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe fournit une finalisation critique des ressources de handle, empêchant les handles d’être récupéré prématurément par le garbage collection et d’être recyclé par Windows pour faire référence à des objets non managés.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This topic includes the following sections:</source>
          <target state="translated">Cette rubrique comporte les sections suivantes :</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source><bpt id="p1">[</bpt>Why SafeHandle?<ept id="p1">](#Why)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Pourquoi SafeHandle ?<ept id="p1">](#Why)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source><bpt id="p1">[</bpt>What SafeHandle does<ept id="p1">](#Does)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Ce que fait SafeHandle<ept id="p1">](#Does)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source><bpt id="p1">[</bpt>Classes derived from SafeHandle<ept id="p1">](#Derived)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Classes dérivées de SafeHandle<ept id="p1">](#Derived)</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Why SafeHandle?</source>
          <target state="translated">Pourquoi SafeHandle ?</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Before the .NET Framework version 2.0, all operating system handles could only be encapsulated in the <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> managed wrapper object.</source>
          <target state="translated">Avant le .NET Framework version 2.0, du système d’exploitation tous les handles ne peuvent être encapsulés dans le <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objet de wrapper managé.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>While this was a convenient way to interoperate with native code, handles could be leaked by asynchronous exceptions, such as a thread aborting unexpectedly or a stack overflow.</source>
          <target state="translated">Alors que c’était un moyen pratique d’interagir avec le code natif, handles pourraient être divulguées par des exceptions asynchrones, comme un abandon inattendu de thread ou d’un débordement de pile.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>These asynchronous exceptions are an obstacle to cleaning up operating system resources, and they can occur almost anywhere in your app.</source>
          <target state="translated">Ces exceptions asynchrones constituent un obstacle au nettoyage des ressources du système d’exploitation, et ils peuvent se produire presque n’importe où dans votre application.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Although overrides to the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method allow cleanup of unmanaged resources when an object is being garbage collected, in some circumstances, finalizable objects can be reclaimed by garbage collection while executing a method within a platform invoke call.</source>
          <target state="translated">Bien que les remplacements pour le <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> méthode autoriser le nettoyage des ressources non managées lorsqu’un objet est en cours par le garbage collector, dans certains cas, objets finalisables peuvent être récupérées par le garbage collection pendant l’exécution d’une méthode sur une plate-forme de code non managé appel.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>If a finalizer frees the handle passed to that platform invoke call, it could lead to handle corruption.</source>
          <target state="translated">Si un finaliseur libère le handle passé à cette plateforme appel de code, elle peut aboutir à l’altération du handle.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The handle could also be reclaimed while your method is blocked during a platform invoke call, such as while reading a file.</source>
          <target state="translated">Le handle peut également être récupéré pendant que votre méthode est bloquée pendant une plateforme appel, comme lors de la lecture d’un fichier.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>More critically, because Windows aggressively recycles handles, a handle could be recycled and point to another resource that might contain sensitive data.</source>
          <target state="translated">Plus important, étant donné que Windows recycle les handles de manière agressive, un handle peut être recyclé et pointer vers une autre ressource qui peut contenir des données sensibles.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This is known as a recycle attack and can potentially corrupt data and be a security threat.</source>
          <target state="translated">Il s’agit comme une attaque de recyclage et peut potentiellement endommager les données, une menace de sécurité.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>What SafeHandle does</source>
          <target state="translated">Ce que fait SafeHandle</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class simplifies several of these object lifetime issues, and is integrated with platform invoke so that operating system resources are not leaked.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe simplifie plusieurs de ces problèmes de durée de vie des objets et est intégré à la plate-forme appeler de sorte que les ressources du système d’exploitation ne soient pas diffusées.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class resolves object lifetime issues by assigning and releasing handles without interruption.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe résout les problèmes de durée de vie des objets en assignant et en libérant des handles sans interruption.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>It contains a critical finalizer that ensures that the handle is closed and is guaranteed to run during unexpected <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> unloads, even in cases when the platform invoke call is assumed to be in a corrupted state.</source>
          <target state="translated">Elle contient un finaliseur critique qui garantit que le handle est fermé et qu’il est garanti pour s’exécuter pendant inattendue <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> décharge, même dans les cas où l’appel de la plateforme est censé pour être dans un état endommagé.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Because <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph>, all the noncritical finalizers are called before any of the critical finalizers.</source>
          <target state="translated">Étant donné que <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> hérite <ph id="ph2">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph>, tous les finaliseurs non critiques sont appelés avant les finaliseurs critiques.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The finalizers are called on objects that are no longer live during the same garbage collection pass.</source>
          <target state="translated">Les finaliseurs sont appelés sur les objets qui ne sont plus actives durant le même garbage collection.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object can run a normal finalizer to flush out existing buffered data without the risk of the handle being leaked or recycled.</source>
          <target state="translated">Par exemple, un <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objet peut exécuter un finaliseur normal pour nettoyer les données mises en mémoire tampon existantes sans risquer du handle soit divulgué ou recyclé.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This very weak ordering between critical and noncritical finalizers is not intended for general use.</source>
          <target state="translated">Ce classement très subtil entre les finaliseurs critiques et n’est pas destiné pour une utilisation générale.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>It exists primarily to assist in the migration of existing libraries by allowing those libraries to use <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> without altering their semantics.</source>
          <target state="translated">Il existe principalement pour faciliter la migration de bibliothèques existantes en leur permettant d’utiliser <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> sans modifier leur sémantique.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Additionally, the critical finalizer and anything it calls, such as the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType&gt;</ph> method, must be in a constrained execution region.</source>
          <target state="translated">En outre, le finaliseur critique et tout ce qu’il appelle, telles que la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType&gt;</ph> méthode, doit être dans une région d’exécution limitée.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This imposes constraints on what code can be written within the finalizer's call graph.</source>
          <target state="translated">Cela impose des contraintes sur le code qui peut être écrites dans le graphique des appels du finaliseur.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Platform invoke operations automatically increment the reference count of handles encapsulated by a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> and decrement them upon completion.</source>
          <target state="translated">Appel de plateforme opérations automatiquement incrémenter le décompte de références de handles encapsulés par un <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> et les décrémentent à l’achèvement.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This ensures that the handle will not be recycled or closed unexpectedly.</source>
          <target state="translated">Cela garantit que le handle ne sera pas recyclé ou fermé de manière inattendue.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>You can specify ownership of the underlying handle when constructing <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objects by supplying a value to the <ph id="ph2">`ownsHandle`</ph> argument in the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class constructor.</source>
          <target state="translated">Vous pouvez spécifier la propriété du handle sous-jacent lors de la construction <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objets en fournissant une valeur pour le <ph id="ph2">`ownsHandle`</ph> argument dans le <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> constructeur de classe.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This controls whether the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object will release the handle after the object has been disposed.</source>
          <target state="translated">Ce paramètre détermine si le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objet libérera le handle après l’objet a été supprimé.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This is useful for handles with peculiar lifetime requirements or for consuming a handle whose lifetime is controlled by someone else.</source>
          <target state="translated">Cela est utile pour les handles avec des spécifications de durée de vie particulières ou pour consommer un handle dont durée de vie est contrôlée par une autre personne.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Classes derived from SafeHandle</source>
          <target state="translated">Classes dérivées de SafeHandle</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> is an abstract wrapper class for operating system handles.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> est une classe wrapper abstraite pour les handles de système d’exploitation.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Deriving from this class is difficult.</source>
          <target state="translated">La dérivation de cette classe est difficile.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Instead, use the derived classes in the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles&gt;</ph> namespace that provide safe handles for the following:</source>
          <target state="translated">Utilisez plutôt les classes dérivées dans l'espace de noms <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles&gt;</ph> qui fournissent des handles sécurisés pour les éléments suivants :</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Files (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph> class).</source>
          <target state="translated">Fichiers (le <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph> classe).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Memory mapped files (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle&gt;</ph> class).</source>
          <target state="translated">Fichiers mappés en mémoire (la <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle&gt;</ph> classe).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Pipes (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafePipeHandle&gt;</ph> class).</source>
          <target state="translated">Canaux (la <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafePipeHandle&gt;</ph> classe).</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Memory views (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle&gt;</ph> class).</source>
          <target state="translated">Vues de la mémoire (la <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle&gt;</ph> classe).</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Cryptography constructs (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle&gt;</ph>, <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle&gt;</ph>, <ph id="ph3">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle&gt;</ph>, and <ph id="ph4">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle&gt;</ph> classes).</source>
          <target state="translated">Constructions de chiffrement (le <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle&gt;</ph>, <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle&gt;</ph>, <ph id="ph3">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle&gt;</ph>, et <ph id="ph4">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle&gt;</ph> classes).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Processes (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeProcessHandle&gt;</ph> class).</source>
          <target state="translated">Processus (la <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeProcessHandle&gt;</ph> classe).</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Registry keys (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle&gt;</ph> class).</source>
          <target state="translated">Clés de Registre (la <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle&gt;</ph> classe).</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Wait handles (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> class).</source>
          <target state="translated">Handles d’attente (la <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> classe).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The following code example creates a custom safe handle for an operating system file handle, deriving from <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant crée un handle sécurisé personnalisé pour un handle de fichier de système d’exploitation, qui dérivent de <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>It reads bytes from a file and displays their hexadecimal values.</source>
          <target state="translated">Il lit les octets à partir d’un fichier et affiche leurs valeurs hexadécimales.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>It also contains a fault testing harness that causes the thread to abort, but the handle value is freed.</source>
          <target state="translated">Il contient également un atelier de test des erreurs qui entraîne l’abandon du thread, mais la valeur du handle est libérée.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>When using an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> to represent handles, the handle is occasionally leaked due to the asynchronous thread abort.</source>
          <target state="translated">Lorsque vous utilisez un <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> pour représenter des handles, le handle est parfois une fuite en raison de l’abandon de thread asynchrone.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>You will need a text file in the same folder as the compiled application.</source>
          <target state="translated">Vous devez un fichier texte dans le même dossier que l’application compilée.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Assuming that you name the application "HexViewer", the command line usage is:</source>
          <target state="translated">En supposant que vous nommez l’application « HexViewer », l’utilisation de la ligne de commande est :</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Optionally specify <ph id="ph1">`-Fault`</ph> to intentionally attempt to leak the handle by aborting the thread in a certain window.</source>
          <target state="translated">Si vous le souhaitez spécifier <ph id="ph1">`-Fault`</ph> pour tenter une fuite du handle en abandonnant le thread dans une certaine fenêtre.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Use the Windows Perform.exe tool to monitor handle counts while injecting faults.</source>
          <target state="translated">Utilisez l’outil Windows Perform.exe pour surveiller le nombre de handles pendant l’injection d’erreurs.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>for full trust for inheritors.</source>
          <target state="translated">pour la confiance totale pour les héritiers de.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This member cannot be inherited by partially trusted code.</source>
          <target state="translated">Ce membre ne peut pas être hérité par du code partiellement fiable.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>To create a class derived from <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>, you must know how to create and free an operating system handle.</source>
          <target state="translated">Pour créer une classe dérivée de <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>, vous devez savoir comment créer et libérer un handle de système d’exploitation.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This process is different for different handle types because some use the <bpt id="p1">[</bpt>CloseHandle<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)</ept> function, while others use more specific functions such as <bpt id="p2">[</bpt>UnmapViewOfFile<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx)</ept> or <bpt id="p3">[</bpt>FindClose<ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx)</ept>.</source>
          <target state="translated">Ce processus est différent pour différents types de handles, car certains utilisent le <bpt id="p1">[</bpt>CloseHandle<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)</ept> de fonction, tandis que d’autres utilisent des fonctions plus spécifiques, telles que <bpt id="p2">[</bpt>UnmapViewOfFile<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx)</ept> ou <bpt id="p3">[</bpt>FindClose<ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx)</ept>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>For this reason, you must create a derived class of <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> for each operating system handle type that you want to wrap in a safe handle.</source>
          <target state="translated">Pour cette raison, vous devez créer une classe dérivée de <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> pour chaque type de handle de système d’exploitation que vous souhaitez inclure dans un wrapper dans un handle sécurisé.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" /&gt;</ph>.</source>
          <target state="translated">Lorsque vous héritez de <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>, vous devez substituer les membres suivants : <ph id="ph2">&lt;see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /&gt;</ph> et <ph id="ph3">&lt;see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>You should also provide a default constructor that calls the base constructor with a value that represent an invalid handle value, and a <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> value indicating whether the native handle is owned by the <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> and consequently should be freed when that <ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> has been disposed.</source>
          <target state="translated">Vous devez également fournir un constructeur par défaut qui appelle le constructeur de base avec une valeur qui représente une valeur de handle non valide, et un <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> valeur indiquant si le handle natif est détenu par le <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> et doit par conséquent être libéré lorsque qui <ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>The value of an invalid handle (usually 0 or -1).</source>
          <target state="translated">Valeur d'un handle non valide (généralement 0 ou -1).</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>Your implementation of <ph id="ph1">&lt;see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /&gt;</ph> should return <ph id="ph2">&lt;see langword="true" /&gt;</ph> for this value.</source>
          <target state="translated">Votre implémentation de <ph id="ph1">&lt;see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /&gt;</ph> doit retourner <ph id="ph2">&lt;see langword="true" /&gt;</ph> pour cette valeur.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to reliably let <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> release the handle during the finalization phase; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph> (not recommended).</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour laisser <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> libérer de manière fiable le handle pendant la phase de finalisation ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph> (déconseillé).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> class with the specified invalid handle value.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> avec la valeur de handle non valide spécifiée.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>If the <ph id="ph1">`ownsHandle`</ph> parameter is <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> is never called; thus, it is not recommended to use this parameter value as your code may leak resources.</source>
          <target state="translated">Si le <ph id="ph1">`ownsHandle`</ph> paramètre est <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> n’est jamais appelé ; par conséquent, il n’est pas recommandé d’utiliser cette valeur de paramètre que votre code peut entraîner une fuite de ressources.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>The derived class resides in an assembly without unmanaged code access permission.</source>
          <target state="translated">La classe dérivée réside dans un assembly sans autorisation d’accès au code non managé.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>for full trust for inheritors.</source>
          <target state="translated">pour la confiance totale pour les héritiers de.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>This member cannot be inherited by partially trusted code.</source>
          <target state="translated">Ce membre ne peut pas être hérité par du code partiellement fiable.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Marks the handle for releasing and freeing resources.</source>
          <target state="translated">Marque le handle pour libérer des ressources.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method allows the resources to be freed.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> méthode permet aux ressources d’être libérées.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>This might not happen immediately if other threads are using the same safe handle object, but will happen as soon as that is no longer the case.</source>
          <target state="translated">Cela ne se produit pas immédiatement si d’autres threads utilisent le même objet de handle sécurisé, mais aura lieu dès que ce n’est plus le cas.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Although most classes that use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</source>
          <target state="translated">Bien que la plupart des classes qui utilisent la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe n’avez pas besoin de fournir un finaliseur, il est parfois nécessaire (par exemple, pour vider les mémoires tampons de fichiers ou d’écrire des données en retour dans la mémoire).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>In this case, the class can provide a finalizer that is guaranteed to run before the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> critical finalizer runs.</source>
          <target state="translated">Dans ce cas, la classe peut fournir un finaliseur est garanti avant le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> finaliseur critique.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method when you are finished using the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> méthode lorsque vous avez terminé à l’aide de la <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Always call <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object.</source>
          <target state="translated">Appelez toujours <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> avant de libérer votre dernière référence à le <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object's <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> de l'objet <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the reference counter was successfully incremented; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'incrémentation du compteur de références a réussi ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>Manually increments the reference counter on <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> instances.</source>
          <target state="translated">Incrémente manuellement le compteur de références sur les instances de <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> method prevents the common language runtime from reclaiming memory used by a handle (which occurs when the runtime calls the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> method).</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> méthode empêche le common language runtime de récupérer la mémoire utilisée par un handle (ce qui se produit lorsque le runtime appelle la <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> méthode).</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>You can use this method to manually increment the reference count on a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> instance.</source>
          <target state="translated">Vous pouvez utiliser cette méthode pour incrémenter manuellement le décompte de références sur une <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> instance.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> returns a Boolean value using a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`success`</ph>) that indicates whether the reference count was incremented successfully.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> Retourne une valeur booléenne à l’aide un <ph id="ph2">`ref`</ph> paramètre (<ph id="ph3">`success`</ph>) qui indique si le décompte de références a été incrémenté avec succès.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>This allows your program logic to back out in case of failure.</source>
          <target state="translated">Ainsi, votre logique de programme revenir en arrière en cas d’échec.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>You should set <ph id="ph1">`success`</ph> to <ph id="ph2">`false`</ph> before calling <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>.</source>
          <target state="translated">Vous devez définir <ph id="ph1">`success`</ph> à <ph id="ph2">`false`</ph> avant d’appeler <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>If <ph id="ph1">`success`</ph> is <ph id="ph2">`true`</ph>, avoid resource leaks by matching the call to <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> with a corresponding call to <ph id="ph4">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph>.</source>
          <target state="translated">Si <ph id="ph1">`success`</ph> est <ph id="ph2">`true`</ph>, éviter les fuites de ressources en faisant correspondre l’appel à <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> avec un appel correspondant à <ph id="ph4">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>This method is intended for advanced users and must always be used carefully.</source>
          <target state="translated">Cette méthode est destinée aux utilisateurs expérimentés et doit toujours être utilisée avec précaution.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</source>
          <target state="translated">Pour éviter la fuite des ressources de handle, appelez toujours cette méthode à l’intérieur d’une région d’exécution limitée (CER), où un abandon de thread ne peut pas interrompre le traitement.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>Returns the value of the <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /&gt;</ph> field.</source>
          <target state="translated">Retourne la valeur du champ <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>An <ph id="ph1">&lt;see langword="IntPtr" /&gt;</ph> representing the value of the <ph id="ph2">&lt;see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /&gt;</ph> field.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="IntPtr" /&gt;</ph> représentant la valeur du champ <ph id="ph2">&lt;see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>If the handle has been marked invalid with <ph id="ph1">&lt;see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /&gt;</ph>, this method still returns the original handle value, which can be a stale value.</source>
          <target state="translated">Si le handle a été marqué comme étant non valide avec <ph id="ph1">&lt;see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /&gt;</ph>, cette méthode retourne quand même la valeur de handle d'origine, qui peut être une valeur périmée.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>You can use this method to retrieve the actual handle value from an instance of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> derived class.</source>
          <target state="translated">Vous pouvez utiliser cette méthode pour récupérer la valeur de handle réelle d’une instance de la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe dérivée.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>This method is needed for backwards compatibility because many properties in the .NET Framework return <ph id="ph1">`IntPtr`</ph> handle types.</source>
          <target state="translated">Cette méthode est nécessaire pour la compatibilité descendante, car le retournent de nombreuses propriétés dans le .NET Framework <ph id="ph1">`IntPtr`</ph> gèrent des types.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source><ph id="ph1">`IntPtr`</ph> handle types are platform-specific types used to represent a pointer or a handle.</source>
          <target state="translated"><ph id="ph1">`IntPtr`</ph> types de handle sont spécifiques à la plateforme utilisée pour représenter un pointeur ou un handle.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>Using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> method can pose security risks because, if the handle has been marked as invalid with <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> still returns the original, potentially stale handle value.</source>
          <target state="translated">À l’aide de la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> méthode peut présenter des risques de sécurité car, si le handle a été marqué comme non valide avec <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> retourne toujours la valeur de handle d’origine potentiellement périmée.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>The returned handle can also be recycled at any point.</source>
          <target state="translated">Le handle retourné peut également être recyclé à tout moment.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>At best, this means the handle might suddenly stop working.</source>
          <target state="translated">Au mieux, cela signifie que le handle peut cesser de travailler soudainement.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>At worst, if the handle or the resource that the handle represents is exposed to untrusted code, this can lead to a recycling security attack on the reused or returned handle.</source>
          <target state="translated">Au pire des cas, si le handle ou la ressource qu’il représente est exposée au code non fiable, cela peut entraîner une attaque de sécurité de recyclage sur le handle réutilisé ou retourné.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>For example, an untrusted caller can query data on the handle just returned and receive information for an entirely unrelated resource.</source>
          <target state="translated">Par exemple, un appelant non fiable peut interroger des données sur le handle simplement retournées et recevoir des informations pour une ressource non connexe.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>See the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> methods for more information about using the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> methodsafely.</source>
          <target state="translated">Consultez le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> méthodes pour plus d’informations sur l’utilisation de la <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> méthode de manière sûre.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>Manually decrements the reference counter on a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> instance.</source>
          <target state="translated">Décrémente manuellement le compteur de références sur une instance de <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> method is the counterpart to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> méthode est l’équivalent de <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>You should always match a call to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> method with a successful call to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>.</source>
          <target state="translated">Vous devez toujours faire correspondre un appel à la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> méthode avec un appel réussi à <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>This method is intended for advanced users and must always be used carefully.</source>
          <target state="translated">Cette méthode est destinée aux utilisateurs expérimentés et doit toujours être utilisée avec précaution.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</source>
          <target state="translated">Pour éviter la fuite des ressources de handle, appelez toujours cette méthode à l’intérieur d’une région d’exécution limitée (CER), où un abandon de thread ne peut pas interrompre le traitement.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>In the same way that unmatched <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> calls can cause resource leaks, unmatched <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> calls can cause invalid handle states to become visible to other threads.</source>
          <target state="translated">Dans la même façon que non appariées <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> appels peuvent provoquer des fuites de ressources, sans correspondance <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> appels peuvent rendre les États de handle non valide à deviennent accessibles à d’autres threads.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>Do not expose <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> calls to untrusted code.</source>
          <target state="translated">N’exposez pas <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> les appels au code non fiable.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> class.</source>
          <target state="translated">Libère les ressources utilisées par la classe <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> class.</source>
          <target state="translated">Libère toutes les ressources utilisées par la classe <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method allows the resources to be freed.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> méthode permet aux ressources d’être libérées.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>This might not happen immediately if other threads are using the same instance of the safe handle, but will happen as soon as that is no longer the case.</source>
          <target state="translated">Cela ne se produit pas immédiatement si d’autres threads utilisent la même instance du handle sécurisé, mais aura lieu dès que ce n’est plus le cas.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Although most classes using <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</source>
          <target state="translated">Bien que la plupart des classes à l’aide de <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> n’avez pas besoin de fournir un finaliseur, il est parfois nécessaire (par exemple, pour nettoyer des mémoires tampons de fichiers ou pour écrire des données en mémoire).</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>In this case, they can provide a finalizer that is guaranteed to run before the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> critical finalizer runs.</source>
          <target state="translated">Dans ce cas, ils peuvent fournir un finaliseur est assuré à exécuter avant le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> finaliseur critique.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method when you are finished using the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> méthode lorsque vous avez terminé à l’aide de la <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object in an unusable state.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> méthode laisse le <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objet dans un état inutilisable.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Always call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method before you release your last reference to the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object.</source>
          <target state="translated">Appelez toujours la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> méthode avant de libérer votre dernière référence à le <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object's <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> de l'objet <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> for a normal dispose operation; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to finalize the handle.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour une opération de suppression normale ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour finaliser le handle.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> class specifying whether to perform a normal dispose operation.</source>
          <target state="translated">Libère les ressources non managées utilisées par la classe <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>, en spécifiant s'il faut exécuter une opération de suppression normale.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>You should never explicitly call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method with the <ph id="ph2">`disposing`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Vous devez jamais appeler explicitement la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> méthode avec la <ph id="ph2">`disposing`</ph> paramètre la valeur <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>Frees all resources associated with the handle.</source>
          <target state="translated">Libère toutes les ressources associées au handle.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph> method is the destructor for the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph> (méthode) est le destructeur de la <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>Application code should not call this method directly.</source>
          <target state="translated">Code d’application ne doit pas appeler cette méthode directement.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.SafeHandle.handle">
          <source>Specifies the handle to be wrapped.</source>
          <target state="translated">Spécifie le handle à encapsuler.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.SafeHandle.handle">
          <source>Do not expose the handle publicly (that is, outside of the derived class).</source>
          <target state="translated">Ne pas exposer le handle publiquement (autrement dit, en dehors de la classe dérivée).</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>Gets a value indicating whether the handle is closed.</source>
          <target state="translated">Obtient une valeur indiquant si le handle est fermé.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is closed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le handle est fermé ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph> method returns a value indicating whether the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object's handle is no longer associated with a native resource.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph> méthode retourne une valeur indiquant si le <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> handle de l’objet n’est plus associé à une ressource native.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>This differs from the definition of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property, which computes whether a given handle is always considered invalid.</source>
          <target state="translated">Cela diffère de la définition de la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> propriété, qui calcule si un handle donné est toujours considéré comme non valide.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph> method returns a <ph id="ph2">`true`</ph> value in the following cases:</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph> méthode retourne un <ph id="ph2">`true`</ph> valeur dans les cas suivants :</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph> method was called.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph> méthode a été appelée.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> method was called and there are no references to the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object on other threads.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> méthode ou <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> méthode a été appelée et il n’existe aucune référence à la <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objet sur d’autres threads.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, obtient une valeur indiquant si la valeur du handle n'est pas valide.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle value is invalid; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la valeur du handle n'est pas valide, sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Derived classes must implement the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property so that the common language runtime can determine whether critical finalization is required.</source>
          <target state="translated">Classes dérivées doivent implémenter le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> propriété afin que le common language runtime peut déterminer si la finalisation critique est requise.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid).</source>
          <target state="translated">Classes dérivées doivent fournir une implémentation adaptée au type général de handle qu’ils prennent en charge (0 ou -1 n’est pas valide).</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>These classes can then be further derived for specific safe handle types.</source>
          <target state="translated">Ces classes peuvent ensuite être dérivées davantage pour les types de handles sécurisés spécifiques.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph> property, which reports whether the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object has finished using the underlying handle, the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property calculates whether the given handle value is always considered invalid.</source>
          <target state="translated">Contrairement à la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph> propriété qui indique si le <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objet a fini d’utiliser le handle sous-jacent, la <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> propriété calcule si la valeur du handle donné est toujours considéré comme non valide.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property always returns the same value for any one handle value.</source>
          <target state="translated">Par conséquent, le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> propriété retourne toujours la même valeur pour toute valeur d’un handle.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>The following example checks if a file was opened successfully.</source>
          <target state="translated">L’exemple suivant vérifie si un fichier a été ouvert avec succès.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>When overridden in a derived class, executes the code required to free the handle.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, exécute le code nécessaire pour libérer le handle.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la libération du handle réussit ; sinon, dans le cas d’un échec catastrophique, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>In this case, it generates a <bpt id="p1">[</bpt>releaseHandleFailed<ept id="p1">](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)</ept> Managed Debugging Assistant.</source>
          <target state="translated">Dans ce cas, elle génère un Assistant Débogage managé <bpt id="p1">[</bpt>releaseHandleFailed<ept id="p1">](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)</ept>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> method is guaranteed to be called only once and only if the handle is valid as defined by the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> est garanti d’être appelée uniquement une fois et uniquement si le handle est valide tel que défini par la méthode le <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Implement this method in your <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> derived classes to execute any code that is required to free the handle.</source>
          <target state="translated">Implémentez cette méthode dans votre <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> les classes dérivées pour exécuter le code qui est nécessaire pour libérer le handle.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Because one of the functions of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> is to guarantee prevention of resource leaks, the code in your implementation of <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> must never fail.</source>
          <target state="translated">Étant donné que l’une des fonctions de <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> est de garantir la prévention des fuites de ressources, le code dans votre implémentation de <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> ne doit jamais échouer.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> after normal finalizers have been run for objects that were garbage collected at the same time.</source>
          <target state="translated">Le garbage collector appelle <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> après l’exécution des finaliseurs normales pour les objets qui ont été nettoyées en même temps.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>The garbage collector guarantees the resources to invoke this method and that the method will not be interrupted while it is in progress.</source>
          <target state="translated">Le garbage collector garantit les ressources pour appeler cette méthode et que la méthode ne sera pas interrompue pendant qu’il est en cours.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph).</source>
          <target state="translated">Cette méthode sera préparée comme une région d’exécution limitée (CER) au moment de la construction instance (ainsi que toutes les méthodes dans son graphique des appels pouvant être déterminé statiquement).</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> method.</source>
          <target state="translated">Bien que cela empêche les interruptions d’abandon de thread, vous devez toutefois faire attention de ne pas introduire de chemins d’accès d’erreur dans votre substituée <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>In particular, apply the <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</ph> attribute to any methods you call from <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>.</source>
          <target state="translated">En particulier, appliquez le <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</ph> toutes les méthodes que vous appelez à partir de l’attribut <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>In most cases this code should be:</source>
          <target state="translated">Dans la plupart des cas, ce code doit être :</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Additionally, for simple cleanup (for example, calling the Win32 API <ph id="ph1">`CloseHandle`</ph> on a file handle) you can check the return value for the single platform invoke call.</source>
          <target state="translated">En outre, pour le nettoyage simple (par exemple, en appelant l’API Win32 <ph id="ph1">`CloseHandle`</ph> sur un handle de fichier) vous pouvez vérifier la valeur de retour pour l’appel de la plate-forme unique.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail.</source>
          <target state="translated">Pour le nettoyage complexe, vous avez peut-être beaucoup de logique de programme et de nombreux appels de méthode, dont certains peuvent échouer.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>You must ensure that your program logic has fallback code for each of those cases.</source>
          <target state="translated">Vous devez vous assurer que votre logique de programme comporte du code de secours pour chacun de ces cas.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>If <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> returns <ph id="ph2">`false`</ph> for any reason, it generates a <bpt id="p1">[</bpt>releaseHandleFailed<ept id="p1">](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)</ept> Managed Debugging Assistant.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> retourne <ph id="ph2">`false`</ph> pour une raison quelconque, elle génère une <bpt id="p1">[</bpt>releaseHandleFailed<ept id="p1">](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)</ept> Assistant Débogage managé.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>This helps you detect cases where your attempt to release resources fails.</source>
          <target state="translated">Cela vous permet de détecter les cas où votre tentative de libération de ressources échoue.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>The following code example releases the handle and is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated">L’exemple de code suivant libère le handle et fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>The pre-existing handle to use.</source>
          <target state="translated">Handle préexistant à utiliser.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>Sets the handle to the specified pre-existing handle.</source>
          <target state="translated">Définit le handle au handle préexistant spécifié.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A&gt;</ph> method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling output handles in a structure.</source>
          <target state="translated">Utilisez la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A&gt;</ph> méthode uniquement si vous avez besoin prendre en charge un handle préexistant (par exemple, si le handle est retourné dans une structure), car l’infrastructure .NET Framework COM interop ne prend pas en charge le marshaling de handles de sortie dans une structure.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Marks a handle as no longer used.</source>
          <target state="translated">Marque un handle comme n'étant plus utilisé.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph> method only when you know that your handle no longer references a resource.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph> méthode uniquement lorsque vous savez que votre handle ne référence plus une ressource.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Doing so does not change the value of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.handle&gt;</ph> field; it only marks the handle as closed.</source>
          <target state="translated">Cette opération ne modifie pas la valeur de la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.handle&gt;</ph> champ ; uniquement, il marque le handle comme étant fermé.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>The handle might then contain a potentially stale value.</source>
          <target state="translated">Le handle peut alors contenir une valeur potentiellement périmée.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>The effect of this call is that no attempt is made to free the resources.</source>
          <target state="translated">L’effet de cet appel est qu’aucune tentative est effectuée pour libérer les ressources.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>As with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A&gt;</ph> method, use <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph> only if you need to support a pre-existing handle.</source>
          <target state="translated">Comme avec la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A&gt;</ph> méthode, utilisez <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph> uniquement si vous avez besoin prendre en charge un handle préexistant.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">pour l’autorisation d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>