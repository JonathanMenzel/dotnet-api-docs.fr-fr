<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="GCHandle.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5946c1ad89f5a538ac3d94bc1906117001ed964b3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">946c1ad89f5a538ac3d94bc1906117001ed964b3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Provides a way to access a managed object from unmanaged memory.</source>
          <target state="translated">Fournit un moyen d'accéder à un objet managé à partir d'une mémoire non managée.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> structure is used with the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandleType&gt;</ph> enumeration to create a handle corresponding to any managed object.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> structure est utilisée avec la <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandleType&gt;</ph> énumération pour créer un handle correspondant à n’importe quel objet managé.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>This handle can be one of four types: <ph id="ph1">`Weak`</ph>, <ph id="ph2">`WeakTrackResurrection`</ph>, <ph id="ph3">`Normal`</ph>, or <ph id="ph4">`Pinned`</ph>.</source>
          <target state="translated">Ce handle peut être un des quatre types : <ph id="ph1">`Weak`</ph>, <ph id="ph2">`WeakTrackResurrection`</ph>, <ph id="ph3">`Normal`</ph>, ou <ph id="ph4">`Pinned`</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>When the handle has been allocated, you can use it to prevent the managed object from being collected by the garbage collector when an unmanaged client holds the only reference.</source>
          <target state="translated">Lorsque le handle a été alloué, vous pouvez l’utiliser pour empêcher l’objet managé d’être collecté par le garbage collector lorsqu’un client non managé détient la seule référence.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Without such a handle, the object can be collected by the garbage collector before completing its work on behalf of the unmanaged client.</source>
          <target state="translated">Sans un tel handle, l’objet peut être collecté par le garbage collector avant la fin de son travail au nom du client non managé.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>You can also use <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> to create a pinned object that returns a memory address to prevent the garbage collector from moving the object in memory.</source>
          <target state="translated">Vous pouvez également utiliser <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> pour créer un objet épinglé qui retourne une adresse mémoire pour empêcher le garbage collector de placer l’objet en mémoire.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>When the handle goes out of scope you must explicitly release it by calling the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> method; otherwise, memory leaks may occur.</source>
          <target state="translated">Lorsque le handle est hors de portée, vous devez le libérer explicitement en appelant le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> méthode ; sinon, mémoire fuites peuvent se produire.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>When you free a pinned handle, the associated object will be unpinned and will become eligible for garbage collection, if there are no other references to it.</source>
          <target state="translated">Lorsque vous libérez un handle épinglé, l’objet associé est libéré et deviennent éligible pour le garbage collection, s’il en existe aucune autre référence à celle-ci.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">L’exemple suivant montre une <ph id="ph1">`App`</ph> classe qui crée un handle vers un objet managé à l’aide de la <ph id="ph2">`GCHandle.Alloc`</ph> (méthode), ce qui empêche l’objet managé d’être collecté.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">Un appel à la <ph id="ph1">`EnumWindows`</ph> méthode passe un délégué et un objet managé (tous deux déclarés comme types managés, mais ne pas indiqué) et effectue un cast du handle vers un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La fonction non managée passe le type à l’appelant en tant que paramètre de la fonction de rappel.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>Retrieves the address of an object in a <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph> handle.</source>
          <target state="translated">Récupère l'adresse d'un objet dans un handle <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>The address of the pinned object as an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">Adresse de l’objet épinglé en tant que <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>This method is used to get a stable pointer to the object.</source>
          <target state="translated">Cette méthode est utilisée pour obtenir un pointeur stable vers l’objet.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>Pinning an object prevents the garbage collector from moving it around in memory, thereby reducing the efficiency of the garbage collector.</source>
          <target state="translated">L’épinglage d’un objet empêche le déplacement dans la mémoire, ce qui réduit l’efficacité du garbage collector le garbage collector.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>The handle is any type other than <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph>.</source>
          <target state="translated">Le handle est d'un type autre que <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Allocates a handle for the specified object.</source>
          <target state="translated">Alloue un handle pour l'objet spécifié.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>The object that uses the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</source>
          <target state="translated">Objet qui utilise <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>Allocates a <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /&gt;</ph> handle for the specified object.</source>
          <target state="translated">Alloue un handle <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /&gt;</ph> pour l'objet spécifié.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> that protects the object from garbage collection.</source>
          <target state="translated">Nouveau <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> qui protège l'objet contre une opération garbage collection.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> must be released with <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> when it is no longer needed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> doit être libéré avec <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> quand il n'est plus nécessaire.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Normal&gt;</ph> handles are opaque, which means that you cannot resolve the address of the object it contains through the handle.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Normal&gt;</ph> poignées sont opaques, ce qui signifie que vous ne peut pas résoudre l’adresse de l’objet qu’il contient via le handle.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">L’exemple suivant montre une <ph id="ph1">`App`</ph> classe qui crée un handle vers un objet managé à l’aide de la <ph id="ph2">`GCHandle.Alloc`</ph> (méthode), ce qui empêche l’objet managé d’être collecté.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">Un appel à la <ph id="ph1">`EnumWindows`</ph> méthode passe un délégué et un objet managé (tous deux déclarés comme types managés, mais ne pas indiqué) et effectue un cast du handle vers un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La fonction non managée passe le type à l’appelant en tant que paramètre de la fonction de rappel.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>An instance with nonprimitive (non-blittable) members cannot be pinned.</source>
          <target state="translated">Une instance avec des membres non primitifs (non blittables) ne peut pas être épinglée.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>The object that uses the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</source>
          <target state="translated">Objet qui utilise <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandleType" /&gt;</ph> values, indicating the type of <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> to create.</source>
          <target state="translated">Une des valeurs de <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandleType" /&gt;</ph>, précisant le type de <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> à créer.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>Allocates a handle of the specified type for the specified object.</source>
          <target state="translated">Alloue un handle du type spécifié pour l'objet spécifié.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> of the specified type.</source>
          <target state="translated">Nouveau <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> du type spécifié.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> must be released with <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> when it is no longer needed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> doit être libéré avec <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> quand il n'est plus nécessaire.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>An instance with nonprimitive (non-blittable) members cannot be pinned.</source>
          <target state="translated">Une instance avec des membres non primitifs (non blittables) ne peut pas être épinglée.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> à comparer à l’objet <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object is equal to the current <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Détermine si l'objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> spécifié est égal à l'objet <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> en cours.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object is equal to the current <ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'objet <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> spécifié est égal à l'objet <ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> en cours ; sinon <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source>Two <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> objects are equal if they point to the same memory handle.</source>
          <target state="translated">Deux <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> objets sont égales si elles pointent vers le même handle de mémoire.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>Releases a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</source>
          <target state="translated">Libère un <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The caller must ensure that for a given handle, <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> is called only once.</source>
          <target state="translated">L’appelant doit s’assurer que pour un handle donné, <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> est appelée une seule fois.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">L’exemple suivant montre une <ph id="ph1">`App`</ph> classe qui crée un handle vers un objet managé à l’aide de la <ph id="ph2">`GCHandle.Alloc`</ph> (méthode), ce qui empêche l’objet managé d’être collecté.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">Un appel à la <ph id="ph1">`EnumWindows`</ph> méthode passe un délégué et un objet managé (tous deux déclarés comme types managés, mais ne pas indiqué) et effectue un cast du handle vers un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La fonction non managée passe le type à l’appelant en tant que paramètre de la fonction de rappel.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The handle was freed or never initialized.</source>
          <target state="translated">Le handle a été libéré ou n'a jamais été initialisé.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> handle to a managed object to create a <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object from.</source>
          <target state="translated">Handle <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> d'objet managé à partir duquel créer un objet <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object created from a handle to a managed object.</source>
          <target state="translated">Retourne un nouvel objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> créé à partir d'un handle d'objet managé.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object that corresponds to the value parameter.</source>
          <target state="translated">Nouvel objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> qui correspond au paramètre de valeur.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>The following code example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">Le code suivant montre d’exemple un <ph id="ph1">`App`</ph> classe qui crée un handle vers un objet managé à l’aide la <ph id="ph2">`GCHandle.Alloc`</ph> (méthode), ce qui empêche l’objet managé d’être collecté.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> object.</source>
          <target state="translated">Un appel à la <ph id="ph1">`EnumWindows`</ph> méthode passe un délégué et un objet managé (tous deux déclarés comme types managés, mais ne pas indiqué) et effectue un cast du handle vers un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La fonction non managée passe le type à l’appelant en tant que paramètre de la fonction de rappel.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>The value of the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter is <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</source>
          <target state="translated">La valeur du paramètre <ph id="ph1">&lt;paramref name="value" /&gt;</ph> est <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
          <source>Returns an identifier for the current <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Retourne un identificateur pour l'objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
          <source>An identifier for the current <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Identificateur pour l'objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.GetHashCode%2A&gt;</ph> method returns an integer representation of the internal memory handle encapsulated by the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> structure.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.GetHashCode%2A&gt;</ph> méthode retourne une représentation entière du handle de mémoire interne encapsulé par le <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> structure.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>Gets a value indicating whether the handle is allocated.</source>
          <target state="translated">Obtient une valeur indiquant si le handle est alloué.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is allocated; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le handle est alloué ; sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>Use this property when using <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> handles to determine if the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> is still available.</source>
          <target state="translated">Utilisez cette propriété lorsque vous utilisez <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> descripteurs pour déterminer si le <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> est toujours disponible.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>When the garbage collector collects the object, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> handle can still be resurrected in the finalizer.</source>
          <target state="translated">Quand le garbage collector collecte l’objet, le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> handle peut encore être réactivé dans le finaliseur.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>In that case, the handle is not allocated (it is lost when the garbage collector attempts to collect the object), even though the target object is valid.</source>
          <target state="translated">Dans ce cas, le handle n’est pas alloué (il est perdu lorsque le garbage collector tente de collecter l’objet), même si l’objet cible est valide.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> à comparer au paramètre <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> à comparer au paramètre <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>Returns a value indicating whether two <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> objects are equal.</source>
          <target state="translated">Retourne une valeur indiquant si deux objets <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> sont égaux.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="a" /&gt;</ph> and <ph id="ph3">&lt;paramref name="b" /&gt;</ph> parameters are equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les paramètres <ph id="ph2">&lt;paramref name="a" /&gt;</ph> et <ph id="ph3">&lt;paramref name="b" /&gt;</ph> sont égaux ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">La méthode équivalente pour cet opérateur est <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Converts the value of a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to another type.</source>
          <target state="translated">Convertit la valeur d'un objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> en un autre type.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that indicates the handle for which the conversion is required.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> qui indique le handle pour lequel la conversion est requise.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> is stored using an internal integer representation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> est stocké en utilisant une représentation sous forme d'entier interne.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>The stored <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object using an internal integer representation.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> stocké en utilisant une représentation sous forme d'entier interne.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>This method allows you to retrieve a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> from an integer value.</source>
          <target state="translated">Cette méthode vous permet de récupérer un <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> à partir d’une valeur entière.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> for which the integer is required.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> pour lequel l'entier est requis.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> is stored using an internal integer representation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> est stocké en utilisant une représentation sous forme d'entier interne.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>The integer value.</source>
          <target state="translated">Valeur entière.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>This method can be used to retrieve the integer value from a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>.</source>
          <target state="translated">Cette méthode peut être utilisée pour récupérer la valeur entière dans un <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> à comparer au paramètre <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> à comparer au paramètre <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>Returns a value indicating whether two <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Retourne une valeur indiquant si deux objets <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> sont égaux.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="a" /&gt;</ph> and <ph id="ph3">&lt;paramref name="b" /&gt;</ph> parameters are not equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les paramètres <ph id="ph2">&lt;paramref name="a" /&gt;</ph> et <ph id="ph3">&lt;paramref name="b" /&gt;</ph> ne sont pas égaux ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">La méthode équivalente pour cet opérateur est <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>Gets or sets the object this handle represents.</source>
          <target state="translated">Obtient ou définit l'objet représenté par le handle.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The object this handle represents.</source>
          <target state="translated">Objet représenté par le handle.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">L’exemple suivant montre une <ph id="ph1">`App`</ph> classe qui crée un handle vers un objet managé à l’aide de la <ph id="ph2">`GCHandle.Alloc`</ph> (méthode), ce qui empêche l’objet managé d’être collecté.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">Un appel à la <ph id="ph1">`EnumWindows`</ph> méthode passe un délégué et un objet managé (tous deux déclarés comme types managés, mais ne pas indiqué) et effectue un cast du handle vers un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La fonction non managée passe le type à l’appelant en tant que paramètre de la fonction de rappel.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The handle was freed, or never initialized.</source>
          <target state="translated">Le handle a été libéré ou n'a jamais été initialisé.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to retrieve an internal integer representation from.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> duquel récupérer une représentation interne sous forme d'entier.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>Returns the internal integer representation of a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Retourne la représentation interne sous forme d'entier d'un objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object that represents a <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> qui représente un objet <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>The following code example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">Le code suivant montre d’exemple un <ph id="ph1">`App`</ph> classe qui crée un handle vers un objet managé à l’aide la <ph id="ph2">`GCHandle.Alloc`</ph> (méthode), ce qui empêche l’objet managé d’être collecté.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> object.</source>
          <target state="translated">Un appel à la <ph id="ph1">`EnumWindows`</ph> méthode passe un délégué et un objet managé (tous deux déclarés comme types managés, mais ne pas indiqué) et effectue un cast du handle vers un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La fonction non managée passe le type à l’appelant en tant que paramètre de la fonction de rappel.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>