<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c013f727d35629f5f33cae31ca99e26047e93da" />
    <Meta Name="ms.sourcegitcommit" Value="6f3d3181d9ca22a1ab46a7f61f3ee152f2b844ea" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/27/2018" />
    <Meta Name="ms.locfileid" Value="50174556" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Vous permet de contrôler la disposition physique des champs de données d'une classe ou d'une structure en mémoire.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez appliquer cet attribut aux classes ou structures.  
  
 Le common language runtime contrôle la disposition physique des champs de données d’une classe ou structure dans la mémoire managée. Toutefois, si vous souhaitez transmettre le type au code non managé, vous pouvez utiliser le <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribut pour contrôler la disposition non managée du type. Utiliser l’attribut avec <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> pour contraindre les membres à être disposés séquentiellement dans l’ordre d’apparition. Pour les types blittables, <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> contrôle la disposition dans la mémoire managée et la disposition en mémoire non managée. Pour les types non blittables, qu’il contrôle la mise en page lors de la classe ou structure est marshalé en code non managé, mais ne contrôle pas la mise en page dans la mémoire managée. Utiliser l’attribut avec <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> pour contrôler la position précise de chaque membre de données. Cela affecte la disposition à la fois managée et, pour les types blittables et non blittables. À l’aide de <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> exige que vous utilisiez le <xref:System.Runtime.InteropServices.FieldOffsetAttribute> attribut pour indiquer la position de chaque champ dans le type.  
  
 Les compilateurs c#, Visual Basic et C++ appliquent la <xref:System.Runtime.InteropServices.LayoutKind.Sequential> valeur disposition aux structures par défaut. Pour les classes, vous devez appliquer le <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> explicitement. Le [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) s’applique également la <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribut ; il s’applique toujours le <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> lorsqu’il importe une bibliothèque de types de valeur.  
  
   
  
## Examples  
 L’exemple suivant illustre une déclaration managée de la `GetSystemTime` de fonction et définit `MySystemTime` classe avec <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> mise en page. `GetSystemTime` Obtient l’heure système et l’imprime sur la console.  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (Type Library Importer)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Entier 16 bits qui représente l'une des valeurs de <see cref="T:System.Runtime.InteropServices.LayoutKind" /> spécifiant le mode de disposition de la classe ou de la structure.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.LayoutKind" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur prend un entier 16 bits sous-jacent qui représente chaque <xref:System.Runtime.InteropServices.LayoutKind> membre d’énumération. Le [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) utilise ce constructeur.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (Type Library Importer)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">L'une des valeurs d'énumération qui spécifie le mode de disposition de la classe ou de la structure.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.LayoutKind" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour du code lisible qui est moins sujette aux erreurs, utilisez toujours ce constructeur.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique si les champs de données de type chaîne de la classe doivent être marshalés en tant que <see langword="LPWSTR" /> ou <see langword="LPSTR" /> par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le `CharSet` champ est défini sur <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, tous les arguments de chaîne sont convertis en caractères Unicode (`LPWSTR`) avant d’être passés à l’implémentation non managée. Si le champ est défini sur <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, les chaînes sont converties en chaînes ANSI (`LPSTR`). Si le `CharSet` champ est défini sur <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, la conversion est dépendante de la plateforme (ANSI sous Windows 98 et Windows Me et Unicode sur les versions ultérieures).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contrôle l'alignement des champs de données d'une classe ou d'une structure en mémoire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> champ contrôle l’alignement des champs d’un type dans la mémoire.  Il s’applique aux deux <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> et <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>. Par défaut, la valeur est 0, ce qui indique la taille pour la plateforme actuelle de compression par défaut. La valeur de <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> doit être 0, 1, 2, 4, 8, 16, 32, 64 ou 128 :  
  
 Les champs d’une instance de type sont alignés en utilisant les règles suivantes :  
  
-   L’alignement du type est la taille de son élément le plus grand (1, 2, 4, 8, octets, etc.) ou la compression spécifiée de taille, plus petite étant retenue.  
  
-   Chaque champ doit être alignées avec des champs de sa propre taille (1, 2, 4, 8, octets, etc.) ou l’alignement du type, plus petite étant retenue.  Étant donné que l’alignement par défaut du type est la taille de son élément le plus grand, qui est supérieur ou égal à tous les autres longueurs de champ, cela signifie généralement que les champs sont alignées en fonction de leur taille. Par exemple, même si le champ plus grand dans un type est un entier 64 bits en (8 octets) ou le champ Pack est définie sur 8, <xref:System.Byte> champs alignent sur les limites de 1 octet, <xref:System.Int16> champs alignent sur les limites de 2 octets, et <xref:System.Int32> champs s’alignent sur les limites de 4 octets.  
  
-   Marge intérieure est ajouté entre les champs de satisfaire les exigences d’alignement.  
  
 Par exemple, considérez la structure suivante, qui se compose de deux <xref:System.Byte> champs et l’autre <xref:System.Int32> champ, lorsqu’il est utilisé avec différentes valeurs pour le <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> champ.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  Pour compiler correctement les exemples c#, vous devez spécifier le `/unsafe` commutateur de compilateur.  
  
 Si vous spécifiez la taille de compression par défaut, la taille de la structure est de 8 octets. Les deux octets occupent les deux premiers octets de mémoire, étant donné que les octets doivent être alignées sur des limites de 1 octet. Étant donné que l’alignement par défaut du type est de 4 octets, qui est la taille de ses champs plus grands, `i3`, il y a deux octets de remplissage, suivi par le champ entier.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> est défini sur 2, la taille de la structure est de 6 octets. Comme avant, les deux octets occupent les deux premiers octets de mémoire. Champs s’alignent désormais sur les limites de 2 octets, étant donné sans marge intérieure entre le deuxième octet et le nombre entier.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> est défini à 4, la taille de la structure est le même que dans le cas par défaut, où les alignement du type a été défini par la taille de son plus grand champ, `i3`, qui est de 4.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> est définie sur 8, la taille de la structure demeure identique à celle de la valeur par défaut le cas, étant donné que le `i3` aligne le champ sur une limite de 4 octets, qui est inférieure à la limite de 8 octets spécifiée par le champ de Pack.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 Pour prendre un autre exemple, considérez la structure suivante, qui se compose de champs de deux octets, un champ d’un entier signé 32 bits, un tableau d’octets à élément unique et une valeur décimale. Avec la taille de compression par défaut, la taille de la structure est 28 octets. Les deux octets occupent les deux premiers octets de mémoire, suivie de deux octets de remplissage, suivie de l’entier. Voici le tableau sur un octet, suivi de trois octets de remplissage. Enfin, le <xref:System.Decimal> aligne le champ, d5, sur une limite de 4 octets, car une valeur décimale se compose de quatre <xref:System.Int32> champs, afin de son alignement est basé sur la taille du plus grand de ses champs plutôt que sur la taille de la <xref:System.Decimal> structure dans sa globalité.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> est défini sur 2, la taille de la structure est 24 octets. Par rapport à l’alignement par défaut, les deux octets de remplissage entre les deux octets et l’entier ont été supprimés, car alignement du type est désormais 4 plutôt que 2. Et les trois octets de remplissage après `a4` ont été remplacés par un seul octet de remplissage, étant donné que `d5` maintenant s’aligne sur une limite de 2 octets plutôt que sur une limite de 4 octets.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> est défini sur 8, la taille de la structure est la même que dans le cas par défaut, toutes les exigences d’alignement dans cette structure étant inférieur à 8.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 Le <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> champ est fréquemment utilisé lorsque les structures sont exportées pendant disque et réseau les opérations d’écriture. Le champ est également souvent utilisé au cours de la plateforme appeler et les opérations interop.  
  
 Parfois, le champ est utilisé pour réduire les besoins en mémoire en produisant une taille de compactage plus étroite. Toutefois, cette utilisation nécessite une attention particulière des contraintes de la configuration matérielle proprement dite et peut dégrader les performances.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique la taille absolue de la classe ou la structure.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce champ doit être égal ou supérieur à la taille totale, en octets, des membres de la classe ou structure. Ce champ est principalement destiné aux writers de compilateur qui souhaitent étendre la mémoire occupée par une structure pour l’accès direct et non managé. Par exemple, vous pouvez utiliser ce champ lorsque vous travaillez avec des unions qui ne sont pas représentées directement dans les métadonnées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur <see cref="T:System.Runtime.InteropServices.LayoutKind" /> qui spécifie la façon dont la classe ou la structure est disposée.</summary>
        <value>L'une des valeurs d'énumération qui spécifie le mode de disposition de la classe ou de la structure.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>