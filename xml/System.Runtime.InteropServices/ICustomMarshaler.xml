<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b7f092c326960741597c424fa1d78d6a1e6ffcd" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48754966" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des wrappers personnalisés permettant de gérer les appels de méthodes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un marshaleur fournit un pont entre les fonctionnalités de l’ancienne et les nouvelles interfaces. Marshaling personnalisé offre les avantages suivants :  
  
-   Il permet aux applications de client qui ont été conçues pour fonctionner avec une interface ancienne également travailler avec des serveurs qui implémentent une nouvelle interface.  
  
-   Il permet aux applications de client conçues pour fonctionner avec une nouvelle interface travailler avec des serveurs qui implémentent une interface ancienne.  
  
 Si vous avez une interface qui introduit un comportement de marshaling différent ou qui est exposé à l’objet COM (Component Model) d’une façon différente, vous pouvez concevoir un marshaleur personnalisé au lieu d’utiliser le marshaleur d’interopérabilité. En utilisant un marshaleur personnalisé, vous pouvez réduire la distinction entre les nouveaux composants de .NET Framework et les composants COM existants.  
  
 Par exemple, supposons que vous développiez une interface managée appelée `INew`. Lorsque cette interface est exposée à COM via un standard callable wrapper CCW (COM), il a les mêmes méthodes que l’interface managée et utilise les règles de marshaling intégrées au marshaleur d’interopérabilité. Supposons maintenant qu’une interface COM connue appelée `IOld` fournit déjà les mêmes fonctionnalités que le `INew` interface. En concevant un marshaleur personnalisé, vous pouvez fournir une implémentation non managée de `IOld` qui délègue simplement les appels à l’implémentation managée de le `INew` interface. Par conséquent, le marshaleur personnalisé agit comme un pont entre les interfaces managées et non managées.  
  
> [!NOTE]
>  Marshaleurs personnalisés ne sont pas appelés lors de l’appel du code managé au code non managé sur une interface de dispatch uniquement.  
  
## <a name="defining-the-marshaling-type"></a>Définition du type de marshaling  
 Avant de pouvoir créer un marshaleur personnalisé, vous devez définir les interfaces managées et non managées qui doivent être marshalées. Ces interfaces couramment exécutent la même fonction, mais sont exposées différemment aux objets managés et non managés.  
  
 Un compilateur managé produit une interface managée à partir des métadonnées, et l’interface obtenue ressemble à n’importe quel autre interface managée. L’exemple suivant montre une interface de type.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 Vous définissez le type non managé en langage IDL (Interface Definition) et compilez avec le compilateur Microsoft Interface Definition Language (MIDL). Vous définissez l’interface dans une instruction de bibliothèque et affectez un ID d’interface avec l’attribut d’identificateur unique universel (UUID), comme le montre l’exemple suivant.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 Le compilateur MIDL génère plusieurs fichiers de sortie. Si l’interface est définie dans Old.idl, le fichier de sortie Old_i.c définit un `const` variable avec l’identificateur d’interface (IID) de l’interface, comme le montre l’exemple suivant.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Le fichier Old.h est également généré par MIDL. Il contient une définition C++ de l’interface qui peut être inclus dans votre code source C++.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>Implémentation de l'interface ICustomMarshaler  
 Votre marshaleur personnalisé doit implémenter la <xref:System.Runtime.InteropServices.ICustomMarshaler> interface pour fournir les wrappers appropriés au runtime.  
  
 Le code c# suivant affiche l’interface de base qui doit être implémentée par tous les marshaleurs personnalisés.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 Le <xref:System.Runtime.InteropServices.ICustomMarshaler> interface inclut des méthodes qui fournissent la prise en charge de la conversion, prise en charge de nettoyage et informations sur les données doivent être marshalées.  
  
|Type d’opération|Méthode ICustomMarshaler|Description |  
|-----------------------|-----------------------------|-----------------|  
|Conversion (du code natif au code managé)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|Marshale un pointeur vers les données natives dans un objet managé. Cette méthode retourne un personnalisé pouvant être appelé wrapper RCW (runtime) qui peut marshaler l’interface non managée qui est passé en tant qu’argument. Le marshaleur doit retourner une instance du wrapper RCW personnalisé pour ce type.|  
|Conversion (à partir de code managé au mode natif)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|Marshale un objet managé dans un pointeur vers les données natives. Cette méthode retourne un personnalisé callable wrapper CCW (COM) qui peut marshaler l’interface managée est passée en tant qu’argument. Le marshaleur doit retourner une instance du wrapper CCW personnalisé pour ce type.|  
|Nettoyage (de code natif)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|Permet au marshaleur de nettoyer les données natives (CCW) qui sont retournées par la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> (méthode).|  
|Nettoyage (de code managé)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|Permet au marshaleur de nettoyer les données managées (RCW) sont retournées par la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> (méthode).|  
|Informations (à propos du code natif)|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|Retourne la taille des données non managées doivent être marshalées.|  
  
### <a name="conversion"></a>Conversion  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 Marshale un pointeur vers les données natives dans un objet managé. Cette méthode retourne un personnalisé pouvant être appelé wrapper RCW (runtime) qui peut marshaler l’interface non managée qui est passé en tant qu’argument. Le marshaleur doit retourner une instance du wrapper RCW personnalisé pour ce type.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 Marshale un objet managé dans un pointeur vers les données natives. Cette méthode retourne un personnalisé callable wrapper CCW (COM) qui peut marshaler l’interface managée est passée en tant qu’argument. Le marshaleur doit retourner une instance du wrapper CCW personnalisé pour ce type.  
  
### <a name="cleanup"></a>Nettoyage  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 Permet au marshaleur de nettoyer les données natives (CCW) qui sont retournées par la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> (méthode).  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 Permet au marshaleur de nettoyer les données managées (RCW) sont retournées par la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> (méthode).  
  
### <a name="size-information"></a>Informations sur la taille  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 Retourne la taille des données non managées doivent être marshalées.  
  
## <a name="implementing-the-getinstance-method"></a>Implémentation de la méthode GetInstance  
 En plus d’implémenter le <xref:System.Runtime.InteropServices.ICustomMarshaler> interface, marshaleurs personnalisés doivent implémenter une `static` méthode appelée `GetInstance` qui accepte un <xref:System.String> en tant que paramètre et a un type de retour <xref:System.Runtime.InteropServices.ICustomMarshaler>. Cela `static` méthode est appelée par la couche d’interopérabilité COM du common language runtime pour instancier une instance du marshaleur personnalisé. La chaîne est passée à `GetInstance` est un cookie que la méthode peut utiliser pour personnaliser le marshaleur personnalisé retourné.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>Application de MarshalAsAttribute  
 Pour utiliser un marshaleur personnalisé, vous devez appliquer le <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribut au paramètre ou champ qui est marshalé.  
  
 Vous devez également passer le <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> valeur d’énumération à la <xref:System.Runtime.InteropServices.MarshalAsAttribute> constructeur. En outre, vous devez spécifier le <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> champ avec l’un des paramètres nommés suivants :  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (obligatoire) : le nom qualifié d’assembly du marshaleur personnalisé. Le nom doit inclure l’espace de noms et la classe de marshaleur personnalisé. Si le marshaleur personnalisé n’est pas défini dans l’assembly, dans qu'il est utilisé, vous devez spécifier le nom de l’assembly dans lequel elle est définie.  
  
    > [!NOTE]
    >  Vous pouvez utiliser la <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> champ au lieu du <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> champ. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> prend un type qui est plus facile à spécifier.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (facultatif) : un cookie est passé au marshaleur personnalisé. Vous pouvez utiliser le cookie pour fournir des informations supplémentaires au marshaleur. Par exemple, si le marshaleur même est utilisé pour fournir plusieurs wrappers, le cookie identifie un wrapper spécifique. Le cookie est passé à la `GetInstance` méthode du marshaleur.  
  
 Le <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribut identifie le marshaleur personnalisé afin qu’il puisse activer le wrapper approprié. Service d’interopérabilité du common language runtime examine l’attribut puis crée l’heure de la première de marshaleur personnalisé l’argument (paramètre ou champ) doit être marshalé.  
  
 Le runtime appelle ensuite la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> et <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> méthodes sur le marshaleur personnalisé pour activer le wrapper pour gérer l’appel.  
  
## <a name="using-a-custom-marshaler"></a>À l’aide d’un marshaleur personnalisé  
 Lorsque le marshaleur personnalisé est terminé, vous pouvez l’utiliser comme un wrapper personnalisé pour un type particulier. L’exemple suivant illustre la définition de la `IUserData` interface managée :  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 Dans l’exemple suivant, le `IUserData` utilise l’interface le `NewOldMarshaler` marshaleur personnalisé pour permettre aux applications clientes non managées passer un `IOld` interface pour le `DoSomeStuff` (méthode). La description managée de la `DoSomeStuff` méthode prend un `INew` interface, comme indiqué dans l’exemple précédent, alors que la version non managée de `DoSomeStuff` prend un `IOld` pointeur d’interface, comme indiqué dans l’exemple suivant.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 La bibliothèque de types générée par l’exportation de la définition managée de `IUserData` produit la définition non managée dans cet exemple, au lieu de la définition standard. Le <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribut appliqué à la `INew` argument dans la définition managée de la `DoSomeStuff` méthode indique que l’argument utilise un marshaleur personnalisé, comme le montre l’exemple suivant.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 Dans les exemples précédents, le premier paramètre fourni à la <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribut est la <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> valeur d’énumération `UnmanagedType.CustomMarshaler`.  
  
 Le deuxième paramètre est le <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> champ, qui fournit le nom qualifié d’assembly du marshaleur personnalisé. Ce nom est constitué de l’espace de noms et la classe de marshaleur personnalisé (`MarshalType="MyCompany.NewOldMarshaler"`).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Objet managé à détruire.</param>
        <summary>Effectue le nettoyage des données managées quand elles ne sont plus nécessaires.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Pointeur vers les données non managées à détruire.</param>
        <summary>Effectue le nettoyage des données non managées quand elles ne sont plus nécessaires.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne la taille des données natives à marshaler.</summary>
        <returns>Taille des données natives, en octets.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Objet managé à convertir.</param>
        <summary>Convertit les données managées en données non managées.</summary>
        <returns>Pointeur vers la vue COM de l'objet managé.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Pointeur vers les données non managées à encapsuler.</param>
        <summary>Convertit les données non managées en données managées.</summary>
        <returns>Objet qui représente la vue managée des données COM.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>