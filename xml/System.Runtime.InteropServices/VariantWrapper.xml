<Type Name="VariantWrapper" FullName="System.Runtime.InteropServices.VariantWrapper">
  <TypeSignature Language="C#" Value="public sealed class VariantWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit VariantWrapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.VariantWrapper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VariantWrapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class VariantWrapper sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3294c-101">Marshale des données de type <see langword="VT_VARIANT | VT_BYREF" /> de code managé en code non managé.</span><span class="sxs-lookup"><span data-stu-id="3294c-101">Marshals data of type <see langword="VT_VARIANT | VT_BYREF" /> from managed to unmanaged code.</span></span> <span data-ttu-id="3294c-102">Cette classe ne peut pas être héritée.</span><span class="sxs-lookup"><span data-stu-id="3294c-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3294c-103">L’objectif de <xref:System.Runtime.InteropServices.VariantWrapper> consiste à ajouter un niveau d’indirection lors du marshaling d’un type managé correspondant `VARIANT` type.</span><span class="sxs-lookup"><span data-stu-id="3294c-103">The purpose of <xref:System.Runtime.InteropServices.VariantWrapper> is to add one level of indirection when marshaling a managed type to the corresponding `VARIANT` type.</span></span>  
  
 <span data-ttu-id="3294c-104">Vous pouvez utiliser cette classe pour encapsuler un <xref:System.Object> que le marshaleur d’interopérabilité passe comme `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="3294c-104">You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span> <span data-ttu-id="3294c-105">Dans les versions 1.0 et 1.1 du .NET Framework, il n’était pas possible de marshaler des données variant de type `VT_VARIANT | VT_BYREF` au code non managé.</span><span class="sxs-lookup"><span data-stu-id="3294c-105">In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code.</span></span> <span data-ttu-id="3294c-106">Le marshaleur d’interopérabilité reçoit une variante du type managé (par exemple, `VT_BSTR | VT_BYREF` pour <xref:System.String>, ou `VT_I4 | VT_BYREF` pour <xref:System.Int32>), mais pas `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="3294c-106">The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`.</span></span>  
  
 <span data-ttu-id="3294c-107">L’un des avantages de l’utilisation de `VT_VARIANT | VT_BYREF` types variant est que le type de données peut être modifié durant un appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="3294c-107">One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call.</span></span> <span data-ttu-id="3294c-108">Par exemple, vous pouvez passer un `VT_VARIANT | VT_BYREF` type variant qui contient un `VT_BSTR` et obtenir une variante retournée qui contient un `VT_I4` après un appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="3294c-108">For example, you can pass a `VT_VARIANT | VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call.</span></span> <span data-ttu-id="3294c-109">Étant donné que le marshaleur d’interopérabilité COM n’a aucun moyen de savoir quand passer `VT_BSTR | VT_BYREF` et quand passer `VT_VARIANT | VT_BYREF`, qui pointe vers une variante qui contient un `BSTR` pour les paramètres déclarés en tant que `VARIANT *`, vous pouvez instruire le marshaleur à l’aide de <xref:System.Runtime.InteropServices.VariantWrapper>.</span><span class="sxs-lookup"><span data-stu-id="3294c-109">Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span>  
  
 <span data-ttu-id="3294c-110">Notez que la liaison anticipée n’est pas pris en charge ; Vous pouvez utiliser <xref:System.Runtime.InteropServices.VariantWrapper> uniquement lorsque vous appelez <xref:System.Type.InvokeMember%2A> ou avec une interface de répartition uniquement appelée de manière anticipée.</span><span class="sxs-lookup"><span data-stu-id="3294c-110">Note that early binding is not supported; you can use <xref:System.Runtime.InteropServices.VariantWrapper> only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion.</span></span> <span data-ttu-id="3294c-111">En c#, vous devez également utiliser le `ref` mot clé pour spécifier `ByRef` sémantique pour n’importe quel paramètre de type <xref:System.Runtime.InteropServices.VariantWrapper>.</span><span class="sxs-lookup"><span data-stu-id="3294c-111">In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span> <span data-ttu-id="3294c-112">En Visual Basic, `ByRef` sémantique est ajoutée automatiquement pour chaque appel de liaison tardive implicite.</span><span class="sxs-lookup"><span data-stu-id="3294c-112">In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call.</span></span> <span data-ttu-id="3294c-113">Notez également que l’imbrication de <xref:System.Runtime.InteropServices.VariantWrapper> objets et tableaux de <xref:System.Runtime.InteropServices.VariantWrapper> objets n’est pas pris en charge.</span><span class="sxs-lookup"><span data-stu-id="3294c-113">Also note that nesting <xref:System.Runtime.InteropServices.VariantWrapper> objects and arrays of <xref:System.Runtime.InteropServices.VariantWrapper> objects is not supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3294c-114">L’exemple de code suivant montre comment utiliser le <xref:System.Runtime.InteropServices.VariantWrapper> classe pour encapsuler un <xref:System.Object> que le marshaleur d’interopérabilité passe comme `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="3294c-114">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VariantWrapper (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VariantWrapper(System::Object ^ obj);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="3294c-115">Objet à marshaler.</span><span class="sxs-lookup"><span data-stu-id="3294c-115">The object to marshal.</span></span></param>
        <summary><span data-ttu-id="3294c-116">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> pour le paramètre <see cref="T:System.Object" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="3294c-116">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> class for the specified <see cref="T:System.Object" /> parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3294c-117">L’exemple de code suivant montre comment utiliser le <xref:System.Runtime.InteropServices.VariantWrapper> classe pour encapsuler un <xref:System.Object> que le marshaleur d’interopérabilité passe comme `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="3294c-117">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrappedObject">
      <MemberSignature Language="C#" Value="public object WrappedObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrappedObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WrappedObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WrappedObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3294c-118">Obtient l'objet encapsulé par l'objet <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</span><span class="sxs-lookup"><span data-stu-id="3294c-118">Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span></span></summary>
        <value><span data-ttu-id="3294c-119">Objet encapsulé par l'objet <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</span><span class="sxs-lookup"><span data-stu-id="3294c-119">The object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>