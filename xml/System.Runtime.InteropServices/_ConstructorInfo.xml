<Type Name="_ConstructorInfo" FullName="System.Runtime.InteropServices._ConstructorInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3772c60dfe78739dbccd3f1da27043637d14809d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39878093" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface _ConstructorInfo" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _ConstructorInfo" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices._ConstructorInfo" />
  <TypeSignature Language="VB.NET" Value="Public Interface _ConstructorInfo" />
  <TypeSignature Language="C++ CLI" Value="public interface class _ConstructorInfo" />
  <TypeSignature Language="F#" Value="type _ConstructorInfo = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.Guid("E9A19478-9646-3679-9B10-8411AE1FD57D")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.TypeLibImportClass(typeof(System.Reflection.ConstructorInfo))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d876d-101">Expose les membres publics de la classe <see cref="T:System.Reflection.ConstructorInfo" /> au code non managé.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d876d-101">Exposes the public members of the <see cref="T:System.Reflection.ConstructorInfo" /> class to unmanaged code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-102">Cette interface permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-102">This interface is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-103">Le <xref:System.Reflection.ConstructorInfo?displayProperty=nameWithType> classe identifie les attributs d’un constructeur de classe et donne accès aux métadonnées du constructeur.</span><span class="sxs-lookup"><span data-stu-id="d876d-103">The <xref:System.Reflection.ConstructorInfo?displayProperty=nameWithType> class discovers the attributes of a class constructor and provides access to constructor metadata.</span></span>  
  
 <span data-ttu-id="d876d-104">Le <xref:System.Runtime.InteropServices._ConstructorInfo?displayProperty=nameWithType> interface conserve l’ordre vtable de la <xref:System.Reflection.ConstructorInfo?displayProperty=nameWithType> classe les membres qui sont accessibles par les objets COM non managés.</span><span class="sxs-lookup"><span data-stu-id="d876d-104">The <xref:System.Runtime.InteropServices._ConstructorInfo?displayProperty=nameWithType> interface preserves the vtable order of the <xref:System.Reflection.ConstructorInfo?displayProperty=nameWithType> class members that can be accessed by unmanaged COM objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Runtime.InteropServices._ConstructorInfo.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-105">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.Attributes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-105">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.Attributes" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-106">Une des valeurs de <see cref="T:System.Reflection.MethodAttributes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-106">One of the <see cref="T:System.Reflection.MethodAttributes" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-107">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-107">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-108">Le <xref:System.Reflection.MethodBase.Attributes%2A> propriété obtient les attributs associés à cette méthode.</span><span class="sxs-lookup"><span data-stu-id="d876d-108">The <xref:System.Reflection.MethodBase.Attributes%2A> property gets the attributes associated with this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Runtime.InteropServices._ConstructorInfo.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-109">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.CallingConvention" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-109">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.CallingConvention" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-110">
            <see cref="T:System.Reflection.CallingConventions" /> de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-110">The <see cref="T:System.Reflection.CallingConventions" /> for this method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-111">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-111">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-112">Le <xref:System.Reflection.MethodBase.CallingConvention%2A> propriété obtient une valeur indiquant les conventions d’appel de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="d876d-112">The <xref:System.Reflection.MethodBase.CallingConvention%2A> property gets a value indicating the calling conventions for this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Runtime.InteropServices._ConstructorInfo.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-113">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MemberInfo.DeclaringType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-113">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-114">Objet <see cref="T:System.Type" /> de la classe qui déclare ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-114">The <see cref="T:System.Type" /> object for the class that declares this member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-115">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-115">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-116">Le <xref:System.Reflection.MemberInfo.DeclaringType%2A> propriété obtient la classe qui déclare ce membre.</span><span class="sxs-lookup"><span data-stu-id="d876d-116">The <xref:System.Reflection.MemberInfo.DeclaringType%2A> property gets the class that declares this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj -&gt; bool" Usage="_ConstructorInfo.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="d876d-117">
            <see cref="T:System.Object" /> à comparer avec l'objet <see cref="T:System.Object" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-117">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-118">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Object.Equals(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-118">Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-119">
            <see langword="true" /> si le <see cref="T:System.Object" /> spécifié est égal au <see cref="T:System.Object" /> actuel ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-119">
              <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-120">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-120">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-121">Le <xref:System.Object.Equals%2A> méthode détermine si le texte spécifié <xref:System.Object> est égal à actuel <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="d876d-121">The <xref:System.Object.Equals%2A> method determines whether the specified <xref:System.Object> is equal to the current <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-122">Fournit aux objets COM un accès indépendant à la version aux membres <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-122">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" /> members.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-123">Le <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> membres retournent tous les attributs appliqués à ce membre.</span><span class="sxs-lookup"><span data-stu-id="d876d-123">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> members return all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]" Usage="_ConstructorInfo.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="d876d-124">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-124">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-125">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-125">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-126">Tableau contenant tous les attributs personnalisés ou tableau contenant 0 (zéro) élément si aucun attribut n'est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-126">An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-127">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-127">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-128">Le <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> méthode retourne un tableau contenant tous les attributs personnalisés.</span><span class="sxs-lookup"><span data-stu-id="d876d-128">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method returns an array containing all the custom attributes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]" Usage="_ConstructorInfo.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="d876d-129">Type d’attribut à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-129">The type of attribute to search for.</span>
          </span>
          <span data-ttu-id="d876d-130">Seuls les attributs qui peuvent être assignés à ce type sont retournés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-130">Only attributes that are assignable to this type are returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="d876d-131">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-131">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-132">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-132">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-133">Tableau d'attributs personnalisés appliqués à ce membre ou tableau contenant 0 (zéro) élément si aucun attribut n'a été appliqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-133">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-134">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-134">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-135">Le <xref:System.Reflection.Emit.MethodBuilder.GetCustomAttributes%2A> méthode retourne un tableau d’attributs personnalisés identifiés par <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="d876d-135">The <xref:System.Reflection.Emit.MethodBuilder.GetCustomAttributes%2A> method returns an array of custom attributes identified by <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int" Usage="_ConstructorInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d876d-136">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Object.GetHashCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-136">Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-137">Code de hachage de l'instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-137">The hash code for the current instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-138">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-138">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-139">Le <xref:System.Object.GetHashCode%2A> méthode sert de fonction de hachage pour un type particulier.</span><span class="sxs-lookup"><span data-stu-id="d876d-139">The <xref:System.Object.GetHashCode%2A> method serves as a hash function for a particular type.</span></span> <span data-ttu-id="d876d-140"><xref:System.Object.GetHashCode%2A> peut être utilisée dans des algorithmes de hachage et des structures de données telles qu'une table de hachage.</span><span class="sxs-lookup"><span data-stu-id="d876d-140"><xref:System.Object.GetHashCode%2A> is suitable for use in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIDsOfNames">
      <MemberSignature Language="C#" Value="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId);" />
      <MemberSignature Language="F#" Value="abstract member GetIDsOfNames :  * nativeint * uint32 * uint32 * nativeint -&gt; unit" Usage="_ConstructorInfo.GetIDsOfNames (riid, rgszNames, cNames, lcid, rgDispId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="d876d-141">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-141">Reserved for future use.</span>
          </span>
          <span data-ttu-id="d876d-142">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-142">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="d876d-143">Tableau passé des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-143">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="d876d-144">Compte des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-144">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="d876d-145">Contexte des paramètres régionaux dans lequel interpréter les noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-145">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="d876d-146">Tableau, alloué par l'appelant, qui reçoit les ID correspondant aux noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-146">Caller-allocated array that receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-147">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-147">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-148">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-148">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="d876d-149">Pour plus d’informations sur `IDispatch::GetIDsOfNames`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="d876d-149">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="_ConstructorInfo.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d876d-150">Fournit aux objets COM un accès indépendant à la version au membre <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-150">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" /> member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-151">Les indicateurs <see cref="T:System.Reflection.MethodImplAttributes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-151">The <see cref="T:System.Reflection.MethodImplAttributes" /> flags.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-152">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-152">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-153">Le <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> membre retourne le <xref:System.Reflection.MethodImplAttributes> indicateurs.</span><span class="sxs-lookup"><span data-stu-id="d876d-153">The <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> member returns the <xref:System.Reflection.MethodImplAttributes> flags.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="_ConstructorInfo.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d876d-154">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.MethodBase.GetParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-154">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.GetParameters" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-155">Tableau de type <see cref="T:System.Reflection.ParameterInfo" /> contenant des informations qui correspondent à la signature de la méthode ou du constructeur réfléchi par cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-155">An array of type <see cref="T:System.Reflection.ParameterInfo" /> containing information that matches the signature of the method (or constructor) reflected by this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-156">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-156">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-157">Le <xref:System.Reflection.MethodBase.GetParameters%2A> méthode obtient les paramètres de la méthode spécifiée ou le constructeur.</span><span class="sxs-lookup"><span data-stu-id="d876d-157">The <xref:System.Reflection.MethodBase.GetParameters%2A> method gets the parameters of the specified method or constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberSignature Language="F#" Value="abstract member GetType : unit -&gt; Type" Usage="_ConstructorInfo.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d876d-158">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Object.GetType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-158">Provides COM objects with version-independent access to the <see cref="M:System.Object.GetType" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-159">Objet <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-159">A <see cref="T:System.Type" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-160">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-160">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-161">Le <xref:System.Object.GetType%2A> méthode obtient le type de l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="d876d-161">The <xref:System.Object.GetType%2A> method gets the type of the current instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit" Usage="_ConstructorInfo.GetTypeInfo (iTInfo, lcid, ppTInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="d876d-162">Informations de type à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-162">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="d876d-163">Identificateur des paramètres régionaux pour les informations de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-163">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="d876d-164">Reçoit un pointeur vers l'objet d'informations de type demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-164">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-165">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-165">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-166">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-166">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="d876d-167">Pour plus d’informations sur `IDispatch::GetTypeInfo`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="d876d-167">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoCount">
      <MemberSignature Language="C#" Value="public void GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfoCount (ByRef pcTInfo As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfoCount :  -&gt; unit" Usage="_ConstructorInfo.GetTypeInfoCount pcTInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="d876d-168">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-168">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-169">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-169">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-170">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-170">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="d876d-171">Pour plus d’informations sur `IDispatch::GetTypeInfoCount`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="d876d-171">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : uint32 *  * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit" Usage="_ConstructorInfo.Invoke (dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="d876d-172">Identifie le membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-172">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="d876d-173">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-173">Reserved for future use.</span>
          </span>
          <span data-ttu-id="d876d-174">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-174">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="d876d-175">Contexte des paramètres régionaux dans lequel interpréter les arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-175">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="d876d-176">Indicateurs décrivant le contexte de l'appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-176">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="d876d-177">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-177">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="d876d-178">Pointeur vers l'emplacement où le résultat doit être stocké.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-178">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="d876d-179">Pointeur vers une structure qui contient les informations sur les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-179">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="d876d-180">Index du premier argument comportant une erreur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-180">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-181">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-181">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-182">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-182">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="d876d-183">Pour plus d’informations sur `IDispatch::Invoke`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="d876d-183">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke_2">
      <MemberSignature Language="C#" Value="public object Invoke_2 (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke_2(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_2(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke_2(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member Invoke_2 : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="_ConstructorInfo.Invoke_2 (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d876d-184">Instance qui a créé cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-184">The instance that created this method.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="d876d-185">Une des valeurs <see langword="BindingFlags" /> qui spécifie le type de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-185">One of the <see langword="BindingFlags" /> values that specifies the type of binding.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="d876d-186">
            <see langword="Binder" /> qui définit un jeu de propriétés et active la liaison, la contrainte des types d'arguments ainsi que l'appel des membres à l'aide de la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-186">A <see langword="Binder" /> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection.</span>
          </span>
          <span data-ttu-id="d876d-187">Si <c>binder</c> a la valeur <see langword="null" />, <see langword="Binder.DefaultBinding" /> est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-187">If <c>binder</c> is <see langword="null" />, then <see langword="Binder.DefaultBinding" /> is used.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d876d-188">Tableau de type <see langword="Object" /> utilisé pour rechercher des correspondances pour le nombre, l’ordre et le type des paramètres de ce constructeur, sous les contraintes de <c>binder</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-188">An array of type <see langword="Object" /> used to match the number, order, and type of the parameters for this constructor, under the constraints of <c>binder</c>.</span>
          </span>
          <span data-ttu-id="d876d-189">Si ce constructeur ne requiert pas de paramètre, passez un tableau contenant 0 (zéro) élément, comme dans Object[] parameters = new Object[0].</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-189">If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0].</span>
          </span>
          <span data-ttu-id="d876d-190">Tout objet de ce tableau qui n’est pas explicitement initialisé avec une valeur contiendra la valeur par défaut pour ce type d’objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-190">Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</span>
          </span>
          <span data-ttu-id="d876d-191">Pour les éléments de type référence, cette valeur est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-191">For reference-type elements, this value is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d876d-192">Pour les éléments de type valeur, cette valeur est 0, 0.0 ou <see langword="false" />, selon le type d’élément spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-192">For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="d876d-193">
            <see cref="T:System.Globalization.CultureInfo" /> utilisé pour régir la contrainte de types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-193">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="d876d-194">Si la valeur est <see langword="null" />, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-194">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-195">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-195">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-196">Instance de la classe associée au constructeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-196">An instance of the class associated with the constructor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-197">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-197">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-198">Le <xref:System.Reflection.MethodBase.Invoke%2A> méthode appelle le constructeur réfléchi par cette <xref:System.Reflection.ConstructorInfo> avec les arguments spécifiés, sous les contraintes de spécifié <xref:System.Reflection.Binder>.</span><span class="sxs-lookup"><span data-stu-id="d876d-198">The <xref:System.Reflection.MethodBase.Invoke%2A> method invokes the constructor reflected by this <xref:System.Reflection.ConstructorInfo> with the specified arguments, under the constraints of the specified <xref:System.Reflection.Binder>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke_3">
      <MemberSignature Language="C#" Value="public object Invoke_3 (object obj, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke_3(object obj, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_3(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke_3 (obj As Object, parameters As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke_3(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="abstract member Invoke_3 : obj * obj[] -&gt; obj" Usage="_ConstructorInfo.Invoke_3 (obj, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d876d-199">Instance qui a créé cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-199">The instance that created this method.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d876d-200">Liste d’arguments de la méthode ou du constructeur appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-200">An argument list for the invoked method or constructor.</span>
          </span>
          <span data-ttu-id="d876d-201">Il s’agit d’un tableau d’objets présentant les mêmes nombre, ordre et type que les paramètres de la méthode ou du constructeur à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-201">This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.</span>
          </span>
          <span data-ttu-id="d876d-202">En l’absence de paramètres, <c>parameters</c> doit avoir la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-202">If there are no parameters, <c>parameters</c> should be <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d876d-203">Si la méthode ou le constructeur représenté par cette instance accepte un paramètre <see langword="ref" /> (<see langword="ByRef" /> en Visual Basic), aucun attribut spécial de ce paramètre n’est requis pour appeler la méthode ou le constructeur à l’aide de cette fonction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-203">If the method or constructor represented by this instance takes a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function.</span>
          </span>
          <span data-ttu-id="d876d-204">Tout objet de ce tableau qui n’est pas explicitement initialisé avec une valeur contiendra la valeur par défaut pour ce type d’objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-204">Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</span>
          </span>
          <span data-ttu-id="d876d-205">Pour les éléments de type référence, cette valeur est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-205">For reference-type elements, this value is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d876d-206">Pour les éléments de type valeur, cette valeur est 0, 0.0 ou <see langword="false" />, selon le type d’élément spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-206">For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-207">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-207">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-208">Instance de la classe associée au constructeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-208">An instance of the class associated with the constructor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-209">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-209">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-210">Le <xref:System.Reflection.MethodBase.Invoke%2A> méthode appelle la méthode ou le constructeur représenté par cet objet, en utilisant les paramètres spécifiés.</span><span class="sxs-lookup"><span data-stu-id="d876d-210">The <xref:System.Reflection.MethodBase.Invoke%2A> method invokes the method or constructor represented by this object, using the specified parameters.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke_4">
      <MemberSignature Language="C#" Value="public object Invoke_4 (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke_4(valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_4(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke_4(System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member Invoke_4 : System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="_ConstructorInfo.Invoke_4 (invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="invokeAttr">
          <span data-ttu-id="d876d-211">Une des valeurs <see langword="BindingFlags" /> qui spécifie le type de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-211">One of the <see langword="BindingFlags" /> values that specifies the type of binding.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="d876d-212">
            <see langword="Binder" /> qui définit un jeu de propriétés et active la liaison, la contrainte des types d'arguments ainsi que l'appel des membres à l'aide de la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-212">A <see langword="Binder" /> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection.</span>
          </span>
          <span data-ttu-id="d876d-213">Si <c>binder</c> a la valeur <see langword="null" />, <see langword="Binder.DefaultBinding" /> est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-213">If <c>binder</c> is <see langword="null" />, then <see langword="Binder.DefaultBinding" /> is used.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d876d-214">Tableau de type <see langword="Object" /> utilisé pour rechercher des correspondances pour le nombre, l’ordre et le type des paramètres de ce constructeur, sous les contraintes de <c>binder</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-214">An array of type <see langword="Object" /> used to match the number, order, and type of the parameters for this constructor, under the constraints of <c>binder</c>.</span>
          </span>
          <span data-ttu-id="d876d-215">Si ce constructeur ne requiert pas de paramètre, passez un tableau contenant 0 (zéro) élément, comme dans Object[] parameters = new Object[0].</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-215">If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0].</span>
          </span>
          <span data-ttu-id="d876d-216">Tout objet de ce tableau qui n’est pas explicitement initialisé avec une valeur contiendra la valeur par défaut pour ce type d’objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-216">Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</span>
          </span>
          <span data-ttu-id="d876d-217">Pour les éléments de type référence, cette valeur est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-217">For reference-type elements, this value is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d876d-218">Pour les éléments de type valeur, cette valeur est 0, 0.0 ou <see langword="false" />, selon le type d’élément spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-218">For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="d876d-219">
            <see cref="T:System.Globalization.CultureInfo" /> utilisé pour régir la contrainte de types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-219">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="d876d-220">Si la valeur est <see langword="null" />, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-220">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-221">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-221">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-222">Instance de la classe associée au constructeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-222">An instance of the class associated with the constructor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-223">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-223">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-224">Le <xref:System.Reflection.ConstructorInfo.Invoke%2A> méthode appelle le constructeur réfléchi par cette <xref:System.Reflection.ConstructorInfo> objet avec les arguments spécifiés, sous les contraintes de spécifié <xref:System.Reflection.Binder> objet.</span><span class="sxs-lookup"><span data-stu-id="d876d-224">The <xref:System.Reflection.ConstructorInfo.Invoke%2A> method invokes the constructor reflected by this <xref:System.Reflection.ConstructorInfo> object with the specified arguments, under the constraints of the specified <xref:System.Reflection.Binder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke_5">
      <MemberSignature Language="C#" Value="public object Invoke_5 (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke_5(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_5(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke_5 (parameters As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke_5(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="abstract member Invoke_5 : obj[] -&gt; obj" Usage="_ConstructorInfo.Invoke_5 parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="d876d-225">Tableau de valeurs qui correspondent au nombre, à l'ordre et au type des paramètres de ce constructeur (sous les contraintes du binder par défaut).</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-225">An array of values that matches the number, order, and type (under the constraints of the default binder) of the parameters for this constructor.</span>
          </span>
          <span data-ttu-id="d876d-226">Si ce constructeur ne prend aucun paramètre, utilisez un tableau ne contenant pas d’éléments ou avec la valeur <see langword="null" />, comme dans Object[] parameters = new Object[0].</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-226">If this constructor takes no parameters, then use either an array with zero elements or <see langword="null" />, as in Object[] parameters = new Object[0].</span>
          </span>
          <span data-ttu-id="d876d-227">Tout objet dans ce tableau qui n’est pas explicitement initialisé avec une valeur contiendra la valeur par défaut pour ce type d’objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-227">Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</span>
          </span>
          <span data-ttu-id="d876d-228">Pour les éléments de type référence, cette valeur est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-228">For reference-type elements, this value is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d876d-229">Pour les éléments de type valeur, cette valeur est 0, 0.0 ou <see langword="false" />, selon le type d’élément spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-229">For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-230">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-230">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-231">Instance de la classe associée au constructeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-231">An instance of the class associated with the constructor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-232">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-232">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-233">Le <xref:System.Reflection.ConstructorInfo.Invoke%2A> méthode appelle le constructeur réfléchi par l’instance qui a les paramètres spécifiés, en fournissant des valeurs par défaut pour les paramètres pas couramment utilisés.</span><span class="sxs-lookup"><span data-stu-id="d876d-233">The <xref:System.Reflection.ConstructorInfo.Invoke%2A> method invokes the constructor reflected by the instance that has the specified parameters, providing default values for the parameters not commonly used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsAbstract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-234">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsAbstract" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-234">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsAbstract" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-235">
            <see langword="true" /> si la méthode est abstraite ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-235">
              <see langword="true" /> if the method is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-236">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-236">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-237">Le <xref:System.Reflection.MethodBase.IsAbstract%2A> propriété obtient une valeur indiquant si la méthode est abstraite.</span><span class="sxs-lookup"><span data-stu-id="d876d-237">The <xref:System.Reflection.MethodBase.IsAbstract%2A> property gets a value indicating whether the method is abstract.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssembly">
      <MemberSignature Language="C#" Value="public bool IsAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAssembly : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-238">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsAssembly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-238">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsAssembly" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-239">
            <see langword="true" /> si cette méthode peut être appelée par d'autres classes du même assembly ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-239">
              <see langword="true" /> if this method can be called by other classes in the same assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-240">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-240">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-241">Le <xref:System.Reflection.MethodBase.IsAssembly%2A> propriété obtient une valeur indiquant si cette méthode peut être appelée par d’autres classes dans le même assembly.</span><span class="sxs-lookup"><span data-stu-id="d876d-241">The <xref:System.Reflection.MethodBase.IsAssembly%2A> property gets a value indicating whether this method can be called by other classes in the same assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructor">
      <MemberSignature Language="C#" Value="public bool IsConstructor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructor" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsConstructor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstructor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstructor { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructor : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsConstructor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-242">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsConstructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-242">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsConstructor" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-243">
            <see langword="true" /> si cette méthode est un constructeur ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-243">
              <see langword="true" /> if this method is a constructor; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-244">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-244">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-245">Le <xref:System.Reflection.MethodBase.IsConstructor%2A> propriété obtient une valeur indiquant si la méthode est un constructeur.</span><span class="sxs-lookup"><span data-stu-id="d876d-245">The <xref:System.Reflection.MethodBase.IsConstructor%2A> property gets a value indicating whether the method is a constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool" Usage="_ConstructorInfo.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="d876d-246">Objet <see langword="Type" /> auquel les attributs personnalisés sont appliqués.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-246">The <see langword="Type" /> object to which the custom attributes are applied.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="d876d-247">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-247">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d876d-248">Fournit aux objets COM un accès indépendant à la version au membre <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-248">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-249">
            <see langword="true" /> si une ou plusieurs instances de <paramref name="attributeType" /> sont appliquées à ce membre ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-249">
              <see langword="true" /> if one or more instances of <paramref name="attributeType" /> is applied to this member; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-250">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-250">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-251">Le <xref:System.Reflection.MemberInfo.IsDefined%2A> membre indique si une ou plusieurs instances de `attributeType` est appliqué à ce membre.</span><span class="sxs-lookup"><span data-stu-id="d876d-251">The <xref:System.Reflection.MemberInfo.IsDefined%2A> member indicates whether one or more instances of `attributeType` is applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFamily">
      <MemberSignature Language="C#" Value="public bool IsFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamily" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamily : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-252">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsFamily" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-252">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamily" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-253">
            <see langword="true" /> si l'accès à la classe est limité aux membres de la classe et de ses classes dérivées ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-253">
              <see langword="true" /> if access to the class is restricted to members of the class itself and to members of its derived classes; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-254">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-254">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-255">Le <xref:System.Reflection.MethodBase.IsFamily%2A> propriété obtient une valeur indiquant si l’accès à cette méthode est limité aux membres de la classe et de ses classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="d876d-255">The <xref:System.Reflection.MethodBase.IsFamily%2A> property gets a value indicating whether access to this method is restricted to members of the class and members of its derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFamilyAndAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyAndAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyAndAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsFamilyAndAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyAndAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyAndAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamilyAndAssembly : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsFamilyAndAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-256">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-256">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-257">
            <see langword="true" /> si l'accès à cette méthode est limité aux membres de la classe et aux membres des classes dérivées appartenant au même assembly ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-257">
              <see langword="true" /> if access to this method is restricted to members of the class itself and to members of derived classes that are in the same assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-258">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-258">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-259">Le <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> propriété obtient une valeur indiquant si cette méthode peut être appelée par les classes dérivées si elles se trouvent dans le même assembly.</span><span class="sxs-lookup"><span data-stu-id="d876d-259">The <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> property gets a value indicating whether this method can be called by derived classes if they are in the same assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFamilyOrAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyOrAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyOrAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsFamilyOrAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyOrAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyOrAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamilyOrAssembly : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsFamilyOrAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-260">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-260">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-261">
            <see langword="true" /> si l'accès à cette méthode est limité aux membres de la classe, aux membres des classes dérivées, quel que soit leur emplacement, et aux membres des autres classes appartenant au même assembly ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-261">
              <see langword="true" /> if access to this method is restricted to members of the class itself, members of derived classes wherever they are, and members of other classes in the same assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-262">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-262">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-263">Le <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> propriété obtient une valeur indiquant si cette méthode peut être appelée par les classes dérivées, où qu’ils soient et par toutes les classes dans le même assembly.</span><span class="sxs-lookup"><span data-stu-id="d876d-263">The <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property gets a value indicating whether this method can be called by derived classes, wherever they are, and by all classes in the same assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinal">
      <MemberSignature Language="C#" Value="public bool IsFinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinal" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsFinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFinal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFinal { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFinal : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsFinal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-264">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsFinal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-264">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFinal" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-265">
            <see langword="true" /> si cette méthode est <see langword="final" /> ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-265">
              <see langword="true" /> if this method is <see langword="final" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-266">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-266">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-267">Le <xref:System.Reflection.MethodBase.IsFinal%2A> propriété obtient une valeur indiquant si cette méthode est `final`.</span><span class="sxs-lookup"><span data-stu-id="d876d-267">The <xref:System.Reflection.MethodBase.IsFinal%2A> property gets a value indicating whether this method is `final`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHideBySig">
      <MemberSignature Language="C#" Value="public bool IsHideBySig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHideBySig" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsHideBySig" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHideBySig As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHideBySig { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHideBySig : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsHideBySig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-268">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsHideBySig" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-268">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsHideBySig" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-269">
            <see langword="true" /> si le membre est caché par signature ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-269">
              <see langword="true" /> if the member is hidden by signature; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-270">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-270">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-271">Le <xref:System.Reflection.MethodBase.IsHideBySig%2A> propriété obtient une valeur indiquant si seul un membre du même type avec exactement la même signature est masqué dans la classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="d876d-271">The <xref:System.Reflection.MethodBase.IsHideBySig%2A> property gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrivate">
      <MemberSignature Language="C#" Value="public bool IsPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrivate : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsPrivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-272">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsPrivate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-272">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsPrivate" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-273">
            <see langword="true" /> si l'accès à la classe est limité aux autres membres de la classe proprement dite ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-273">
              <see langword="true" /> if access to this method is restricted to other members of the class itself; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-274">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-274">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-275">Le <xref:System.Reflection.MethodBase.IsPrivate%2A> propriété obtient une valeur indiquant si ce membre est privé.</span><span class="sxs-lookup"><span data-stu-id="d876d-275">The <xref:System.Reflection.MethodBase.IsPrivate%2A> property gets a value indicating whether this member is private.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-276">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsPublic" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-276">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-277">
            <see langword="true" /> si cette méthode est publique ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-277">
              <see langword="true" /> if this method is public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-278">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-278">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-279">Le <xref:System.Reflection.MethodBase.IsPublic%2A> propriété obtient une valeur indiquant s’il s’agit d’une méthode publique.</span><span class="sxs-lookup"><span data-stu-id="d876d-279">The <xref:System.Reflection.MethodBase.IsPublic%2A> property gets a value indicating whether this is a public method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-280">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsSpecialName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-280">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsSpecialName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-281">
            <see langword="true" /> si cette méthode est dotée d'un nom spécial ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-281">
              <see langword="true" /> if this method has a special name; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-282">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-282">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-283">Le <xref:System.Reflection.MethodBase.IsSpecialName%2A> propriété obtient une valeur indiquant si cette méthode a un nom spécial.</span><span class="sxs-lookup"><span data-stu-id="d876d-283">The <xref:System.Reflection.MethodBase.IsSpecialName%2A> property gets a value indicating whether this method has a special name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-284">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsStatic" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-284">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsStatic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-285">
            <see langword="true" /> si cette méthode est <see langword="static" /> ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-285">
              <see langword="true" /> if this method is <see langword="static" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-286">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-286">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-287">Le <xref:System.Reflection.MethodBase.IsStatic%2A> propriété obtient une valeur indiquant si la méthode est `static`.</span><span class="sxs-lookup"><span data-stu-id="d876d-287">The <xref:System.Reflection.MethodBase.IsStatic%2A> property gets a value indicating whether the method is `static`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVirtual">
      <MemberSignature Language="C#" Value="public bool IsVirtual { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVirtual" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.IsVirtual" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVirtual As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVirtual { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVirtual : bool" Usage="System.Runtime.InteropServices._ConstructorInfo.IsVirtual" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-288">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.IsVirtual" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-288">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsVirtual" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-289">
            <see langword="true" /> si cette méthode est <see langword="virtual" /> ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-289">
              <see langword="true" /> if this method is <see langword="virtual" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-290">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-290">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-291">Le <xref:System.Reflection.MethodBase.IsVirtual%2A> propriété obtient une valeur indiquant si la méthode est `virtual`.</span><span class="sxs-lookup"><span data-stu-id="d876d-291">The <xref:System.Reflection.MethodBase.IsVirtual%2A> property gets a value indicating whether the method is `virtual`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Runtime.InteropServices._ConstructorInfo.MemberType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-292">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.ConstructorInfo.MemberType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-292">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.ConstructorInfo.MemberType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-293">Valeur <see cref="T:System.Reflection.MemberTypes" /> indiquant le type de membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-293">A <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-294">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-294">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-295">Le <xref:System.Reflection.ConstructorInfo.MemberType%2A> propriété obtient un <xref:System.Reflection.MemberTypes> valeur indiquant le type du membre, méthode, constructeur, événement et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="d876d-295">The <xref:System.Reflection.ConstructorInfo.MemberType%2A> property gets a <xref:System.Reflection.MemberTypes> value indicating the type of the member — method, constructor, event, and so on.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Runtime.InteropServices._ConstructorInfo.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-296">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MethodBase.MethodHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-296">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.MethodHandle" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-297">Objet <see cref="T:System.RuntimeMethodHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-297">A <see cref="T:System.RuntimeMethodHandle" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-298">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-298">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-299">Le <xref:System.Reflection.MethodBase.MethodHandle%2A> propriété obtient un handle vers la représentation interne des métadonnées d’une méthode.</span><span class="sxs-lookup"><span data-stu-id="d876d-299">The <xref:System.Reflection.MethodBase.MethodHandle%2A> property gets a handle to the internal metadata representation of a method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Runtime.InteropServices._ConstructorInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-300">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MemberInfo.Name" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-300">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-301">
            <see cref="T:System.String" /> contenant le nom de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-301">A <see cref="T:System.String" /> containing the name of this member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-302">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-303">Le <xref:System.Reflection.MemberInfo.Name%2A> propriété obtient le nom du membre actuel.</span><span class="sxs-lookup"><span data-stu-id="d876d-303">The <xref:System.Reflection.MemberInfo.Name%2A> property gets the name of the current member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._ConstructorInfo.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Runtime.InteropServices._ConstructorInfo.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d876d-304">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MemberInfo.ReflectedType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-304">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d876d-305">Objet <see cref="T:System.Type" /> via lequel cet objet <see cref="T:System.Reflection.MemberInfo" /> a été obtenu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-305">The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-306">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-306">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="d876d-307">Le <xref:System.Reflection.MemberInfo.ReflectedType%2A> propriété obtient l’objet de classe qui a été utilisé pour obtenir cette instance de <xref:System.Reflection.MemberInfo>.</span><span class="sxs-lookup"><span data-stu-id="d876d-307">The <xref:System.Reflection.MemberInfo.ReflectedType%2A> property gets the class object that was used to obtain this instance of <xref:System.Reflection.MemberInfo>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._ConstructorInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string" Usage="_ConstructorInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d876d-308">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Object.ToString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-308">Provides COM objects with version-independent access to the <see cref="M:System.Object.ToString" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d876d-309">Chaîne qui représente le <see cref="T:System.Object" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d876d-309">A string that represents the current <see cref="T:System.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d876d-310">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="d876d-310">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>