<Type Name="_PropertyInfo" FullName="System.Runtime.InteropServices._PropertyInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b185ba7e52cfa32e5ec6a7191b681601f2858be9" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52254845" /></Metadata><TypeSignature Language="C#" Value="public interface _PropertyInfo" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _PropertyInfo" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="VB.NET" Value="Public Interface _PropertyInfo" />
  <TypeSignature Language="C++ CLI" Value="public interface class _PropertyInfo" />
  <TypeSignature Language="F#" Value="type _PropertyInfo = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("F59ED4E4-E68F-3218-BD77-061AA82824BF")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.TypeLibImportClass(typeof(System.Reflection.PropertyInfo))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7a808-101">Expose les membres publics de la classe <see cref="T:System.Reflection.PropertyInfo" /> au code non managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-101">Exposes the public members of the <see cref="T:System.Reflection.PropertyInfo" /> class to unmanaged code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-102">Cette interface permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-102">This interface is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-103">Cette interface conserve l’ordre vtable de la <xref:System.Reflection.PropertyInfo?displayProperty=nameWithType> classe les membres qui sont accessibles par les objets COM non managés.</span><span class="sxs-lookup"><span data-stu-id="7a808-103">This interface preserves the vtable order of the <xref:System.Reflection.PropertyInfo?displayProperty=nameWithType> class members that can be accessed by unmanaged COM objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.PropertyAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._PropertyInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As PropertyAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PropertyAttributes Attributes { System::Reflection::PropertyAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.PropertyAttributes" Usage="System.Runtime.InteropServices._PropertyInfo.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a808-104">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.PropertyInfo.Attributes" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-104">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.Attributes" /> property.</span></span></summary>
        <value><span data-ttu-id="7a808-105">Les attributs de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-105">The attributes of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-106">Cette propriété permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-106">This property is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-107">Le <xref:System.Reflection.PropertyInfo.Attributes%2A> propriété obtient les attributs de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-107">The <xref:System.Reflection.PropertyInfo.Attributes%2A> property gets the attributes of this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._PropertyInfo.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Runtime.InteropServices._PropertyInfo.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a808-108">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.PropertyInfo.CanRead" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-108">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.CanRead" /> property.</span></span></summary>
        <value><span data-ttu-id="7a808-109"><see langword="true" /> si la propriété peut être lue ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-109"><see langword="true" /> if this property can be read; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-110">Cette propriété permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-110">This property is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-111">Le <xref:System.Reflection.PropertyInfo.CanRead%2A> propriété obtient une valeur indiquant si la propriété peut être lue.</span><span class="sxs-lookup"><span data-stu-id="7a808-111">The <xref:System.Reflection.PropertyInfo.CanRead%2A> property gets a value indicating whether the property can be read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._PropertyInfo.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Runtime.InteropServices._PropertyInfo.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a808-112">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.PropertyInfo.CanWrite" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-112">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.CanWrite" /> property.</span></span></summary>
        <value><span data-ttu-id="7a808-113"><see langword="true" /> s'il est possible d'écrire dans la propriété ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-113"><see langword="true" /> if this property can be written to; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-114">Cette propriété permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-114">This property is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-115">Le <xref:System.Reflection.PropertyInfo.CanWrite%2A> propriété obtient une valeur indiquant si la propriété peut être écrite.</span><span class="sxs-lookup"><span data-stu-id="7a808-115">The <xref:System.Reflection.PropertyInfo.CanWrite%2A> property gets a value indicating whether the property can be written to.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._PropertyInfo.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Runtime.InteropServices._PropertyInfo.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a808-116">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MemberInfo.DeclaringType" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-116">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> property.</span></span></summary>
        <value><span data-ttu-id="7a808-117">Objet <see langword="Type" /> de la classe qui déclare ce membre.</span><span class="sxs-lookup"><span data-stu-id="7a808-117">The <see langword="Type" /> object for the class that declares this member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-118">Cette propriété permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-118">This property is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-119">Le <xref:System.Reflection.MemberInfo.DeclaringType%2A> propriété obtient la classe qui déclare ce membre.</span><span class="sxs-lookup"><span data-stu-id="7a808-119">The <xref:System.Reflection.MemberInfo.DeclaringType%2A> property gets the class that declares this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj -&gt; bool" Usage="_PropertyInfo.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="7a808-120"><see cref="T:System.Object" /> à comparer avec l'objet <see cref="T:System.Object" /> actuel.</span><span class="sxs-lookup"><span data-stu-id="7a808-120">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</span></span></param>
        <summary><span data-ttu-id="7a808-121">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Object.Equals(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-121">Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-122"><see langword="true" /> si le <see cref="T:System.Object" /> spécifié est égal au <see cref="T:System.Object" /> actuel ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-122"><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-123">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-123">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-124">Le <xref:System.Object.Equals%2A> méthode détermine si le texte spécifié <xref:System.Object> est égal à actuel <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="7a808-124">The <xref:System.Object.Equals%2A> method determines whether the specified <xref:System.Object> is equal to the current <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a808-125">Fournit aux objets COM un accès indépendant à la version aux méthodes <see cref="Overload:System.Reflection.PropertyInfo.GetAccessors" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-125">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.PropertyInfo.GetAccessors" /> methods.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-126">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-126">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-127">Le <xref:System.Reflection.PropertyInfo.GetAccessors%2A> méthodes retournent un tableau de la `get` et `set` accesseurs sur cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-127">The <xref:System.Reflection.PropertyInfo.GetAccessors%2A> methods return an array of the `get` and `set` accessors on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetAccessors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetAccessors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessors () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors();" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : unit -&gt; System.Reflection.MethodInfo[]" Usage="_PropertyInfo.GetAccessors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a808-128">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.GetAccessors" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-128">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetAccessors" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-129">Tableau d'objets <see cref="T:System.Reflection.MethodInfo" /> qui réfléchissent les accesseurs publics <see langword="get" />, <see langword="set" /> et les autres accesseurs de la propriété réfléchie par l'instance en cours, le cas échéant ; sinon, cette méthode retourne un tableau avec zéro (0) élément.</span><span class="sxs-lookup"><span data-stu-id="7a808-129">An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public <see langword="get" />, <see langword="set" />, and other accessors of the property reflected by the current instance, if accessors are found; otherwise, this method returns an array with zero (0) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-130">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-130">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-131">Le <xref:System.Reflection.PropertyInfo.GetAccessors%2A> méthode retourne un tableau dont les éléments réfléchissent public `get`, `set`et d’autres accesseurs de la propriété réfléchie par l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="7a808-131">The <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method returns an array whose elements reflect the public `get`, `set`, and other accessors of the property reflected by the current instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessors (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : bool -&gt; System.Reflection.MethodInfo[]" Usage="_PropertyInfo.GetAccessors nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="7a808-132"><see langword="true" /> pour inclure des méthodes non publiques dans le tableau <see langword="MethodInfo" /> retourné ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-132"><see langword="true" /> to include non-public methods in the returned <see langword="MethodInfo" /> array; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7a808-133">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-133">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-134">Tableau d'objets <see cref="T:System.Reflection.MethodInfo" /> dont les éléments réfléchissent les accesseurs publics <see langword="get" />, <see langword="set" /> et d'autres accesseurs de la propriété réfléchie par l'instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="7a808-134">An array of <see cref="T:System.Reflection.MethodInfo" /> objects whose elements reflect the <see langword="get" />, <see langword="set" />, and other accessors of the property reflected by the current instance.</span></span> <span data-ttu-id="7a808-135">Si le paramètre <paramref name="nonPublic" /> est <see langword="true" />, ce tableau contient des accesseurs <see langword="get" />, <see langword="set" /> publics et non publics et d'autres accesseurs.</span><span class="sxs-lookup"><span data-stu-id="7a808-135">If the <paramref name="nonPublic" /> parameter is <see langword="true" />, this array contains public and non-public <see langword="get" />, <see langword="set" />, and other accessors.</span></span> <span data-ttu-id="7a808-136">Si <paramref name="nonPublic" /> a la valeur <see langword="false" />, ce tableau contient uniquement des accesseurs <see langword="get" />, <see langword="set" /> et d'autres accesseurs publics.</span><span class="sxs-lookup"><span data-stu-id="7a808-136">If <paramref name="nonPublic" /> is <see langword="false" />, this array contains only public <see langword="get" />, <see langword="set" />, and other accessors.</span></span> <span data-ttu-id="7a808-137">Si aucun accesseur avec la visibilité spécifiée n'est trouvé, cette méthode retourne un tableau avec zéro (0) éléments.</span><span class="sxs-lookup"><span data-stu-id="7a808-137">If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-138">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-138">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-139">Le <xref:System.Reflection.PropertyInfo.GetAccessors%2A> méthode retourne un tableau dont les éléments réfléchissent public et, le cas échéant, non publics `get`, `set`et d’autres accesseurs de la propriété réfléchie par l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="7a808-139">The <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method returns an array whose elements reflect the public and, if specified, non-public `get`, `set`, and other accessors of the property reflected by the current instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a808-140">Fournit aux objets COM un accès indépendant à la version aux méthodes <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-140">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" /> methods.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-141">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-141">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-142">Le <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> méthodes retournent tous les attributs appliqués à ce membre.</span><span class="sxs-lookup"><span data-stu-id="7a808-142">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> methods return all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]" Usage="_PropertyInfo.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="7a808-143">true pour rechercher les attributs dans la chaîne d'héritage de ce membre ; sinon, false.</span><span class="sxs-lookup"><span data-stu-id="7a808-143">true to search this member's inheritance chain to find the attributes; otherwise false.</span></span></param>
        <summary><span data-ttu-id="7a808-144">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-144">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-145">Tableau contenant tous les attributs personnalisés ou tableau contenant 0 (zéro) élément si aucun attribut n'est défini.</span><span class="sxs-lookup"><span data-stu-id="7a808-145">An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-146">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-146">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-147">Le <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> méthode retourne un tableau contenant tous les attributs personnalisés.</span><span class="sxs-lookup"><span data-stu-id="7a808-147">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method returns an array containing all the custom attributes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]" Usage="_PropertyInfo.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="7a808-148">Type d’attribut à rechercher.</span><span class="sxs-lookup"><span data-stu-id="7a808-148">The type of attribute to search for.</span></span> <span data-ttu-id="7a808-149">Seuls les attributs qui peuvent être assignés à ce type sont retournés.</span><span class="sxs-lookup"><span data-stu-id="7a808-149">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="7a808-150">true pour rechercher les attributs dans la chaîne d'héritage de ce membre ; sinon, false.</span><span class="sxs-lookup"><span data-stu-id="7a808-150">true to search this member's inheritance chain to find the attributes; otherwise false.</span></span></param>
        <summary><span data-ttu-id="7a808-151">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-151">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-152">Tableau d'attributs personnalisés appliqués à ce membre ou tableau contenant 0 (zéro) élément si aucun attribut n'a été appliqué.</span><span class="sxs-lookup"><span data-stu-id="7a808-152">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-153">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-153">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-154">Le <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> méthode retourne un tableau d’attributs personnalisés identifiés par <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="7a808-154">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method returns an array of custom attributes identified by <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a808-155">Fournit aux objets COM un accès indépendant à la version aux méthodes <see cref="Overload:System.Reflection.PropertyInfo.GetGetMethod" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-155">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.PropertyInfo.GetGetMethod" /> methods.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-156">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-156">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-157">Le <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> méthodes retournent un <xref:System.Reflection.MethodInfo> objet représentant le `get` accesseur pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-157">The <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> methods return a <xref:System.Reflection.MethodInfo> object representing the `get` accessor for this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetGetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetGetMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="_PropertyInfo.GetGetMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a808-158">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.GetGetMethod" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-158">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetGetMethod" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-159">Objet <see cref="T:System.Reflection.MethodInfo" /> représentant l'accesseur <see langword="get" /> public de cette propriété ou <see langword="null" /> si l'accesseur <see langword="get" /> est non public ou n'existe pas.</span><span class="sxs-lookup"><span data-stu-id="7a808-159">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public <see langword="get" /> accessor for this property, or <see langword="null" /> if the <see langword="get" /> accessor is non-public or does not exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-160">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-160">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-161">Le <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> méthode retourne le grand public `get` accesseur pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-161">The <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> method returns the public `get` accessor for this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetGetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="_PropertyInfo.GetGetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="7a808-162"><see langword="true" /> pour retourner un accesseur <see langword="get" /> non public ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-162"><see langword="true" /> to return a non-public <see langword="get" /> accessor; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7a808-163">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-163">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-164">Objet <see cref="T:System.Reflection.MethodInfo" /> représentant l'accesseur <see langword="get" /> de cette propriété si le paramètre <paramref name="nonPublic" /> est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-164">A <see cref="T:System.Reflection.MethodInfo" /> object representing the <see langword="get" /> accessor for this property, if the <paramref name="nonPublic" /> parameter is <see langword="true" />.</span></span> <span data-ttu-id="7a808-165">Ou <see langword="null" /> si <paramref name="nonPublic" /> est <see langword="false" /> et que l'accesseur <see langword="get" /> est non public ou si <paramref name="nonPublic" /> est <see langword="true" /> mais qu'il n'existe pas d'accesseur <see langword="get" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-165">Or <see langword="null" /> if <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="get" /> accessor is non-public, or if <paramref name="nonPublic" /> is <see langword="true" /> but no <see langword="get" /> accessors exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-166">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-166">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-167">Le <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> méthode retourne le public ou non public `get` accesseur pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-167">The <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> method returns the public or non-public `get` accessor for this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int" Usage="_PropertyInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a808-168">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Object.GetHashCode" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-168">Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-169">Code de hachage de l'instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="7a808-169">The hash code for the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-170">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-170">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-171">Le <xref:System.Object.GetHashCode%2A> méthode sert de fonction de hachage pour un type particulier.</span><span class="sxs-lookup"><span data-stu-id="7a808-171">The <xref:System.Object.GetHashCode%2A> method serves as a hash function for a particular type.</span></span> <span data-ttu-id="7a808-172"><xref:System.Object.GetHashCode%2A> convient pour une utilisation dans des algorithmes et structures de données comme une table de hachage de hachage.</span><span class="sxs-lookup"><span data-stu-id="7a808-172"><xref:System.Object.GetHashCode%2A> is suitable for use in hashing algorithms and data structures such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIDsOfNames">
      <MemberSignature Language="C#" Value="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId);" />
      <MemberSignature Language="F#" Value="abstract member GetIDsOfNames :  * nativeint * uint32 * uint32 * nativeint -&gt; unit" Usage="_PropertyInfo.GetIDsOfNames (riid, rgszNames, cNames, lcid, rgDispId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="7a808-173">Réservé à un usage ultérieur.</span><span class="sxs-lookup"><span data-stu-id="7a808-173">Reserved for future use.</span></span> <span data-ttu-id="7a808-174">Doit être IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="7a808-174">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="7a808-175">Tableau de noms à mapper.</span><span class="sxs-lookup"><span data-stu-id="7a808-175">An array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="7a808-176">Compte des noms à mapper.</span><span class="sxs-lookup"><span data-stu-id="7a808-176">The count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="7a808-177">Contexte des paramètres régionaux dans lequel interpréter les noms.</span><span class="sxs-lookup"><span data-stu-id="7a808-177">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="7a808-178">Tableau, alloué par l'appelant, qui reçoit les identificateurs correspondant aux noms.</span><span class="sxs-lookup"><span data-stu-id="7a808-178">An array allocated by the caller that receives the identifiers corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="7a808-179">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</span><span class="sxs-lookup"><span data-stu-id="7a808-179">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-180">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-180">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span> <span data-ttu-id="7a808-181">Pour plus d’informations sur `IDispatch::GetIDsOfNames`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="7a808-181">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo[] GetIndexParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ParameterInfo[] GetIndexParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetIndexParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetIndexParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetIndexParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="_PropertyInfo.GetIndexParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a808-182">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-182">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-183">Tableau de type <see cref="T:System.Reflection.ParameterInfo" /> contenant les paramètres des index.</span><span class="sxs-lookup"><span data-stu-id="7a808-183">An array of type <see cref="T:System.Reflection.ParameterInfo" /> containing the parameters for the indexes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-184">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-184">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-185">Le <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> méthode retourne un tableau de tous les paramètres d’index pour la propriété</span><span class="sxs-lookup"><span data-stu-id="7a808-185">The <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method returns an array of all the index parameters for the property</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a808-186">Fournit aux objets COM un accès indépendant à la version aux méthodes <see cref="Overload:System.Reflection.PropertyInfo.GetSetMethod" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-186">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.PropertyInfo.GetSetMethod" /> methods.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-187">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-187">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-188">Le <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> méthodes retournent un <xref:System.Reflection.MethodInfo> objet représentant le `set` accesseur pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-188">The <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> methods return a <xref:System.Reflection.MethodInfo> object representing the `set` accessor for this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetSetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetSetMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="_PropertyInfo.GetSetMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a808-189">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.GetSetMethod" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-189">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetSetMethod" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-190">Objet <see cref="T:System.Reflection.MethodInfo" /> représentant la méthode <see langword="Set" /> de cette propriété si l'accesseur <see langword="set" /> est public ou <see langword="null" /> si l'accesseur <see langword="set" /> n'est pas public.</span><span class="sxs-lookup"><span data-stu-id="7a808-190">The <see cref="T:System.Reflection.MethodInfo" /> object representing the <see langword="Set" /> method for this property if the <see langword="set" /> accessor is public, or <see langword="null" /> if the <see langword="set" /> accessor is not public.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-191">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-191">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-192">Le <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> méthode retourne le grand public `set` accesseur pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-192">The <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method returns the public `set` accessor for this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetSetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="_PropertyInfo.GetSetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="7a808-193"><see langword="true" /> pour retourner un accesseur non public ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-193"><see langword="true" /> to return a non-public accessor; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7a808-194">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-194">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-195">Une des valeurs du tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="7a808-195">One of the values in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="7a808-196">Value</span><span class="sxs-lookup"><span data-stu-id="7a808-196">Value</span></span> 
 </term><description> <span data-ttu-id="7a808-197">Signification</span><span class="sxs-lookup"><span data-stu-id="7a808-197">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="7a808-198">Objet <see cref="T:System.Reflection.MethodInfo" /> représentant la méthode <see langword="Set" /> de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-198">A <see cref="T:System.Reflection.MethodInfo" /> object representing the <see langword="Set" /> method for this property.</span></span>  
  
 </term><description> <span data-ttu-id="7a808-199">L'accesseur <see langword="set" /> est public.</span><span class="sxs-lookup"><span data-stu-id="7a808-199">The <see langword="set" /> accessor is public.</span></span>  
  
<span data-ttu-id="7a808-200">- ou -</span><span class="sxs-lookup"><span data-stu-id="7a808-200">-or-</span></span> 
<span data-ttu-id="7a808-201">Le paramètre <paramref name="nonPublic" /> est <see langword="true" /> et l'accesseur <see langword="set" /> est non public.</span><span class="sxs-lookup"><span data-stu-id="7a808-201">The <paramref name="nonPublic" /> parameter is <see langword="true" /> and the <see langword="set" /> accessor is non-public.</span></span>  
  
 </description></item><item><term><see langword="null" /></term><description> <span data-ttu-id="7a808-202">Le paramètre <paramref name="nonPublic" /> est <see langword="true" /> mais la propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="7a808-202">The <paramref name="nonPublic" /> parameter is <see langword="true" />, but the property is read-only.</span></span>  
  
<span data-ttu-id="7a808-203">- ou -</span><span class="sxs-lookup"><span data-stu-id="7a808-203">-or-</span></span> 
<span data-ttu-id="7a808-204">Le paramètre <paramref name="nonPublic" /> est <see langword="false" /> et l'accesseur <see langword="set" /> est non public.</span><span class="sxs-lookup"><span data-stu-id="7a808-204">The <paramref name="nonPublic" /> parameter is <see langword="false" /> and the <see langword="set" /> accessor is non-public.</span></span>  
  
<span data-ttu-id="7a808-205">- ou -</span><span class="sxs-lookup"><span data-stu-id="7a808-205">-or-</span></span> 
<span data-ttu-id="7a808-206">Il n'existe aucun accesseur <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-206">There is no <see langword="set" /> accessor.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-207">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-207">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-208">Le <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> méthode retourne le `set` accesseur pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-208">The <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method returns the `set` accessor for this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberSignature Language="F#" Value="abstract member GetType : unit -&gt; Type" Usage="_PropertyInfo.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a808-209">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Object.GetType" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-209">Provides COM objects with version-independent access to the <see cref="M:System.Object.GetType" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-210">Objet <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-210">A <see cref="T:System.Type" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-211">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-211">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-212">Le <xref:System.Object.GetType%2A> méthode obtient le type de l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="7a808-212">The <xref:System.Object.GetType%2A> method gets the type of the current instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit" Usage="_PropertyInfo.GetTypeInfo (iTInfo, lcid, ppTInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="7a808-213">Informations de type à retourner.</span><span class="sxs-lookup"><span data-stu-id="7a808-213">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="7a808-214">Identificateur des paramètres régionaux pour les informations de type.</span><span class="sxs-lookup"><span data-stu-id="7a808-214">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="7a808-215">Pointeur vers l'objet d'informations de type demandé.</span><span class="sxs-lookup"><span data-stu-id="7a808-215">A pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="7a808-216">Récupère les informations de type pour un objet, qui peuvent être utilisées pour obtenir les informations de type d'une interface.</span><span class="sxs-lookup"><span data-stu-id="7a808-216">Retrieves the type information for an object, which can be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-217">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-217">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span> <span data-ttu-id="7a808-218">Pour plus d’informations sur `IDispatch::GetTypeInfo`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="7a808-218">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoCount">
      <MemberSignature Language="C#" Value="public void GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfoCount (ByRef pcTInfo As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfoCount :  -&gt; unit" Usage="_PropertyInfo.GetTypeInfoCount pcTInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="7a808-219">Cette méthode retourne un pointeur vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</span><span class="sxs-lookup"><span data-stu-id="7a808-219">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object.</span></span> <span data-ttu-id="7a808-220">Ce paramètre est passé sans être initialisé.</span><span class="sxs-lookup"><span data-stu-id="7a808-220">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="7a808-221">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</span><span class="sxs-lookup"><span data-stu-id="7a808-221">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-222">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-222">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span> <span data-ttu-id="7a808-223">Pour plus d’informations sur `IDispatch::GetTypeInfoCount`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="7a808-223">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a808-224">Fournit aux objets COM un accès indépendant à la version aux méthodes <see cref="Overload:System.Reflection.PropertyInfo.GetValue" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-224">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.PropertyInfo.GetValue" /> methods.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-225">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-225">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-226">Le <xref:System.Reflection.PropertyInfo.GetValue%2A> méthodes retournent la valeur de la propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-226">The <xref:System.Reflection.PropertyInfo.GetValue%2A> methods return the value of the property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object obj, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (obj As Object, index As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * obj[] -&gt; obj" Usage="_PropertyInfo.GetValue (obj, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7a808-227">Objet dont la valeur de propriété sera retournée.</span><span class="sxs-lookup"><span data-stu-id="7a808-227">The object whose property value will be returned.</span></span></param>
        <param name="index"><span data-ttu-id="7a808-228">Valeurs d'index facultatives pour les propriétés indexées.</span><span class="sxs-lookup"><span data-stu-id="7a808-228">Optional index values for indexed properties.</span></span> <span data-ttu-id="7a808-229">Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</span><span class="sxs-lookup"><span data-stu-id="7a808-229">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <summary><span data-ttu-id="7a808-230">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-230">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-231">Valeur de propriété du paramètre <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-231">The property value for the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-232">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-232">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-233">Le <xref:System.Reflection.PropertyInfo.GetValue%2A> méthode retourne une valeur littérale associée à la propriété par un compilateur.</span><span class="sxs-lookup"><span data-stu-id="7a808-233">The <xref:System.Reflection.PropertyInfo.GetValue%2A> method returns a literal value associated with the property by a compiler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="_PropertyInfo.GetValue (obj, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7a808-234">Objet dont la valeur de propriété sera retournée.</span><span class="sxs-lookup"><span data-stu-id="7a808-234">The object whose property value will be returned.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="7a808-235">Attribut d’appel.</span><span class="sxs-lookup"><span data-stu-id="7a808-235">The invocation attribute.</span></span> <span data-ttu-id="7a808-236">Il doit s’agir d’un indicateur de bit de <see langword="BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-236">This must be a bit flag from <see langword="BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span> <span data-ttu-id="7a808-237">Un attribut d’appel approprié doit être spécifié.</span><span class="sxs-lookup"><span data-stu-id="7a808-237">A suitable invocation attribute must be specified.</span></span> <span data-ttu-id="7a808-238">Si le membre à appeler est statique, l'indicateur <see langword="Static" /> de <see langword="BindingFlags" /> doit être défini.</span><span class="sxs-lookup"><span data-stu-id="7a808-238">If a static member will be invoked, the <see langword="Static" /> flag of <see langword="BindingFlags" /> must be set.</span></span></param>
        <param name="binder"><span data-ttu-id="7a808-239">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see langword="MemberInfo" /> par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="7a808-239">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="7a808-240">Si <paramref name="binder" /> est <see langword="null" />, le binder par défaut est utilisé.</span><span class="sxs-lookup"><span data-stu-id="7a808-240">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="index"><span data-ttu-id="7a808-241">Valeurs d'index facultatives pour les propriétés indexées.</span><span class="sxs-lookup"><span data-stu-id="7a808-241">Optional index values for indexed properties.</span></span> <span data-ttu-id="7a808-242">Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</span><span class="sxs-lookup"><span data-stu-id="7a808-242">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <param name="culture"><span data-ttu-id="7a808-243">Objet <see langword="CultureInfo" /> qui représente la culture pour laquelle la ressource sera localisée.</span><span class="sxs-lookup"><span data-stu-id="7a808-243">The <see langword="CultureInfo" /> object that represents the culture for which the resource will be localized.</span></span> <span data-ttu-id="7a808-244">Notez que si la ressource n'est pas localisée pour cette culture, la méthode <see langword="CultureInfo.Parent" /> sera appelée pour rechercher une correspondance.</span><span class="sxs-lookup"><span data-stu-id="7a808-244">Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent" /> method will be called successively in search of a match.</span></span> <span data-ttu-id="7a808-245">Si cette valeur est <see langword="null" />, <see langword="CultureInfo" /> est obtenu à partir de la propriété <see langword="CultureInfo.CurrentUICulture" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-245">If this value is <see langword="null" />, the <see langword="CultureInfo" /> is obtained from the <see langword="CultureInfo.CurrentUICulture" /> property.</span></span></param>
        <summary><span data-ttu-id="7a808-246">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-246">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-247">Valeur de propriété du paramètre <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-247">The property value for the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-248">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-248">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-249">Le <xref:System.Reflection.PropertyInfo.GetValue%2A> méthode retourne la valeur d’une propriété ayant la liaison spécifiée, index, et <xref:System.Globalization.CultureInfo>.</span><span class="sxs-lookup"><span data-stu-id="7a808-249">The <xref:System.Reflection.PropertyInfo.GetValue%2A> method returns the value of a property having the specified binding, index, and <xref:System.Globalization.CultureInfo>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : uint32 *  * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit" Usage="_PropertyInfo.Invoke (dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="7a808-250">Identificateur d'un membre.</span><span class="sxs-lookup"><span data-stu-id="7a808-250">An identifier of a member.</span></span></param>
        <param name="riid"><span data-ttu-id="7a808-251">Réservé à un usage ultérieur.</span><span class="sxs-lookup"><span data-stu-id="7a808-251">Reserved for future use.</span></span> <span data-ttu-id="7a808-252">Doit être IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="7a808-252">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="7a808-253">Contexte des paramètres régionaux dans lequel interpréter les arguments.</span><span class="sxs-lookup"><span data-stu-id="7a808-253">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="7a808-254">Indicateurs décrivant le contexte de l'appel.</span><span class="sxs-lookup"><span data-stu-id="7a808-254">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="7a808-255">Pointeur vers une structure qui contient un tableau d'arguments, un tableau d'arguments DISPID pour les arguments nommés et le nombre d'éléments dans les tableaux.</span><span class="sxs-lookup"><span data-stu-id="7a808-255">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="7a808-256">Pointeur vers l'emplacement où le résultat sera stocké.</span><span class="sxs-lookup"><span data-stu-id="7a808-256">A pointer to the location where the result will be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="7a808-257">Pointeur vers une structure qui contient les informations sur les exceptions.</span><span class="sxs-lookup"><span data-stu-id="7a808-257">A pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="7a808-258">Index du premier argument comportant une erreur.</span><span class="sxs-lookup"><span data-stu-id="7a808-258">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="7a808-259">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</span><span class="sxs-lookup"><span data-stu-id="7a808-259">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-260">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-260">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span> <span data-ttu-id="7a808-261">Pour plus d’informations sur `IDispatch::Invoke`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="7a808-261">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool" Usage="_PropertyInfo.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="7a808-262">Objet <see cref="T:System.Type" /> auquel les attributs personnalisés sont appliqués.</span><span class="sxs-lookup"><span data-stu-id="7a808-262">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</span></span></param>
        <param name="inherit"><span data-ttu-id="7a808-263">true pour rechercher les attributs dans la chaîne d'héritage de ce membre ; sinon, false.</span><span class="sxs-lookup"><span data-stu-id="7a808-263">true to search this member's inheritance chain to find the attributes; otherwise false.</span></span></param>
        <summary><span data-ttu-id="7a808-264">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-264">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-265"><see langword="true" /> si une ou plusieurs instances du paramètre <paramref name="attributeType" /> sont appliquées à ce membre ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-265"><see langword="true" /> if one or more instances of the <paramref name="attributeType" /> parameter are applied to this member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-266">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-266">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-267">Le <xref:System.Reflection.MemberInfo.IsDefined%2A> méthode indique si un ou plusieurs instances de le `attributeType` paramètre est appliqué à ce membre.</span><span class="sxs-lookup"><span data-stu-id="7a808-267">The <xref:System.Reflection.MemberInfo.IsDefined%2A> method indicates whether one or more instance of the `attributeType` parameter is applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._PropertyInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Runtime.InteropServices._PropertyInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a808-268">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.PropertyInfo.IsSpecialName" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-268">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.IsSpecialName" /> property.</span></span></summary>
        <value><span data-ttu-id="7a808-269"><see langword="true" /> si cette propriété correspond au nom spécial ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-269"><see langword="true" /> if this property is the special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-270">Cette propriété permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-270">This property is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-271">Le <xref:System.Reflection.PropertyInfo.IsSpecialName%2A> propriété définit une valeur indiquant si la propriété correspond au nom spécial.</span><span class="sxs-lookup"><span data-stu-id="7a808-271">The <xref:System.Reflection.PropertyInfo.IsSpecialName%2A> property sets a value indicating whether the property is the special name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._PropertyInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Runtime.InteropServices._PropertyInfo.MemberType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a808-272">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.PropertyInfo.MemberType" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-272">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.MemberType" /> property.</span></span></summary>
        <value><span data-ttu-id="7a808-273">L'une des valeurs <see cref="T:System.Reflection.MemberTypes" /> indiquant que ce membre est une propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-273">One of the <see cref="T:System.Reflection.MemberTypes" /> values indicating that this member is a property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-274">Cette propriété permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-274">This property is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-275">Le <xref:System.Reflection.PropertyInfo.MemberType%2A> propriété obtient un <xref:System.Reflection.MemberTypes> indiquant que ce membre est une propriété de valeur.</span><span class="sxs-lookup"><span data-stu-id="7a808-275">The <xref:System.Reflection.PropertyInfo.MemberType%2A> property gets a <xref:System.Reflection.MemberTypes> value indicating that this member is a property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._PropertyInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Runtime.InteropServices._PropertyInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a808-276">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MemberInfo.Name" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-276">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</span></span></summary>
        <value><span data-ttu-id="7a808-277">Objet <see cref="T:System.String" /> contenant le nom de ce membre.</span><span class="sxs-lookup"><span data-stu-id="7a808-277">A <see cref="T:System.String" /> object containing the name of this member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-278">Cette propriété permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-278">This property is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-279">Le <xref:System.Reflection.MemberInfo.Name%2A> propriété obtient le nom du membre actuel.</span><span class="sxs-lookup"><span data-stu-id="7a808-279">The <xref:System.Reflection.MemberInfo.Name%2A> property gets the name of the current member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._PropertyInfo.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Runtime.InteropServices._PropertyInfo.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a808-280">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-280">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> property.</span></span></summary>
        <value><span data-ttu-id="7a808-281">Type de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-281">The type of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-282">Cette propriété permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-282">This property is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-283">Le <xref:System.Reflection.PropertyInfo.PropertyType%2A> propriété obtient le type de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-283">The <xref:System.Reflection.PropertyInfo.PropertyType%2A> property gets the type of this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._PropertyInfo.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Runtime.InteropServices._PropertyInfo.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a808-284">Fournit des objets COM avec un accès indépendant de la version à la propriété <see cref="P:System.Reflection.MemberInfo.ReflectedType" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-284">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> property.</span></span></summary>
        <value><span data-ttu-id="7a808-285">Objet <see cref="T:System.Type" /> via lequel cet objet <see cref="T:System.Reflection.MemberInfo" /> a été obtenu.</span><span class="sxs-lookup"><span data-stu-id="7a808-285">The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-286">Cette propriété permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-286">This property is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-287">Le <xref:System.Reflection.MemberInfo.ReflectedType%2A> propriété obtient l’objet de classe qui a été utilisé pour obtenir ce <xref:System.Reflection.MemberInfo> objet.</span><span class="sxs-lookup"><span data-stu-id="7a808-287">The <xref:System.Reflection.MemberInfo.ReflectedType%2A> property gets the class object that was used to obtain this <xref:System.Reflection.MemberInfo> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a808-288">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="Overload:System.Reflection.PropertyInfo.SetValue" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-288">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.PropertyInfo.SetValue" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-289">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-289">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-290">Le <xref:System.Reflection.PropertyInfo.SetValue%2A> méthode définit la valeur de propriété pour l’objet donné sur la valeur donnée.</span><span class="sxs-lookup"><span data-stu-id="7a808-290">The <xref:System.Reflection.PropertyInfo.SetValue%2A> method sets the property value for the given object to the given value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (obj As Object, value As Object, index As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ obj, System::Object ^ value, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * obj[] -&gt; unit" Usage="_PropertyInfo.SetValue (obj, value, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7a808-291">Objet dont la valeur de propriété sera définie.</span><span class="sxs-lookup"><span data-stu-id="7a808-291">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="7a808-292">Nouvelle valeur de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-292">The new value for this property.</span></span></param>
        <param name="index"><span data-ttu-id="7a808-293">Valeurs d'index facultatives pour les propriétés indexées.</span><span class="sxs-lookup"><span data-stu-id="7a808-293">Optional index values for indexed properties.</span></span> <span data-ttu-id="7a808-294">Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</span><span class="sxs-lookup"><span data-stu-id="7a808-294">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <summary><span data-ttu-id="7a808-295">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-295">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-296">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-296">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-297">Le <xref:System.Reflection.PropertyInfo.SetValue%2A> méthode définit la valeur de la propriété avec des valeurs d’index facultatives pour les propriétés de l’index.</span><span class="sxs-lookup"><span data-stu-id="7a808-297">The <xref:System.Reflection.PropertyInfo.SetValue%2A> method sets the value of the property with optional index values for index properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; unit" Usage="_PropertyInfo.SetValue (obj, value, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7a808-298">Objet dont la valeur de propriété sera retournée.</span><span class="sxs-lookup"><span data-stu-id="7a808-298">The object whose property value will be returned.</span></span></param>
        <param name="value"><span data-ttu-id="7a808-299">Nouvelle valeur de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="7a808-299">The new value for this property.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="7a808-300">Attribut d’appel.</span><span class="sxs-lookup"><span data-stu-id="7a808-300">The invocation attribute.</span></span> <span data-ttu-id="7a808-301">Il doit s’agir d’un indicateur de bit de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-301">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span> <span data-ttu-id="7a808-302">Un attribut d’appel approprié doit être spécifié.</span><span class="sxs-lookup"><span data-stu-id="7a808-302">A suitable invocation attribute must be specified.</span></span> <span data-ttu-id="7a808-303">Si le membre à appeler est statique, l'indicateur <see langword="Static" /> de <see langword="BindingFlags" /> doit être défini.</span><span class="sxs-lookup"><span data-stu-id="7a808-303">If a static member will be invoked, the <see langword="Static" /> flag of <see langword="BindingFlags" /> must be set.</span></span></param>
        <param name="binder"><span data-ttu-id="7a808-304">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see cref="T:System.Reflection.MemberInfo" /> par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="7a808-304">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="7a808-305">Si <paramref name="binder" /> est <see langword="null" />, le binder par défaut est utilisé.</span><span class="sxs-lookup"><span data-stu-id="7a808-305">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="index"><span data-ttu-id="7a808-306">Valeurs d'index facultatives pour les propriétés indexées.</span><span class="sxs-lookup"><span data-stu-id="7a808-306">Optional index values for indexed properties.</span></span> <span data-ttu-id="7a808-307">Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</span><span class="sxs-lookup"><span data-stu-id="7a808-307">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <param name="culture"><span data-ttu-id="7a808-308">Objet <see cref="T:System.Globalization.CultureInfo" /> qui représente la culture pour laquelle la ressource sera localisée.</span><span class="sxs-lookup"><span data-stu-id="7a808-308">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource will be localized.</span></span> <span data-ttu-id="7a808-309">Notez que si la ressource n'est pas localisée pour cette culture, la méthode <see langword="CultureInfo.Parent" /> sera appelée pour rechercher une correspondance.</span><span class="sxs-lookup"><span data-stu-id="7a808-309">Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent" /> method will be called successively in search of a match.</span></span> <span data-ttu-id="7a808-310">Si cette valeur est <see langword="null" />, <see langword="CultureInfo" /> est obtenu à partir de la propriété <see langword="CultureInfo.CurrentUICulture" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-310">If this value is <see langword="null" />, the <see langword="CultureInfo" /> is obtained from the <see langword="CultureInfo.CurrentUICulture" /> property.</span></span></param>
        <summary><span data-ttu-id="7a808-311">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-311">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-312">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-312">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="7a808-313">Le <xref:System.Reflection.FieldInfo.SetValue%2A> méthode définit la valeur de propriété pour l’objet donné sur la valeur donnée.</span><span class="sxs-lookup"><span data-stu-id="7a808-313">The <xref:System.Reflection.FieldInfo.SetValue%2A> method sets the property value for the given object to the given value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._PropertyInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string" Usage="_PropertyInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a808-314">Fournit des objets COM avec un accès indépendant de la version à la méthode <see cref="M:System.Object.ToString" />.</span><span class="sxs-lookup"><span data-stu-id="7a808-314">Provides COM objects with version-independent access to the <see cref="M:System.Object.ToString" /> method.</span></span></summary>
        <returns><span data-ttu-id="7a808-315">Chaîne qui représente le <see cref="T:System.Object" /> actuel.</span><span class="sxs-lookup"><span data-stu-id="7a808-315">A string that represents the current <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a808-316">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="7a808-316">This method is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
