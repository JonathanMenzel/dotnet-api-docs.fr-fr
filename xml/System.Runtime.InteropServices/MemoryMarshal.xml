<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba108f24cdd14bdd191ab4a9c2dec3b4afe25664" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57934078" /></Metadata><TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4bd4c-101">Fournit des méthodes pour interagir avec <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> et <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-102">Le type d’éléments dans l’étendue en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-102">The type of items in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="4bd4c-103">Section source à convertir.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-103">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="4bd4c-104">Convertit un élément <see cref="T:System.ReadOnlySpan`1" /> d’un type primitif, <paramref name="T" />, en un élément <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-105">Étendue en lecture seule de type <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-105">A read-only span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-106">`T` ne peut pas contenir les pointeurs ou références.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4bd4c-107">`T` est vérifiée lors de l’exécution afin de préserver la sécurité de type.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd4c-108"><paramref name="T" /> contient des références ou des pointeurs.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-108"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4bd4c-109">La propriété <see cref="P:System.ReadOnlySpan`1.Length" /> du nouveau <see cref="T:System.ReadOnlySpan`1" /> dépasserait <see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="4bd4c-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-110">Le type d’éléments dans l’étendue.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-110">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="4bd4c-111">Section source à convertir.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-111">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="4bd4c-112">Convertit un élément <see cref="T:System.Span`1" /> d’un type primitif, <paramref name="T" />, en un élément <see langword="Span&lt;Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-113">Une étendue de type <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-113">A span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-114">`T` ne peut pas contenir les pointeurs ou références.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4bd4c-115">`T` est vérifiée lors de l’exécution afin de préserver la sécurité de type.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd4c-116"><paramref name="T" /> contient des références ou des pointeurs.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-116"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4bd4c-117">La propriété <see cref="P:System.Span`1.Length" /> du nouveau <see cref="T:System.Span`1" /> dépasserait <see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="4bd4c-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-118">Type des éléments dans la mémoire tampon de la mémoire morte.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-118">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="4bd4c-119">Mémoire tampon en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-119">The read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="4bd4c-120">Crée une instance <see cref="T:System.Memory`1" /> à partir d'un élément <see cref="T:System.ReadOnlyMemory`1" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-121">Bloc de mémoire représentant la même mémoire que <see cref="T:System.ReadOnlyMemory`1" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-121">A memory block that represetns the same memory as the <see cref="T:System.ReadOnlyMemory`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-122">Cette méthode doit être utilisée avec une extrême prudence.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="4bd4c-123"><xref:System.ReadOnlyMemory%601> est utilisé pour représenter les données immuables et autres mémoire qui n’est pas censée être écrites dans.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="4bd4c-124"><xref:System.Memory%601> les instances créées par cette méthode ne doivent pas être écrit pour.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="4bd4c-125">L’objectif de cette méthode consiste à autoriser les variables de type <xref:System.Memory%601> , mais il est utilisé uniquement pour la lecture pour stocker un <xref:System.ReadOnlyMemory%601>.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref readonly T&amp; AsRef&lt;T&gt; (ReadOnlySpan&lt;byte&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig T&amp; modreq(System.Runtime.InteropServices.InAttribute) AsRef&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T As Structure) (span As ReadOnlySpan(Of Byte)) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T&amp; ^ AsRef(ReadOnlySpan&lt;System::Byte&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsRef : ReadOnlySpan&lt;byte&gt; -&gt; T&amp; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsRef span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-3.0">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T AsRef&lt;T&gt; (Span&lt;byte&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T As Structure) (span As Span(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T % AsRef(Span&lt;System::Byte&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsRef : Span&lt;byte&gt; -&gt;  (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsRef span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="4bd4c-126">Le type de l’étendue de la source.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-126">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="4bd4c-127">Le type de l’étendue cible.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-127">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="4bd4c-128">Section source à convertir.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-128">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="4bd4c-129">Convertit une étendue en lecture seule d’un type primitif en une étendue en lecture seule d’un autre type primitif.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-129">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-130">Étendue convertie en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-130">The converted read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-131">Ni `TFrom` ni `TTo` peut contenir les pointeurs ou références.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-131">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="4bd4c-132">`TFrom` et `TTo` sont vérifiées lors de l’exécution afin de préserver la sécurité de type.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-132">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="4bd4c-133">Cette méthode est prise en charge uniquement sur les plateformes qui prennent en charge les accès mémoire non alignées ou la mémoire dans un bloc est aligné par d’autres moyens.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-133">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd4c-134"><paramref name="TFrom" /> ou <paramref name="TTo" /> contient des références ou des pointeurs.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-134"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="4bd4c-135">Le type de l’étendue de la source.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-135">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="4bd4c-136">Le type de l’étendue cible.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-136">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="4bd4c-137">Section source à convertir.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-137">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="4bd4c-138">Convertit une étendue d’un type primitif en une étendue d’un autre type primitif.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-138">Casts a span of one primitive type to a span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-139">Étendue convertie.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-139">The converted span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-140">Ni `TFrom` ni `TTo` peut contenir les pointeurs ou références.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-140">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="4bd4c-141">`TFrom` et `TTo` sont vérifiées lors de l’exécution afin de préserver la sécurité de type.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-141">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="4bd4c-142">Le cast se produit dans un contexte non vérifié.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-142">The cast occurs in an unchecked context.</span></span> <span data-ttu-id="4bd4c-143">Si la plage de `TTo` est inférieure à la plage de `TFrom`, une perte de données peut se produire.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-143">If the range of `TTo` is less than the range of `TFrom`, data loss can occur.</span></span> <span data-ttu-id="4bd4c-144">Par exemple, si `TFrom` est <xref:System.Int64>, l’un de le `ReadOnlySpan<Int32>` valeurs est 0x100001111110F0F, et `TTo` est <xref:System.Int32>, la valeur résultante est 11110F0F.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-144">For example, if `TFrom` is <xref:System.Int64>, one of the `ReadOnlySpan<Int32>` values is 0x100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting value is 11110F0F.</span></span>

<span data-ttu-id="4bd4c-145">Cette méthode est prise en charge uniquement sur les plateformes qui prennent en charge les accès mémoire non alignées ou la mémoire dans un bloc est aligné par d’autres moyens.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-145">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd4c-146"><paramref name="TFrom" /> ou <paramref name="TTo" /> contient des références ou des pointeurs.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-146"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-147">Type de tableau.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-147">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="4bd4c-148">Tableau source préalablement épinglé.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-148">The pre-pinned source array.</span></span></param>
        <param name="start"><span data-ttu-id="4bd4c-149">Index de <paramref name="array" /> où commencer le bloc de mémoire.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-149">The index of <paramref name="array" /> at which to begin the memory block.</span></span></param>
        <param name="length"><span data-ttu-id="4bd4c-150">Nombre d’éléments à inclure dans le bloc de mémoire.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-150">The number of items to include in the memory block.</span></span></param>
        <summary><span data-ttu-id="4bd4c-151">Crée une nouvelle mémoire tampon sur la partie du tableau cible déjà épinglé commençant à l’index <paramref name="start" /> et comprenant des éléments <paramref name="length" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-151">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-152">Bloc de mémoire sur les éléments spécifiés de <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-152">A block of memory over the specified elements of <paramref name="array" />.</span></span> <span data-ttu-id="4bd4c-153">Si <paramref name="array" /> est <see langword="null" />, ou si <paramref name="start" /> et <paramref name="length" /> sont 0, la méthode retourne une instance <see cref="T:System.Memory`1" /> de <see cref="System.Memory`1.Length" /> égale à zéro.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-153">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="System.Memory`1.Length" /> zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-154">Le tableau doit déjà être épinglé avant que cette méthode est appelée, et ce tableau ne doit pas être libéré lors de la <xref:System.Memory%601> mémoire tampon qu’elle retourne est en cours d’utilisation.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-154">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="4bd4c-155">Appel de cette méthode sur un tableau sans attente pourrait entraîner une altération de la mémoire.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-155">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="4bd4c-156">La valeur <paramref name="array" /> est covariante et le type de <paramref name="array" /> n’est pas exactement <paramref name="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-156"><paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4bd4c-157">La valeur <paramref name="start" /> ou l’index de fin n’est pas dans la plage de 0 à <see cref="P:System.Array.Length" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-157">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan :  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-158">Le type des éléments de données.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-158">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="4bd4c-159">Référence à des données.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-159">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="4bd4c-160">Nombre d'éléments <paramref name="T" /> que contient <paramref name="reference" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-160">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="4bd4c-161">Crée une nouvelle étendue en lecture seule sur une partie d’un objet managé normal.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-161">Creates a new read-only span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-162">Étendue en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-162">A read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-163">Cette méthode peut être utile si la partie d’un objet managé représente un tableau fixe.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-163">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="4bd4c-164">Cette méthode doit être utilisée avec précaution.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-164">This method should be used with caution.</span></span> <span data-ttu-id="4bd4c-165">Il est dangereux, car le `length` argument n’est pas vérifié.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-165">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="4bd4c-166">En outre, la durée de vie de l’étendue retournée n’est pas validée par les langages prenant en charge étendue pour la sécurité.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-166">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan :  * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-167">Le type des éléments de données.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-167">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="4bd4c-168">Référence à des données.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-168">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="4bd4c-169">Nombre d'éléments <paramref name="T" /> que contient <paramref name="reference" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-169">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="4bd4c-170">Crée une nouvelle étendue sur une partie d’un objet managé normal.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-170">Creates a new span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-171">Étendue.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-171">A span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-172">Cette méthode peut être utile si la partie d’un objet managé représente un tableau fixe.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-172">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="4bd4c-173">Cette méthode doit être utilisée avec précaution.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-173">This method should be used with caution.</span></span> <span data-ttu-id="4bd4c-174">Il est dangereux, car le `length` argument n’est pas vérifié.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-174">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="4bd4c-175">En outre, la durée de vie de l’étendue retournée n’est pas validée par les langages prenant en charge étendue pour la sécurité.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-175">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-176">Le type d’éléments dans l’étendue.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-176">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="4bd4c-177">Étendue en lecture seule à partir de laquelle la référence est extraite.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-177">The read-only span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="4bd4c-178">Retourne une référence à l’élément de l’étendue en lecture seule à l’index 0.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-178">Returns a reference to the element of the read-only span at index 0.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-179">Référence à l'élément à l’index 0.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-179">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-180">Si l’étendue en lecture seule est vide, cette méthode retourne une référence à l’emplacement où l’élément à l’index 0 aurait été stocké.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-180">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="4bd4c-181">Une telle référence peut être ou non `null`.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-181">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="4bd4c-182">La référence retournée peut être utilisée pour l’épinglage, mais il ne doit jamais être déréférencé.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-182">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-183">Le type d’éléments dans l’étendue.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-183">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="4bd4c-184">Étendue en lecture seule à partir de laquelle la référence est récupérée.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-184">The span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="4bd4c-185">Retourne une référence à l’élément de l’étendue à l’index 0.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-185">Returns a reference to the element of the span at index 0.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-186">Référence à l'élément à l’index 0.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-186">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-187">Si l’étendue est vide, cette méthode retourne une référence à l’emplacement où l’élément à l’index 0 aurait été stocké.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-187">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="4bd4c-188">Une telle référence peut être ou non `null`.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-188">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="4bd4c-189">La référence retournée peut être utilisée pour l’épinglage, mais il ne doit jamais être déréférencé.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-189">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-190">Le type de l’élément à récupérer à partir de l’étendue en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-190">The type of the item to retrieve from the read-only span.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4bd4c-191">Étendue en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-191">A read-only span.</span></span></param>
        <summary><span data-ttu-id="4bd4c-192">Lit une structure de type</span><span class="sxs-lookup"><span data-stu-id="4bd4c-192">Reads a structure of type</span></span> <param name="T" /> <span data-ttu-id="4bd4c-193">en dehors d’une étendue d’octets en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-193">out of a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-194">Structure récupérée à partir de l’étendue en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-194">The structure retrieved from the read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-195">`T` ne peut pas contenir les pointeurs ou références.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-195">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4bd4c-196">' Option est activée lors de l’exécution afin de préserver la sécurité de type.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-196">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd4c-197"><paramref name="T" /> contient des références ou des pointeurs.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-197"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4bd4c-198"><paramref name="source" /> est plus petit que <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-198"><paramref name="source" /> is smaller than <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-199">Le type des éléments dans la mémoire tampon de la mémoire morte.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-199">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="4bd4c-200">Mémoire tampon en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-200">A read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="4bd4c-201">Crée une vue <see cref="T:System.Collections.Generic.IEnumerable`1" /> de la mémoire tampon en lecture seule donnée.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-201">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-202">Vue énumérable de <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-202">An enumerable view of <paramref name="memory" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-203">Cette méthode permet à une mémoire tampon de mémoire à utiliser dans les API existantes qui requièrent un paramètre de type <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-203">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-204">Type des éléments dans la mémoire tampon de la mémoire morte.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-204">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="4bd4c-205">Mémoire tampon en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-205">A read-only memory buffer.</span></span></param>
        <param name="segment"><span data-ttu-id="4bd4c-206">Lorsque cette méthode est retournée, contient le segment de tableau récupéré à partir de la mémoire tampon en lecture seule sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-206">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span></span> <span data-ttu-id="4bd4c-207">Si la méthode échoue, la méthode retourne un segment de tableau par défaut.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-207">If the method fails, the method returns a default array segment.</span></span></param>
        <summary><span data-ttu-id="4bd4c-208">Tente d’obtenir un segment de tableau à partir de la mémoire tampon sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-208">Tries to get an array segment from the underlying memory buffer.</span></span> <span data-ttu-id="4bd4c-209">La valeur de retour indique si l'opération a réussi.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-209">The return value indicates the success of the operation.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-210"><see langword="true" /> si l'appel de méthode a réussi ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-210"><see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-211">Le type des éléments dans la mémoire tampon de la mémoire morte.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-211">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="4bd4c-212">Le type de la <see cref="T:System.Buffers.MemoryManager`1" /> à récupérer.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-212">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="4bd4c-213">Mémoire tampon en lecture seule pour laquelle obtenir le Gestionnaire de mémoire.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-213">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="4bd4c-214">Quand la méthode est retournée, gestionnaire de <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-214">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <summary><span data-ttu-id="4bd4c-215">Tente de récupérer un élément <see cref="T:System.Buffers.MemoryManager`1" /> à partir de la mémoire tampon en lecture seule sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-215">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-216"><see langword="true" /> si la méthode a extrait le Gestionnaire de mémoire ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-216"><see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  *  *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-217">Le type des éléments dans la mémoire tampon de la mémoire morte.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-217">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="4bd4c-218">Le type de la <see cref="T:System.Buffers.MemoryManager`1" /> à récupérer.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-218">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="4bd4c-219">Mémoire tampon en lecture seule pour laquelle obtenir le Gestionnaire de mémoire.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-219">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="4bd4c-220">Quand la méthode est retournée, gestionnaire de <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-220">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <param name="start"><span data-ttu-id="4bd4c-221">Quand la méthode est retournée, offset à partir du début du <paramref name="manager" /> représenté par <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-221">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <param name="length"><span data-ttu-id="4bd4c-222">Quand la méthode est retournée, longueur du <paramref name="manager" /> représenté par <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-222">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <summary><span data-ttu-id="4bd4c-223">Tente de récupérer un élément <see cref="T:System.Buffers.MemoryManager`1" />, un index de début et une longueur à partir de la mémoire tampon en lecture seule sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-223">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-224"><see langword="true" /> si la méthode a réussi ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-224"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; *  *  *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="4bd4c-225">Mémoire en lecture seule contenant un bloc de caractères.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-225">Read-only memory containing a block of characters.</span></span></param>
        <param name="text"><span data-ttu-id="4bd4c-226">Lorsque la méthode est retournée, la chaîne contenue dans la mémoire tampon.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-226">When the method returns, the string contained in the memory buffer.</span></span></param>
        <param name="start"><span data-ttu-id="4bd4c-227">Emplacement de départ dans <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-227">The starting location in <paramref name="text" />.</span></span></param>
        <param name="length"><span data-ttu-id="4bd4c-228">Nombre de caractères dans <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-228">The number of characters in <paramref name="text" />.</span></span></param>
        <summary><span data-ttu-id="4bd4c-229">Tente d’obtenir la chaîne sous-jacente à partir d’un élément <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-229">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-230"><see langword="true" /> si la méthode a réussi à récupérer la chaîne sous-jacente ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-230"><see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-231">Le type de la structure à récupérer.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-231">The type of the structure to retrieve.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4bd4c-232">Étendue d’octets en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-232">A read-only span of bytes.</span></span></param>
        <param name="value"><span data-ttu-id="4bd4c-233">Quand la méthode est retournée, instance de <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-233">When the method returns, an instance of <paramref name="T" />.</span></span></param>
        <summary><span data-ttu-id="4bd4c-234">Tente de lire une structure de type <paramref name="T" /> à partir d’une étendue d’octets en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-234">Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-235"><see langword="true" /> si la méthode réussit lors de l’extraction d’une instance de la structure ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-235"><see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-236">`T` ne peut pas contenir les pointeurs ou références.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-236">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4bd4c-237">' Option est activée lors de l’exécution afin de préserver la sécurité de type.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-237">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd4c-238"><paramref name="T" /> contient des références ou des pointeurs.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-238"><paramref name="T" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-239">Le type de la structure.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-239">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="4bd4c-240">Étendue d’octets contenant la structure.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-240">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="4bd4c-241">Structure à écrire dans l’étendue.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-241">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="4bd4c-242">Tente d’écrire une structure de type <paramref name="T" /> dans une étendue d’octets.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-242">Tries to writes a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <returns><span data-ttu-id="4bd4c-243"><see langword="true" /> si l'opération d’écriture a abouti ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-243"><see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4bd4c-244">La méthode retourne <see langword="false" /> si l’étendue est trop petite pour contenir <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-244">The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-245">`T` ne peut pas contenir les pointeurs ou références.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-245">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4bd4c-246">' Option est activée lors de l’exécution afin de préserver la sécurité de type.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-246">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd4c-247"><paramref name="TFrom" /> ou <paramref name="TTo" /> contient des références ou des pointeurs.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-247"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; *  -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="4bd4c-248">Le type de la structure.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-248">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="4bd4c-249">Étendue d’octets contenant la structure.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-249">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="4bd4c-250">Structure à écrire dans l’étendue.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-250">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="4bd4c-251">Écrit une structure de type <paramref name="T" /> dans une étendue d’octets.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-251">Writes a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4bd4c-252">`T` ne peut pas contenir les pointeurs ou références.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-252">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4bd4c-253">' Option est activée lors de l’exécution afin de préserver la sécurité de type.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-253">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bd4c-254"><paramref name="T" /> contient des références ou des pointeurs.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-254"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4bd4c-255"><paramref name="destination" /> est trop petite pour contenir <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4bd4c-255"><paramref name="destination" /> is too small to contain <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>