<Type Name="IfElseActivity" FullName="System.Workflow.Activities.IfElseActivity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b6bd46a19226261b6ed3b4562e863c52fb8e6b22" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48735960" /></Metadata><TypeSignature Language="C#" Value="public sealed class IfElseActivity : System.Workflow.ComponentModel.CompositeActivity, System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IfElseActivity extends System.Workflow.ComponentModel.CompositeActivity implements class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Activities.IfElseActivity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IfElseActivity&#xA;Inherits CompositeActivity&#xA;Implements IActivityEventListener(Of ActivityExecutionStatusChangedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public ref class IfElseActivity sealed : System::Workflow::ComponentModel::CompositeActivity, System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::ActivityExecutionStatusChangedEventArgs ^&gt;" />
  <TypeSignature Language="F#" Value="type IfElseActivity = class&#xA;    inherit CompositeActivity&#xA;    interface IActivityEventListener&lt;ActivityExecutionStatusChangedEventArgs&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Activities</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.ComponentModel.CompositeActivity</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer(typeof(System.Workflow.Activities.IfElseDesigner), typeof(System.ComponentModel.Design.IDesigner))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItem(typeof(System.Workflow.Activities.IfElseToolboxItem))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.IfElseActivity), "Resources.Decision.png")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.IfElseValidator))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exécute de manière conditionnelle l'une des deux activités ou plus de type <see cref="T:System.Workflow.Activities.IfElseBranchActivity" />. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Cette activité fournit une sémantique semblable à deux instructions `If-ElseIf`.  
  
 <xref:System.Workflow.Activities.IfElseActivity> contient un jeu ordonné de classes <xref:System.Workflow.Activities.IfElseBranchActivity> et exécute la première branche lorsque la condition évalue à `true`. La branche finale n'est pas requise pour avoir une condition ; dans ce cas elle prend toujours la valeur `true`.  
  
 Un <xref:System.Workflow.Activities.IfElseActivity> peut se terminer sans avoir exécuté d'activité enfant, si aucune condition n'est satisfaite.  
  
   
  
## Examples  
 L'exemple de code suivant illustre la création d'une nouvelle instance de la classe <xref:System.Workflow.Activities.IfElseActivity> et l'ajout de deux classes <xref:System.Workflow.Activities.IfElseBranchActivity> à celle-ci. Cet exemple de code fait partie de l'exemple du Kit de développement logiciel SequentialWorkflowWithParameters (SDK) qui provient du fichier SequentialWorkflow.cs. Pour plus d’informations, consultez [Workflow with Parameters, exemple](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741685(v=vs.90)).  
  
 [!code-csharp[wf_samples#194](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#194)]
 [!code-vb[wf_samples#194](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#194)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734698(v=vs.90)">À l’aide de l’activité IfElse</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734614(v=vs.90)">Utilisation de conditions dans les workflows</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Workflow.Activities.IfElseActivity" />.</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734698(v=vs.90)">À l’aide de l’activité IfElse</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734614(v=vs.90)">Utilisation de conditions dans les workflows</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IfElseActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.IfElseActivity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IfElseActivity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Workflow.Activities.IfElseActivity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple de code suivant illustre la création d'une nouvelle instance de la classe <xref:System.Workflow.Activities.IfElseActivity> et l'ajout de deux classes <xref:System.Workflow.Activities.IfElseBranchActivity> à celle-ci. Cet exemple de code fait partie de l'exemple du Kit de développement logiciel SequentialWorkflowWithParameters (SDK) qui provient du fichier SequentialWorkflow.cs. Pour plus d’informations, consultez [Workflow with Parameters, exemple](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741685(v=vs.90)).  
  
 [!code-csharp[wf_samples#296](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#296)]
 [!code-vb[wf_samples#296](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#296)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734698(v=vs.90)">À l’aide de l’activité IfElse</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734614(v=vs.90)">Utilisation de conditions dans les workflows</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IfElseActivity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.IfElseActivity.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IfElseActivity(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Activities.IfElseActivity : string -&gt; System.Workflow.Activities.IfElseActivity" Usage="new System.Workflow.Activities.IfElseActivity name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de l'activité défini par l'utilisateur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Workflow.Activities.IfElseActivity" /> à l'aide du nom de l'activité.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734698(v=vs.90)">À l’aide de l’activité IfElse</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734614(v=vs.90)">Utilisation de conditions dans les workflows</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddBranch">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ajoute une nouvelle branche à <see cref="T:System.Workflow.Activities.IfElseActivity" />.</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734698(v=vs.90)">À l’aide de l’activité IfElse</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734614(v=vs.90)">Utilisation de conditions dans les workflows</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddBranch">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.IfElseBranchActivity AddBranch (System.Collections.Generic.ICollection&lt;System.Workflow.ComponentModel.Activity&gt; activities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Activities.IfElseBranchActivity AddBranch(class System.Collections.Generic.ICollection`1&lt;class System.Workflow.ComponentModel.Activity&gt; activities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddBranch (activities As ICollection(Of Activity)) As IfElseBranchActivity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Activities::IfElseBranchActivity ^ AddBranch(System::Collections::Generic::ICollection&lt;System::Workflow::ComponentModel::Activity ^&gt; ^ activities);" />
      <MemberSignature Language="F#" Value="member this.AddBranch : System.Collections.Generic.ICollection&lt;System.Workflow.ComponentModel.Activity&gt; -&gt; System.Workflow.Activities.IfElseBranchActivity" Usage="ifElseActivity.AddBranch activities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.IfElseBranchActivity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activities" Type="System.Collections.Generic.ICollection&lt;System.Workflow.ComponentModel.Activity&gt;" />
      </Parameters>
      <Docs>
        <param name="activities">Une collection d’activités à ajouter à la nouvelle branche.</param>
        <summary>Ajoute une nouvelle branche à <see cref="T:System.Workflow.Activities.IfElseActivity" /> à l'aide d'une collection de nouvelles activités à ajouter à la nouvelle branche.</summary>
        <returns><see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> mis à jour avec les nouvelles branches.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734698(v=vs.90)">À l’aide de l’activité IfElse</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734614(v=vs.90)">Utilisation de conditions dans les workflows</related>
      </Docs>
    </Member>
    <Member MemberName="AddBranch">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.IfElseBranchActivity AddBranch (System.Collections.Generic.ICollection&lt;System.Workflow.ComponentModel.Activity&gt; activities, System.Workflow.ComponentModel.ActivityCondition branchCondition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Activities.IfElseBranchActivity AddBranch(class System.Collections.Generic.ICollection`1&lt;class System.Workflow.ComponentModel.Activity&gt; activities, class System.Workflow.ComponentModel.ActivityCondition branchCondition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddBranch (activities As ICollection(Of Activity), branchCondition As ActivityCondition) As IfElseBranchActivity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Activities::IfElseBranchActivity ^ AddBranch(System::Collections::Generic::ICollection&lt;System::Workflow::ComponentModel::Activity ^&gt; ^ activities, System::Workflow::ComponentModel::ActivityCondition ^ branchCondition);" />
      <MemberSignature Language="F#" Value="member this.AddBranch : System.Collections.Generic.ICollection&lt;System.Workflow.ComponentModel.Activity&gt; * System.Workflow.ComponentModel.ActivityCondition -&gt; System.Workflow.Activities.IfElseBranchActivity" Usage="ifElseActivity.AddBranch (activities, branchCondition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.IfElseBranchActivity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activities" Type="System.Collections.Generic.ICollection&lt;System.Workflow.ComponentModel.Activity&gt;" />
        <Parameter Name="branchCondition" Type="System.Workflow.ComponentModel.ActivityCondition" />
      </Parameters>
      <Docs>
        <param name="activities">Une collection d’activités à ajouter à la nouvelle branche.</param>
        <param name="branchCondition">Un <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> qui détermine si la branche doit être exécutée.</param>
        <summary>Ajoute une nouvelle branche à <see cref="T:System.Workflow.Activities.IfElseActivity" /> à l'aide d'une collection de nouvelles activités à ajouter à la nouvelle branche.</summary>
        <returns><see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> mis à jour avec les nouvelles branches.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734698(v=vs.90)">À l’aide de l’activité IfElse</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms734614(v=vs.90)">Utilisation de conditions dans les workflows</related>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus Cancel(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.IfElseActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Cancel (executionContext As ActivityExecutionContext) As ActivityExecutionStatus" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Workflow::ComponentModel::ActivityExecutionStatus Cancel(System::Workflow::ComponentModel::ActivityExecutionContext ^ executionContext);" />
      <MemberSignature Language="F#" Value="override this.Cancel : System.Workflow.ComponentModel.ActivityExecutionContext -&gt; System.Workflow.ComponentModel.ActivityExecutionStatus" Usage="ifElseActivity.Cancel executionContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
      </Parameters>
      <Docs>
        <param name="executionContext">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus Execute(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.IfElseActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Execute (executionContext As ActivityExecutionContext) As ActivityExecutionStatus" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Workflow::ComponentModel::ActivityExecutionStatus Execute(System::Workflow::ComponentModel::ActivityExecutionContext ^ executionContext);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Workflow.ComponentModel.ActivityExecutionContext -&gt; System.Workflow.ComponentModel.ActivityExecutionStatus" Usage="ifElseActivity.Execute executionContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
      </Parameters>
      <Docs>
        <param name="executionContext">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;.OnEvent">
      <MemberSignature Language="C#" Value="void IActivityEventListener&lt;ActivityExecutionStatusChangedEventArgs&gt;.OnEvent (object sender, System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;.OnEvent(object sender, class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener&lt;System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs&gt;#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnEvent (sender As Object, e As ActivityExecutionStatusChangedEventArgs) Implements IActivityEventListener(Of ActivityExecutionStatusChangedEventArgs).OnEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;.OnEvent(System::Object ^ sender, System::Workflow::ComponentModel::ActivityExecutionStatusChangedEventArgs ^ e) = System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::ActivityExecutionStatusChangedEventArgs ^&gt;::OnEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.IActivityEventListener`1.OnEvent(System.Object,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Objet ayant déclenché l'événement.</param>
        <param name="e">Arguments d’événements précédemment typés.</param>
        <summary>Définit la procédure de traitement lorsqu'une modification de l'état d'exécution de l'activité a lieu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>