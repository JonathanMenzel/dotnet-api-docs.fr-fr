<Type Name="JumpTask" FullName="System.Windows.Shell.JumpTask">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72ea038bfacc9fec6529a315bec4aedb2ba7c98b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36464461" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class JumpTask : System.Windows.Shell.JumpItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JumpTask extends System.Windows.Shell.JumpItem" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Shell.JumpTask" />
  <TypeSignature Language="VB.NET" Value="Public Class JumpTask&#xA;Inherits JumpItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class JumpTask : System::Windows::Shell::JumpItem" />
  <TypeSignature Language="F#" Value="type JumpTask = class&#xA;    inherit JumpItem" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Shell.JumpItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente un raccourci vers une application dans la liste de raccourcis de la barre des tâches Windows 7.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Shell.JumpTask> peut être considéré comme un raccourci vers une application. Vous spécifiez le chemin d’accès au fichier exécutable en définissant le <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> propriété. Si le <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> n’est pas défini, le chemin d’accès du processus en cours d’exécution actif est implicite. Vous pouvez éventuellement spécifier <xref:System.Windows.Shell.JumpTask.Arguments%2A> à passer à l’application au démarrage.  
  
 Vous pouvez définir des propriétés de l’affichage de base, telles que <xref:System.Windows.Shell.JumpTask.Title%2A>, <xref:System.Windows.Shell.JumpTask.Description%2A>, et <xref:System.Windows.Shell.JumpTask.IconResourcePath%2A> pour spécifier l’apparence de la tâche dans la liste de raccourcis. Une icône utilisée avec un <xref:System.Windows.Shell.JumpTask> doit être disponible comme une ressource native. Si plusieurs ressources icônes sont disponibles dans une DLL ou un fichier exécutable, vous pouvez spécifier l’utiliser en indiquant un décalage dans le <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propriété.  
  
 Par défaut, un <xref:System.Windows.Shell.JumpTask> sera placée dans le **tâches** catégorie de la liste de raccourcis. Vous pouvez spécifier un regroupement personnalisé de tâches en définissant le <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> propriété.  
  
 Vous pouvez séparer visuellement des éléments dans une liste de raccourcis en créant un <xref:System.Windows.Shell.JumpTask> qui n’a pas un <xref:System.Windows.Shell.JumpTask.Title%2A> et <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> spécifié. Cette vide <xref:System.Windows.Shell.JumpTask> s’affichera sous la forme d’une ligne horizontale dans la liste de raccourcis. Dans ce cas, les autres propriétés peuvent être définies, mais il n’aura aucun effet.  
  
   
  
## Examples  
 L’exemple suivant montre comment déclarer un <xref:System.Windows.Shell.JumpTask> dans le balisage. Le <xref:System.Windows.Shell.JumpTask> ouvre un fichier texte nommé `readme.txt` dans l’application Bloc-notes.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 L’exemple suivant montre comment configurer un <xref:System.Windows.Shell.JumpTask> dans le code. Le <xref:System.Windows.Shell.JumpTask> ouvre l’application Calculatrice.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Shell.JumpPath" />
    <altmember cref="T:System.Windows.Shell.JumpList" />
    <altmember cref="E:System.Windows.Shell.JumpList.JumpItemsRejected" />
    <altmember cref="E:System.Windows.Application.Startup" />
    <altmember cref="P:System.Windows.StartupEventArgs.Args" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JumpTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpTask.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JumpTask();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Shell.JumpTask" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationPath">
      <MemberSignature Language="C#" Value="public string ApplicationPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ApplicationPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationPath : string with get, set" Usage="System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès à l'application.</summary>
        <value>Chemin d'accès à l'application. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> propriété n’est pas spécifiée, puis le chemin d’accès du processus en cours d’exécution actif est implicite. Une application peut contenir des tâches pour les fichiers exécutables autre que lui-même.  
  
   
  
## Examples  
 L’exemple suivant montre comment déclarer un <xref:System.Windows.Shell.JumpTask> dans le balisage. Le <xref:System.Windows.Shell.JumpTask> ouvre un fichier texte nommé `readme.txt` dans l’application Bloc-notes.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 L’exemple suivant montre comment configurer un <xref:System.Windows.Shell.JumpTask> dans le code. Le <xref:System.Windows.Shell.JumpTask> ouvre l’application Calculatrice.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public string Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Property Arguments As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Arguments { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Arguments : string with get, set" Usage="System.Windows.Shell.JumpTask.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les arguments passés à l'application lors du démarrage.</summary>
        <value>Arguments passés à l'application lors du démarrage. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment déclarer un <xref:System.Windows.Shell.JumpTask> dans le balisage. Le <xref:System.Windows.Shell.JumpTask> ouvre un fichier texte nommé `readme.txt` dans l’application Bloc-notes.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Startup" />
        <altmember cref="P:System.Windows.StartupEventArgs.Args" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.Windows.Shell.JumpTask.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le texte affiché dans l'info-bulle de la tâche dans la Liste de raccourcis.</summary>
        <value>Texte affiché dans l'info-bulle de la tâche. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment déclarer un <xref:System.Windows.Shell.JumpTask> dans le balisage. Le <xref:System.Windows.Shell.JumpTask> ouvre un fichier texte nommé `readme.txt` dans l’application Bloc-notes.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 L’exemple suivant montre comment configurer un <xref:System.Windows.Shell.JumpTask> dans le code. Le <xref:System.Windows.Shell.JumpTask> ouvre l’application Calculatrice.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IconResourceIndex">
      <MemberSignature Language="C#" Value="public int IconResourceIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IconResourceIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourceIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IconResourceIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourceIndex : int with get, set" Usage="System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'index de base zéro d'une icône incorporée dans une ressource.</summary>
        <value>Index de base zéro de l'icône, ou -1 si aucune icône n'est utilisée. La valeur par défaut est 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une icône utilisée avec un <xref:System.Windows.Shell.JumpTask> doit être disponible comme une ressource native. Si plusieurs icônes sont disponibles dans une DLL ou un fichier exécutable, vous pouvez spécifier l’utiliser en indiquant un décalage dans le <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propriété.  
  
 Si aucune ressource icône n’est spécifiée, ou si l’icône spécifiée est introuvable, l’icône système standard s’affiche. Pour spécifier qu’aucune icône ne s’affiche, définissez le <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propriété sur -1.  
  
   
  
## Examples  
 L’exemple suivant montre comment déclarer un <xref:System.Windows.Shell.JumpTask> dans le balisage. Le <xref:System.Windows.Shell.JumpTask> ouvre un fichier texte nommé `readme.txt` dans l’application Bloc-notes.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      </Docs>
    </Member>
    <Member MemberName="IconResourcePath">
      <MemberSignature Language="C#" Value="public string IconResourcePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IconResourcePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourcePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IconResourcePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourcePath : string with get, set" Usage="System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès à une ressource qui contient l'icône à afficher dans la Liste de raccourcis.</summary>
        <value>Chemin d'accès à une ressource qui contient l'icône. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une icône utilisée avec un <xref:System.Windows.Shell.JumpTask> doit être disponible comme une ressource native. Si plusieurs icônes sont disponibles dans une DLL ou un fichier exécutable, vous pouvez spécifier l’utiliser en indiquant un décalage dans le <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propriété.  
  
 Si aucune ressource icône n’est spécifiée, ou si l’icône spécifiée est introuvable, l’icône système standard s’affiche. Pour spécifier qu’aucune icône ne s’affiche, définissez le <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propriété sur -1.  
  
   
  
## Examples  
 L’exemple suivant montre comment déclarer un <xref:System.Windows.Shell.JumpTask> dans le balisage. Le <xref:System.Windows.Shell.JumpTask> ouvre un fichier texte nommé `readme.txt` dans l’application Bloc-notes.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 L’exemple suivant montre comment configurer un <xref:System.Windows.Shell.JumpTask> dans le code. Le <xref:System.Windows.Shell.JumpTask> ouvre l’application Calculatrice.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Shell.JumpTask.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le texte affiché pour la tâche dans la Liste de raccourcis.</summary>
        <value>Texte affiché pour la tâche dans la Liste de raccourcis. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, les <xref:System.Windows.Shell.JumpTask.Title%2A> propriété doit être définie pour le <xref:System.Windows.Shell.JumpTask> s’affichent dans la liste de raccourcis comme une tâche interactif.  
  
 Ou bien, vous pouvez séparer visuellement des éléments dans une liste de raccourcis en créant un <xref:System.Windows.Shell.JumpTask> qui n’a pas un <xref:System.Windows.Shell.JumpTask.Title%2A> et <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> spécifié. Cette vide <xref:System.Windows.Shell.JumpTask> s’affichera sous la forme d’une ligne horizontale dans la liste de raccourcis. Dans ce cas, les autres propriétés peuvent être définies, mais il n’aura aucun effet.  
  
   
  
## Examples  
 L’exemple suivant montre comment déclarer un <xref:System.Windows.Shell.JumpTask> dans le balisage. Le <xref:System.Windows.Shell.JumpTask> ouvre un fichier texte nommé `readme.txt` dans l’application Bloc-notes.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 L’exemple suivant montre comment configurer un <xref:System.Windows.Shell.JumpTask> dans le code. Le <xref:System.Windows.Shell.JumpTask> ouvre l’application Calculatrice.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingDirectory">
      <MemberSignature Language="C#" Value="public string WorkingDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkingDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkingDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkingDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WorkingDirectory : string with get, set" Usage="System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le répertoire de travail de l'application au démarrage.</summary>
        <value>Répertoire de travail de l'application au démarrage. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment déclarer un <xref:System.Windows.Shell.JumpTask> dans le balisage. Le <xref:System.Windows.Shell.JumpTask> ouvre un fichier texte nommé `readme.txt` dans l’application Bloc-notes.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>