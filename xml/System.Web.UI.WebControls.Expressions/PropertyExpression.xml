<Type Name="PropertyExpression" FullName="System.Web.UI.WebControls.Expressions.PropertyExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b1a4f4c24dc5c51a351d3167b48e30491b0c3931" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51878488" /></Metadata><TypeSignature Language="C#" Value="public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type PropertyExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Offre un moyen de créer une clause <see langword="Where" /> à partir des paramètres d’une collection <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> classe est utilisée avec la <xref:System.Web.UI.WebControls.QueryExtender> contrôle pour filtrer les données dans les champs de données. Le <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> classe compare une valeur de propriété d’une colonne à une valeur spécifiée. Par exemple, vous pouvez comparer une valeur booléenne à la valeur de la colonne d’une table de produits dans une base de données interrompue.  
  
 Le <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> classe crée une comparaison d’égalité (==) pour la valeur de chaque paramètre et la propriété correspondante de la <xref:System.Linq.IQueryable> objet de données. Si vous fournissez plusieurs paramètres, les paramètres sont combinées à l’aide de l’opérateur logique `AND` opérateur. Paramètres qui contiennent une valeur vide ne sont pas ajoutés à la `Where` clause.  
  
   
  
## Examples  
 L’exemple suivant montre comment effectuer la recherche de la table Products des base de données AdventureWorks pour les produits dont la propriété `MakeFlag` propriété (une colonne booléenne) est définie sur `true`. Le paramètre de valeur booléenne est défini dans une case à cocher. Le résultat de la requête qui est retourné à partir de la <xref:System.Web.UI.WebControls.LinqDataSource> contrôle s’affiche dans un <xref:System.Web.UI.WebControls.GridView> contrôle.  
  
 Cet exemple de code fait partie d’un exemple plus complet fourni dans [procédure pas à pas : filtrage des données dans une Page Web avec la syntaxe déclarative](https://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/b93e32b9-af41-4539-a009-6cbbe809c702">Vue d’ensemble du contrôle QueryExtender Web Server</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="propertyExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Objet à utiliser pour la requête.</param>
        <summary>Applique un objet <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> en utilisant l'objet source de données <see cref="T:System.Linq.IQueryable" /> spécifié.</summary>
        <returns>Instance de l'objet à laquelle les expressions ont été appliquées.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode combine spécifié <xref:System.Linq.IQueryable> objet avec les expressions dans le <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection à l’aide de l’opérateur logique `AND` opérateur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>