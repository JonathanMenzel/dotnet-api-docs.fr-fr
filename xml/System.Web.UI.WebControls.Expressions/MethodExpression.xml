<Type Name="MethodExpression" FullName="System.Web.UI.WebControls.Expressions.MethodExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b27249522bf1744db3d54add337e238344d855bb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30589203" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MethodExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MethodExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.MethodExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un moyen de spécifier une requête LINQ personnalisée qui est définie dans une méthode.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.QueryExtender> contrôle prend en charge les requêtes LINQ personnalisées. Vous pouvez définir une requête LINQ personnalisée dans une méthode et utiliser le <xref:System.Web.UI.WebControls.Expressions.MethodExpression> filtrer appeler la requête dans le <xref:System.Web.UI.WebControls.QueryExtender> contrôle.  
  
 La méthode qui contient la requête LINQ personnalisée doit répondre aux critères suivants :  
  
-   La méthode doit être statique (`Shared` en Visual Basic). Le premier paramètre doit être un <xref:System.Linq.IQueryable%601> ou <xref:System.Collections.Generic.IEnumerable%601> objet. La méthode peut avoir plusieurs paramètres.  
  
-   La valeur de retour ne peut pas modifier le <xref:System.Linq.IQueryable%601> ou <xref:System.Collections.Generic.IEnumerable%601> type qui est interrogée.  
  
 Le <xref:System.Web.UI.WebControls.Expressions.MethodExpression> recherche la méthode qui contient la requête dans l’ordre suivant :  
  
1.  Si un <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> propriété est spécifiée dans le <xref:System.Web.UI.WebControls.QueryExtender> (contrôle), le <xref:System.Web.UI.WebControls.Expressions.MethodExpression> objet recherche la méthode dans le type spécifié.  
  
2.  Si la source de données implémente <xref:System.Web.DynamicData.IDynamicDataSource>, la méthode recherche la méthode sur le type de contexte (<xref:System.Data.Linq.DataContext> ou <xref:System.Data.Objects.ObjectContext> objet.)  
  
3.  La méthode recherche la méthode dans un contrôle de modèle, dans la classe de base pour la page ou dans un contrôle utilisateur.  
  
 Le <xref:System.Web.UI.WebControls.Expressions.MethodExpression> classe est similaire à la <xref:System.Web.UI.WebControls.Expressions.CustomExpression> classe sauf que l’expression de méthode est exécutée en réponse à un appel de méthode et l’expression personnalisée est exécutée en réponse à un événement.  
  
   
  
## Examples  
 L’exemple suivant montre comment rechercher le champ ListPrice de la table Products dans la base de données AdventureWorks pour les produits qui ont un prix de 400 ou plus. Cet exemple montre comment créer une requête LINQ personnalisée dans une méthode dans le code de la page et comment appeler la méthode dans le <xref:System.Web.UI.WebControls.QueryExtender> contrôle.  
  
```vb  
Public Shared Function FilterStandardPrice(ByVal query As _  
        IQueryable(Of Product)) As IQueryable(Of Product)  
        Return From p In query _  
            Where p.ListPrice >= 400 _  
            Select p  
    End Function  
```  
  
```csharp  
public static IQueryable<Product>   
        FilterStandardPrice(IQueryable<Product> query)  
{  
        return from p in query  
                  where p.ListPrice >= 400  
                  select p;  
  
    }  
```  
  
 L’exemple suivant montre comment appeler la méthode dans la page.  
  
```  
<html>  
<head runat="server">  
  <title>Custom Filter</title>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <asp:LinqDataSource ID="LinqDataSource1" runat="server"   
        ContextTypeName="AdventureworksDataContext" EntityTypeName=""   
        TableName="Products">  
    </asp:LinqDataSource>  
  
    <asp:QueryExtender ID="QueryExtender1" runat="server"   
        TargetControlID="LinqDataSource1">  
      <asp:MethodExpression MethodName="FilterStandardPrice" >  
      </asp:MethodExpression>  
    </asp:QueryExtender>  
  
    <asp:GridView ID="GridView1" runat="server"   
        DataSourceID="LinqDataSource1"   
        DataKeyNames="ProductID"   
    </asp:GridView>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MethodExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.Expressions.MethodExpression" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Contrôle de source de données à utiliser.</param>
        <summary>Résout l'expression en utilisant l'objet <see cref="T:System.Linq.IQueryable" /> spécifié.</summary>
        <returns>Instance de l'objet <see cref="T:System.Linq.IQueryable" /> utilisée pour résoudre l'expression.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Le contrôle de source de données est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La méthode est introuvable.  
  
 - ou -  
  
 La méthode n’est pas statique.  
  
 - ou -  
  
 Le type de l'objet <see langword="IQuerable&lt;T&gt;" /> passé a été modifié.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreIfNotFound">
      <MemberSignature Language="C#" Value="public bool IgnoreIfNotFound { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreIfNotFound" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreIfNotFound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreIfNotFound { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si l'expression doit être ignorée.</summary>
        <value>
          <see langword="true" /> si l'expression est ignorée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Expressions.MethodExpression> recherche une méthode qui contient la requête en recherchant dans des emplacements spécifiques et dans un ordre spécifique de l’objet. Vous pouvez définir cette propriété `false` pour lever une exception si le <xref:System.Web.UI.WebControls.Expressions.CustomExpression> objet ne trouve pas une méthode qui contient un LINQ.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodName">
      <MemberSignature Language="C#" Value="public string MethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MethodName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberSignature Language="VB.NET" Value="Public Property MethodName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MethodName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la méthode qui contient une requête LINQ personnalisée.</summary>
        <value>Nom de la méthode qui contient la requête LINQ personnalisée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Expressions.MethodExpression> objet vous permet d’appeler une requête LINQ personnalisée qui est définie dans une méthode. Vous spécifiez la méthode dans le <xref:System.Web.UI.WebControls.QueryExtender> contrôle dans la page.  
  
   
  
## Examples  
 L’exemple suivant montre comment spécifier le `FilterStandardPrice` méthode dans le <xref:System.Web.UI.WebControls.QueryExtender> contrôle. La requête LINQ personnalisée est définie dans un `FilterStandardPrice` (méthode).  
  
```  
<asp:QueryExtender ID="QueryExtender1" runat="server"   
    TargetControlID="LinqDataSource1">  
  <asp:MethodExpression MethodName="FilterStandardPrice">  
  </asp:MethodExpression>  
  </asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la classe dont la méthode contient la requête personnalisée.</summary>
        <value>Classe dont la méthode est membre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.Expressions.MethodExpression> classe vous permet de spécifier une expression personnalisée pour une source de données dans le <xref:System.Web.UI.WebControls.QueryExtender> contrôle. Vous pouvez utiliser le <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> propriété pour spécifier la classe à laquelle appartient la méthode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>