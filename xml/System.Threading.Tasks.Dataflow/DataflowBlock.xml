<Type Name="DataflowBlock" FullName="System.Threading.Tasks.Dataflow.DataflowBlock">
  <TypeSignature Language="C#" Value="public static class DataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataflowBlock extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.DataflowBlock" />
  <TypeSignature Language="VB.NET" Value="Public Module DataflowBlock" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataflowBlock abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="93a06-101">Fournit un ensemble de méthodes statiques (Shared en Visual Basic) pour utiliser des blocs de flux de données.</span><span class="sxs-lookup"><span data-stu-id="93a06-101">Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsObservable&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TOutput&gt; AsObservable&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObservable`1&lt;!!TOutput&gt; AsObservable&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObservable(Of TOutput) (source As ISourceBlock(Of TOutput)) As IObservable(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObservable&lt;TOutput&gt; ^ AsObservable(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-102">Spécifie le type de données contenu dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-102">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-103">Source à inclure dans un wrapper.</span><span class="sxs-lookup"><span data-stu-id="93a06-103">The source to wrap.</span></span></param>
        <summary><span data-ttu-id="93a06-104">Crée une abstraction <see cref="T:System.IObservable`1" /> sur <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-104">Creates a new <see cref="T:System.IObservable`1" /> abstraction over the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="93a06-105"><see cref="T:System.IObservable`1" /> qui permet aux observateurs de s'abonner à la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-105">An <see cref="T:System.IObservable`1" /> that enables observers to be subscribed to the source.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-106"><paramref name="source" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-106">The <paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsObserver&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static IObserver&lt;TInput&gt; AsObserver&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObserver`1&lt;!!TInput&gt; AsObserver&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObserver(Of TInput) (target As ITargetBlock(Of TInput)) As IObserver(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObserver&lt;TInput&gt; ^ AsObserver(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObserver&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="93a06-107">Spécifie le type d'entrée accepté par le bloc cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-107">Specifies the type of input accepted by the target block.</span></span></typeparam>
        <param name="target"><span data-ttu-id="93a06-108">Cible à encapsuler.</span><span class="sxs-lookup"><span data-stu-id="93a06-108">The target to wrap.</span></span></param>
        <summary><span data-ttu-id="93a06-109">Crée une abstraction <see cref="T:System.IObserver`1" /> sur <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-109">Creates a new <see cref="T:System.IObserver`1" /> abstraction over the  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="93a06-110">Observateur qui encapsule le bloc cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-110">An observer that wraps the target block.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="93a06-111">Spécifie le type de données contenu dans la première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-111">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="93a06-112">Spécifie le type de données contenu dans la deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-112">Specifies type of data contained in the second source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="93a06-113">Première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-113">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="93a06-114">Gestionnaire à exécuter sur les données de la première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-114">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="93a06-115">Deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-115">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="93a06-116">Gestionnaire à exécuter sur les données de la deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-116">The handler to execute on data from the second source.</span></span></param>
        <summary><span data-ttu-id="93a06-117">Surveille deux sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</span><span class="sxs-lookup"><span data-stu-id="93a06-117">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="93a06-118"><see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-118">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="93a06-119">Si les deux sources sont terminées avant d'avoir effectué un choix, la tâche résultante est annulée.</span><span class="sxs-lookup"><span data-stu-id="93a06-119">If both sources are completed prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="93a06-120">Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée.</span><span class="sxs-lookup"><span data-stu-id="93a06-120">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="93a06-121">Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur 0 ou 1 pour représenter la première ou la deuxième source, respectivement.</span><span class="sxs-lookup"><span data-stu-id="93a06-121">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span></span>  
  
 <span data-ttu-id="93a06-122">Cette méthode consommera un seul élément de l'une des deux sources de données, jamais les deux.</span><span class="sxs-lookup"><span data-stu-id="93a06-122">This method will only consume an element from one of the two data sources, never both.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-123"><paramref name="source1" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-123">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-124">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-124">-or-</span></span>  
  
 <span data-ttu-id="93a06-125"><paramref name="action1" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-125">The  <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-126">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-126">-or-</span></span>  
  
 <span data-ttu-id="93a06-127"><paramref name="source2" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-127">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-128">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-128">-or-</span></span>  
  
 <span data-ttu-id="93a06-129"><paramref name="action2" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-129">The <paramref name="action2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="93a06-130">Spécifie le type de données contenu dans la première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-130">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="93a06-131">Spécifie le type de données contenu dans la deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-131">Specifies type of data contained in the second source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="93a06-132">Première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-132">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="93a06-133">Gestionnaire à exécuter sur les données de la première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-133">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="93a06-134">Deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-134">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="93a06-135">Gestionnaire à exécuter sur les données de la deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-135">The handler to execute on data from the second source.</span></span></param>
        <param name="dataflowBlockOptions"><span data-ttu-id="93a06-136">Options permettant de configurer ce choix.</span><span class="sxs-lookup"><span data-stu-id="93a06-136">The options with which to configure this choice.</span></span></param>
        <summary><span data-ttu-id="93a06-137">Surveille deux sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</span><span class="sxs-lookup"><span data-stu-id="93a06-137">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="93a06-138"><see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-138">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="93a06-139">Si les deux sources sont terminées avant d'avoir effectué un choix, ou si le <see cref="T:System.Threading.CancellationToken" /> fourni dans le cadre des <paramref name="dataflowBlockOptions" /> est annulé avant d'avoir effectué un choix, la tâche résultante est annulée.</span><span class="sxs-lookup"><span data-stu-id="93a06-139">If both sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="93a06-140">Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée.</span><span class="sxs-lookup"><span data-stu-id="93a06-140">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="93a06-141">Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur 0 ou 1 pour représenter la première ou la deuxième source, respectivement.</span><span class="sxs-lookup"><span data-stu-id="93a06-141">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-142"><paramref name="source1" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-142">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-143">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-143">-or-</span></span>  
  
 <span data-ttu-id="93a06-144"><paramref name="action1" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-144">The <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-145">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-145">-or-</span></span>  
  
 <span data-ttu-id="93a06-146"><paramref name="source2" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-146">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-147">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-147">-or-</span></span>  
  
 <span data-ttu-id="93a06-148"><paramref name="action2" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-148">The <paramref name="action2" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-149">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-149">-or-</span></span>  
  
 <span data-ttu-id="93a06-150"><paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-150">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2, T3) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2), source3 As ISourceBlock(Of T3), action3 As Action(Of T3)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="93a06-151">Spécifie le type de données contenu dans la première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-151">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="93a06-152">Spécifie le type de données contenu dans la deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-152">Specifies type of data contained in the second source.</span></span></typeparam>
        <typeparam name="T3"><span data-ttu-id="93a06-153">Spécifie le type de données contenu dans la troisième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-153">Specifies type of data contained in the third source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="93a06-154">Première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-154">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="93a06-155">Gestionnaire à exécuter sur les données de la première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-155">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="93a06-156">Deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-156">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="93a06-157">Gestionnaire à exécuter sur les données de la deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-157">The handler to execute on data from the second source.</span></span></param>
        <param name="source3"><span data-ttu-id="93a06-158">Troisième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-158">The third source.</span></span></param>
        <param name="action3"><span data-ttu-id="93a06-159">Gestionnaire à exécuter sur les données de la troisième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-159">The handler to execute on data from the third source.</span></span></param>
        <summary><span data-ttu-id="93a06-160">Surveille trois sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</span><span class="sxs-lookup"><span data-stu-id="93a06-160">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="93a06-161"><see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-161">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="93a06-162">Si toutes les sources sont terminées avant d'avoir effectué un choix, la tâche résultante est annulée.</span><span class="sxs-lookup"><span data-stu-id="93a06-162">If all sources are completed prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="93a06-163">Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée.</span><span class="sxs-lookup"><span data-stu-id="93a06-163">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="93a06-164">Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur l'index de base 0 de la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-164">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span></span>  
  
 <span data-ttu-id="93a06-165">Cette méthode consommera un seul élément de l'une des sources de données, jamais plusieurs.</span><span class="sxs-lookup"><span data-stu-id="93a06-165">This method will only consume an element from one of the data sources, never more than one.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-166"><paramref name="source1" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-166">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-167">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-167">-or-</span></span>  
  
 <span data-ttu-id="93a06-168"><paramref name="action1" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-168">The <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-169">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-169">-or-</span></span>  
  
 <span data-ttu-id="93a06-170"><paramref name="source2" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-170">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-171">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-171">-or-</span></span>  
  
 <span data-ttu-id="93a06-172"><paramref name="action2" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-172">The <paramref name="action2" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-173">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-173">-or-</span></span>  
  
 <span data-ttu-id="93a06-174"><paramref name="source3" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-174">The <paramref name="source3" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-175">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-175">-or-</span></span>  
  
 <span data-ttu-id="93a06-176"><paramref name="action3" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-176">The <paramref name="action3" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="93a06-177">Spécifie le type de données contenu dans la première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-177">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="93a06-178">Spécifie le type de données contenu dans la deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-178">Specifies type of data contained in the second source.</span></span></typeparam>
        <typeparam name="T3"><span data-ttu-id="93a06-179">Spécifie le type de données contenu dans la troisième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-179">Specifies type of data contained in the third source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="93a06-180">Première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-180">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="93a06-181">Gestionnaire à exécuter sur les données de la première source.</span><span class="sxs-lookup"><span data-stu-id="93a06-181">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="93a06-182">Deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-182">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="93a06-183">Gestionnaire à exécuter sur les données de la deuxième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-183">The handler to execute on data from the second source.</span></span></param>
        <param name="source3"><span data-ttu-id="93a06-184">Troisième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-184">The third source.</span></span></param>
        <param name="action3"><span data-ttu-id="93a06-185">Gestionnaire à exécuter sur les données de la troisième source.</span><span class="sxs-lookup"><span data-stu-id="93a06-185">The handler to execute on data from the third source.</span></span></param>
        <param name="dataflowBlockOptions"><span data-ttu-id="93a06-186">Options permettant de configurer ce choix.</span><span class="sxs-lookup"><span data-stu-id="93a06-186">The options with which to configure this choice.</span></span></param>
        <summary><span data-ttu-id="93a06-187">Surveille trois sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</span><span class="sxs-lookup"><span data-stu-id="93a06-187">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="93a06-188"><see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-188">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="93a06-189">Si toutes les sources sont terminées avant d'avoir effectué un choix, ou si le <see cref="T:System.Threading.CancellationToken" /> fourni dans le cadre des <paramref name="dataflowBlockOptions" /> est annulé avant d'avoir effectué un choix, la tâche résultante est annulée.</span><span class="sxs-lookup"><span data-stu-id="93a06-189">If all sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="93a06-190">Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée.</span><span class="sxs-lookup"><span data-stu-id="93a06-190">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="93a06-191">Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur l'index de base 0 de la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-191">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span></span>  
  
 <span data-ttu-id="93a06-192">Cette méthode consommera un seul élément de l'une des sources de données, jamais plusieurs.</span><span class="sxs-lookup"><span data-stu-id="93a06-192">This method will only consume an element from one of the data sources, never more than one.</span></span> <span data-ttu-id="93a06-193">Si l'annulation est demandée une fois qu'un élément a été reçu, la demande d'annulation est ignorée, et le gestionnaire approprié est autorisé à s'exécuter.</span><span class="sxs-lookup"><span data-stu-id="93a06-193">If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-194"><paramref name="source1" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-194">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-195">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-195">-or-</span></span>  
  
 <span data-ttu-id="93a06-196"><paramref name="action1" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-196">The <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-197">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-197">-or-</span></span>  
  
 <span data-ttu-id="93a06-198"><paramref name="source2" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-198">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-199">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-199">-or-</span></span>  
  
 <span data-ttu-id="93a06-200"><paramref name="action2" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-200">The <paramref name="action2" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-201">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-201">-or-</span></span>  
  
 <span data-ttu-id="93a06-202"><paramref name="source3" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-202">The <paramref name="source3" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-203">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-203">-or-</span></span>  
  
 <span data-ttu-id="93a06-204"><paramref name="action3" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-204">The <paramref name="action3" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-205">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-205">-or-</span></span>  
  
 <span data-ttu-id="93a06-206"><paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-206">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Encapsulate&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt; Encapsulate&lt;TInput,TOutput&gt; (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!!TInput, !!TOutput&gt; Encapsulate&lt;TInput, TOutput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Encapsulate(Of TInput, TOutput) (target As ITargetBlock(Of TInput), source As ISourceBlock(Of TOutput)) As IPropagatorBlock(Of TInput, TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TOutput&gt;&#xA; static System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;TInput, TOutput&gt; ^ Encapsulate(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="93a06-207">Spécifie le type d'entrée attendu par la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-207">Specifies the type of input expected by the target.</span></span></typeparam>
        <typeparam name="TOutput"><span data-ttu-id="93a06-208">Spécifie le type de sortie produit par la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-208">Specifies the type of output produced by the source.</span></span></typeparam>
        <param name="target"><span data-ttu-id="93a06-209">Cible à encapsuler.</span><span class="sxs-lookup"><span data-stu-id="93a06-209">The target to encapsulate.</span></span></param>
        <param name="source"><span data-ttu-id="93a06-210">Source à encapsuler.</span><span class="sxs-lookup"><span data-stu-id="93a06-210">The source to encapsulate.</span></span></param>
        <summary><span data-ttu-id="93a06-211">Encapsule une cible et une source dans un propagateur unique.</span><span class="sxs-lookup"><span data-stu-id="93a06-211">Encapsulates a target and a source into a single propagator.</span></span></summary>
        <returns><span data-ttu-id="93a06-212">Cible et source encapsulées.</span><span class="sxs-lookup"><span data-stu-id="93a06-212">The encapsulated target and source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93a06-213">Le <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> méthode requiert deux blocs existants : un bloc cible (une instance d’une classe qui implémente <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) et un bloc source (une instance d’une classe qui implémente <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span><span class="sxs-lookup"><span data-stu-id="93a06-213">The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method requires two existing blocks: a target block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) and a source block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span></span> <span data-ttu-id="93a06-214"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> Crée une instance d’une classe interne qui se connecte la <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> aux membres de l’interface le `target` paramètre et le <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> aux membres de l’interface le `source` paramètre.</span><span class="sxs-lookup"><span data-stu-id="93a06-214"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> creates a new instance of an internal class that connects the <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interface members to the `target` parameter and the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> interface members to the `source` parameter.</span></span>  <span data-ttu-id="93a06-215">Les deux <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> et <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> dérivent <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span><span class="sxs-lookup"><span data-stu-id="93a06-215">Both <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> and <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> derive from <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span></span> <span data-ttu-id="93a06-216">Achèvement des blocs est explicitement transmis à partir de sources vers les cibles.</span><span class="sxs-lookup"><span data-stu-id="93a06-216">Block completion is explicitly passed from sources to targets.</span></span> <span data-ttu-id="93a06-217">Par conséquent, le <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> et <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> méthodes sont connectés à la cible lors de la <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> propriété est connectée à la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-217">Therefore, the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> methods are connected to the target while the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> property is connected to the source.</span></span>  <span data-ttu-id="93a06-218">Vous devez vous assurer que quand la cible de la moitié est terminée, la source de la moitié obtient terminé de façon la plus appropriée ; par exemple :</span><span class="sxs-lookup"><span data-stu-id="93a06-218">You must ensure that when the target half  completes, the source half gets completed in the most appropriate manner; for example:</span></span>  
  
 `target.Completion.ContinueWith(completion => source.Complete());`  
  
 <span data-ttu-id="93a06-219">Ou, si vous souhaitez propager le type d’achèvement, vous pouvez utiliser ce code plus sophistiqué :</span><span class="sxs-lookup"><span data-stu-id="93a06-219">Or, if you want to propagate the completion type, you can use this more sophisticated code:</span></span>  
  
```  
target.Completion.ContinueWith(completion => { if (completion.IsFaulted) 3   
  
((IDataflowBlock)batchBlock).Fault(completion.Exception);   
else   
batchBlock.Complete();   
});  
  
```  
  
 <span data-ttu-id="93a06-220">Vous devez explicitement fournir la propagation de message à partir de la cible à la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-220">You must also explicitly provide the message propagation from target to source.</span></span> <span data-ttu-id="93a06-221">L’avantage de cette connexion explicite est qu’il vous donne la liberté pour exécuter tout traitement sans contrainte entre les deux blocs encapsulés.</span><span class="sxs-lookup"><span data-stu-id="93a06-221">The benefit of this explicit connection is that it gives you the freedom to perform any unconstrained processing between the two encapsulated blocks.</span></span> <span data-ttu-id="93a06-222">Vous pouvez le faire soit par l’encodage le traitement nécessaire dans les délégués les blocs (si les blocs de prennent des délégués), soit en incorporant un sous-réseau de blocs entre eux.</span><span class="sxs-lookup"><span data-stu-id="93a06-222">You may do that either by encoding the necessary processing into the blocks' delegates (if the blocks take delegates), or by embedding a sub-network of blocks between them.</span></span> <span data-ttu-id="93a06-223">La plus simple consiste à utiliser un bloc qui prend des délégués ; par exemple, utilisez <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (le cas échéant), ou un bloc personnalisé.</span><span class="sxs-lookup"><span data-stu-id="93a06-223">The easier way is to use a block that takes delegates; for example, use <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (if applicable), or a custom block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-224">Spécifie le type de données contenu dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-224">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-225">Source à partir de laquelle effectuer la liaison.</span><span class="sxs-lookup"><span data-stu-id="93a06-225">The source from which to link.</span></span></param>
        <param name="target"><span data-ttu-id="93a06-226"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-226">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span></span></param>
        <summary><span data-ttu-id="93a06-227">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="93a06-227">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="93a06-228"><see cref="T:System.IDisposable" /> qui, en appelant <see langword="Dispose" />, dissocie la source de la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-228">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-229"><paramref name="source" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-229">The <paramref name="source" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-230">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-230">-or-</span></span>  
  
 <span data-ttu-id="93a06-231"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-231">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-232">Spécifie le type de données contenu dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-232">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-233">Source à partir de laquelle effectuer la liaison.</span><span class="sxs-lookup"><span data-stu-id="93a06-233">The source from which to link.</span></span></param>
        <param name="target"><span data-ttu-id="93a06-234"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-234">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span></span></param>
        <param name="predicate"><span data-ttu-id="93a06-235">Filtre qu'un message doit respecter pour être propagé de la source à la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-235">The filter a message must pass in order for it to propagate from the source to the target.</span></span></param>
        <summary><span data-ttu-id="93a06-236">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié à l’aide du filtre spécifié.</span><span class="sxs-lookup"><span data-stu-id="93a06-236">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span></span></summary>
        <returns><span data-ttu-id="93a06-237"><see cref="T:System.IDisposable" /> qui, en appelant <see langword="Dispose" />, dissocie la source de la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-237">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-238"><paramref name="source" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-238">The <paramref name="source" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-239">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-239">-or-</span></span>  
  
 <span data-ttu-id="93a06-240"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-240">The <paramref name="target" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="93a06-241">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-241">-or-</span></span>  
  
 <span data-ttu-id="93a06-242"><paramref name="predicate" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-242">The <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), linkOptions As DataflowLinkOptions, predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-243">Spécifie le type de données contenu dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-243">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-244">Source à partir de laquelle effectuer la liaison.</span><span class="sxs-lookup"><span data-stu-id="93a06-244">The source from which to link.</span></span></param>
        <param name="target"><span data-ttu-id="93a06-245"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-245">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span></span></param>
        <param name="linkOptions"><span data-ttu-id="93a06-246">L'une des valeurs d'énumération qui spécifie comment configurer un lien entre les blocs de flux de données.</span><span class="sxs-lookup"><span data-stu-id="93a06-246">One of the enumeration values that specifies how to configure a link between dataflow blocks.</span></span></param>
        <param name="predicate"><span data-ttu-id="93a06-247">Filtre qu'un message doit respecter pour être propagé de la source à la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-247">The filter a message must pass in order for it to propagate from the source to the target.</span></span></param>
        <summary><span data-ttu-id="93a06-248">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié à l’aide du filtre spécifié.</span><span class="sxs-lookup"><span data-stu-id="93a06-248">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span></span></summary>
        <returns><span data-ttu-id="93a06-249"><see cref="T:System.IDisposable" /> qui, en appelant <see langword="Dispose" />, dissocie la source de la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-249">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-250"><paramref name="source" /> est Null (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="93a06-250">The  <paramref name="source" /> is null (Nothing in Visual Basic).</span></span>  
  
 <span data-ttu-id="93a06-251">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-251">-or-</span></span>  
  
 <span data-ttu-id="93a06-252"><paramref name="target" /> est Null (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="93a06-252">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span></span>  
  
 <span data-ttu-id="93a06-253">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-253">-or-</span></span>  
  
 <span data-ttu-id="93a06-254"><paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="93a06-254">The  <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</span></span>  
  
 <span data-ttu-id="93a06-255">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-255">-or-</span></span>  
  
 <span data-ttu-id="93a06-256"><paramref name="predicate" /> est Null (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="93a06-256">The  <paramref name="predicate" /> is null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NullTarget&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; NullTarget&lt;TInput&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; NullTarget&lt;TInput&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1" />
      <MemberSignature Language="VB.NET" Value="Public Function NullTarget(Of TInput) () As ITargetBlock(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA; static System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ NullTarget();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="93a06-257">Type des messages que ce bloc peut accepter.</span><span class="sxs-lookup"><span data-stu-id="93a06-257">The type of the messages this block can accept.</span></span></typeparam>
        <summary><span data-ttu-id="93a06-258">Obtient un bloc cible qui reçoit de façon synchrone tous les messages fournis à ce dernier et les supprime.</span><span class="sxs-lookup"><span data-stu-id="93a06-258">Gets a target block that synchronously accepts all messages offered to it and drops them.</span></span></summary>
        <returns><span data-ttu-id="93a06-259"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> qui reçoit et dépose ensuite tous les messages transmis.</span><span class="sxs-lookup"><span data-stu-id="93a06-259">A <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> that accepts and subsequently drops all offered messages.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OutputAvailableAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-260">Spécifie le type de données contenu dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-260">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-261">Source à surveiller.</span><span class="sxs-lookup"><span data-stu-id="93a06-261">The source to monitor.</span></span></param>
        <summary><span data-ttu-id="93a06-262">Fournit un <see cref="T:System.Threading.Tasks.Task`1" /> qui surveille de façon asynchrone la source de la sortie disponible.</span><span class="sxs-lookup"><span data-stu-id="93a06-262">Provides a <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span></span></summary>
        <returns><span data-ttu-id="93a06-263"><see cref="T:System.Threading.Tasks.Task`1" /> qui avertit si une sortie supplémentaire sera disponible et quand.</span><span class="sxs-lookup"><span data-stu-id="93a06-263">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span></span> <span data-ttu-id="93a06-264">Si, lorsque la tâche se termine, son <see cref="P:System.Threading.Tasks.Task`1.Result" /> a la valeur <see langword="true" />, une sortie supplémentaire sera disponible dans la source (même si un autre consommateur de la source peut récupérer les données).</span><span class="sxs-lookup"><span data-stu-id="93a06-264">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span></span>  
  
 <span data-ttu-id="93a06-265">Si elle retourne <see langword="false" />, une sortie supplémentaire n'est pas et ne sera jamais disponible, en raison d'une source qui se termine avant la disponibilité de la sortie.</span><span class="sxs-lookup"><span data-stu-id="93a06-265">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-266">Spécifie le type de données contenu dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-266">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-267">Source à surveiller.</span><span class="sxs-lookup"><span data-stu-id="93a06-267">The source to monitor.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93a06-268">Jeton d'annulation utilisé pour annuler l'opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-268">The cancellation token with which to cancel the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="93a06-269">Fournit un <see cref="T:System.Threading.Tasks.Task`1" /> qui surveille de façon asynchrone la source de la sortie disponible.</span><span class="sxs-lookup"><span data-stu-id="93a06-269">Provides a  <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span></span></summary>
        <returns><span data-ttu-id="93a06-270"><see cref="T:System.Threading.Tasks.Task`1" /> qui avertit si une sortie supplémentaire sera disponible et quand.</span><span class="sxs-lookup"><span data-stu-id="93a06-270">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span></span> <span data-ttu-id="93a06-271">Si, lorsque la tâche se termine, son <see cref="P:System.Threading.Tasks.Task`1.Result" /> a la valeur <see langword="true" />, une sortie supplémentaire sera disponible dans la source (même si un autre consommateur de la source peut récupérer les données).</span><span class="sxs-lookup"><span data-stu-id="93a06-271">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span></span> <span data-ttu-id="93a06-272">Si elle retourne <see langword="false" />, une sortie supplémentaire n'est pas et ne sera jamais disponible, en raison d'une source qui se termine avant la disponibilité de la sortie.</span><span class="sxs-lookup"><span data-stu-id="93a06-272">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static bool Post&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Post&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Post(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Post(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="93a06-273">Spécifie le type de données accepté par le bloc cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-273">Specifies the type of data accepted by the target block.</span></span></typeparam>
        <param name="target"><span data-ttu-id="93a06-274">Bloc cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-274">The target block.</span></span></param>
        <param name="item"><span data-ttu-id="93a06-275">Élément qui est proposé à la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-275">The item being offered to the target.</span></span></param>
        <summary><span data-ttu-id="93a06-276">Publie un élément à <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-276">Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns>
          <span data-ttu-id="93a06-277"><see langword="true" /> si l'élément a été accepté par le bloc cible ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-277"><see langword="true" /> if the item was accepted by the target block; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93a06-278">Cette méthode retourne une fois le bloc cible a décidé d’accepter ou refuser l’élément, mais à moins que sinon dictées par une sémantique spéciale du bloc cible, il n’attend pas de l’élément à être traitée.</span><span class="sxs-lookup"><span data-stu-id="93a06-278">This method will return once the target block has decided to accept or decline the item, but unless otherwise dictated by special semantics of the target block, it does not wait for the item to actually be processed.</span></span> <span data-ttu-id="93a06-279">Par exemple, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> retournera de <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> dès qu’il a stocké l’article publié dans sa file d’attente d’entrée).</span><span class="sxs-lookup"><span data-stu-id="93a06-279">For example, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> will return from <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> as soon as it has stored the posted item into its input queue).</span></span> <span data-ttu-id="93a06-280">Du point de vue du traitement du bloc `Post` est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-280">From the perspective of the block's processing, `Post` is asynchronous.</span></span> <span data-ttu-id="93a06-281">Cible bloque cette prise en charge report envoyé de messages ou, pour les blocs qui peuvent effectuer un traitement plus dans leurs `Post` mise en œuvre, envisagez d’utiliser <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, qui est retournée immédiatement et activera la cible reporter le message publié et le consommer ultérieurement après `SendAsync` retourne.</span><span class="sxs-lookup"><span data-stu-id="93a06-281">For target blocks that support postponing offered messages, or for blocks that may do more processing in their `Post` implementation, consider using <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, which will return immediately and will enable the target to postpone the posted message and later consume it after `SendAsync` returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput)) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-282">Le type des données contenues dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-282">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-283">La source à partir de laquelle recevoir la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-283">The source from which to receive the value.</span></span></param>
        <summary><span data-ttu-id="93a06-284">Reçoit de façon synchrone une valeur d'une source spécifiée.</span><span class="sxs-lookup"><span data-stu-id="93a06-284">Synchronously receives a value from a specified source.</span></span></summary>
        <returns><span data-ttu-id="93a06-285">La valeur reçue.</span><span class="sxs-lookup"><span data-stu-id="93a06-285">The received value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93a06-286"><paramref name="source" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-286"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93a06-287">Aucun élément n'a pu être accepté par la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-287">No item could be received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-288">Le type des données contenues dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-288">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-289">La source à partir de laquelle recevoir la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-289">The source from which to receive the value.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93a06-290">Le jeton à utiliser pour annuler l'opération de réception.</span><span class="sxs-lookup"><span data-stu-id="93a06-290">The token to use to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="93a06-291">Reçoit de façon synchrone une valeur d'une source spécifiée et fournit un jeton pour annuler l'opération.</span><span class="sxs-lookup"><span data-stu-id="93a06-291">Synchronously receives a value from a specified source and provides a token to cancel the operation.</span></span></summary>
        <returns><span data-ttu-id="93a06-292">La valeur reçue.</span><span class="sxs-lookup"><span data-stu-id="93a06-292">The received value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93a06-293">Si la source proposés avec succès un élément qui a été reçu par cette opération, cet élément est retourné même si une demande d’annulation simultanées se produit.</span><span class="sxs-lookup"><span data-stu-id="93a06-293">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93a06-294"><paramref name="source" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-294"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93a06-295">Aucun élément n'a pu être accepté par la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-295">No item could be received from the source.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="93a06-296">L'opération a été annulée avant la réception d'un élément depuis la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-296">The operation was canceled before an item was received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-297">Le type des données contenues dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-297">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-298">La source à partir de laquelle recevoir la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-298">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="93a06-299">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="93a06-299">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="93a06-300">Reçoit de façon synchrone une valeur d'une source spécifiée, en observant un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="93a06-300">Synchronously receives a value from a specified source, observing an optional time-out period.</span></span></summary>
        <returns><span data-ttu-id="93a06-301">La valeur reçue.</span><span class="sxs-lookup"><span data-stu-id="93a06-301">The received value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93a06-302">Si la source proposés avec succès un élément qui a été reçu par cette opération, cet élément est retourné même si un délai d’attente simultanée se produit.</span><span class="sxs-lookup"><span data-stu-id="93a06-302">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent time-out occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="93a06-303"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="93a06-303"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
 <span data-ttu-id="93a06-304">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-304">-or-</span></span>  
  
 <span data-ttu-id="93a06-305"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-305"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93a06-306"><paramref name="source" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-306"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93a06-307">Aucun élément n'a pu être accepté par la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-307">No item could be received from the source.</span></span></exception>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="93a06-308">Le délai d'attente spécifié a expiré avant la réception d'un élément en provenance de la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-308">The specified time-out expired before an item was received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-309">Le type des données contenues dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-309">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-310">La source à partir de laquelle recevoir la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-310">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="93a06-311">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="93a06-311">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93a06-312">Le jeton à utiliser pour annuler l'opération de réception.</span><span class="sxs-lookup"><span data-stu-id="93a06-312">The token to use to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="93a06-313">Reçoit de façon synchrone une valeur d'une source spécifiée, en fournissant un jeton pour annuler l'opération et en observant un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="93a06-313">Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span></span></summary>
        <returns><span data-ttu-id="93a06-314">La valeur reçue.</span><span class="sxs-lookup"><span data-stu-id="93a06-314">The received value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93a06-315">Si la source proposés avec succès une valeur de l’élément qui a été reçue par cette opération, cette valeur est retournée, même si une demande concurrente de délai d’attente ou l’annulation se produit.</span><span class="sxs-lookup"><span data-stu-id="93a06-315">If the source successfully offered an item value that was received by this operation, that value is returned even if a concurrent time-out or cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-316"><paramref name="source" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-316">The <paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="93a06-317"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="93a06-317"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
 <span data-ttu-id="93a06-318">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-318">-or-</span></span>  
  
 <span data-ttu-id="93a06-319"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-319"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93a06-320">Aucun élément n'a pu être accepté par la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-320">No item could be received from the source.</span></span></exception>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="93a06-321">Le délai d'attente spécifié a expiré avant la réception d'un élément en provenance de la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-321">The specified time-out expired before an item was received from the source.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="93a06-322">L'opération a été annulée avant la réception d'un élément depuis la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-322">The operation was canceled before an item was received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-323">Le type des données contenues dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-323">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-324">La source à partir de laquelle recevoir la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-324">The source from which to receive the value.</span></span></param>
        <summary><span data-ttu-id="93a06-325">Reçoit de façon asynchrone une valeur d'une source spécifiée.</span><span class="sxs-lookup"><span data-stu-id="93a06-325">Asynchronously receives a value from a specified source.</span></span></summary>
        <returns><span data-ttu-id="93a06-326">Tâche qui représente l'opération de réception asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-326">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="93a06-327">Lorsqu'une valeur d'élément est reçue avec succès depuis la source, la tâche retournée est exécutée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur reçue.</span><span class="sxs-lookup"><span data-stu-id="93a06-327">When an item value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the received value.</span></span> <span data-ttu-id="93a06-328">Si la valeur d’un élément ne peut pas être récupérée car la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</span><span class="sxs-lookup"><span data-stu-id="93a06-328">If an item value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93a06-329"><paramref name="source" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-329"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-330">Spécifie le type de données contenu dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-330">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-331">La source à partir de laquelle recevoir la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-331">The source from which to receive the value.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93a06-332">Le jeton à utiliser pour annuler l'opération de réception.</span><span class="sxs-lookup"><span data-stu-id="93a06-332">The token to use to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="93a06-333">Accepte de façon asynchrone une valeur d'une source spécifiée et fournit un jeton pour annuler l'opération.</span><span class="sxs-lookup"><span data-stu-id="93a06-333">Asynchronously receives a value from a specified source and provides a token to cancel the operation.</span></span></summary>
        <returns><span data-ttu-id="93a06-334">Tâche qui représente l'opération de réception asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-334">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="93a06-335">Lorsqu'une valeur est correctement reçue de la source, la tâche retournée est terminée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-335">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span></span> <span data-ttu-id="93a06-336">Si une valeur ne peut pas être récupérée parce que l'annulation a été demandée, la tâche retournée est annulée.</span><span class="sxs-lookup"><span data-stu-id="93a06-336">If a value cannot be retrieved because cancellation was requested, the returned task is canceled.</span></span> <span data-ttu-id="93a06-337">Si la valeur ne peut pas être récupérée car la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</span><span class="sxs-lookup"><span data-stu-id="93a06-337">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93a06-338"><paramref name="source" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-338"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-339">Le type des données contenues dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-339">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-340">La source à partir de laquelle recevoir la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-340">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="93a06-341">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="93a06-341">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="93a06-342">Reçoit de façon asynchrone une valeur d'une source spécifiée, en observant un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="93a06-342">Asynchronously receives a value from a specified source, observing an optional time-out period.</span></span></summary>
        <returns><span data-ttu-id="93a06-343">Tâche qui représente l'opération de réception asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-343">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="93a06-344">Lorsqu'une valeur est correctement reçue de la source, la tâche retournée est terminée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-344">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span></span> <span data-ttu-id="93a06-345">Si une valeur ne peut pas être récupérée car le délai d'attente a expiré, la tâche retournée est annulée.</span><span class="sxs-lookup"><span data-stu-id="93a06-345">If a value cannot be retrieved because the time-out expired, the returned task is canceled.</span></span> <span data-ttu-id="93a06-346">Si la valeur ne peut pas être récupérée car la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</span><span class="sxs-lookup"><span data-stu-id="93a06-346">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93a06-347"><paramref name="source" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-347"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="93a06-348"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="93a06-348"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
 <span data-ttu-id="93a06-349">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-349">-or-</span></span>  
  
 <span data-ttu-id="93a06-350"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-350"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-351">Le type des données contenues dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-351">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-352">La source à partir de laquelle recevoir la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-352">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="93a06-353">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="93a06-353">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93a06-354">Le jeton pouvant être utilisé pour annuler l'opération de réception.</span><span class="sxs-lookup"><span data-stu-id="93a06-354">The token which may be used to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="93a06-355">Reçoit de façon asynchrone une valeur d'une source spécifiée, en fournissant un jeton pour annuler l'opération et en observant un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="93a06-355">Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span></span></summary>
        <returns><span data-ttu-id="93a06-356">Tâche qui représente l'opération de réception asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-356">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="93a06-357">Lorsqu'une valeur est correctement reçue de la source, la tâche retournée est terminée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur.</span><span class="sxs-lookup"><span data-stu-id="93a06-357">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span></span> <span data-ttu-id="93a06-358">Si une valeur ne peut pas être récupérée parce que le délai d'attente a expiré ou l'annulation a été demandée, la tâche retournée est annulée.</span><span class="sxs-lookup"><span data-stu-id="93a06-358">If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled.</span></span> <span data-ttu-id="93a06-359">Si la valeur ne peut pas être récupérée parce que la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</span><span class="sxs-lookup"><span data-stu-id="93a06-359">If the value cannot be retrieved because the source is empty and completed, an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93a06-360"><paramref name="source" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-360"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="93a06-361"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="93a06-361"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
 <span data-ttu-id="93a06-362">- ou -</span><span class="sxs-lookup"><span data-stu-id="93a06-362">-or-</span></span>  
  
 <span data-ttu-id="93a06-363"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-363"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SendAsync(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="93a06-364">Spécifie le type des données à publier sur la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-364">Specifies the type of the data to post to the target.</span></span></typeparam>
        <param name="target"><span data-ttu-id="93a06-365">Cible dans laquelle publier les données.</span><span class="sxs-lookup"><span data-stu-id="93a06-365">The target to which to post the data.</span></span></param>
        <param name="item"><span data-ttu-id="93a06-366">Élément qui est proposé à la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-366">The item being offered to the target.</span></span></param>
        <summary><span data-ttu-id="93a06-367">Propose de façon asynchrone un message au bloc de message cible, en autorisant l'ajournement.</span><span class="sxs-lookup"><span data-stu-id="93a06-367">Asynchronously offers a message to the target message block, allowing for postponement.</span></span></summary>
        <returns><span data-ttu-id="93a06-368"><see cref="T:System.Threading.Tasks.Task`1" /> qui représente l'envoi asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-368">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span></span> <span data-ttu-id="93a06-369">Si la cible accepte et consomme l'élément proposé pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, au retour de l'appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante sera terminée et sa propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> retournera la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-369">If the target accepts and consumes the offered element during the call to <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="true" />.</span></span> <span data-ttu-id="93a06-370">Si la cible refuse l'élément proposé pendant l'appel, au retour de l'appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante sera terminée et sa propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> retournera la valeur <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-370">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="false" />.</span></span> <span data-ttu-id="93a06-371">Si la cible diffère l'élément proposé, l'élément sera mis en mémoire tampon jusqu'au moment où la cible le consomme ou le libère. À ce moment-là, la tâche se terminera, avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> indiquant si le message a été consommé.</span><span class="sxs-lookup"><span data-stu-id="93a06-371">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicating whether the message was consumed.</span></span> <span data-ttu-id="93a06-372">Si la cible n'essaie jamais de consommer ou de libérer le message, la tâche retournée ne se terminera jamais.</span><span class="sxs-lookup"><span data-stu-id="93a06-372">If the target never attempts to consume or release the message, the returned task will never complete.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-373"><paramref name="target" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-373">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="93a06-374">Spécifie le type des données à publier sur la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-374">Specifies the type of the data to post to the target.</span></span></typeparam>
        <param name="target"><span data-ttu-id="93a06-375">Cible dans laquelle publier les données.</span><span class="sxs-lookup"><span data-stu-id="93a06-375">The target to which to post the data.</span></span></param>
        <param name="item"><span data-ttu-id="93a06-376">Élément qui est proposé à la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-376">The item being offered to the target.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93a06-377">Jeton d'annulation utilisé pour demander l'annulation de l'opération d'envoi.</span><span class="sxs-lookup"><span data-stu-id="93a06-377">The cancellation token with which to request cancellation of the send operation.</span></span></param>
        <summary><span data-ttu-id="93a06-378">Propose de façon asynchrone un message au bloc de message cible, en autorisant l'ajournement.</span><span class="sxs-lookup"><span data-stu-id="93a06-378">Asynchronously offers a message to the target message block, allowing for postponement.</span></span></summary>
        <returns><span data-ttu-id="93a06-379"><see cref="T:System.Threading.Tasks.Task`1" /> qui représente l'envoi asynchrone.</span><span class="sxs-lookup"><span data-stu-id="93a06-379">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span></span>  <span data-ttu-id="93a06-380">Si la cible accepte et consomme l’élément proposé pendant l’appel à SendAsync, au retour de l’appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante est terminée et sa propriété <c>Result</c> retourne la valeur true.</span><span class="sxs-lookup"><span data-stu-id="93a06-380">If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return true.</span></span>  <span data-ttu-id="93a06-381">Si la cible refuse l’élément proposé pendant l’appel, au retour de l’appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante est terminée et sa propriété <c>Result</c> retourne la valeur false.</span><span class="sxs-lookup"><span data-stu-id="93a06-381">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return false.</span></span> <span data-ttu-id="93a06-382">Si la cible diffère l’élément proposé, l’élément est mis en mémoire tampon jusqu’au moment où la cible le consomme ou le libère. À ce moment-là, la tâche se termine, avec son <c>Result</c> indiquant si le message a été consommé.</span><span class="sxs-lookup"><span data-stu-id="93a06-382">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its <c>Result</c> indicating whether the message was consumed.</span></span> <span data-ttu-id="93a06-383">Si la cible n'essaie jamais de consommer ou de libérer le message, la tâche retournée ne se terminera jamais.</span><span class="sxs-lookup"><span data-stu-id="93a06-383">If the target never attempts to consume or release the message, the returned task will never complete.</span></span>  
  
 <span data-ttu-id="93a06-384">Si l'annulation est demandée avant que la cible n'ait consommé avec succès les données envoyées, la tâche retournée se terminera à l'état d'annulation et les données ne seront plus disponibles pour la cible.</span><span class="sxs-lookup"><span data-stu-id="93a06-384">If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93a06-385"><paramref name="target" /> est Null (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="93a06-385">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static bool TryReceive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt; source, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReceive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!!TOutput&gt; source, [out] !!TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryReceive(Of TOutput) (source As IReceivableSourceBlock(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryReceive(System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;TOutput&gt; ^ source, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="item" Type="TOutput&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="93a06-386">Spécifie le type de données contenu dans la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-386">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="93a06-387">Source de réception.</span><span class="sxs-lookup"><span data-stu-id="93a06-387">The source from which to receive.</span></span></param>
        <param name="item"><span data-ttu-id="93a06-388">Élément envoyé à partir de la source.</span><span class="sxs-lookup"><span data-stu-id="93a06-388">The item received from the source.</span></span></param>
        <summary><span data-ttu-id="93a06-389">Tente de recevoir de façon synchrone un élément de <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-389">Attempts to synchronously receive an item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns>
          <span data-ttu-id="93a06-390"><see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="93a06-390"><see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93a06-391">Cette méthode n’attend pas jusqu'à ce que la source d’un élément à fournir.</span><span class="sxs-lookup"><span data-stu-id="93a06-391">This method does not wait until the source has an item to provide.</span></span>  
  
 <span data-ttu-id="93a06-392">Il retourne un élément était disponible ou non.</span><span class="sxs-lookup"><span data-stu-id="93a06-392">It will return whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>