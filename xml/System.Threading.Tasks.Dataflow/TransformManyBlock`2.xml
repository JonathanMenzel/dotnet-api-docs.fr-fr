<Type Name="TransformManyBlock&lt;TInput,TOutput&gt;" FullName="System.Threading.Tasks.Dataflow.TransformManyBlock&lt;TInput,TOutput&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab06e0a7693c9ba153d16e786d51f2e622c832d9" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39759116" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TransformManyBlock&lt;TInput,TOutput&gt; : System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;, System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TransformManyBlock`2&lt;TInput, TOutput&gt; extends System.Object implements class System.Threading.Tasks.Dataflow.IDataflowBlock, class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!TInput, !TOutput&gt;, class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!TOutput&gt;, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!TOutput&gt;, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TInput&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TransformManyBlock(Of TInput, TOutput)&#xA;Implements IPropagatorBlock(Of TInput, TOutput), IReceivableSourceBlock(Of TOutput), ISourceBlock(Of TOutput), ITargetBlock(Of TInput)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public ref class TransformManyBlock sealed : System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;TInput, TOutput&gt;, System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;TOutput&gt;, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt;" />
  <TypeSignature Language="F#" Value="type TransformManyBlock&lt;'Input, 'Output&gt; = class&#xA;    interface IDataflowBlock&#xA;    interface IPropagatorBlock&lt;'Input, 'Output&gt;&#xA;    interface ISourceBlock&lt;'Output&gt;&#xA;    interface ITargetBlock&lt;'Input&gt;&#xA;    interface IReceivableSourceBlock&lt;'Output&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput" />
    <TypeParameter Name="TOutput" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayContent,nq}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.Dataflow.TransformManyBlock`2/DebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TInput">Spécifie le type de données reçu et traité par ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
    <typeparam name="TOutput">Spécifie le type de données généré par le <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
    <summary>Fournit un bloc de flux de données qui appelle un délégué <see cref="T:System.Func`2" /> fourni pour chaque élément de données reçu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt; transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt; transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transform As Func(Of TInput, IEnumerable(Of TOutput)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TransformManyBlock(Func&lt;TInput, System::Collections::Generic::IEnumerable&lt;TOutput&gt; ^&gt; ^ transform);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt; : Func&lt;'Input, seq&lt;'Output&gt;&gt; -&gt; System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt;" Usage="new System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt; transform" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="transform">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <summary>Initialise une nouvelle <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction spécifiée.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt; transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt;&gt; transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transform As Func(Of TInput, Task(Of IEnumerable(Of TOutput))))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TransformManyBlock(Func&lt;TInput, System::Threading::Tasks::Task&lt;System::Collections::Generic::IEnumerable&lt;TOutput&gt; ^&gt; ^&gt; ^ transform);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt; : Func&lt;'Input, System.Threading.Tasks.Task&lt;seq&lt;'Output&gt;&gt;&gt; -&gt; System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt;" Usage="new System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt; transform" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="transform">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de manière asynchrone dans <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <summary>Initialise une nouvelle <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction spécifiée.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt; transform, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt; transform, class System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transform As Func(Of TInput, IEnumerable(Of TOutput)), dataflowBlockOptions As ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TransformManyBlock(Func&lt;TInput, System::Collections::Generic::IEnumerable&lt;TOutput&gt; ^&gt; ^ transform, System::Threading::Tasks::Dataflow::ExecutionDataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt; : Func&lt;'Input, seq&lt;'Output&gt;&gt; * System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions -&gt; System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt;" Usage="new System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt; (transform, dataflowBlockOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="transform">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de l’élément de manière asynchrone dans <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transform" /> a la valeur <see langword="null" />.  - ou - <paramref name="dataflowBlockOptions" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt; transform, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt;&gt; transform, class System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transform As Func(Of TInput, Task(Of IEnumerable(Of TOutput))), dataflowBlockOptions As ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TransformManyBlock(Func&lt;TInput, System::Threading::Tasks::Task&lt;System::Collections::Generic::IEnumerable&lt;TOutput&gt; ^&gt; ^&gt; ^ transform, System::Threading::Tasks::Dataflow::ExecutionDataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt; : Func&lt;'Input, System.Threading.Tasks.Task&lt;seq&lt;'Output&gt;&gt;&gt; * System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions -&gt; System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt;" Usage="new System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt; (transform, dataflowBlockOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="transform">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de manière asynchrone dans <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transform" /> a la valeur <see langword="null" />.  - ou - <paramref name="dataflowBlockOptions" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Complete();" />
      <MemberSignature Language="F#" Value="abstract member Complete : unit -&gt; unit&#xA;override this.Complete : unit -&gt; unit" Usage="transformManyBlock.Complete " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une fois <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Complete%2A> a été appelée sur un bloc de flux de données, ce bloc se termine et son <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> tâche passera un état final après avoir traité toutes les données précédemment disponibles. <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Complete%2A> va pas le bloc attend la fin se produisent, mais au lieu de cela lance la demande ; pour attendre la fin se produisent, le <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> tâche peut être utilisée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Completion As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Task ^ Completion { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Completion : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt;.Completion" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
        <value>Tâche.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un bloc de flux de données est considéré comme terminé quand elle n’est pas actuellement traite un message et quand il a la garantie qu’il ne traitera pas plus de messages. Retourné <xref:System.Threading.Tasks.Task> sera la transition vers un état terminé lorsque le bloc associé est terminée. Il adopte le <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> sémantique définie par l’état lorsque le bloc termine son traitement avec succès selon le bloc de flux de données. Il adopte le <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Faulted> état lorsque le bloc de flux de données a terminé le traitement prématurément en raison d’une exception non gérée, et il adopte le <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Canceled> état lorsque le bloc de flux de données est terminée. traitement prématurément en raison de la réception d’une demande d’annulation. Si la tâche se termine dans le <xref:System.Threading.Tasks.TaskStatus.Faulted> état, son `Exception` propriété retournera un <xref:System.AggregateException> contenant une ou plusieurs exceptions qui a provoqué l’échec du bloc.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputCount">
      <MemberSignature Language="C#" Value="public int InputCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InputCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int InputCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.InputCount : int" Usage="System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt;.InputCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre d'éléments d'entrée en attente de traitement par ce bloc.</summary>
        <value>Nombre d'éléments d'entrée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.InputCount%2A> n’inclut pas tous les éléments en cours de traitement par le bloc ou tous les éléments qui ont déjà été traités par le bloc.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo">
      <MemberSignature Language="C#" Value="public IDisposable LinkTo (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable LinkTo(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinkTo (target As ITargetBlock(Of TOutput), linkOptions As DataflowLinkOptions) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions);" />
      <MemberSignature Language="F#" Value="abstract member LinkTo : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions -&gt; IDisposable&#xA;override this.LinkTo : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions -&gt; IDisposable" Usage="transformManyBlock.LinkTo (target, linkOptions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
        <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
        <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
        <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputCount">
      <MemberSignature Language="C#" Value="public int OutputCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutputCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int OutputCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputCount : int" Usage="System.Threading.Tasks.Dataflow.TransformManyBlock&lt;'Input, 'Output&gt;.OutputCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
        <value>Nombre d'éléments de sortie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.IDataflowBlock.Fault">
      <MemberSignature Language="C#" Value="void IDataflowBlock.Fault (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception ^ exception) = System::Threading::Tasks::Dataflow::IDataflowBlock::Fault;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
        <summary>Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Après avoir <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.System%23Threading%23Tasks%23Dataflow%23IDataflowBlock%23Fault%2A> a été appelée sur un bloc de flux de données, ce bloc se termine et son <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> tâche passera à un état final. Provoquer une erreur dans un bloc, comme avec l’annulation d’un bloc, entraîne mis en mémoire tampon des messages (messages d’entrée non traités ainsi que les messages de sortie unoffered) perdues.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ConsumeMessage">
      <MemberSignature Language="C#" Value="TOutput ISourceBlock&lt;TOutput&gt;.ConsumeMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, out bool messageConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !TOutput System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ConsumeMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target, [out] bool&amp; messageConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;TOutput&gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Function ConsumeMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of TOutput), ByRef messageConsumed As Boolean) As TOutput Implements ISourceBlock(Of TOutput).ConsumeMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual TOutput System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ConsumeMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, [Runtime::InteropServices::Out] bool % messageConsumed) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;::ConsumeMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="messageConsumed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="messageHeader">
          <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
        <param name="target">
          <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
        <param name="messageConsumed">
          <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
        <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
        <returns>Valeur du message consommé. Cela peut correspondre à une autre instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée à la place la valeur passée en tant que <paramref name="messageValue" /> via OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />  Si le message demandé n’est pas disponible, la valeur de retour est <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uniquement <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instances liées à ce <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instance peut utiliser <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A>, et il doit uniquement servir à consommer <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instances précédemment proposé par cette source à la cible.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="messageHeader" /> n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReleaseReservation">
      <MemberSignature Language="C#" Value="void ISourceBlock&lt;TOutput&gt;.ReleaseReservation (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReleaseReservation(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;TOutput&gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})" />
      <MemberSignature Language="VB.NET" Value="Sub ReleaseReservation (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of TOutput)) Implements ISourceBlock(Of TOutput).ReleaseReservation" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReleaseReservation(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;::ReleaseReservation;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader">
          <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
        <param name="target">
          <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
        <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uniquement <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instances liées à ce <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instance peut utiliser <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A>, et il doit uniquement être utilisé pour libérer <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instances précédemment et a été réservés par la cible.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="messageHeader" /> n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La <paramref name="target" /> ne contient pas le message réservé.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReserveMessage">
      <MemberSignature Language="C#" Value="bool ISourceBlock&lt;TOutput&gt;.ReserveMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReserveMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;TOutput&gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})" />
      <MemberSignature Language="VB.NET" Value="Function ReserveMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of TOutput)) As Boolean Implements ISourceBlock(Of TOutput).ReserveMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReserveMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;::ReserveMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader">
          <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
        <param name="target">
          <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
        <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
        <returns>
          <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uniquement <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instances liées à ce <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instance peut utiliser <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>, et il doit uniquement servir à réserver <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instances précédemment proposé par cette source à la cible.  
  
 Si `true` est retourné, le <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> doit appeler par la suite <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A> ou <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A> pour ce message. Pour ce faire, peut échouer dans la source de l’impossibilité de se propager plus aucun message à celui-ci ou d’autres cibles.  
  
 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A> ne doit pas être appelée pendant que la cible est maintenant tous les verrous internes. Cela violeront la hiérarchie des verrous nécessaire pour éviter les blocages dans un réseau de flux de données.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="messageHeader" /> n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Dataflow.DataflowMessageStatus ITargetBlock&lt;TInput&gt;.OfferMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, TInput messageValue, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TInput&gt; source, bool consumeToAccept);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Threading.Tasks.Dataflow.DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, !TInput messageValue, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!TInput&gt; source, bool consumeToAccept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock&lt;TInput&gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function OfferMessage (messageHeader As DataflowMessageHeader, messageValue As TInput, source As ISourceBlock(Of TInput), consumeToAccept As Boolean) As DataflowMessageStatus Implements ITargetBlock(Of TInput).OfferMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Threading::Tasks::Dataflow::DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, TInput messageValue, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TInput&gt; ^ source, bool consumeToAccept) = System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt;::OfferMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.DataflowMessageStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="messageValue" Type="TInput" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TInput&gt;" />
        <Parameter Name="consumeToAccept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="messageHeader">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
        <param name="messageValue">Valeur du message proposé.</param>
        <param name="source">
          <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Celui-ci peut être <see langword="null" />.</param>
        <param name="consumeToAccept">
          <see langword="true" /> si la cible doit appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
        <summary>Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
        <returns>État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.  Si la cible avait par contre différé mais que la source avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné à la place.  Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.  Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="messageHeader" /> n'est pas valide.  - ou - <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="transformManyBlock.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
        <returns>Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Héritée de <xref:System.Object> . Utilise le <xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> option.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (Predicate&lt;TOutput&gt; filter, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(class System.Predicate`1&lt;!TOutput&gt; filter, [out] !TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (filter As Predicate(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryReceive(Predicate&lt;TOutput&gt; ^ filter, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : Predicate&lt;'Output&gt; *  -&gt; bool&#xA;override this.TryReceive : Predicate&lt;'Output&gt; *  -&gt; bool" Usage="transformManyBlock.TryReceive (filter, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Predicate&lt;TOutput&gt;" />
        <Parameter Name="item" Type="TOutput" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <c>filter</c> peut être <see langword="null" />, auquel cas tous les éléments aboutissent.</param>
        <param name="item">Élément envoyé à partir de la source.</param>
        <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
        <returns>
          <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne bloque pas attendre la source fournir un élément.  
  
 Après avoir vérifié pour un élément, est retournée si un élément a été disponible ou non.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveAll">
      <MemberSignature Language="C#" Value="public bool TryReceiveAll (out System.Collections.Generic.IList&lt;TOutput&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveAll([out] class System.Collections.Generic.IList`1&lt;!TOutput&gt;&amp; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveAll (ByRef items As IList(Of TOutput)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryReceiveAll([Runtime::InteropServices::Out] System::Collections::Generic::IList&lt;TOutput&gt; ^ % items);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveAll :  -&gt; bool&#xA;override this.TryReceiveAll :  -&gt; bool" Usage="transformManyBlock.TryReceiveAll items" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IList&lt;TOutput&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="items">Éléments reçus de la source.</param>
        <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
        <returns>
          <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne bloque pas attendre la source fournir un élément.  
  
 Après avoir vérifié les éléments, est retournée si un élément a été disponible ou non.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>