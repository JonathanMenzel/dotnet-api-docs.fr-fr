<Type Name="CookieHandler" FullName="System.IdentityModel.Services.CookieHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e234c79bb977b762d5493ec4745d5160bd1fccba" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51932633" /></Metadata><TypeSignature Language="C#" Value="public abstract class CookieHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CookieHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.CookieHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CookieHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class CookieHandler abstract" />
  <TypeSignature Language="F#" Value="type CookieHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit une classe de base abstraite pour lire, écrire et supprimer des cookies de session sur un client HTTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) utilise une instance de la <xref:System.IdentityModel.Services.CookieHandler> classe pour lire, écrire et supprimez le cookie ou les cookies qui contiennent le <xref:System.IdentityModel.Tokens.SessionSecurityToken> sur le client HTTP. Le cookie (ou les cookies, dans le cas où le jeton de session est divisé en plusieurs cookies) qui contient la session de jeton est appelé le cookie de session.  
  
 Windows Identity Foundation (WIF) est fourni avec un gestionnaire de cookie appelé le Gestionnaire de cookies mémorisé en bloc qui est implémenté par le <xref:System.IdentityModel.Services.ChunkedCookieHandler> classe. Le Gestionnaire de cookies mémorisés répartit le jeton de session sur un ou plusieurs cookies en fonction d’une taille de segment spécifié. Il s’agit pour répondre aux limitations de taille sur des cookies imposées par de nombreux navigateurs.  
  
 Vous pouvez dériver de <xref:System.IdentityModel.Services.CookieHandler> pour créer votre propre gestionnaire de cookies. Lorsque vous procédez ainsi, vous devez substituer la <xref:System.IdentityModel.Services.CookieHandler.DeleteCore%2A>, <xref:System.IdentityModel.Services.CookieHandler.ReadCore%2A>, et <xref:System.IdentityModel.Services.CookieHandler.WriteCore%2A> méthodes pour effectuer le travail réel de la suppression, la lecture et écriture le cookie de session. Ces méthodes lisent généralement le cookie à partir de la <xref:System.Web.HttpRequest.Cookies%2A?displayProperty=nameWithType> collection et écrire ou supprimer des cookies via le <xref:System.Web.HttpResponse.Cookies%2A?displayProperty=nameWithType> collection. Le <xref:System.Web.HttpContext> objet par le biais duquel vous pouvez accéder à la demande et réponse est fournie en tant que paramètre à chacune de ces méthodes. Outre les méthodes requises, vous pouvez éventuellement substituer d’autres propriétés de méthodes virtuelles exposées par le <xref:System.IdentityModel.Services.CookieHandler> classe pour personnaliser le comportement de votre gestionnaire.  
  
 Plusieurs propriétés sont exposées par le <xref:System.IdentityModel.Services.CookieHandler> classe qui spécifient le comportement par défaut et des propriétés pour le cookie de session. Le <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>, et <xref:System.IdentityModel.Services.CookieHandler.Path%2A> propriétés fournissent le nom de base pour le cookie, le domaine dans lequel il est valide et le chemin d’accès sous lequel il est stocké sur le client. Le <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A> propriété spécifie si le cookie est accessible aux scripts côté client. Le <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A> propriété spécifie si le cookie doit être transmis uniquement sur des connexions sécurisées (HTTPS). Si la valeur, le <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A> propriété est utilisée pour définir le délai d’expiration pour les sessions persistantes, ce qui concerne les sessions qui restent valides même après la fermeture du navigateur. Toutes ces propriétés ont des propriétés équivalentes qui sont généralement définies sur sous-jacent <xref:System.Web.HttpCookie> objet (ou objets) par les méthodes « core » du gestionnaire. Pour plus d’informations, consultez la documentation pour chaque propriété.  
  
 Le Gestionnaire de cookie qui est utilisé par le module SAM peut être spécifié dans la configuration via la [ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) élément. Le Gestionnaire de cookie défini par cet élément peut être modifié dans un délégué d’événement pour le <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> événement ou il peut être définie ou accéder directement par le <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A?displayProperty=nameWithType> propriété.  
  
   
  
## Examples  
 L’exemple suivant configure le module SAM pour utiliser un gestionnaire de cookie personnalisé de type `MyNamespace.MyCustomCookieHandler`.  
  
```xml  
<cookieHandler mode="Custom">  
    <customCookieHandler type="MyNamespace.MyCustomCookieHandler, MyAssembly" />  
</cookieHandler>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ChunkedCookieHandler" />
    <related type="Article" href="https://msdn.microsoft.com/library/bfdc127f-8d94-4566-8bef-f583c6ae7398">&lt;cookieHandler&gt;</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CookieHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CookieHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Appelée à partir des constructeurs des classes dérivées pour initialiser la classe <see cref="T:System.IdentityModel.Services.CookieHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Supprime un cookie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; unit" Usage="cookieHandler.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime le cookie associé à la demande actuelle avec le nom, le champ et le chemin d'accès par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom, le domaine et le chemin d’accès sont spécifiées par le <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>, et <xref:System.IdentityModel.Services.CookieHandler.Path%2A> propriétés. La demande est spécifiée par <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Delete : string -&gt; unit" Usage="cookieHandler.Delete name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom du cookie.</param>
        <summary>Supprime le cookie associé à la demande actuelle avec le nom spécifié, le champ et le chemin d'accès par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le domaine et le chemin d’accès sont spécifiées par le <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> et <xref:System.IdentityModel.Services.CookieHandler.Path%2A> propriétés. La demande est spécifiée par <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> a la valeur <see langword="null" /> ou est vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Delete context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête.</param>
        <summary>Supprime le cookie associé à la demande actuelle avec le nom, le champ et le chemin d'accès par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom, le domaine et le chemin d’accès sont spécifiées par le <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>, et <xref:System.IdentityModel.Services.CookieHandler.Path%2A> propriétés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (name As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Delete : string * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Delete (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Nom du cookie.</param>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête.</param>
        <summary>Supprime le cookie associé à la demande spécifiée avec le nom spécifié, le champ et le chemin d'accès par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le domaine et le chemin d’accès sont spécifiées par le <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> et <xref:System.IdentityModel.Services.CookieHandler.Path%2A> propriétés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> a la valeur <see langword="null" /> ou est vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (string name, string path, string domain, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(string name, string path, string domain, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.String,System.String,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (name As String, path As String, domain As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::String ^ name, System::String ^ path, System::String ^ domain, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Delete : string * string * string * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Delete (name, path, domain, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Nom du cookie.</param>
        <param name="path">Chemin d'accès du cookie.</param>
        <param name="domain">Domaine du cookie.</param>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête</param>
        <summary>Supprime le cookie associé à la demande spécifiée avec le nom, le champ et le chemin d'accès spécifiés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> a la valeur <see langword="null" /> ou est vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteCore">
      <MemberSignature Language="C#" Value="protected abstract void DeleteCore (string name, string path, string domain, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeleteCore(string name, string path, string domain, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.DeleteCore(System.String,System.String,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub DeleteCore (name As String, path As String, domain As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void DeleteCore(System::String ^ name, System::String ^ path, System::String ^ domain, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member DeleteCore : string * string * string * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.DeleteCore (name, path, domain, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Nom du cookie.</param>
        <param name="path">Chemin d'accès du cookie.</param>
        <param name="domain">Domaine du cookie.</param>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête.</param>
        <summary>En cas de substitution dans une classe dérivée, supprime le cookie associé à la demande spécifiée qui a le nom, le domaine et le chemin d'accès spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelée à partir de surchargées <xref:System.IdentityModel.Services.CookieHandler.Delete%2A> méthodes permettant d’effectuer le travail réel de la suppression du cookie. Le <xref:System.IdentityModel.Services.CookieHandler.Delete%2A> méthodes garantit que le nom et chemin d’accès sont une chaîne non vide.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous devez substituer cette méthode. L’implémentation est dépend entièrement du développeur. En règle générale, les implémentations remplacent le cookie spécifié dans le <see cref="P:System.Web.HttpResponse.Cookies" /> collection, avec un cookie qui a <see langword="null" /> données et un délai d’expiration défini précédemment à l’heure actuelle ; Toutefois, cela n’est pas obligatoire.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public virtual string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Domain { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string with get, set" Usage="System.IdentityModel.Services.CookieHandler.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le domaine utilisé pour les cookies.</summary>
        <value>Domaine utilisé pour les cookies. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Correspond à la propriété <xref:System.Web.HttpCookie.Domain%2A?displayProperty=nameWithType>.  
  
 La propriété peut être initialisée en spécifiant le `domain` d’attribut sur le [ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) élément de configuration.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfdc127f-8d94-4566-8bef-f583c6ae7398">&lt;cookieHandler&gt;</related>
      </Docs>
    </Member>
    <Member MemberName="HideFromClientScript">
      <MemberSignature Language="C#" Value="public virtual bool HideFromClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideFromClientScript" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.HideFromClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HideFromClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HideFromClientScript { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HideFromClientScript : bool with get, set" Usage="System.IdentityModel.Services.CookieHandler.HideFromClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le cookie doit être masqué du script client.</summary>
        <value><see langword="true" /> si le cookie doit être masqué dans le script client ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrôle si l’indicateur « HttpOnly » est émis dans l’en-tête Set-Cookie pour les cookies écrits par le gestionnaire. Certains navigateurs web respectent cet indicateur en conservant un script côté client d’accéder à la valeur du cookie.  
  
 Cette propriété correspond à la <xref:System.Web.HttpCookie.HttpOnly%2A?displayProperty=nameWithType> propriété.  
  
 La propriété peut être initialisée en spécifiant le `hideFromScript` d’attribut sur le [ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) élément de configuration.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchCookiePath">
      <MemberSignature Language="C#" Value="public virtual string MatchCookiePath (Uri baseUri, Uri targetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string MatchCookiePath(class System.Uri baseUri, class System.Uri targetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.MatchCookiePath(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchCookiePath (baseUri As Uri, targetUri As Uri) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ MatchCookiePath(Uri ^ baseUri, Uri ^ targetUri);" />
      <MemberSignature Language="F#" Value="abstract member MatchCookiePath : Uri * Uri -&gt; string&#xA;override this.MatchCookiePath : Uri * Uri -&gt; string" Usage="cookieHandler.MatchCookiePath (baseUri, targetUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="targetUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="baseUri">URL de base de la requête.</param>
        <param name="targetUri">URL à faire correspondre</param>
        <summary>Si le domaine cible est dans le domaine du cookie et si le chemin d'accès cible se trouve dans le chemin d'accès du cookie, respecte la casse de la partie du chemin d'accès du cookie.</summary>
        <returns>Retourne <see cref="T:System.String" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.IdentityModel.Services.CookieHandler.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de base pour les cookies écrits par le gestionnaire.</summary>
        <value>Nom de base à utiliser pour les cookies. La valeur par défaut est « FedAuth ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété correspond à la <xref:System.Web.HttpCookie.Name%2A?displayProperty=nameWithType> propriété.  
  
 La propriété peut être initialisée en spécifiant le `name` d’attribut sur le [ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) élément de configuration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une tentative d'affectation d'une valeur <see langword="null" /> ou vide se produit.</exception>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public virtual string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.Path" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.IdentityModel.Services.CookieHandler.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès virtuel pour les cookies écrit par le gestionnaire.</summary>
        <value>Chemin d'accès virtuel. S'applique par défaut à la racine de l'application ASP.NET.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété correspond à la <xref:System.Web.HttpCookie.Path%2A?displayProperty=nameWithType> propriété.  
  
 La propriété peut être initialisée en spécifiant le `path` d’attribut sur le [ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) élément de configuration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une tentative d'affectation d'une valeur <see langword="null" /> ou vide se produit.</exception>
      </Docs>
    </Member>
    <Member MemberName="PersistentSessionLifetime">
      <MemberSignature Language="C#" Value="public virtual Nullable&lt;TimeSpan&gt; PersistentSessionLifetime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; PersistentSessionLifetime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PersistentSessionLifetime As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Nullable&lt;TimeSpan&gt; PersistentSessionLifetime { Nullable&lt;TimeSpan&gt; get(); void set(Nullable&lt;TimeSpan&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PersistentSessionLifetime : Nullable&lt;TimeSpan&gt; with get, set" Usage="System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Durée de vie des sessions persistantes. Si la valeur est zéro, les sessions transitoires sont toujours utilisées.</summary>
        <value>Durée de vie de session. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tickets pour les sessions persistantes sont stockés dans des cookies basés sur fichier, ce qui signifie que la session de connexion peut continuer une fois que le navigateur web est fermé et rouverte.  
  
 Cette propriété est utilisée pour définir le <xref:System.Web.HttpCookie.Expires%2A?displayProperty=nameWithType> propriété.  
  
 La propriété peut être initialisée en spécifiant le `persistentSessionLifetime` d’attribut sur le [ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) élément de configuration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Une valeur inférieure à zéro est spécifiée.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lit un cookie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; byte[]" Usage="cookieHandler.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lit le cookie associé à la demande actuelle avec le nom par défaut.</summary>
        <returns>Valeur du cookie ou <see langword="null" /> si le cookie est introuvable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom du cookie spécifié par le <xref:System.IdentityModel.Services.CookieHandler.Name%2A> propriété. La demande est spécifiée par <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (name As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Read : string -&gt; byte[]" Usage="cookieHandler.Read name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom du cookie à lire.</param>
        <summary>Lit le cookie associé à la demande actuelle avec le nom spécifié.</summary>
        <returns>Valeur du cookie ou <see langword="null" /> si le cookie est introuvable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La demande est spécifiée par <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> a la valeur <see langword="null" /> ou est vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (context As HttpContext) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Read : System.Web.HttpContext -&gt; byte[]" Usage="cookieHandler.Read context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête.</param>
        <summary>Lit le cookie associé à la demande actuelle avec le nom, le domaine et le chemin d'accès par défaut.</summary>
        <returns>Valeur du cookie ou <see langword="null" /> si le cookie est introuvable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom du cookie spécifié par le <xref:System.IdentityModel.Services.CookieHandler.Name%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read(System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (name As String, context As HttpContext) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Read : string * System.Web.HttpContext -&gt; byte[]" Usage="cookieHandler.Read (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Nom du cookie à lire.</param>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête.</param>
        <summary>Lit le cookie associé à la demande spécifiée avec le nom spécifié et le domaine et chemin d'accès par défaut.</summary>
        <returns>Valeur du cookie ou <see langword="null" /> si le cookie est introuvable.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> a la valeur <see langword="null" /> ou est vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCore">
      <MemberSignature Language="C#" Value="protected abstract byte[] ReadCore (string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ReadCore(string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.ReadCore(System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReadCore (name As String, context As HttpContext) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ ReadCore(System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ReadCore : string * System.Web.HttpContext -&gt; byte[]" Usage="cookieHandler.ReadCore (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Nom du cookie.</param>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête.</param>
        <summary>En cas de substitution dans une classe dérivée, lit le cookie portant le nom spécifié et étant associé à la demande spécifiée.</summary>
        <returns>Valeur du cookie ou <see langword="null" /> si le cookie est introuvable</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelée à partir de surchargées <xref:System.IdentityModel.Services.CookieHandler.Read%2A> méthodes permettant d’effectuer le travail réel de la lecture du cookie. Le <xref:System.IdentityModel.Services.CookieHandler.Read%2A> méthodes permet de garantir que `name` est une chaîne non vide.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous devez substituer cette méthode. L’implémentation est dépend entièrement du développeur. Dans la plupart des cas, les implémentations lire les données de cookie à partir de la <see cref="P:System.Web.HttpRequest.Cookies" /> collection, toutefois, cela n’est pas obligatoire.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RequireSsl">
      <MemberSignature Language="C#" Value="public virtual bool RequireSsl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequireSsl" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.RequireSsl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequireSsl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RequireSsl { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RequireSsl : bool with get, set" Usage="System.IdentityModel.Services.CookieHandler.RequireSsl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui spécifie si le cookie doit être utilisé uniquement avec SSL.</summary>
        <value><see langword="true" /> si le cookie seul est utilisé sur une connexion SSL ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrôle si l’indicateur « Sécurisé » dans l’en-tête Set-Cookie est émis pour tout cookie écrit. Si cette valeur est `true`, la session que les cookies seront disponibles via le protocole HTTPS.  
  
 Cette propriété correspond à la <xref:System.Web.HttpCookie.Secure%2A?displayProperty=nameWithType> propriété.  
  
 La propriété peut être initialisée en spécifiant le `requireSSL` d’attribut sur le [ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) élément de configuration.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit un cookie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, bool isPersistent, DateTime tokenExpirationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, bool isPersistent, valuetype System.DateTime tokenExpirationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.Boolean,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), isPersistent As Boolean, tokenExpirationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, bool isPersistent, DateTime tokenExpirationTime);" />
      <MemberSignature Language="F#" Value="member this.Write : byte[] * bool * DateTime -&gt; unit" Usage="cookieHandler.Write (value, isPersistent, tokenExpirationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
        <Parameter Name="tokenExpirationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Valeur du cookie.</param>
        <param name="isPersistent"><see langword="true" /> si le cookie est persistant ; <see langword="false" /> si le cookie est réservé à la session uniquement, autrement dit, uniquement valide jusqu'à ce que le navigateur du client est fermé.</param>
        <param name="tokenExpirationTime">Heure d'expiration du jeton sous-jacent.</param>
        <summary>Écrit un cookie associé à la demande actuelle portant la valeur, la persistance et le délai d'expiration spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le `isPersistent` paramètre est `false`, le délai d’expiration de cookie est défini sur <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Si le `isPersistent` paramètre est `true`, le délai d’expiration de cookie est défini sur la valeur de la <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A> propriété si elle n’est pas `null` ou, si le <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A> propriété est `null`, le délai d’expiration est défini sur la valeur de la `tokenExpirationTime` paramètre.  
  
 Le nom du cookie, le domaine et le chemin d’accès sont spécifiées par le <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>, et <xref:System.IdentityModel.Services.CookieHandler.Path%2A> propriétés. La demande est spécifiée par <xref:System.Web.HttpContext.Current%2A>. Indique si le cookie doit être envoyé via le protocole SSL est spécifié par le <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A> propriété et indique si le cookie doit être masqué à partir de scripts côté client est spécifié par le <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> a la valeur <see langword="null" /> ou est vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, string name, DateTime expirationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, string name, valuetype System.DateTime expirationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), name As String, expirationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, DateTime expirationTime);" />
      <MemberSignature Language="F#" Value="member this.Write : byte[] * string * DateTime -&gt; unit" Usage="cookieHandler.Write (value, name, expirationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Valeur du cookie.</param>
        <param name="name">Nom du cookie.</param>
        <param name="expirationTime">Heure d'expiration du cookie ou <see cref="F:System.DateTime.MinValue" /> pour un cookie de session (session uniquement).</param>
        <summary>Écrit un cookie associé à la demande actuelle portant le nom, la valeur et le délai d'expiration spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le domaine du cookie et le chemin d’accès sont spécifiés par le <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> et <xref:System.IdentityModel.Services.CookieHandler.Path%2A> propriétés. La demande est spécifiée par <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>.  La demande est spécifiée par <xref:System.Web.HttpContext.Current%2A>. Indique si le cookie doit être envoyé via le protocole SSL est spécifié par le <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A> propriété et indique si le cookie doit être masqué à partir de scripts côté client est spécifié par le <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> a la valeur <see langword="null" /> ou est vide.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> a la valeur <see langword="null" /> ou est vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, string name, DateTime expirationTime, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, string name, valuetype System.DateTime expirationTime, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.DateTime,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), name As String, expirationTime As DateTime, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, DateTime expirationTime, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Write : byte[] * string * DateTime * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Write (value, name, expirationTime, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="value">Valeur du cookie.</param>
        <param name="name">Nom du cookie.</param>
        <param name="expirationTime">Heure d'expiration du cookie ou <see cref="F:System.DateTime.MinValue" /> pour un cookie de session (session uniquement).</param>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête.</param>
        <summary>Écrit un cookie associé à la demande spécifiée portant le nom, la valeur et le délai d'expiration spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le domaine du cookie et le chemin d’accès sont spécifiés par le <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> et <xref:System.IdentityModel.Services.CookieHandler.Path%2A> propriétés. La demande est spécifiée par <xref:System.Web.HttpContext.Current%2A>. Indique si le cookie doit être envoyé via le protocole SSL est spécifié par le <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A> propriété et indique si le cookie doit être masqué à partir de scripts côté client est spécifié par le <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> a la valeur <see langword="null" /> ou est vide.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> a la valeur <see langword="null" /> ou est vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, string name, string path, string domain, DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, string name, string path, string domain, valuetype System.DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), name As String, path As String, domain As String, expirationTime As DateTime, requiresSsl As Boolean, hideFromClientScript As Boolean, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, System::String ^ path, System::String ^ domain, DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Write : byte[] * string * string * string * DateTime * bool * bool * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Write (value, name, path, domain, expirationTime, requiresSsl, hideFromClientScript, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="requiresSsl" Type="System.Boolean" />
        <Parameter Name="hideFromClientScript" Type="System.Boolean" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="value">Valeur du cookie.</param>
        <param name="name">Nom du cookie.</param>
        <param name="path">Chemin d'accès du cookie.</param>
        <param name="domain">Domaine du cookie.</param>
        <param name="expirationTime">Heure d'expiration du cookie ou <see cref="F:System.DateTime.MinValue" /> pour un cookie de session (session uniquement).</param>
        <param name="requiresSsl"><see langword="true" /> si le cookie seul est utilisé sur une connexion SSL ; sinon, <see langword="false" />.</param>
        <param name="hideFromClientScript"><see langword="true" /> si le cookie doit être masqué dans le script client ; sinon, <see langword="false" />.</param>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête.</param>
        <summary>Écrit un cookie associé à la demande spécifiée portant le nom, la valeur, le domaine, le chemin d'accès, le délai d'expiration et la visibilité spécifiés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> a la valeur <see langword="null" /> ou est vide.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> a la valeur <see langword="null" /> ou est vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCore">
      <MemberSignature Language="C#" Value="protected abstract void WriteCore (byte[] value, string name, string path, string domain, DateTime expirationTime, bool secure, bool httpOnly, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WriteCore(unsigned int8[] value, string name, string path, string domain, valuetype System.DateTime expirationTime, bool secure, bool httpOnly, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.WriteCore(System.Byte[],System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub WriteCore (value As Byte(), name As String, path As String, domain As String, expirationTime As DateTime, secure As Boolean, httpOnly As Boolean, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void WriteCore(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, System::String ^ path, System::String ^ domain, DateTime expirationTime, bool secure, bool httpOnly, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member WriteCore : byte[] * string * string * string * DateTime * bool * bool * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.WriteCore (value, name, path, domain, expirationTime, secure, httpOnly, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="secure" Type="System.Boolean" />
        <Parameter Name="httpOnly" Type="System.Boolean" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="value">Valeur du cookie.</param>
        <param name="name">Nom du cookie.</param>
        <param name="path">Chemin d'accès du cookie.</param>
        <param name="domain">Domaine du cookie.</param>
        <param name="expirationTime">Heure d'expiration du cookie ou <see cref="F:System.DateTime.MinValue" /> pour un cookie de session (session uniquement).</param>
        <param name="secure"><see langword="true" /> si le cookie seul est utilisé sur une connexion SSL ; sinon, <see langword="false" />.</param>
        <param name="httpOnly"><see langword="true" /> si le cookie doit être masqué dans le script client ; sinon, <see langword="false" />.</param>
        <param name="context"><see cref="T:System.Web.HttpContext" /> de la requête.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit un cookie associé à la demande spécifiée portant le nom, la valeur, le domaine, le chemin d'accès, le délai d'expiration, la persistance et la visibilité spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelée à partir de surchargées <xref:System.IdentityModel.Services.CookieHandler.Write%2A> méthodes permettant d’effectuer le travail réel de l’écriture du cookie. Le <xref:System.IdentityModel.Services.CookieHandler.Write%2A> méthodes permet de garantir que `value` est un tableau d’octets de non vide et que `name` et `path` sont une chaîne non vide.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous devez substituer cette méthode. L’implémentation est dépend entièrement du développeur. Dans la plupart des cas, les implémentations écrivent les données de cookie pour le <see cref="P:System.Web.HttpResponse.Cookies" /> collection, toutefois, cela n’est pas obligatoire. La plupart des paramètres de la méthode sont généralement utilisés pour définir les propriétés équivalentes sur un ou plusieurs <see cref="T:System.Web.HttpCookie" /> objets.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>