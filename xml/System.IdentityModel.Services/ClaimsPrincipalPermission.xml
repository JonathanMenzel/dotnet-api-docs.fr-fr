<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7da9c1c218c9c3251976195eca793df1ac01c138" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55310358" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente une autorisation qui utilise une implémentation de <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> pour déterminer si l'accès à une ressource doit être accordé à l'entité de sécurité active. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe fournit la possibilité d’effectuer des vérifications d’accès impératif à l’aide de la <xref:System.Security.Claims.ClaimsAuthorizationManager> qui est configuré pour une application. En appelant le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> méthode ou la méthode statique <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> (méthode), vous pouvez fournir une protection à des ressources de dans le chemin d’exécution de votre code en fonction de la stratégie d’autorisation définie pour votre gestionnaire d’authentification des revendications. Les vérifications d’accès déclaratif peut être effectuée à l’aide de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> classe.  
  
> [!IMPORTANT]
>  Le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe utilise le Gestionnaire d’autorisation de revendications configuré par le <xref:System.IdentityModel.Configuration.IdentityConfiguration> qui est définie sous la <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> propriété. Cela est vrai dans tous les cas, même dans les scénarios où WS-Federation n’est pas utilisé ; par exemple, les applications Web (WCF) actives et les applications de Console. Vous pouvez spécifier le Gestionnaire d’autorisation des revendications dans la configuration ou par programme. Pour spécifier le Gestionnaire d’autorisation des revendications dans un fichier de configuration, définissez le [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) élément sous un [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) élément et assurez-vous que cette configuration de l’identité est référencée par le [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) élément qui est chargé par le runtime (par exemple, en définition de la `identityConfigurationName` attribut). Pour définir par programmation le Gestionnaire d’autorisation des revendications, fournissez un gestionnaire pour le <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> événement.  
  
 Sur un niveau, la fonctionnalité fournie par <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> est similaire aux vérifications d’accès en fonction du rôle (RBAC) fournies par le biais du <xref:System.Security.Permissions.PrincipalPermission> classe ; Toutefois, le <xref:System.Security.Claims.ClaimsAuthorizationManager> classe effectue des vérifications basées sur les revendications présentées par le principal actif. Ainsi, beaucoup plus de granularité que celui offert au moyen de RBAC pure, où de nombreuses autorisations sont généralement collectées sous un rôle unique. Par exemple, plus important encore, autorisation basée sur les revendications permet une meilleure séparation de la stratégie d’entreprise logique et l’autorisation, car l’autorisation peut être requise pour une action spécifique sur une ressource dans le code et la stratégie de serveur principal peut être utilisée pour configurer les revendications le présentation d’entité doit posséder afin de satisfaire la demande. Comme le RBAC, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> effectue une vérification d’accès basé sur l’utilisateur, autrement dit, contrairement à la sécurité d’accès de code implémentée par les classes qui dérivent de la <xref:System.Security.CodeAccessPermission> classe et utilisez un parcours de pile pour vous assurer que tous les appelants du code ont reçu une autorisation, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>effectue sa vérification uniquement sur le principal actuel.  
  
 La méthode statique <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> méthode vérifie l’accès pour une action spécifiée sur une ressource spécifiée. L’action et les ressources sont des chaînes et sont généralement des URI. Vous pouvez également initialiser une instance de <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> avec une action et une ressource et l’appel de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> (méthode). Bien que le constructeur accepte uniquement une ressource unique et une action, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objets peuvent être combinées à l’aide du <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> et <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> méthodes. Une autorisation créée à l’aide de ces méthodes peut contenir plusieurs paires ressource-action.  
  
 Les deux méthodes déterminent l’accès en appelant le <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> méthode du Gestionnaire d’autorisation des revendications configuré avec un <xref:System.Security.Claims.AuthorizationContext> composé de l’entité de sécurité active (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>), la ressource et l’action. Elles lèvent un <xref:System.Security.SecurityException> si l’objet principal actuel n’est pas autorisé à effectuer l’action sur la ressource ; sinon, l’exécution se poursuit.  
  
 Dans le cas d’un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> qui contient plusieurs paires ressource-action, le <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> méthode est appelée pour chacune des paires ressource-action contenues dans l’autorisation.  Pour l’appel à <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> pour réussir, le principal actif doit être autorisé pour toutes les paires ressource-action contenues dans l’autorisation.  
  
   
  
## Examples  
 L’exemple suivant montre comment protéger une ressource à l’aide de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> (méthode), le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> (méthode), ou un <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> déclaration. Dans chaque cas, configuré <xref:System.Security.Claims.ClaimsAuthorizationManager> est appelée pour évaluer l’objet principal actuel par rapport à la ressource spécifiée et l’action. Si l’objet principal actuel n’est pas autorisé pour l’action spécifiée sur la ressource spécifiée, un <xref:System.Security.SecurityException> est générée ; sinon, l’exécution reprend.  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 Le code XML suivant montre la configuration minimale requise pour utiliser une autorisation de revendications personnalisées manager avec le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe. Vous devez, au minimum, déclarez les deux le `system.identityModel` et `system.identityModel.services` sections dans le `<configSection>` élément, puis spécifiez votre gestionnaire d’autorisations dans un [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)élément sous la configuration d’identité par défaut. Cela garantit que votre gestionnaire d’autorisations est référencé à partir de la configuration de fédération par défaut. Vous pouvez également spécifier le nom de la configuration de l’identité sous laquelle votre gestionnaire d’autorisations est spécifié dans le `identityConfigurationName` attribut de la [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) élément.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/8b14054c-6d07-46ab-ab58-03f14beac0f2">&lt;federationConfiguration&gt;</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">Ressource sur laquelle le principal doit être autorisé.</param>
        <param name="action">Action pour laquelle l'entité de sécurité doit être autorisée.</param>
        <summary>Crée une instance de la classe <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objet est initialisé avec la paire de ressource-action spécifiée. Vous pouvez appeler la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> méthode pour effectuer une vérification d’accès.  
  
 Bien que le constructeur accepte uniquement une ressource unique et une action, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objets peuvent être combinées à l’aide du <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> et <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> méthodes. L’autorisation créée via ces méthodes peut contenir plusieurs paires ressource-action.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="resource" /> est soit <see langword="null" /> soit une chaîne vide.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="action" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">Ressource sur laquelle le principal doit être autorisé.</param>
        <param name="action">Action pour laquelle l'entité de sécurité doit être autorisée.</param>
        <summary>Vérifie si le principal de sécurité en cours est autorisé à exécuter l'action spécifiée sur la ressource spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le principal doit être autorisé pour l’action spécifiée sur la ressource spécifiée ou la <xref:System.Security.SecurityException> exception est levée.  
  
 Le <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> méthode du Gestionnaire d’autorisation des revendications configuré est appelé avec un <xref:System.Security.Claims.AuthorizationContext> composé de l’entité de sécurité active (<xref:System.Threading.Thread.CurrentPrincipal%2A>), la ressource et l’action.  
  
   
  
## Examples  
 L’exemple suivant montre comment protéger une ressource à l’aide de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> (méthode). Le Gestionnaire d’autorisation de revendications configurée est appelé pour évaluer l’objet principal actuel par rapport à la ressource spécifiée et l’action. Si l’objet principal actuel n’est pas autorisé pour l’action spécifiée sur la ressource spécifiée, un <xref:System.Security.SecurityException> est générée ; sinon, l’exécution reprend.  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le principal actuel n'est pas assigné à partir de <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  
  
ou 
Il n'y a aucun <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> configuré.</exception>
        <exception cref="T:System.Security.SecurityException">Échec de la vérification d'autorisation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une copie de l'instance de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> en cours.</summary>
        <returns><see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> dont la copie a été faite à partir de l'instance actuelle.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Vérifie si le principal en cours est autorisé pour les paires ressource-action associées à l'instance actuelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le principal actuel doit être autorisé pour toutes les paires ressource-action associé liés cette instance ou la <xref:System.Security.SecurityException> exception est levée.  
  
 Bien que le constructeur accepte uniquement une ressource unique et une action, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objets peuvent être combinées à l’aide du <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> et <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> méthodes. L’autorisation créée via ces méthodes peut contenir plusieurs paires ressource-action.  
  
 Le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> méthode appelle le <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> méthode du Gestionnaire d’autorisation des revendications configuré avec un <xref:System.Security.Claims.AuthorizationContext> composé de l’entité de sécurité active (<xref:System.Threading.Thread.CurrentPrincipal%2A>), la ressource et l’action pour chacune des paires ressource-action contenues dans l’autorisation. Pour le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> réussisse actif principal doit être autorisé pour toutes les paires ressource-action qui figurent dans l’autorisation.  
  
   
  
## Examples  
 L’exemple suivant montre comment protéger une ressource à l’aide de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> (méthode). Le Gestionnaire d’autorisation de revendications configurée est appelé pour évaluer l’objet principal actuel par rapport à la ressource spécifiée et l’action. Si l’objet principal actuel n’est pas autorisé pour l’action spécifiée sur la ressource spécifiée, un <xref:System.Security.SecurityException> est générée ; sinon, l’exécution reprend.  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le principal actuel n'est pas assigné à partir de <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  
  
ou 
Il n'y a aucun <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> configuré.</exception>
        <exception cref="T:System.Security.SecurityException">Échec de la vérification d'autorisation.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">Encodage XML à utiliser pour reconstruire l’autorisation.</param>
        <summary>Reconstruit l'autorisation actuelle et son état à partir de l'encodage XML spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reconstruit une autorisation à partir de l’encodage XML créé par un appel à la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'encodage contient les éléments ou attributs non reconnus ou le code XML incorrectement formé.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorisation à croiser avec l'autorisation en cours. Il doit s'agir d'une instance de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Retourne une autorisation correspondant à l'intersection de l'autorisation actuelle et de l'autorisation spécifiée.</summary>
        <returns>Nouvelle <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> qui représente l'intersection entre l'autorisation actuelle et l'autorisation spécifiée ou <see langword="null" /> si <paramref name="target" /> est <paramref name="null" /> ou n'est pas une instance de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’autorisation est retournée a uniquement les paires ressource-action qui étaient présents à la fois dans l’autorisation actuelle et l’autorisation spécifiée. Les paires ressource-action qui existaient dans uniquement une ou l’autre des autorisations ne sont pas inclus. Pour un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> pour réussir sur la nouvelle autorisation, le principal actuel ne doit être autorisé pour les paires ressource-action qui étaient courantes à l’autorisation actuelle et l’autorisation spécifiée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">L'autorisation à tester pour la relation de sous-ensemble. Il doit s'agir d'une instance de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Retourne une valeur qui indique si l'autorisation en cours est un sous-ensemble de l'autorisation spécifiée.</summary>
        <returns><see langword="true" /> si l'autorisation en cours est un sous-ensemble de l'autorisation spécifiée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’autorisation actuelle est un sous-ensemble de l’autorisation spécifiée si toutes les paires ressource-action contenues dans l’autorisation en cours sont également présents dans l’autorisation spécifiée. Si `target` est `null` ou n’est pas une instance de <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> retourne `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Permissions.IUnrestrictedPermission.IsUnrestricted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une valeur qui indique si l’autorisation est illimitée.</summary>
        <returns><see langword="true" /> si l’autorisation actuelle est illimitée, sinon <see langword="false" />. Retourne toujours la valeur <see langword="true" /> indiquant que l’autorisation est illimitée.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne l’autorisation actuelle et son état sous forme de codage XML.</summary>
        <returns>L’autorisation actuelle et son état sous forme de codage XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le principal peut être reconstruit à partir de sa forme XML encodé en appelant le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorisation à combiner avec l'autorisation en cours. Il doit être de type <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Retourne une nouvelle autorisation correspondant à l'union de l'autorisation actuelle et de l'autorisation spécifiée. Objet <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> qui présente toutes les paires de ressource-action qui sont présentes dans l'instance actuelle et l'instance cible.</summary>
        <returns>Nouvelle <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> qui représente l'union entre l'autorisation actuelle et l'autorisation spécifiée ou <see langword="null" /> si <paramref name="target" /> est <paramref name="null" /> ou n'est pas une instance de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’autorisation est retournée a toutes les paires ressource-action qui sont présents dans l’autorisation actuelle et toutes les paires ressource-action présentent l’autorisation spécifiée. Pour un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> pour réussir sur la nouvelle autorisation, le principal actuel doit être autorisé pour toutes les paires ressource-action qui existaient dans l’autorisation actuelle et toutes les paires ressource-action qui existaient dans l’autorisation spécifiée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>