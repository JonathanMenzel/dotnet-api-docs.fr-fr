<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1de919c372a2c0bd66f05bfb6326fd59cced7137" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36688954" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ITable&#xA;    interface IQueryProvider&#xA;    interface IListSource&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">
      <span data-ttu-id="621c0-101">Type des données contenues dans la table.</span>
      <span class="sxs-lookup">
        <span data-stu-id="621c0-101">The type of the data in the table.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="621c0-102">Représente une table pour un type particulier dans la base de données sous-jacente.</span>
      <span class="sxs-lookup">
        <span data-stu-id="621c0-102">Represents a table for a particular type in the underlying database.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-103">Cette classe vous permet de requête sur la table et ajouter, supprimer et joindre des objets.</span><span class="sxs-lookup"><span data-stu-id="621c0-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="621c0-104">Une application peut accéder à un <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> ou à l’aide d’une propriété fortement typée pour fortement typé <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="621c0-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="621c0-105">Autrement dit, lorsque le concepteur génère un objet DataContext, il génère des propriétés pour représenter chaque Table.</span><span class="sxs-lookup"><span data-stu-id="621c0-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="621c0-106">Exemple :</span><span class="sxs-lookup"><span data-stu-id="621c0-106">For example:</span></span>  
  
```  
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext {  
   public System.Data.Linq.Table<User> Users {  
      get {  
         return this.GetTable<User>();  
      }  
   }  
}  
```  
  
 <span data-ttu-id="621c0-107">Pour ce DataContext fortement typé, vous pouvez accéder à la propriété d’utilisateurs à obtenir `Table<User>`.</span><span class="sxs-lookup"><span data-stu-id="621c0-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-108">Attache une entité à la classe <see cref="T:System.Data.Linq.DataContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-109">Utilisez le `Attach` méthodes avec des entités qui ont été créées dans un <xref:System.Data.Linq.DataContext>, sérialisées vers un client, puis désérialisé (avec l’intention d’effectuer une mise à jour ou suppression).</span><span class="sxs-lookup"><span data-stu-id="621c0-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="621c0-110">Pour plus d’informations, consultez [récupération des données et opérations CUD dans les Applications multicouches (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="621c0-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="621c0-111">N’essayez pas de `Attach` une entité qui n’a pas été détachée via la sérialisation.</span><span class="sxs-lookup"><span data-stu-id="621c0-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="621c0-112">Les entités qui n’ont pas été sérialisées tout en conservant des associations avec des chargeurs différés qui peuvent entraîner des résultats inattendus si l’entité est suivie par un second contexte de données.</span><span class="sxs-lookup"><span data-stu-id="621c0-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="621c0-113">Lorsqu’une nouvelle entité est attachée, les chargeurs différés de toutes les collections enfants (par exemple, `EntitySet` collections d’entités provenant de tableaux associés) sont initialisés.</span><span class="sxs-lookup"><span data-stu-id="621c0-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="621c0-114">Lorsque <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée, les membres de l’enfant de collections sont placées dans un `Unmodified` état.</span><span class="sxs-lookup"><span data-stu-id="621c0-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="621c0-115">Pour mettre à jour les membres d’une collection d’enfants, vous devez appeler explicitement `Attach` et spécifier cette entité.</span><span class="sxs-lookup"><span data-stu-id="621c0-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="621c0-116">`Attach` attache toutes les entités dans le graphique d’objets de l’objet fourni.</span><span class="sxs-lookup"><span data-stu-id="621c0-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="621c0-117">Par exemple, le code c# suivant :</span><span class="sxs-lookup"><span data-stu-id="621c0-117">For example, the following C# code:</span></span>  
  
```  
using (SampleDataContext db = new SampleDataContext()) {  
    Employee employee = new Employee { employeeId = 1 };  
  
    Master master = new Master();  
    master.Employee = employee;  
  
    Child child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
}  
  
```  
  
 <span data-ttu-id="621c0-118">Le code Visual Basic équivalent est :</span><span class="sxs-lookup"><span data-stu-id="621c0-118">The equivalent Visual Basic code is:</span></span>  
  
```  
Using db As New SampleDataContext()    Dim employee As New Employee With { .employeeId = 1 }  
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="621c0-119">Appel de `Attach` sur `Employee` joint employé, maître et enfant, car le `Employee` des relations avec maître et enfant.</span><span class="sxs-lookup"><span data-stu-id="621c0-119">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="621c0-120">Vous devez appeler explicitement `InsertOnSubmit` pour modifier l’état d’attaché en inséré.</span><span class="sxs-lookup"><span data-stu-id="621c0-120">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-121">Valeurs d'origine de l'entité à attacher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-121">The original values of the entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-122">Attache une entité déconnectée ou détachée à une nouvelle classe <see cref="T:System.Data.Linq.DataContext" /> lorsque les valeurs d'origine sont requises pour permettre les contrôles d'accès concurrentiels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-122">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-123">Utilisez le `Attach` méthodes avec des entités qui ont été créées dans un <xref:System.Data.Linq.DataContext>, sérialisées vers un client, puis désérialisées dans pour effectuer une mise à jour ou de l’opération de suppression.</span><span class="sxs-lookup"><span data-stu-id="621c0-123">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="621c0-124">Étant donné que la nouvelle <xref:System.Data.Linq.DataContext> n’a aucun moyen de connaître les valeurs d’origine d’une entité déconnectée, le client est chargé de fournir ces valeurs.</span><span class="sxs-lookup"><span data-stu-id="621c0-124">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="621c0-125">Dans cette version de <xref:System.Data.Linq.Table%601.Attach%2A>, l’entité est supposée pour être dans son état d’origine.</span><span class="sxs-lookup"><span data-stu-id="621c0-125">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="621c0-126">Après avoir appelé cette méthode, vous pouvez ensuite mettre à jour ses champs, par exemple avec d’autres données sont envoyées à partir du client.</span><span class="sxs-lookup"><span data-stu-id="621c0-126">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="621c0-127">Lorsqu’une nouvelle entité est attachée, les chargeurs différés de toutes les collections enfants (par exemple, `EntitySet` collections d’entités provenant de tableaux associés) sont initialisés.</span><span class="sxs-lookup"><span data-stu-id="621c0-127">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="621c0-128">Lorsque <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée, les membres de l’enfant de collections sont placées dans un `Unmodified` état.</span><span class="sxs-lookup"><span data-stu-id="621c0-128">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="621c0-129">Pour mettre à jour les membres d’une collection d’enfants, vous devez appeler explicitement `Attach` et spécifier cette entité.</span><span class="sxs-lookup"><span data-stu-id="621c0-129">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="621c0-130">Pour plus d’informations, consultez [récupération des données et opérations CUD dans les Applications multicouches (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="621c0-130">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="621c0-131">N’essayez pas de `Attach` une entité qui n’a pas été détachée via la sérialisation.</span><span class="sxs-lookup"><span data-stu-id="621c0-131">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="621c0-132">Les entités qui n’ont pas été sérialisées tout en conservant des associations avec des chargeurs différés qui peuvent entraîner des résultats inattendus si l’entité est suivie par un second contexte de données.</span><span class="sxs-lookup"><span data-stu-id="621c0-132">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * bool -&gt; unit" Usage="table.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-133">Entité à attacher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-133">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="621c0-134">
            <see langword="true" /> pour joindre une entité comme étant modifiée ; <see langword="false" /> pour joindre une entité comme étant non modifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-134">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-135">Attache une entité à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-135">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-136">Si l’attachement *modifiée*, l’entité doit soit déclarer un membre de version ou ne pas prendre part dans la vérification de conflits de mise à jour.</span><span class="sxs-lookup"><span data-stu-id="621c0-136">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="621c0-137">Lorsqu’une nouvelle entité est attachée, les chargeurs différés de toutes les collections enfants (par exemple, `EntitySet` collections d’entités provenant de tableaux associés) sont initialisés.</span><span class="sxs-lookup"><span data-stu-id="621c0-137">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="621c0-138">Lorsque <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée, les membres de l’enfant de collections sont placées dans un `Unmodified` état.</span><span class="sxs-lookup"><span data-stu-id="621c0-138">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="621c0-139">Pour mettre à jour les membres d’une collection d’enfants, vous devez appeler explicitement `Attach` et spécifier cette entité.</span><span class="sxs-lookup"><span data-stu-id="621c0-139">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * 'Entity -&gt; unit" Usage="table.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-140">Entité à attacher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-140">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="621c0-141">Instance du même type d'entité avec des membres de données contenant les valeurs d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-141">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-142">Attache une entité à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié en spécifiant à la fois l'entité et son état d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-142">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-143">Dans l’exemple suivant, la `Customer` objet est déjà configuré correctement.</span><span class="sxs-lookup"><span data-stu-id="621c0-143">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="621c0-144">Vous pouvez appeler `Attach` sans avoir à relire les mises à jour.</span><span class="sxs-lookup"><span data-stu-id="621c0-144">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="621c0-145">Lorsqu’une nouvelle entité est attachée, les chargeurs différés de toutes les collections enfants (par exemple, `EntitySet` collections d’entités provenant de tableaux associés) sont initialisés.</span><span class="sxs-lookup"><span data-stu-id="621c0-145">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="621c0-146">Lorsque <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée, les membres de l’enfant de collections sont placées dans un `Unmodified` état.</span><span class="sxs-lookup"><span data-stu-id="621c0-146">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="621c0-147">Pour mettre à jour les membres d’une collection d’enfants, vous devez appeler explicitement `Attach` et spécifier cette entité.</span><span class="sxs-lookup"><span data-stu-id="621c0-147">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-148">Attache toutes les entités d'une collection à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-148">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-149">Si vous attachez comme modifiée, l’entité doit soit déclarer un membre de version ou ne doit pas participer à la vérification de conflits de mise à jour.</span><span class="sxs-lookup"><span data-stu-id="621c0-149">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="621c0-150">Lorsqu’une nouvelle entité est attachée, les chargeurs différés de toutes les collections enfants (par exemple, `EntitySet` collections d’entités provenant de tableaux associés) sont initialisés.</span><span class="sxs-lookup"><span data-stu-id="621c0-150">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="621c0-151">Lorsque <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée, les membres de l’enfant de collections sont placées dans un `Unmodified` état.</span><span class="sxs-lookup"><span data-stu-id="621c0-151">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="621c0-152">Pour mettre à jour les membres d’une collection d’enfants, vous devez appeler explicitement `Attach` et spécifier cette entité.</span><span class="sxs-lookup"><span data-stu-id="621c0-152">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="621c0-153">Pour plus d’informations, consultez [récupération des données et opérations CUD dans les Applications multicouches (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="621c0-153">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="621c0-154">Type d'entités à joindre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-154">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="621c0-155">Collection d'entités.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-155">The collection of entities.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-156">Attache toutes les entités d'une collection à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-156">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-157">Cette méthode attache toutes les entités d’une collection à un nouveau <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="621c0-157">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="621c0-158">Lorsqu’une nouvelle entité est attachée, les chargeurs différés de toutes les collections enfants (par exemple, `EntitySet` collections d’entités provenant de tableaux associés) sont initialisés.</span><span class="sxs-lookup"><span data-stu-id="621c0-158">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="621c0-159">Lorsque <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée, les membres de l’enfant de collections sont placées dans un `Unmodified` état.</span><span class="sxs-lookup"><span data-stu-id="621c0-159">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="621c0-160">Pour mettre à jour les membres d’une collection d’enfants, vous devez appeler explicitement `Attach` et spécifier cette entité.</span><span class="sxs-lookup"><span data-stu-id="621c0-160">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="621c0-161">Pour plus d’informations, consultez [récupération des données et opérations CUD dans les Applications multicouches (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="621c0-161">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; * bool -&gt; unit" Usage="table.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="621c0-162">Type d'entités à joindre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-162">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="621c0-163">Collection d'entités.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-163">The collection of entities.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="621c0-164">
            <see langword="true" /> si l'objet est horodaté ou dispose d'un membre RowVersion ; <see langword="false" /> si les valeurs d'origine sont utilisées pour le contrôle d'accès concurrentiel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-164">
              <see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-165">Attache toutes les entités d'une collection à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-165">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-166">Cette méthode attache toutes les entités d’une collection à le <xref:System.Data.Linq.DataContext> , que ce soit un *modifié* ou *non modifié* état.</span><span class="sxs-lookup"><span data-stu-id="621c0-166">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="621c0-167">Si vous attachez comme modifiée, l’entité doit soit déclarer un membre de version ou ne doit pas participer à la vérification de conflits de mise à jour.</span><span class="sxs-lookup"><span data-stu-id="621c0-167">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="621c0-168">Si vous attachez comme non modifié, l’entité est supposée pour représenter la valeur d’origine.</span><span class="sxs-lookup"><span data-stu-id="621c0-168">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="621c0-169">Après avoir appelé cette méthode, les champs de l’entité peuvent être modifiés avec d’autres informations à partir du client avant <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="621c0-169">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="621c0-170">Pour plus d’informations, consultez [récupération des données et opérations CUD dans les Applications multicouches (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="621c0-170">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="621c0-171">Lorsqu’une nouvelle entité est attachée, les chargeurs différés de toutes les collections enfants (par exemple, `EntitySet` collections d’entités provenant de tableaux associés) sont initialisés.</span><span class="sxs-lookup"><span data-stu-id="621c0-171">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="621c0-172">Lorsque <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée, les membres de l’enfant de collections sont placées dans un `Unmodified` état.</span><span class="sxs-lookup"><span data-stu-id="621c0-172">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="621c0-173">Pour mettre à jour les membres d’une collection d’enfants, vous devez appeler explicitement `Attach` et spécifier cette entité.</span><span class="sxs-lookup"><span data-stu-id="621c0-173">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="621c0-174">L’exemple suivant montre comment vous pouvez mettre à jour un `Order` objet sur un autre <xref:System.Data.Linq.DataContext> instance.</span><span class="sxs-lookup"><span data-stu-id="621c0-174">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="621c0-175">L’exemple part du principe que vous disposez d’une connexion à une base de données et bénéficient d’un [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] fichier (dans ce cas, il s’agit de la base de données Northwind).</span><span class="sxs-lookup"><span data-stu-id="621c0-175">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="621c0-176">Dans l’exemple suivant, un objet d’entité à attacher a une relation de clé étrangère avec un autre objet et est stocké dans le cache mais pas attaché.</span><span class="sxs-lookup"><span data-stu-id="621c0-176">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="621c0-177">Lorsque vous appelez <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, le `ChangeProcessor` ajoute une `Insert` opération pour tous les objets de clé étrangères.</span><span class="sxs-lookup"><span data-stu-id="621c0-177">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="621c0-178">Il s’agit d’un effet secondaire quand une instance d’entité est réutilisée dans une autre <xref:System.Data.Linq.DataContext> instance.</span><span class="sxs-lookup"><span data-stu-id="621c0-178">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="621c0-179">Pour cette raison, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] ne prend pas en charge la réutilisation d’objets.</span><span class="sxs-lookup"><span data-stu-id="621c0-179">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="621c0-180">L’exemple suivant montre un scénario dans lequel le client A a annulé toutes les commandes et client B a pris possession.</span><span class="sxs-lookup"><span data-stu-id="621c0-180">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="621c0-181">Vous pouvez attacher toutes les commandes du client A en même temps.</span><span class="sxs-lookup"><span data-stu-id="621c0-181">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-182">Obtient l'objet <see cref="T:System.Data.Linq.DataContext" /> qui a été utilisé pour récupérer <see cref="T:System.Data.Linq.Table`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-182">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="621c0-183">Contexte de données qui a été utilisé pour récupérer cette table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-183">The data context that has been used to retrieve this table.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.DeleteAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="621c0-184">Type des éléments à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-184">The type of the elements to delete.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="621c0-185">Entités à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-185">The entities to delete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-186">Place toutes les entités de la collection dans un état <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-186">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-187">Les entités qui sont placées dans l’état de la suppression en attente avec cette méthode ne disparaissent pas de résultats de la requête jusqu'à ce qu’après <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="621c0-187">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="621c0-188">Les entités déconnectées doivent être attachées avant de pouvoir être supprimées.</span><span class="sxs-lookup"><span data-stu-id="621c0-188">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="621c0-189">Pour plus d’informations, consultez [récupération des données et opérations CUD dans les Applications multicouches (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="621c0-189">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="621c0-190">L’extrait de code c# suivant illustre une utilisation de cette méthode :</span><span class="sxs-lookup"><span data-stu-id="621c0-190">The following C# snippet shows one use for this method:</span></span>  
  
```  
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
 <span data-ttu-id="621c0-191">En Visual Basic :</span><span class="sxs-lookup"><span data-stu-id="621c0-191">In Visual Basic:</span></span>  
  
```  
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-192">Entité à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-192">The entity to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-193">Place une entité de cette table dans un état <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-193">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-194">L’entité supprimée ne disparaît pas les résultats de requête qu’après <xref:System.Data.Linq.DataContext.SubmitChanges%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="621c0-194">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="621c0-195">Entités déconnectées doivent tout d’abord être connectées avant de pouvoir être supprimées.</span><span class="sxs-lookup"><span data-stu-id="621c0-195">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="621c0-196">Pour plus d’informations, consultez [récupération des données et opérations CUD dans les Applications multicouches (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="621c0-196">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="621c0-197"> ne prend pas en charge ni ne reconnaît les opérations de suppression en cascade.</span><span class="sxs-lookup"><span data-stu-id="621c0-197"> does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="621c0-198">Si vous souhaitez supprimer une ligne dans une table comportant des contraintes par rapport à elle, vous devez définir le `ON DELETE CASCADE` de règle dans la contrainte de clé étrangère dans la base de données, ou utiliser votre propre code pour supprimer en premier les objets enfants qui empêchent la suppression de l’objet parent.</span><span class="sxs-lookup"><span data-stu-id="621c0-198">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="621c0-199">Sinon, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="621c0-199">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="621c0-200">Obtient un énumérateur qui itère au sein de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-200">Gets an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-201">Énumérateur permettant d'effectuer une itération au sein de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-201">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetModifiedMembers : 'Entity -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-202">Entité à partir de laquelle obtenir le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-202">The entity from which to get the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-203">Retourne un tableau de membres modifiés contenant leurs valeurs actuelles et d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-203">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-204">Tableau de membres modifiés contenant leurs valeurs actuelles et d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-204">An array of modified members that contain their current and original values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberSignature Language="F#" Value="member this.GetNewBindingList : unit -&gt; System.ComponentModel.IBindingList" Usage="table.GetNewBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="621c0-205">Crée une nouvelle liste pour la liaison à une source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-205">Creates a new list for binding to a data source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-206">Un nouveau <see cref="T:System.ComponentModel.IBindingList" /> pour une liaison à une source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-206">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-207">La liste retournée prend en charge des opérations standards, telles que les ajouts, les suppressions, les insertions et les mises à jour, mais enregistre doit être gérées explicitement par le programmeur.</span><span class="sxs-lookup"><span data-stu-id="621c0-207">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetOriginalEntityState : 'Entity -&gt; 'Entity" Usage="table.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-208">Entité dont l'état d'origine est à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-208">The entity whose original state is to be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-209">Retourne une instance <see cref="T:System.Data.Linq.Table`1" /> qui contient l'état d'origine de l'entité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-209">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-210">Instance <see cref="T:System.Data.Linq.Table`1" /> qui contient l'état d'origine de l'entité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-210">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-211">Cette méthode retourne l’état d’origine d’une entité, car elle a été créée ou attachée au actuel <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="621c0-211">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="621c0-212">L’état d’origine d’une entité qui a été sérialisée et désérialisée doit être fourni par un mécanisme de traçage indépendant et fourni lors de l’entité est attachée à un nouveau <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="621c0-212">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="621c0-213">Pour plus d’informations, consultez [récupération des données et opérations CUD dans les Applications multicouches (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="621c0-213">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.InsertAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="621c0-214">Type des éléments à insérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-214">The type of the elements to insert.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="621c0-215">Entités à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-215">The entities to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-216">Ajoute toutes les entités d'une collection à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état <see langword="pending insert" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-216">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-217">Les entités ajoutées ne sera pas dans les résultats de la requête jusqu'à ce qu’après <xref:System.Data.Linq.DataContext.SubmitChanges%2A> a été appelée.</span><span class="sxs-lookup"><span data-stu-id="621c0-217">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-218">Entité à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-218">The entity to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-219">Ajoute une entité dans un état <see langword="pending insert" /> à <see cref="T:System.Data.Linq.Table`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-219">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-220">L’entité ajoutée n’apparaître pas dans les résultats de la requête à partir de cette table jusqu'à ce qu’après <xref:System.Data.Linq.DataContext.SubmitChanges%2A> a été appelée.</span><span class="sxs-lookup"><span data-stu-id="621c0-220">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-221">Obtient une valeur qui indique si le type des entités contenues dans cette instance <see cref="T:System.Data.Linq.Table`1" /> dispose d'une clé primaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-221">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="621c0-222">Retourne la valeur <see langword="true" /> si le type d'entité ne dispose pas d'une clé primaire ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-222">
              <see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="621c0-223">Retourne un énumérateur qui itère au sein de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-223">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-224">Énumérateur permettant d'effectuer une itération au sein de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-224">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="621c0-225">Retourne un énumérateur qui itère au sein de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-225">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-226">Énumérateur permettant d'effectuer une itération au sein de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-226">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-227">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-227">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-228">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="621c0-228">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-229">Obtient une valeur qui indique si la collection est une collection d'objets <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-229">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="621c0-230">
            <see langword="true" /> si la collection est une collection d'objets <see cref="T:System.Collections.IList" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-230">
              <see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-231">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-231">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-232">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.ComponentModel.IListSource>.</span><span class="sxs-lookup"><span data-stu-id="621c0-232">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="621c0-233">Retourne <see cref="T:System.Collections.IList" /> pouvant être lié à une source de données à partir d'un objet qui, lui-même, n'implémente pas <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-233">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-234">
            <see cref="T:System.Collections.IList" /> qui peut être lié à une source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-234">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-235">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-235">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-236">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.ComponentModel.IListSource>.</span><span class="sxs-lookup"><span data-stu-id="621c0-236">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-237">Permet aux entités désérialisées d'être associées à une nouvelle instance d'une classe <see cref="T:System.Data.Linq.DataContext" /> afin de pouvoir être mises à jour ou supprimées de la base de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-237">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-238">Entité à attacher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-238">The entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-239">Attache une entité à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état non modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-239">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-240">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-241">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-241">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-242">Entité à attacher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-242">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="621c0-243">
            <see langword="true" /> pour joindre l'entité comme étant modifiée ; <see langword="false" /> pour joindre l'entité comme étant non modifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-243">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-244">Attache toutes les entités d'une collection à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-244">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-245">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-246">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-246">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-247">Entité à attacher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-247">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="621c0-248">Instance du même type d'entité avec des membres de données contenant les valeurs d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-248">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-249">Attache une entité à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié en spécifiant à la fois l'entité et son état d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-249">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-250">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-251">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-251">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-252">Attache toutes les entités d'une collection à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="621c0-253">Collection d'entités à joindre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-253">The collection of entities to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-254">Attache toutes les entités d'une collection à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-254">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-255">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-255">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-256">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-256">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="621c0-257">Collection d'entités à joindre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-257">The collection of entities to be attched.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="621c0-258">
            <see langword="true" /> pour joindre des entités comme étant modifiées ; <see langword="false" /> pour joindre des entités comme étant non modifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-258">
              <see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-259">Attache toutes les entités d'une collection à la classe <see cref="T:System.Data.Linq.DataContext" /> dans un état modifié ou non modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-259">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-260">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-260">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-261">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-261">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="621c0-262">Entités en cours de suppression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-262">The entities being removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-263">Place toutes les entités de la collection dans un état <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-263">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-264">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-264">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-265">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-265">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-266">Entité à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-266">The entity to be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-267">Place une entité de cette table dans un état <see langword="pending delete" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-267">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-268">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-269">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-269">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="621c0-270"> ne prend pas en charge ni ne reconnaît les opérations de suppression en cascade.</span><span class="sxs-lookup"><span data-stu-id="621c0-270"> does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="621c0-271">Si vous souhaitez supprimer une ligne dans une table comportant des contraintes par rapport à elle, vous devez définir le `ON DELETE CASCADE` de règle dans la contrainte de clé étrangère dans la base de données, ou utiliser votre propre code pour supprimer en premier les objets enfants qui empêchent la suppression de l’objet parent.</span><span class="sxs-lookup"><span data-stu-id="621c0-271">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="621c0-272">Sinon, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="621c0-272">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-273">Entité à partir de laquelle obtenir les membres modifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-273">The entity from which to obtain the modified members.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-274">Retourne un tableau de membres modifiés contenant leurs valeurs actuelles et d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-274">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-275">Tableau de membres modifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-275">An array of modified members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-276">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-277">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-277">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-278">Entité dont l'état d'origine est accessible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-278">The entity whose original state is to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-279">Extrait les valeurs d'origine d'une entité donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-279">Retrieves original values of a given entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-280">Copie de l'entité d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-280">A copy of the original entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-281">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-281">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-282">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-282">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="621c0-283">Collection d'entités à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-283">The collection of entities to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-284">Ajoute toutes les entités d'une collection au <see cref="T:System.Data.Linq.DataContext" /> à l'état <see langword="pending insert" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-284">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-285">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-285">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-286">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-286">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="621c0-287">Entité à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-287">The entity to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-288">Ajoute une entité dans un état <see langword="pending insert" /> à cette table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-288">Adds an entity in a <see langword="pending insert" /> state to this table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-289">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-290">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-290">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Linq.IQueryable.ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-291">Obtient le type des éléments retournés lors de l'exécution de l'arborescence d'expression associée à cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-291">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="621c0-292">Type des éléments retournés lors de l'exécution de l'arborescence d'expression associée à cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-292">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-293">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-294">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-294">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System.Linq.IQueryable.Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-295">Obtient l'arborescence d'expression associée à cette instance de <see cref="T:System.Linq.IQueryable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-295">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="621c0-296">Classe <see cref="T:System.Linq.Expressions.Expression" /> associée à cette instance de l'interface <see cref="T:System.Linq.IQueryable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-296">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-297">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-298">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-298">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System.Linq.IQueryable.Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="621c0-299">Obtient le fournisseur de requêtes associé à cette source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-299">Gets the query provider that is associated with this data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="621c0-300">
            <see cref="T:System.Linq.IQueryProvider" /> associé à cette source de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-300">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-301">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-302">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="621c0-302">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="621c0-303">Expression de requête dont l'évaluation est exécutée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-303">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-304">Construit un objet <see cref="T:System.Linq.IQueryable" /> capable d'évaluer la requête représentée par une arborescence d'expression spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-304">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-305">Objet <see cref="T:System.Linq.IQueryable" /> capable d'évaluer la requête représentée par l'arborescence d'expression spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-305">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-306">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-307">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="621c0-307">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="621c0-308">Type des données contenues dans la table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-308">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="621c0-309">Expression de requête dont l'évaluation est exécutée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-309">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-310">Construit un objet <see cref="T:System.Linq.IQueryable`1" /> capable d'évaluer la requête représentée par une arborescence d'expression spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-310">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-311">Objet <see cref="T:System.Linq.IQueryable`1" /> capable d'évaluer la requête représentée par l'arborescence d'expression spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-311">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-312">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-313">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="621c0-313">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="621c0-314">Expression de requête à exécuter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-314">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-315">Exécute la requête représentée par une arborescence d'expression spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-315">Executes the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-316">Valeur qui résulte de l'exécution de la requête spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-316">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-317">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-318">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="621c0-318">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="621c0-319">Type des données contenues dans la table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-319">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="621c0-320">Expression de requête à exécuter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-320">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="621c0-321">Exécute la requête fortement typée représentée par une arborescence d'expression spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-321">Executes the strongly-typed query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-322">Valeur qui résulte de l'exécution de la requête spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-322">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="621c0-323">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="621c0-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="621c0-324">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Data.Linq.Table%601> est castée en interface <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="621c0-324">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="table.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="621c0-325">Retourne une chaîne qui représente la table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-325">Returns a string that represents the table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="621c0-326">Représentation sous forme de chaîne du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="621c0-326">A string representation of the table.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>