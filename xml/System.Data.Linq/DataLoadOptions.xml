<Type Name="DataLoadOptions" FullName="System.Data.Linq.DataLoadOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c519a3ffc7eb35a524e3ede6d2440a5fed491e6f" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57919362" /></Metadata><TypeSignature Language="C#" Value="public sealed class DataLoadOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataLoadOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataLoadOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataLoadOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLoadOptions sealed" />
  <TypeSignature Language="F#" Value="type DataLoadOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="10845-101">Permet le chargement immédiat et le filtrage de données connexes.</span><span class="sxs-lookup"><span data-stu-id="10845-101">Provides for immediate loading and filtering of related data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="general"></a><span data-ttu-id="10845-102">Général</span><span class="sxs-lookup"><span data-stu-id="10845-102">General</span></span>  
 <span data-ttu-id="10845-103">Lorsque vous recherchez un objet, vous récupérez en réalité uniquement l'objet que vous avez demandé.</span><span class="sxs-lookup"><span data-stu-id="10845-103">When you query for an object, you actually retrieve only the object you requested.</span></span> <span data-ttu-id="10845-104">Le *connexes* objets ne sont pas automatiquement extraits en même temps.</span><span class="sxs-lookup"><span data-stu-id="10845-104">The *related* objects are not automatically fetched at the same time.</span></span> <span data-ttu-id="10845-105">(Pour plus d’informations, consultez [interrogation de relations](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span><span class="sxs-lookup"><span data-stu-id="10845-105">(For more information, see [Querying Across Relationships](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span></span>  
  
 <span data-ttu-id="10845-106">Le <xref:System.Data.Linq.DataLoadOptions> classe fournit deux méthodes pour effectuer le chargement immédiat de données connexes spécifiées.</span><span class="sxs-lookup"><span data-stu-id="10845-106">The <xref:System.Data.Linq.DataLoadOptions> class provides two methods to achieve immediate loading of specified related data.</span></span> <span data-ttu-id="10845-107">Le <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> méthode permet le chargement immédiat des données associées à la cible principale.</span><span class="sxs-lookup"><span data-stu-id="10845-107">The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target.</span></span> <span data-ttu-id="10845-108">Le <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> méthode permet le filtrage d’objets connexes.</span><span class="sxs-lookup"><span data-stu-id="10845-108">The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.</span></span>  
  
## <a name="rules"></a><span data-ttu-id="10845-109">Règles</span><span class="sxs-lookup"><span data-stu-id="10845-109">Rules</span></span>  
 <span data-ttu-id="10845-110">Notez les règles suivantes concernant <xref:System.Data.Linq.DataLoadOptions> utilisation :</span><span class="sxs-lookup"><span data-stu-id="10845-110">Note the following rules regarding <xref:System.Data.Linq.DataLoadOptions> usage:</span></span>  
  
-   <span data-ttu-id="10845-111">Affectation d’un <xref:System.Data.Linq.DataLoadOptions> à un <xref:System.Data.Linq.DataContext> après l’exécution de la première requête génère une exception.</span><span class="sxs-lookup"><span data-stu-id="10845-111">Assigning a <xref:System.Data.Linq.DataLoadOptions> to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.</span></span>  
  
-   <span data-ttu-id="10845-112">Modifier un <xref:System.Data.Linq.DataLoadOptions> après lui ait été assignée à un <xref:System.Data.Linq.DataContext> génère une exception</span><span class="sxs-lookup"><span data-stu-id="10845-112">Modifying a <xref:System.Data.Linq.DataLoadOptions> after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception</span></span>  
  
## <a name="cycle-handling"></a><span data-ttu-id="10845-113">Gestion de cycle</span><span class="sxs-lookup"><span data-stu-id="10845-113">Cycle Handling</span></span>  
 <span data-ttu-id="10845-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> et <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives ne doivent pas créer de cycles.</span><span class="sxs-lookup"><span data-stu-id="10845-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles.</span></span> <span data-ttu-id="10845-115">Les éléments suivants représentent des exemples de tels graphiques :</span><span class="sxs-lookup"><span data-stu-id="10845-115">The following represent examples of such graphs:</span></span>  
  
-   <span data-ttu-id="10845-116">Exemple 1 : Auto-récurrent</span><span class="sxs-lookup"><span data-stu-id="10845-116">Example 1: Self recursive</span></span>  
  
    -   `dlo.LoadWith<Employee>(e => e.Reports);`  
  
-   <span data-ttu-id="10845-117">Exemple 2 : Pointeurs arrière</span><span class="sxs-lookup"><span data-stu-id="10845-117">Example 2: Back-pointers</span></span>  
  
    -   `dlo.LoadWith <Customer>(c => C.Orders);`  
  
    -   `dlo.LoadWith <Order>(o => o.Customer);`  
  
-   <span data-ttu-id="10845-118">Exemple 3 : Cycles plus de temps</span><span class="sxs-lookup"><span data-stu-id="10845-118">Example 3: Longer cycles</span></span>  
  
     <span data-ttu-id="10845-119">Bien que cela ne doit pas avoir lieu dans un modèle bien normalisé, il est possible.</span><span class="sxs-lookup"><span data-stu-id="10845-119">Although this should not occur in a well-normalized model, it is possible.</span></span>  
  
    -   `dlo.LoadWith <A>(a => a.Bs);`  
  
    -   `dlo.LoadWith <B>(b => b.Cs);`  
  
    -   `dlo.LoadWith <C>(c => c.As);`  
  
-   <span data-ttu-id="10845-120">Exemple 4 : Sous-requêtes auto-récurrent</span><span class="sxs-lookup"><span data-stu-id="10845-120">Example 4: Self recursive subQueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  
  
-   <span data-ttu-id="10845-121">Exemple 5 : Sous-requêtes récursives plus longues</span><span class="sxs-lookup"><span data-stu-id="10845-121">Example 5: Longer recursive subqueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  
  
    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  
  
 <span data-ttu-id="10845-122">Voici quelques règles générales qui vous aident à comprennent ce qui se produit dans ces scénarios.</span><span class="sxs-lookup"><span data-stu-id="10845-122">The following are some general rules that help you understand what occurs in these scenarios.</span></span>  
  
 <span data-ttu-id="10845-123">**LoadWith** chaque appel à <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> vérifie si les cycles ont été introduits dans le graphique.</span><span class="sxs-lookup"><span data-stu-id="10845-123">**LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph.</span></span> <span data-ttu-id="10845-124">S’il existe, comme dans les exemples 1, 2 et 3, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="10845-124">If there are, as in Examples 1, 2, and 3, an exception is thrown.</span></span>  
  
 <span data-ttu-id="10845-125">**AssociateWith** moteur au moment de l’exécution ne s’applique pas les clauses de sous-requête existantes à la relation à l’intérieur de l’expression.</span><span class="sxs-lookup"><span data-stu-id="10845-125">**AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.</span></span>  
  
-   <span data-ttu-id="10845-126">Dans l’exemple 4, le `Where` clause est exécutée sur toutes les `A`, pas seulement ceux sous-composant filtrés par l’expression de sous-requête elle-même (parce que cela serait récursif)</span><span class="sxs-lookup"><span data-stu-id="10845-126">In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)</span></span>  
  
-   <span data-ttu-id="10845-127">Dans l’exemple 5, la première `Where` clause est appliquée à tous les `B`s, bien qu’il existe des sous-requêtes sur `B`.</span><span class="sxs-lookup"><span data-stu-id="10845-127">In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`.</span></span> <span data-ttu-id="10845-128">La seconde `Where` clause est appliquée à tous les `A`bien qu’il existe des sous-requêtes sur `A`.</span><span class="sxs-lookup"><span data-stu-id="10845-128">The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10845-129">Lorsque vous récupérez `Customers` à partir de la base de données Northwind, vous pouvez utiliser <xref:System.Data.Linq.DataLoadOptions> pour spécifier que `Orders` doit également être récupéré.</span><span class="sxs-lookup"><span data-stu-id="10845-129">When you retrieve `Customers` from the Northwind sample database, you can use <xref:System.Data.Linq.DataLoadOptions> to specify that `Orders` is also to be retrieved.</span></span> <span data-ttu-id="10845-130">Vous pouvez même spécifier quel sous-ensemble de `Orders` à récupérer.</span><span class="sxs-lookup"><span data-stu-id="10845-130">You can even specify which subset of `Orders` to retrieve.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLoadOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLoadOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10845-131">Initialise une nouvelle instance de la classe <see cref="T:System.Data.Linq.DataLoadOptions" />.</span><span class="sxs-lookup"><span data-stu-id="10845-131">Initializes a new instance of the <see cref="T:System.Data.Linq.DataLoadOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith">
      <MemberSignature Language="C#" Value="public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociateWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10845-132">Identifie la requête à utiliser sur une propriété ou un champ particulier un-à-plusieurs.</span><span class="sxs-lookup"><span data-stu-id="10845-132">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="10845-133">Notez les points suivants :</span><span class="sxs-lookup"><span data-stu-id="10845-133">Note the following:</span></span> 
<span data-ttu-id="10845-134">Si l'expression ne commence pas par un champ ou une propriété qui représente une relation un-à-plusieurs, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="10845-134">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
<span data-ttu-id="10845-135">Si un opérateur autre qu'un opérateur valide apparaît dans l'expression, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="10845-135">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="10845-136">Les opérateurs valides sont les suivants :</span><span class="sxs-lookup"><span data-stu-id="10845-136">Valid operators are as follows:</span></span> 
<span data-ttu-id="10845-137">Où</span><span class="sxs-lookup"><span data-stu-id="10845-137">Where</span></span> 
<span data-ttu-id="10845-138">OrderBy</span><span class="sxs-lookup"><span data-stu-id="10845-138">OrderBy</span></span> 
<span data-ttu-id="10845-139">ThenBy</span><span class="sxs-lookup"><span data-stu-id="10845-139">ThenBy</span></span> 
<span data-ttu-id="10845-140">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="10845-140">OrderByDescending</span></span> 
<span data-ttu-id="10845-141">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="10845-141">ThenByDescending</span></span> 
<span data-ttu-id="10845-142">Take</span><span class="sxs-lookup"><span data-stu-id="10845-142">Take</span></span></param>
        <summary><span data-ttu-id="10845-143">Filtre les objets récupérés pour une relation particulière.</span><span class="sxs-lookup"><span data-stu-id="10845-143">Filters the objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10845-144">Dans l’exemple suivant, la boucle interne parcourt uniquement les `Orders` qui n’ont pas été expédiées aujourd'hui.</span><span class="sxs-lookup"><span data-stu-id="10845-144">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AssociateWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AssociateWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="10845-145">Type sur lequel est envoyée la requête.</span><span class="sxs-lookup"><span data-stu-id="10845-145">The type that is queried against.</span></span>  
  
<span data-ttu-id="10845-146">Si le type est non mappé, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="10845-146">If the type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="10845-147">Identifie la requête à utiliser sur une propriété ou un champ particulier un-à-plusieurs.</span><span class="sxs-lookup"><span data-stu-id="10845-147">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="10845-148">Notez les points suivants :</span><span class="sxs-lookup"><span data-stu-id="10845-148">Note the following:</span></span> 
<span data-ttu-id="10845-149">Si l'expression ne commence pas par un champ ou une propriété qui représente une relation un-à-plusieurs, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="10845-149">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
<span data-ttu-id="10845-150">Si un opérateur autre qu'un opérateur valide apparaît dans l'expression, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="10845-150">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="10845-151">Les opérateurs valides sont les suivants :</span><span class="sxs-lookup"><span data-stu-id="10845-151">Valid operators are as follows:</span></span> 
<span data-ttu-id="10845-152">Où</span><span class="sxs-lookup"><span data-stu-id="10845-152">Where</span></span> 
<span data-ttu-id="10845-153">OrderBy</span><span class="sxs-lookup"><span data-stu-id="10845-153">OrderBy</span></span> 
<span data-ttu-id="10845-154">ThenBy</span><span class="sxs-lookup"><span data-stu-id="10845-154">ThenBy</span></span> 
<span data-ttu-id="10845-155">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="10845-155">OrderByDescending</span></span> 
<span data-ttu-id="10845-156">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="10845-156">ThenByDescending</span></span> 
<span data-ttu-id="10845-157">Take</span><span class="sxs-lookup"><span data-stu-id="10845-157">Take</span></span></param>
        <summary><span data-ttu-id="10845-158">Filtre des objets récupérés pour une relation particulière.</span><span class="sxs-lookup"><span data-stu-id="10845-158">Filters objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10845-159">Pour plus d’informations sur la façon d’éviter les cycles, consultez <xref:System.Data.Linq.DataLoadOptions>.</span><span class="sxs-lookup"><span data-stu-id="10845-159">For information about how to avoid cycles, see <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10845-160">Dans l’exemple suivant, la boucle interne parcourt uniquement les `Orders` qui n’ont pas été expédiées aujourd'hui.</span><span class="sxs-lookup"><span data-stu-id="10845-160">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssociationCriteria">
      <MemberSignature Language="C#" Value="public bool GetAssociationCriteria (System.Reflection.MemberInfo memberInfo, out System.Linq.Expressions.LambdaExpression associationCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetAssociationCriteria(class System.Reflection.MemberInfo memberInfo, [out] class System.Linq.Expressions.LambdaExpression&amp; associationCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.GetAssociationCriteria(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetAssociationCriteria(System::Reflection::MemberInfo ^ memberInfo, [Runtime::InteropServices::Out] System::Linq::Expressions::LambdaExpression ^ % associationCriteria);" />
      <MemberSignature Language="F#" Value="member this.GetAssociationCriteria : System.Reflection.MemberInfo *  -&gt; bool" Usage="dataLoadOptions.GetAssociationCriteria (memberInfo, associationCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="associationCriteria" Type="System.Linq.Expressions.LambdaExpression" RefType="out" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="associationCriteria">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmediate">
      <MemberSignature Language="C#" Value="public bool IsImmediate (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsImmediate(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.IsImmediate(System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsImmediate(System::Reflection::MemberInfo ^ memberInfo);" />
      <MemberSignature Language="F#" Value="member this.IsImmediate : System.Reflection.MemberInfo -&gt; bool" Usage="dataLoadOptions.IsImmediate memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith">
      <MemberSignature Language="C#" Value="public void LoadWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10845-161">Expression lambda identifiant les éléments associés.</span><span class="sxs-lookup"><span data-stu-id="10845-161">A lambda expression that identifies the related material.</span></span></param>
        <summary><span data-ttu-id="10845-162">Récupère des données spécifiées associées à la cible principale à l'aide d'une expression lambda.</span><span class="sxs-lookup"><span data-stu-id="10845-162">Retrieves specified data related to the main target by using a lambda expression.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10845-163">Dans l'exemple suivant, toutes les `Orders` de tous les `Customers` dont la ville est London sont récupérés une fois la requête exécutée.</span><span class="sxs-lookup"><span data-stu-id="10845-163">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="10845-164">En conséquence, le fait d'accéder par la suite à la propriété `Orders` sur un objet `Customer` ne déclenche pas de nouvelle requête de la base de données.</span><span class="sxs-lookup"><span data-stu-id="10845-164">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void LoadWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void LoadWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="10845-165">Type sur lequel est envoyée la requête.</span><span class="sxs-lookup"><span data-stu-id="10845-165">Type that is queried against.</span></span>  
  
<span data-ttu-id="10845-166">Si ce type est non mappé, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="10845-166">If this type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="10845-167">Identifie le champ ou la propriété à récupérer.</span><span class="sxs-lookup"><span data-stu-id="10845-167">Identifies the field or property to be retrieved.</span></span>  
  
<span data-ttu-id="10845-168">Si l'expression n'identifie pas un champ ou une propriété qui représente une relation un-à-un ou un-à-plusieurs, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="10845-168">If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</span></span></param>
        <summary><span data-ttu-id="10845-169">Spécifie quels sont les sous-objets à récupérer lorsqu'une requête est soumise pour un objet de type T.</span><span class="sxs-lookup"><span data-stu-id="10845-169">Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10845-170">Vous ne pouvez pas spécifier le chargement de deux niveaux de relations (par exemple, `Orders.OrderDetails`).</span><span class="sxs-lookup"><span data-stu-id="10845-170">You cannot specify the loading of two levels of relationships (for example, `Orders.OrderDetails`).</span></span> <span data-ttu-id="10845-171">Dans ces scénarios, vous devez spécifier deux distinct <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="10845-171">In these scenarios you must specify two separate <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> methods.</span></span>  
  
 <span data-ttu-id="10845-172">Pour éviter les cycles, consultez la section Notes section <xref:System.Data.Linq.DataLoadOptions>.</span><span class="sxs-lookup"><span data-stu-id="10845-172">To avoid cycling, see Remarks section in <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10845-173">Dans l'exemple suivant, toutes les `Orders` de tous les `Customers` dont la ville est London sont récupérés une fois la requête exécutée.</span><span class="sxs-lookup"><span data-stu-id="10845-173">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="10845-174">En conséquence, le fait d'accéder par la suite à la propriété `Orders` sur un objet `Customer` ne déclenche pas de nouvelle requête de la base de données.</span><span class="sxs-lookup"><span data-stu-id="10845-174">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>