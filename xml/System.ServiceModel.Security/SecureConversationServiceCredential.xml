<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b507ff86d3d28a0198880442d73a284a2a76dd60" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39810633" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <TypeSignature Language="F#" Value="type SecureConversationServiceCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit les informations d'identification pour un service de conversation sécurisée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les conversations sécurisées impliquent l'échange de plusieurs messages et utilisent un jeton de contexte de sécurité (SCT, Security Context Token) pour garantir la sécurité. Le SCT est partagé parmi les correspondants communiquant pendant la durée de vie d'une session de communication. Un service peut publier deux types de SCT différents :  
  
-   Le premier est un SCT basé sur session qui contient un identificateur unique. Les messages retiennent uniquement l'identificateur, puis le service maintient un cache de mappage d'état qui assure le mappage entre les identificateurs SCT et le contenu (tel que revendications, clés de sécurité, etc.). Un client valide doit envoyer une annulation de SCT pour aider le service à optimiser les ressources de cache. Si vous instanciez cette classe en appelant <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> avec le paramètre `requireCancellation` égal à `true`, le SCT est publié de cette manière.  
  
-   Le second est un SCT autonome qui réside dans un cookie sur le client. Ce SCT contient les toutes les informations d'état et ne requiert donc aucune gestion d'état par le service ni d'annulation de SCT par le client. On parle parfois de SCT en « mode cookie ». Comme le SCT contient toutes les informations d'état, sa taille est plus grande que dans le cas basé sur session. Avec des SCT basé sur session, le service stocke la plupart des informations d'état. Toutefois, comme il est autonome, il peut être utilisé pendant toute la durée de vie du service et survivre à l'arrêt du service et à sa reprise.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContextClaimTypes : System.Collections.ObjectModel.Collection&lt;Type&gt;" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection des revendications <see cref="T:System.Type" /> pour la sérialisation de cookies.</summary>
        <value>Collection des revendications <see cref="T:System.Type" /> pour la sérialisation de cookies.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour sérialiser des revendications dans des cookies SCT, Windows Communication Foundation (WCF) utilise <xref:System.Runtime.Serialization.DataContractSerializer> en tant que la valeur par défaut. Étant donné que la ressource de revendication est extensible, WCF vous permet de fournir une liste de types de ressources connus. Cela aide <xref:System.Runtime.Serialization.DataContractSerializer> pendant la désérialisation des revendications dans le cookie afin qu'il puisse retourner les objets fortement typés d'origine.  
  
   
  
## Examples  
 Le code suivant montre comment obtenir cette propriété.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder with get, set" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> personnalisé pour encoder et décoder la sérialisation de cookie.</summary>
        <value>Objet <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> qui est une personnalisation de <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En « mode cookie », un service publie au client un jeton de contexte de sécurité (SCT) sous la forme d'un cookie au client afin qu'il n'ait à gérer aucun état de sécurité. Le client renvoie le cookie dans le message de demande afin que le service sache comment déprotéger et vérifier le message de demande. Comme le SCT est souvent transmis sur un réseau non sécurisé, il doit être protégé.  
  
 Par défaut, Windows Communication Foundation (WCF) utilise le <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> classe pour protéger le cookie à l’aide de l’API de Protection des données (DPAPI). Pour que DPAPI fonctionne dans un environnement de batterie de serveurs Web, tous les services principaux doivent s'exécuter comme même compte d'utilisateur de domaine. En d'autres termes, si le service est hébergé sur le Web, le processus de travail IIS (Internet Information Services) doit être configuré pour s'exécuter comme utilisateur de domaine.  
  
 Cette propriété vous permet d'utiliser un <xref:System.ServiceModel.Security.SecurityStateEncoder> personnalisé pour chiffrer et déchiffrer le cookie et ne pas dépendre de DPAPI.  
  
   
  
## Examples  
 Le code suivant montre comment définir cette propriété.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>