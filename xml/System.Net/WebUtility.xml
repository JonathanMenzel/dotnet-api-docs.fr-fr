<Type Name="WebUtility" FullName="System.Net.WebUtility">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8446758086f75e24e5b3423aec74a246aa8e7c19" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36471588" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class WebUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WebUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebUtility" />
  <TypeSignature Language="VB.NET" Value="Public Class WebUtility" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebUtility abstract sealed" />
  <TypeSignature Language="F#" Value="type WebUtility = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des méthodes de codage et décodage d'URL pendant le traitement des requêtes web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.HttpUtility> classe contient le codage et décodage des méthodes utilitaires pour une utilisation avec les chaînes encodées en HTML. La <xref:System.Uri?displayProperty=nameWithType> classe contient également des méthodes et propriétés qui peuvent être utilisées pour des raisons similaires.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Uri" />
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="P:System.Web.HttpContext.Server" />
  </Docs>
  <Members>
    <MemberGroup MemberName="HtmlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit une chaîne qui a été encodée en HTML en vue d’une transmission HTML dans une chaîne décodée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public static string HtmlDecode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlDecode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.HtmlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlDecode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlDecode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member HtmlDecode : string -&gt; string" Usage="System.Net.WebUtility.HtmlDecode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à décoder.</param>
        <summary>Convertit une chaîne qui a été encodée en HTML en vue d’une transmission HTML dans une chaîne décodée.</summary>
        <returns>Chaîne décodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si des caractères tels que des espaces blancs et signes de ponctuation sont passés dans un flux HTTP, ils peuvent être mal interprétés à la fin de réception. L’encodage HTML convertit des caractères qui ne sont pas autorisés dans le code HTML en équivalents d’entités de caractères ; Le décodage HTML inverse l’encodage. Par exemple, lorsqu’il est incorporé dans un bloc de texte, les caractères \< et > sont encodés sous &lt; et &gt; pour une transmission HTTP.  
  
 Si le `value` paramètre est `null`, alors la chaîne décodée retournée est `null`. Si le `value` paramètre est une chaîne vide, la chaîne décodée retournée est une chaîne vide.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebUtility.HtmlEncode(System.String)" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String)" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public static void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="static member HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="System.Net.WebUtility.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à décoder.</param>
        <param name="output">Flux <see cref="T:System.IO.TextWriter" /> de sortie.</param>
        <summary>Convertit une chaîne qui a été encodée en HTML en chaîne décodée et envoie la chaîne décodée à un flux de sortie <see cref="T:System.IO.TextWriter" /> .</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si des caractères tels que des espaces blancs et signes de ponctuation sont passés dans un flux HTTP, ils peuvent être mal interprétés à la fin de réception. L’encodage HTML convertit des caractères qui ne sont pas autorisés dans le code HTML en équivalents d’entités de caractères ; Le décodage HTML inverse l’encodage. Par exemple, lorsqu’il est incorporé dans un bloc de texte, les caractères \< et > sont encodés sous &lt; et &gt; pour une transmission HTTP.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="output" /> ne peut pas être <see langword="null" /> si le paramètre <paramref name="value" /> n'est pas  <see langword="null" />.</exception>
        <altmember cref="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit une chaîne en une chaîne encodée au format HTML.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.HtmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member HtmlEncode : string -&gt; string" Usage="System.Net.WebUtility.HtmlEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à encoder.</param>
        <summary>Convertit une chaîne en une chaîne encodée au format HTML.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si des caractères tels que des espaces blancs et signes de ponctuation sont passés dans un flux HTTP, ils peuvent être mal interprétés à la fin de réception. L’encodage HTML convertit des caractères qui ne sont pas autorisés dans le code HTML en équivalents d’entités de caractères ; Le décodage HTML inverse l’encodage. Par exemple, lorsqu’il est incorporé dans un bloc de texte, les caractères \< et > sont encodés sous &lt; et &gt; pour une transmission HTTP.  
  
 Si le `value` paramètre est `null`, alors la chaîne encodée retournée est `null`. Si le `value` paramètre est une chaîne vide, la chaîne encodée retournée est une chaîne vide.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebUtility.HtmlDecode(System.String)" />
        <altmember cref="M:System.Web.HttpUtility.HtmlDecode(System.String)" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="static member HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="System.Net.WebUtility.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à encoder.</param>
        <param name="output">Flux de sortie <see cref="T:System.IO.TextWriter" />.</param>
        <summary>Convertit une chaîne en une chaîne encodée au format HTML, et retourne la sortie en tant que flux de sortie <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si des caractères tels que des espaces blancs et signes de ponctuation sont passés dans un flux HTTP, ils peuvent être mal interprétés à la fin de réception. L’encodage HTML convertit des caractères qui ne sont pas autorisés dans le code HTML en équivalents d’entités de caractères ; Le décodage HTML inverse l’encodage. Par exemple, lorsqu’il est incorporé dans un bloc de texte, les caractères \< et >, sont encodés sous &lt; et &gt; pour une transmission HTTP.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="output" /> ne peut pas être <see langword="null" /> si le paramètre <paramref name="value" /> n'est pas  <see langword="null" />.</exception>
        <altmember cref="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public static string UrlDecode (string encodedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlDecode(string encodedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.UrlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlDecode (encodedValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlDecode(System::String ^ encodedValue);" />
      <MemberSignature Language="F#" Value="static member UrlDecode : string -&gt; string" Usage="System.Net.WebUtility.UrlDecode encodedValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="encodedValue">Chaîne encodée en URL à décoder.</param>
        <summary>Convertit une chaîne qui a été encodée pour une transmission dans une URL en chaîne décodée.</summary>
        <returns>Retourne <see cref="T:System.String" />.  Chaîne décodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si des caractères tels que des espaces blancs et signes de ponctuation sont passés dans un flux HTTP, ils peuvent être mal interprétés à la fin de réception. L’encodage d’URL convertit des caractères qui ne sont pas autorisés dans une URL en séquences d’échappement hexadécimales équivalentes. Le <xref:System.Net.WebUtility.UrlEncode%2A> méthode crée une chaîne codée URL.  
  
 Le décodage d’URL remplace les séquences d’échappement hexadécimales avec les équivalents de caractère ASCII correspondants. Par exemple, lorsqu’il est incorporé dans un bloc de texte encodé en URL, les séquences d’échappement `%3c` et `%3e` sont décodées en caractères `<` et `>`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlDecodeToBytes">
      <MemberSignature Language="C#" Value="public static byte[] UrlDecodeToBytes (byte[] encodedValue, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlDecodeToBytes(unsigned int8[] encodedValue, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlDecodeToBytes (encodedValue As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlDecodeToBytes(cli::array &lt;System::Byte&gt; ^ encodedValue, int offset, int count);" />
      <MemberSignature Language="F#" Value="static member UrlDecodeToBytes : byte[] * int * int -&gt; byte[]" Usage="System.Net.WebUtility.UrlDecodeToBytes (encodedValue, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedValue" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="encodedValue">Tableau <see cref="T:System.Byte" /> encodé en URL à décoder.</param>
        <param name="offset">Offset, en octets, depuis le début du tableau <see cref="T:System.Byte" /> à décoder.</param>
        <param name="count">Nombre, en octets, à décoder depuis le tableau <see cref="T:System.Byte" />.</param>
        <summary>Convertit un tableau d'octets encodé qui a été encodé pour être transmis dans une URL dans un tableau d'octets décodé.</summary>
        <returns>Retourne <see cref="T:System.Byte" />.  Tableau décodé <see cref="T:System.Byte" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si des caractères tels que des espaces blancs et signes de ponctuation sont passés dans un flux HTTP, ils peuvent être mal interprétés à la fin de réception. L’encodage d’URL convertit des caractères qui ne sont pas autorisés dans une URL en séquences d’échappement hexadécimales équivalentes. Le <xref:System.Net.WebUtility.UrlEncodeToBytes%2A> méthode crée un tableau d’octets encodé en URL.  
  
 Le décodage d’URL remplace les séquences d’échappement hexadécimales avec les équivalents de caractère ASCII correspondants. Par exemple, lorsqu’il est incorporé dans un bloc de texte encodé en URL, les séquences d’échappement `%3c` et `%3e` sont décodées en caractères `<` et `>`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string -&gt; string" Usage="System.Net.WebUtility.UrlEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Texte à encoder en URL.</param>
        <summary>Convertit une chaîne de texte en chaîne encodée en URL.</summary>
        <returns>Retourne <see cref="T:System.String" />.  Chaîne encodée en URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si des caractères tels que des espaces blancs et signes de ponctuation sont passés dans un flux HTTP, ils peuvent être mal interprétés à la fin de réception. L’encodage d’URL remplace les caractères qui ne sont pas autorisés dans une URL avec des entités de caractères équivalentes consistant en séquences d’échappement hexadécimales. La chaîne convertie est censée être conforme au format UTF-8.  
  
 L’encodage d’URL remplace tous les codes de caractère à l’exception des lettres, des chiffres et caractères de ponctuation suivants :  
  
-   `-` (signe moins)  
  
-   `_` (caractère de soulignement)  
  
-   `.` (point)  
  
-   `!` (point d’exclamation)  
  
-   \* (astérisque)  
  
-   `(` et `)` (parenthèses ouvrante et fermante)  
  
 Par exemple, lorsqu’il est incorporé dans un bloc de texte à transmettre dans une URL, les caractères `<` et `>` sont encodés sous `%3c` et `%3e`.  
  
 Le <xref:System.Net.WebUtility.UrlDecode%2A> méthode inverse l’encodage.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncodeToBytes">
      <MemberSignature Language="C#" Value="public static byte[] UrlEncodeToBytes (byte[] value, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlEncodeToBytes(unsigned int8[] value, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncodeToBytes (value As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlEncodeToBytes(cli::array &lt;System::Byte&gt; ^ value, int offset, int count);" />
      <MemberSignature Language="F#" Value="static member UrlEncodeToBytes : byte[] * int * int -&gt; byte[]" Usage="System.Net.WebUtility.UrlEncodeToBytes (value, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Tableau <see cref="T:System.Byte" /> à encoder au format URL.</param>
        <param name="offset">Offset, en octets, depuis le début du tableau <see cref="T:System.Byte" /> à encoder.</param>
        <param name="count">Nombre, en octets, à encoder depuis le tableau <see cref="T:System.Byte" />.</param>
        <summary>Convertit un tableau d'octets en tableau d'octets encodé URL.</summary>
        <returns>Retourne <see cref="T:System.Byte" />.  Tableau <see cref="T:System.Byte" /> encodé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si des caractères tels que des espaces blancs et signes de ponctuation sont passés dans un flux HTTP, ils peuvent être mal interprétés à la fin de réception. L’encodage d’URL remplace les caractères qui ne sont pas autorisés dans une URL avec des entités de caractères équivalentes consistant en séquences d’échappement hexadécimales. La chaîne convertie est censée être conforme au format UTF-8.  
  
 L’encodage d’URL remplace tous les codes de caractère à l’exception des lettres, des chiffres et caractères de ponctuation suivants :  
  
-   `-` (signe moins)  
  
-   `_` (caractère de soulignement)  
  
-   `.` (point)  
  
-   `!` (point d’exclamation)  
  
-   « * » (astérisque)  
  
-   `'` (guillemet-apostrophe)  
  
-   `(` et `)` (parenthèses ouvrante et fermante)  
  
 Par exemple, lorsqu’il est incorporé dans un bloc de texte à transmettre dans une URL, les caractères `<` et `>` sont encodés sous `%3c` et `%3e`.  
  
 Le <xref:System.Net.WebUtility.UrlDecodeToBytes%2A> méthode inverse l’encodage.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>