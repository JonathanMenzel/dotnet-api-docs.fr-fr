<Type Name="WebClient" FullName="System.Net.WebClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="49592ccff67aa36f2aeb8df20a7422809f161b6b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48617595" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebClient : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebClient extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebClient" />
  <TypeSignature Language="VB.NET" Value="Public Class WebClient&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebClient : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type WebClient = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.WebClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des méthodes communes pour l'envoi de données à une ressource identifiée par un URI ou pour la réception de données en provenance de cette ressource.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient> classe fournit des méthodes communes pour envoyer des données ou recevoir des données à partir de n’importe quel intranet local ou ressource Internet identifiée par un URI.  
  
 Le <xref:System.Net.WebClient> classe utilise le <xref:System.Net.WebRequest> classe pour fournir l’accès aux ressources. <xref:System.Net.WebClient> instances peuvent accéder aux données avec n’importe quel <xref:System.Net.WebRequest> descendant inscrit avec le <xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=nameWithType> (méthode).  
  
> [!NOTE]
>  Par défaut, le .NET Framework prend en charge les URI qui commencent par `http:`, `https:`, `ftp:`, et `file:` identificateurs de modèle.  
  
 Le tableau suivant décrit <xref:System.Net.WebClient> méthodes pour télécharger des données à une ressource.  
  
|Méthode|Description |  
|------------|-----------------|  
|<xref:System.Net.WebClient.OpenWrite%2A>|Récupère un <xref:System.IO.Stream> utilisé pour envoyer des données à la ressource.|  
|<xref:System.Net.WebClient.OpenWriteAsync%2A>|Récupère un <xref:System.IO.Stream> utilisé pour envoyer des données à la ressource, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.UploadData%2A>|Envoie un tableau d’octets à la ressource et retourne un <xref:System.Byte> tableau contenant une réponse.|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|Envoie un <xref:System.Byte> tableau à la ressource, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.UploadFile%2A>|Envoie un fichier local à la ressource et retourne un <xref:System.Byte> tableau contenant une réponse.|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|Envoie un fichier local à la ressource, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.UploadValues%2A>|Envoie un <xref:System.Collections.Specialized.NameValueCollection> à la ressource et retourne un <xref:System.Byte> tableau contenant une réponse.|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Envoie un <xref:System.Collections.Specialized.NameValueCollection> à la ressource et retourne un <xref:System.Byte> tableau contenant une réponse, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.UploadString%2A>|Envoie un <xref:System.String> à la ressource, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.UploadStringAsync%2A>|Envoie un <xref:System.String> à la ressource, sans bloquer le thread appelant.|  
  
 Le tableau suivant décrit <xref:System.Net.WebClient> méthodes de téléchargement des données à partir d’une ressource.  
  
|Méthode|Description |  
|------------|-----------------|  
|<xref:System.Net.WebClient.OpenRead%2A>|Retourne les données à partir d’une ressource comme un <xref:System.IO.Stream>.|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|Retourne les données à partir d’une ressource, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.DownloadData%2A>|Télécharge des données à partir d’une ressource et retourne un <xref:System.Byte> tableau.|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Télécharge des données à partir d’une ressource et retourne un <xref:System.Byte> tableau, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.DownloadFile%2A>|Télécharge des données à partir d’une ressource dans un fichier local.|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Télécharge des données à partir d’une ressource dans un fichier local, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.DownloadString%2A>|Télécharge un <xref:System.String> à partir d’une ressource et retourne un <xref:System.String>.|  
|<xref:System.Net.WebClient.DownloadStringAsync%2A>|Télécharge un <xref:System.String> à partir d’une ressource, sans bloquer le thread appelant.|  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Un <xref:System.Net.WebClient> instance n’envoie pas d’en-têtes HTTP facultatifs par défaut. Si votre demande requiert un en-tête facultatif, vous devez ajouter l’en-tête à la <xref:System.Net.WebClient.Headers%2A> collection. Par exemple, pour conserver les requêtes dans la réponse, vous devez ajouter un en-tête user-agent. En outre, les serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête de l’agent utilisateur est manquant.  
  
 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> a la valeur `true` dans <xref:System.Net.WebClient> instances.  
  
   
  
## Examples  
 L’exemple de code suivant prend l’URI d’une ressource, il récupère et affiche la réponse.  
  
 [!code-cpp[NCLWebClientUserAgent#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientUserAgent/CPP/useragent.cpp#1)]
 [!code-csharp[NCLWebClientUserAgent#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientUserAgent/CS/useragent.cs#1)]
 [!code-vb[NCLWebClientUserAgent#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientUserAgent/VB/useragent.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.WebPermission">Pour accéder à l’URI demandé ou n’importe quel URI de la requête est redirigée vers. Énumération associée : <see cref="F:System.Net.NetworkAccess.Connect" />.</permission>
    <block subset="none" type="overrides">
      <para>Classes dérivées doivent appeler l’implémentation de classe de base de <see cref="T:System.Net.WebClient" /> pour vous assurer de la classe dérivée fonctionne comme prévu.</para>
    </block>
    <altmember cref="T:System.Net.WebRequest" />
    <altmember cref="T:System.Net.WebResponse" />
    <altmember cref="T:System.Net.HttpWebRequest" />
    <altmember cref="T:System.Net.HttpWebResponse" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.WebClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le constructeur par défaut crée une nouvelle instance de la <xref:System.Net.WebClient> classe. La méthode HTTP par défaut est GET. La méthode FTP par défaut est RETR. Le <xref:System.Net.WebClient.Encoding%2A> par défaut correspond à <xref:System.Text.Encoding.Default%2A>. La valeur par défaut de <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> est `true`.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Net.WebClient> de l’instance, puis l’utilise pour télécharger des données à partir d’un serveur et les afficher sur la console système, pour télécharger des données à partir d’un serveur et les écrire dans un fichier et pour transférer des valeurs de formulaire à un serveur et recevoir la réponse.  
  
 [!code-cpp[WebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient/CPP/webclient.cpp#1)]
 [!code-csharp[WebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient/CS/webclient.cs#1)]
 [!code-vb[WebClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient/VB/webclient.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReadStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowReadStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowReadStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowReadStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowReadStreamBuffering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowReadStreamBuffering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowReadStreamBuffering : bool with get, set" Usage="System.Net.WebClient.AllowReadStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les données lues à partir de la ressource Internet pour une instance <see cref="T:System.Net.WebClient" /> doivent être mises en mémoire tampon.</summary>
        <value>Retourne <see cref="T:System.Boolean" />.  
  
 <see langword="true" /> pour activer la mise en mémoire tampon des données reçues de la ressource Internet ; <see langword="false" /> pour désactiver la mise en mémoire tampon. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Net.WebClient.AllowReadStreamBuffering%2A> propriété est `true`, les données sont mis en mémoire tampon par conséquent, il est prêt à être lues par l’application.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowWriteStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowWriteStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowWriteStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowWriteStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowWriteStreamBuffering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowWriteStreamBuffering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowWriteStreamBuffering : bool with get, set" Usage="System.Net.WebClient.AllowWriteStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les données écrites vers la ressource Internet pour une instance <see cref="T:System.Net.WebClient" /> doivent être mises en mémoire tampon.</summary>
        <value>Retourne <see cref="T:System.Boolean" />.  
  
 <see langword="true" /> pour activer la mise en mémoire tampon des données écrites vers la ressource Internet ; <see langword="false" /> pour désactiver la mise en mémoire tampon. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Net.WebClient.AllowWriteStreamBuffering%2A> propriété est `true`, les données sont mis en mémoire tampon afin qu’elle peut être écrite plus efficacement à la ressource Internet par segments plus volumineux.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public string BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : string with get, set" Usage="System.Net.WebClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'URI de base pour les requêtes effectuées par <see cref="T:System.Net.WebClient" />.</summary>
        <value>
          <see cref="T:System.String" /> qui contient l'URI de base pour les demandes effectuées par <see cref="T:System.Net.WebClient" /> ou <see cref="F:System.String.Empty" /> si aucune adresse de base n'a été spécifiée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.BaseAddress%2A> propriété contient un URI de base qui est associé à une adresse relative. Lorsque vous appelez une méthode qui transfère ou télécharge des données, le <xref:System.Net.WebClient> objet associe cet URI de base à l’adresse relative que vous spécifiez dans l’appel de méthode. Si vous spécifiez un URI absolu, <xref:System.Net.WebClient> n’utilise pas le <xref:System.Net.WebClient.BaseAddress%2A> valeur de propriété.  
  
 Pour supprimer un précédemment défini de valeur, définissez cette propriété sur `null` ou une chaîne vide (« »).  
  
   
  
## Examples  
 L’exemple de code suivant télécharge des données à partir d’un serveur Internet et l’affiche dans la console. Il suppose que l’adresse du serveur (tel que http://www.contoso.com) est dans `hostUri` et que le chemin d’accès à la ressource (par exemple, / default.htm) est `uriSuffix`.  
  
 [!code-cpp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#1)]
 [!code-csharp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#1)]
 [!code-vb[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur de <see cref="P:System.Net.WebClient.BaseAddress" /> est un URI non valide. L'exception interne peut contenir des informations qui vous aideront à trouver l'erreur.</exception>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy { System::Net::Cache::RequestCachePolicy ^ get(); void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CachePolicy : System.Net.Cache.RequestCachePolicy with get, set" Usage="System.Net.WebClient.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la stratégie de cache de l'application pour les ressources obtenues par cette instance WebClient à l'aide d'objets <see cref="T:System.Net.WebRequest" />.</summary>
        <value>Objet <see cref="T:System.Net.Cache.RequestCachePolicy" /> qui représente les exigences de mise en cache de l'application.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="webClient.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Annule une opération asynchrone en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si une opération est en attente, cette méthode appelle <xref:System.Net.WebRequest.Abort%2A> sur sous-jacent <xref:System.Net.WebRequest>.  
  
 Lorsque vous appelez <xref:System.Net.WebClient.CancelAsync%2A>, votre application reçoit toujours l’événement d’achèvement associé à l’opération. Par exemple, lorsque vous appelez <xref:System.Net.WebClient.CancelAsync%2A> pour annuler un <xref:System.Net.WebClient.DownloadStringAsync%2A> opération, si vous avez spécifié un gestionnaire d’événements pour le <xref:System.Net.WebClient.DownloadStringCompleted> événement, votre gestionnaire d’événements reçoit la notification que l’opération est terminée. Pour savoir si l’opération a réussi, consultez le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriété sur la classe de base de <xref:System.Net.DownloadDataCompletedEventArgs> de l’événement l’objet de données passé au gestionnaire d’événements.  
  
 Si aucune opération asynchrone n’est en cours, cette méthode ne fait rien.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ICredentials ^ Credentials { System::Net::ICredentials ^ get(); void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials with get, set" Usage="System.Net.WebClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les informations d'identification réseau envoyées à l'hôte et utilisées pour authentifier la demande.</summary>
        <value>
          <see cref="T:System.Net.ICredentials" /> contenant les informations d'authentification pour la demande. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.Credentials%2A> propriété contient les informations d’identification d’authentification utilisées pour accéder à une ressource sur un ordinateur hôte. Dans la plupart des scénarios côté client, vous devez utiliser le <xref:System.Net.CredentialCache.DefaultCredentials%2A>, qui sont les informations d’identification de l’utilisateur actuellement connecté. Pour ce faire, définissez la <xref:System.Net.WebClient.UseDefaultCredentials%2A> propriété `true` au lieu de définir cette propriété.  
  
 Si le <xref:System.Net.WebClient> classe est utilisée dans une application de couche intermédiaire, comme une application ASP.NET, le <xref:System.Net.CredentialCache.DefaultCredentials%2A> appartenir au compte d’exécution de la page ASP (les informations d’identification côté serveur). En règle générale, vous devez définir cette propriété pour les informations d’identification du client au nom duquel la demande est effectuée.  
  
 Pour des raisons de sécurité, si l'on suit automatiquement les redirections, stocker les informations d’identification que vous souhaitez inclure dans la redirection dans un <xref:System.Net.CredentialCache> et l’affecter à cette propriété. Cette propriété définira automatiquement `null` lors de la redirection si elle contient une valeur autre qu’un <xref:System.Net.CredentialCache>. Avoir cette valeur de propriété automatiquement la valeur `null` dans ces conditions empêche les informations d’identification d’être envoyé à n’importe quelle destination involontaire.
  
## Examples  
 L’exemple de code suivant utilise les informations d’identification du système de l’utilisateur pour authentifier une demande.  
  
 [!code-cpp[WebClientAuthentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClientAuthentication/CPP/webclientauth.cpp#1)]
 [!code-csharp[WebClientAuthentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClientAuthentication/CS/webclientauth.cs#1)]
 [!code-vb[WebClientAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClientAuthentication/VB/webclientauth.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="P:System.Net.WebRequest.Credentials" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge la ressource en tant que tableau <see cref="T:System.Byte" /> à partir de l'URI spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadData (address As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DownloadData(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadData : string -&gt; byte[]" Usage="webClient.DownloadData address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI à partir duquel télécharger des données.</param>
        <summary>Télécharge la ressource en tant que tableau <see cref="T:System.Byte" /> à partir de l'URI spécifié.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant la ressource téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.DownloadData%2A> méthode télécharge la ressource avec l’URI spécifié par le `address` paramètre. Cette méthode se bloque lors du téléchargement de la ressource. Pour télécharger une ressource et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.DownloadDataAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant demande des données à partir d’un serveur et affiche les données retournées. Il suppose que `remoteUri` contient un URI valide pour les données demandées.  
  
 [!code-cpp[WebClient_DownloadData#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadData/CPP/webclient_downloaddata.cpp#1)]
 [!code-csharp[WebClient_DownloadData#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadData/CS/webclient_downloaddata.cs#1)]
 [!code-vb[WebClient_DownloadData#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadData/VB/webclient_downloaddata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de données.</exception>
        <exception cref="T:System.NotSupportedException">La méthode a été appelée sur plusieurs threads simultanément.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadData (address As Uri) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DownloadData(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadData : Uri -&gt; byte[]" Usage="webClient.DownloadData address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">URI représenté par l'objet <see cref="T:System.Uri" />, à partir duquel télécharger des données.</param>
        <summary>Télécharge la ressource en tant que tableau <see cref="T:System.Byte" /> à partir de l'URI spécifié.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant la ressource téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.DownloadData%2A> méthode télécharge la ressource avec l’URI spécifié par le `address` paramètre. Cette méthode se bloque lors du téléchargement de la ressource. Pour télécharger une ressource et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.DownloadDataAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
 **Remarque** ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadDataAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge la ressource en tant que tableau <see cref="T:System.Byte" /> à partir de l'URI spécifié en tant qu'opération asynchrone. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadDataAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadDataAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadDataAsync : Uri -&gt; unit" Usage="webClient.DownloadDataAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" /> contenant l'URI à télécharger.</param>
        <summary>Télécharge la ressource en tant que tableau <see cref="T:System.Byte" /> à partir de l'URI spécifié en tant qu'opération asynchrone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode récupère la ressource spécifiée à l’aide de la méthode par défaut pour le protocole associé au modèle URI spécifié dans `address`. Les données sont téléchargées de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Cette méthode ne bloque pas le thread appelant pendant le téléchargement de la ressource. Pour télécharger une ressource et un bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.DownloadData%2A> méthodes. Lorsque le téléchargement terminé, le <xref:System.Net.WebClient.DownloadDataCompleted> événement est déclenché. Votre application doit gérer cet événement pour recevoir une notification. Les données téléchargées sont disponibles dans le <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> propriété.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadDataAsync (address As Uri, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadDataAsync(Uri ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.DownloadDataAsync : Uri * obj -&gt; unit" Usage="webClient.DownloadDataAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" /> contenant l'URI à télécharger.</param>
        <param name="userToken">Objet défini par l'utilisateur, passé à la fin de l'opération asynchrone à la méthode appelée.</param>
        <summary>Télécharge la ressource en tant que tableau <see cref="T:System.Byte" /> à partir de l'URI spécifié en tant qu'opération asynchrone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode récupère la ressource spécifiée à l’aide de la méthode par défaut pour le protocole associé au modèle URI spécifié dans `address`. Les données sont téléchargées de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Cette méthode ne bloque pas le thread appelant pendant le téléchargement de la ressource. Pour télécharger une ressource et un bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.DownloadData%2A> méthodes. Lorsque le téléchargement terminé, le <xref:System.Net.WebClient.DownloadDataCompleted> événement est déclenché. Votre application doit gérer cet événement pour recevoir une notification. Les données téléchargées sont disponibles dans le <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> propriété.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadDataCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadDataCompleted As DownloadDataCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::DownloadDataCompletedEventHandler ^ DownloadDataCompleted;" />
      <MemberSignature Language="F#" Value="member this.DownloadDataCompleted : System.Net.DownloadDataCompletedEventHandler " Usage="member this.DownloadDataCompleted : System.Net.DownloadDataCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors d'une opération asynchrone de téléchargement de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois une opération de téléchargement asynchrone des données. Téléchargements asynchrones de données sont démarrés en appelant le <xref:System.Net.WebClient.DownloadDataAsync%2A> méthodes.  
  
 Le <xref:System.Net.DownloadDataCompletedEventHandler> est le délégué de cet événement. Le <xref:System.Net.DownloadDataCompletedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#21](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#21)]
 [!code-csharp[NCLWebClientAsync#21](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#21)]
 [!code-vb[NCLWebClientAsync#21](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadDataTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge la ressource en tant que tableau <see cref="T:System.Byte" /> à partir de l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadDataTaskAsync (address As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ DownloadDataTaskAsync(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadDataTaskAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.DownloadDataTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à télécharger.</param>
        <summary>Télécharge la ressource en tant que tableau <see cref="T:System.Byte" /> à partir de l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant la ressource téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la ressource de données a été téléchargée.  
  
 Cette méthode récupère la ressource spécifiée à l’aide de la méthode par défaut pour le protocole associé au modèle URI spécifié dans le `address` paramètre. Les données sont téléchargées de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 L’exemple de code suivant demande des données à partir d’un serveur et affiche les données retournées. Il suppose que `remoteUri` contient un URI valide pour les données demandées.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadDataTaskAsync (address As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ DownloadDataTaskAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadDataTaskAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.DownloadDataTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à télécharger.</param>
        <summary>Télécharge la ressource en tant que tableau <see cref="T:System.Byte" /> à partir de l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant la ressource téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la ressource de données a été téléchargée.  
  
 Cette méthode récupère la ressource spécifiée à l’aide de la méthode par défaut pour le protocole associé au modèle URI spécifié dans le `address` paramètre. Les données sont téléchargées de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
 **Remarque** ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge vers un fichier local la ressource ayant l'URI spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As String, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(System::String ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : string * string -&gt; unit" Usage="webClient.DownloadFile (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI à partir duquel télécharger des données.</param>
        <param name="fileName">Nom du fichier local devant recevoir les données.</param>
        <summary>Télécharge vers un fichier local la ressource ayant l'URI spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.DownloadFile%2A> méthode télécharge vers une fichier local des données à partir de l’URI spécifié dans le `address` paramètre. Cette méthode se bloque lors du téléchargement de la ressource. Pour télécharger une ressource et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.DownloadFileAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Lorsque vous utilisez cette méthode dans une application de couche intermédiaire, comme une page ASP.NET, vous recevrez une erreur si le compte sous lequel s’exécute l’application n’a pas l’autorisation d’accès au fichier.  
  
   
  
## Examples  
 L’exemple de code suivant télécharge un fichier à partir de http://www.contoso.com sur le disque dur local.  
  
 [!code-cpp[WebClient_DownloadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadFile/CPP/webclient_downloadfile.cpp#1)]
 [!code-csharp[WebClient_DownloadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadFile/CS/webclient_downloadfile.cs#1)]
 [!code-vb[WebClient_DownloadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadFile/VB/webclient_downloadfile.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="filename" /> est <see langword="null" /> ou <see cref="F:System.String.Empty" />.  
  
- ou - 
Le fichier n'existe pas.  
  
- ou - Une erreur s'est produite lors du téléchargement de données.</exception>
        <exception cref="T:System.NotSupportedException">La méthode a été appelée sur plusieurs threads simultanément.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">pour écrire le fichier <paramref name="fileName" />. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As Uri, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : Uri * string -&gt; unit" Usage="webClient.DownloadFile (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI spécifié en tant que <see cref="T:System.String" />, à partir duquel télécharger des données.</param>
        <param name="fileName">Nom du fichier local devant recevoir les données.</param>
        <summary>Télécharge vers un fichier local la ressource ayant l'URI spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.DownloadFile%2A> méthode télécharge vers une fichier local des données à partir de l’URI spécifié dans le `address` paramètre. Cette méthode se bloque lors du téléchargement de la ressource. Pour télécharger une ressource et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.DownloadFileAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Lorsque vous utilisez cette méthode dans une application de couche intermédiaire, comme une page ASP.NET, vous recevrez une erreur si le compte sous lequel s’exécute l’application n’a pas l’autorisation d’accès au fichier.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="filename" /> est <see langword="null" /> ou <see cref="F:System.String.Empty" />.  
  
- ou - 
Le fichier n'existe pas.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de données.</exception>
        <exception cref="T:System.NotSupportedException">La méthode a été appelée sur plusieurs threads simultanément.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">pour écrire le fichier <paramref name="fileName" />. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFileAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge la ressource spécifiée dans un fichier local en tant qu'opération asynchrone et retourne un objet de tâche. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFileAsync (address As Uri, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFileAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFileAsync : Uri * string -&gt; unit" Usage="webClient.DownloadFileAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à télécharger.</param>
        <param name="fileName">Nom du fichier à placer sur l'ordinateur local.</param>
        <summary>Télécharge, vers un fichier local, la ressource ayant l'URI spécifié. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode télécharge la ressource à l’URI spécifié dans le `address` paramètre. Lorsque le téléchargement terminé, le fichier téléchargé est nommé `fileName` sur l’ordinateur local. Le fichier est téléchargé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le fichier est disponible, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.DownloadFileCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant le téléchargement de la ressource. Pour bloquer en attendant la fin du téléchargement, utilisez une de la <xref:System.Net.WebClient.DownloadFile%2A> méthodes.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne spécifie pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Lorsque vous utilisez cette méthode dans une page ASP.NET, vous recevrez une erreur si la page s’exécute sous le compte n’a pas d’autorisation d’accès au fichier local.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
        <exception cref="T:System.InvalidOperationException">Le fichier local spécifié par <paramref name="fileName" /> est utilisé par un autre thread.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFileAsync (address As Uri, fileName As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFileAsync(Uri ^ address, System::String ^ fileName, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.DownloadFileAsync : Uri * string * obj -&gt; unit" Usage="webClient.DownloadFileAsync (address, fileName, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à télécharger.</param>
        <param name="fileName">Nom du fichier à placer sur l'ordinateur local.</param>
        <param name="userToken">Objet défini par l'utilisateur, passé à la fin de l'opération asynchrone à la méthode appelée.</param>
        <summary>Télécharge, vers un fichier local, la ressource ayant l'URI spécifié. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode télécharge la ressource à l’URI spécifié dans le `address` paramètre. Lorsque le téléchargement terminé, le fichier téléchargé est nommé `fileName` sur l’ordinateur local. Le fichier est téléchargé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le fichier est disponible, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.DownloadFileCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant le téléchargement de la ressource. Pour bloquer en attendant la fin du téléchargement, utilisez une de la <xref:System.Net.WebClient.DownloadFile%2A> méthodes.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne spécifie pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Lorsque vous utilisez cette méthode dans une page ASP.NET, vous recevrez une erreur si la page s’exécute sous le compte n’a pas d’autorisation d’accès au fichier local.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
        <exception cref="T:System.InvalidOperationException">Le fichier local spécifié par <paramref name="fileName" /> est utilisé par un autre thread.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadFileCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadFileCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ DownloadFileCompleted;" />
      <MemberSignature Language="F#" Value="member this.DownloadFileCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.DownloadFileCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors d'une opération asynchrone de téléchargement de fichiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois qu'une opération de téléchargement de fichier asynchrone se termine. Téléchargements de fichier asynchrones sont démarrés en appelant le <xref:System.Net.WebClient.DownloadFileAsync%2A> méthodes.  
  
 Le <xref:System.ComponentModel.AsyncCompletedEventHandler> est le délégué de cet événement. Le <xref:System.ComponentModel.AsyncCompletedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFileTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge la ressource spécifiée dans un fichier local en tant qu'opération asynchrone à l'aide d'un objet de tâche. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadFileTaskAsync (address As String, fileName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ DownloadFileTaskAsync(System::String ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFileTaskAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="webClient.DownloadFileTaskAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à télécharger.</param>
        <param name="fileName">Nom du fichier à placer sur l'ordinateur local.</param>
        <summary>Télécharge la ressource spécifiée dans un fichier local en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task> objet se termine une fois que la ressource de données a été téléchargée.  
  
 Cette méthode télécharge la ressource à l’URI spécifié dans le `address` paramètre. Lorsque le téléchargement terminé, le fichier téléchargé est nommé `fileName` sur l’ordinateur local. Le fichier est téléchargé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne spécifie pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Lorsque vous utilisez cette méthode dans une page ASP.NET, vous recevrez une erreur si la page s’exécute sous le compte n’a pas d’autorisation d’accès au fichier local.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
        <exception cref="T:System.InvalidOperationException">Le fichier local spécifié par <paramref name="fileName" /> est utilisé par un autre thread.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadFileTaskAsync (address As Uri, fileName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ DownloadFileTaskAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFileTaskAsync : Uri * string -&gt; System.Threading.Tasks.Task" Usage="webClient.DownloadFileTaskAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à télécharger.</param>
        <param name="fileName">Nom du fichier à placer sur l'ordinateur local.</param>
        <summary>Télécharge la ressource spécifiée dans un fichier local en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task> objet se termine une fois que la ressource de données a été téléchargée.  
  
 Cette méthode télécharge la ressource à l’URI spécifié dans le `address` paramètre. Lorsque le téléchargement terminé, le fichier téléchargé est nommé `fileName` sur l’ordinateur local. Le fichier est téléchargé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne spécifie pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Lorsque vous utilisez cette méthode dans une page ASP.NET, vous recevrez une erreur si la page s’exécute sous le compte n’a pas d’autorisation d’accès au fichier local.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
        <exception cref="T:System.InvalidOperationException">Le fichier local spécifié par <paramref name="fileName" /> est utilisé par un autre thread.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadProgressChanged As DownloadProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::DownloadProgressChangedEventHandler ^ DownloadProgressChanged;" />
      <MemberSignature Language="F#" Value="member this.DownloadProgressChanged : System.Net.DownloadProgressChangedEventHandler " Usage="member this.DownloadProgressChanged : System.Net.DownloadProgressChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération de téléchargement asynchrone transfère avec succès une partie ou l'ensemble des données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois qu’un téléchargement asynchrone est en cours. Cet événement est déclenché lorsque les téléchargements sont démarrés en utilisant l’une des méthodes suivantes.  
  
|Méthode|Description |  
|------------|-----------------|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Télécharge des données à partir d’une ressource et retourne un <xref:System.Byte> tableau, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Télécharge des données à partir d’une ressource dans un fichier local, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|Retourne les données à partir d’une ressource, sans bloquer le thread appelant.|  
  
 Le <xref:System.Net.DownloadProgressChangedEventHandler> est le délégué de cet événement. Le <xref:System.Net.DownloadProgressChangedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
> [!NOTE]
>  Un transfert de fichiers FTP passif affichera toujours un pourcentage de progression de zéro, dans la mesure où le serveur n’a pas envoyé de la taille du fichier. Pour afficher la progression, vous pouvez modifier la connexion FTP à l’état actif, en substituant le <xref:System.Net.WebClient.GetWebRequest%2A> méthode virtuelle :  
  
```csharp  
internal class MyWebClient : WebClient
{  
    protected override WebRequest GetWebRequest(Uri address)
    {  
        FtpWebRequest req = (FtpWebRequest)base.GetWebRequest(address);  
        req.UsePassive = false;  
        return req;  
    }  
}  
```  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 L’exemple de code suivant illustre une implémentation d’un gestionnaire pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge la ressource demandée en tant que <see cref="T:System.String" />. La ressource à télécharger peut être spécifiée comme <see cref="T:System.String" /> contenant l'URI ou comme <see cref="T:System.Uri" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadString (address As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ DownloadString(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadString : string -&gt; string" Usage="webClient.DownloadString address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.String" /> contenant l'URI à télécharger.</param>
        <summary>Télécharge la ressource demandée en tant que <see cref="T:System.String" />. La ressource à télécharger est spécifiée comme <see cref="T:System.String" /> contenant l'URI.</summary>
        <returns>
          <see cref="T:System.String" /> contenant la ressource demandée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode récupère la ressource spécifiée. Une fois la ressource téléchargée, la méthode utilise l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété pour convertir la ressource à un <xref:System.String>. Cette méthode se bloque lors du téléchargement de la ressource. Pour télécharger une ressource et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.DownloadStringAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’appel de cette méthode.  
  
 [!code-cpp[NCLWebClientAsync#25](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#25)]
 [!code-csharp[NCLWebClientAsync#25](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#25)]
 [!code-vb[NCLWebClientAsync#25](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
        <exception cref="T:System.NotSupportedException">La méthode a été appelée sur plusieurs threads simultanément.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadString (address As Uri) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ DownloadString(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadString : Uri -&gt; string" Usage="webClient.DownloadString address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Objet <see cref="T:System.Uri" /> contenant l'URI à télécharger.</param>
        <summary>Télécharge la ressource demandée en tant que <see cref="T:System.String" />. La ressource à télécharge est spécifiée comme <see cref="T:System.Uri" />.</summary>
        <returns>
          <see cref="T:System.String" /> contenant la ressource demandée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode récupère la ressource spécifiée. Une fois la ressource téléchargée, la méthode utilise l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété pour convertir la ressource à un <xref:System.String>. Cette méthode se bloque lors du téléchargement de la ressource. Pour télécharger une ressource et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.DownloadStringAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
        <exception cref="T:System.NotSupportedException">La méthode a été appelée sur plusieurs threads simultanément.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadStringAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge la ressource spécifiée en tant que <see cref="T:System.String" /> ou <see cref="T:System.Uri" />. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadStringAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadStringAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadStringAsync : Uri -&gt; unit" Usage="webClient.DownloadStringAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" /> contenant l'URI à télécharger.</param>
        <summary>Télécharge la ressource spécifiée en tant que <see cref="T:System.Uri" />. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ressource est téléchargée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Après avoir téléchargé la ressource, cette méthode utilise l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété pour convertir la ressource à un <xref:System.String>. Cette méthode ne bloque pas le thread appelant pendant le téléchargement de la ressource. Pour télécharger une ressource et un bloc en attendant la réponse du serveur, utilisez le <xref:System.Net.WebClient.DownloadString%2A> (méthode). Lorsque le téléchargement terminé, le <xref:System.Net.WebClient.DownloadStringCompleted> événement est déclenché. Votre application doit gérer cet événement pour recevoir une notification. La chaîne téléchargée est disponible dans le <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> propriété.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadStringAsync (address As Uri, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadStringAsync(Uri ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.DownloadStringAsync : Uri * obj -&gt; unit" Usage="webClient.DownloadStringAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" /> contenant l'URI à télécharger.</param>
        <param name="userToken">Objet défini par l'utilisateur, passé à la fin de l'opération asynchrone à la méthode appelée.</param>
        <summary>Télécharge la chaîne spécifiée vers la ressource spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ressource est téléchargée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Après avoir téléchargé la ressource, cette méthode utilise l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété pour convertir la ressource à un <xref:System.String>. Cette méthode ne bloque pas le thread appelant pendant le téléchargement de la ressource. Pour télécharger une ressource et un bloc en attendant la réponse du serveur, utilisez le <xref:System.Net.WebClient.DownloadString%2A> (méthode). Lorsque le téléchargement terminé, le <xref:System.Net.WebClient.DownloadStringCompleted> événement est déclenché. Votre application doit gérer cet événement pour recevoir une notification. La chaîne téléchargée est disponible dans le <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> propriété.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadStringCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadStringCompleted As DownloadStringCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::DownloadStringCompletedEventHandler ^ DownloadStringCompleted;" />
      <MemberSignature Language="F#" Value="member this.DownloadStringCompleted : System.Net.DownloadStringCompletedEventHandler " Usage="member this.DownloadStringCompleted : System.Net.DownloadStringCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors d'une opération asynchrone de téléchargement de ressources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois une opération asynchrone pour télécharger une ressource sous forme de chaîne se termine. Ces opérations sont démarrées en appelant le <xref:System.Net.WebClient.DownloadStringAsync%2A> méthodes.  
  
 Le <xref:System.Net.DownloadStringCompletedEventHandler> est le délégué de cet événement. Le <xref:System.Net.DownloadStringCompletedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#28](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#28)]
 [!code-csharp[NCLWebClientAsync#28](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#28)]
 [!code-vb[NCLWebClientAsync#28](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadStringTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge la ressource en tant que <see cref="T:System.String" /> à partir de l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.  Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadStringTaskAsync (address As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ DownloadStringTaskAsync(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadStringTaskAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.DownloadStringTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à télécharger.</param>
        <summary>Télécharge la ressource en tant que <see cref="T:System.String" /> à partir de l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant la ressource téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la ressource de données a été téléchargée.  La ressource est téléchargée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Après avoir téléchargé la ressource, cette méthode utilise l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété pour convertir la ressource à un <xref:System.String>. Cette méthode ne bloque pas le thread appelant pendant le téléchargement de la ressource.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
 Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadStringTaskAsync (address As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ DownloadStringTaskAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadStringTaskAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.DownloadStringTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à télécharger.</param>
        <summary>Télécharge la ressource en tant que <see cref="T:System.String" /> à partir de l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant la ressource téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la ressource de données a été téléchargée. La ressource est téléchargée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Après avoir téléchargé la ressource, cette méthode utilise l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété pour convertir la ressource à un <xref:System.String>. Cette méthode ne bloque pas le thread appelant pendant le téléchargement de la ressource.  
  
 Vous pouvez utiliser la <xref:System.Net.WebClient.CancelAsync%2A> méthode pour annuler des opérations asynchrones qui ne sont pas terminées.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
 Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Net.WebClient.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient et définit le <see cref="T:System.Text.Encoding" /> utilisé pour transférer et télécharger des chaînes.</summary>
        <value>
          <see cref="T:System.Text.Encoding" /> qui est utilisé pour encoder des chaînes. La valeur par défaut de cette propriété est l'encodage retourné par <see cref="P:System.Text.Encoding.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadString%2A> et <xref:System.Net.WebClient.UploadStringAsync%2A> méthodes utilisent cette propriété pour convertir la chaîne spécifiée à un <xref:System.Byte> tableau avant de charger la chaîne. Pour plus d’informations, consultez le <xref:System.Text.Encoding.GetBytes%2A> (méthode).  
  
 Lors du téléchargée d’une chaîne à l’aide de la <xref:System.Net.WebClient.DownloadString%2A> ou <xref:System.Net.WebClient.DownloadStringAsync%2A> méthodes, <xref:System.Net.WebClient> utilise le <xref:System.Text.Encoding> retourné par cette conversion téléchargées <xref:System.Byte> tableau en une chaîne. Pour plus d’informations, consultez le <xref:System.Text.Encoding.GetString%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition de la valeur de cette propriété.  
  
 [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebRequest GetWebRequest (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebRequest(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebRequest (address As Uri) As WebRequest" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebRequest ^ GetWebRequest(Uri ^ address);" />
      <MemberSignature Language="F#" Value="abstract member GetWebRequest : Uri -&gt; System.Net.WebRequest&#xA;override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="webClient.GetWebRequest address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" /> qui identifie la ressource à demander.</param>
        <summary>Retourne un objet <see cref="T:System.Net.WebRequest" /> pour la ressource spécifiée.</summary>
        <returns>Nouvel objet <see cref="T:System.Net.WebRequest" /> pour la ressource spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode copie existant <xref:System.Net.WebClient.Headers%2A>, <xref:System.Net.WebClient.Credentials%2A>et la méthode à nouvellement créé <xref:System.Net.WebRequest> objet.  
  
 Cette méthode peut être appelée uniquement par les classes qui héritent de <xref:System.Net.WebClient>. Il est fourni afin de donner les héritiers accès sous-jacentes <xref:System.Net.WebRequest> objet. Classes dérivées doivent appeler l’implémentation de classe de base de <xref:System.Net.WebClient.GetWebRequest%2A> pour garantir que la méthode fonctionne comme prévu.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#1)]
 [!code-csharp[NCLCustomWebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetWebResponse">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne le <see cref="T:System.Net.WebResponse" /> pour le <see cref="T:System.Net.WebRequest" /> spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebResponse (request As WebRequest) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebResponse ^ GetWebResponse(System::Net::WebRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetWebResponse : System.Net.WebRequest -&gt; System.Net.WebResponse&#xA;override this.GetWebResponse : System.Net.WebRequest -&gt; System.Net.WebResponse" Usage="webClient.GetWebResponse request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <see cref="T:System.Net.WebRequest" /> qui est utilisé pour obtenir la réponse.</param>
        <summary>Retourne le <see cref="T:System.Net.WebResponse" /> pour le <see cref="T:System.Net.WebRequest" /> spécifié.</summary>
        <returns>
          <see cref="T:System.Net.WebResponse" /> contenant la réponse du <see cref="T:System.Net.WebRequest" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objet retourné par cette méthode est obtenu en appelant le <xref:System.Net.WebRequest.GetResponse%2A> méthode spécifiées <xref:System.Net.WebRequest> objet.  
  
 Cette méthode peut être appelée uniquement par les classes qui héritent de <xref:System.Net.WebClient>. Il est fourni afin de donner les héritiers accès sous-jacentes <xref:System.Net.WebResponse> objet.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#2)]
 [!code-csharp[NCLCustomWebClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request, class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebResponse (request As WebRequest, result As IAsyncResult) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebResponse ^ GetWebResponse(System::Net::WebRequest ^ request, IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member GetWebResponse : System.Net.WebRequest * IAsyncResult -&gt; System.Net.WebResponse&#xA;override this.GetWebResponse : System.Net.WebRequest * IAsyncResult -&gt; System.Net.WebResponse" Usage="webClient.GetWebResponse (request, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="request">
          <see cref="T:System.Net.WebRequest" /> qui est utilisé pour obtenir la réponse.</param>
        <param name="result">Objet <see cref="T:System.IAsyncResult" /> obtenu d'un appel précédent à <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />.</param>
        <summary>Retourne <see cref="T:System.Net.WebResponse" /> pour le <see cref="T:System.Net.WebRequest" /> spécifié à l'aide du <see cref="T:System.IAsyncResult" /> spécifié.</summary>
        <returns>
          <see cref="T:System.Net.WebResponse" /> contenant la réponse du <see cref="T:System.Net.WebRequest" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objet retourné par cette méthode est obtenu en appelant le <xref:System.Net.WebRequest.EndGetResponse%2A> méthode spécifiées <xref:System.Net.WebRequest> objet.  
  
 Cette méthode peut être appelée uniquement par les classes qui héritent de <xref:System.Net.WebClient>. Il est fourni afin de donner les héritiers accès sous-jacentes <xref:System.Net.WebResponse> objet.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#3)]
 [!code-csharp[NCLCustomWebClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Headers" />
      <MemberSignature Language="VB.NET" Value="Public Property Headers As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::WebHeaderCollection ^ Headers { System::Net::WebHeaderCollection ^ get(); void set(System::Net::WebHeaderCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Headers : System.Net.WebHeaderCollection with get, set" Usage="System.Net.WebClient.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une collection de paires nom/valeur d'en-tête associées à la requête.</summary>
        <value>
          <see cref="T:System.Net.WebHeaderCollection" /> contenant les paires nom/valeur d'en-tête associées à cette demande.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.Headers%2A> propriété contient un <xref:System.Net.WebHeaderCollection> instance qui contient les en-têtes de protocole qui le <xref:System.Net.WebClient> envoie avec la demande.  
  
 Certains en-têtes communs sont considérés comme restreints et sont protégés par le système et ne peut pas être définie ou modifiée dans un <xref:System.Net.WebHeaderCollection> objet. Toute tentative pour définir un de ces en-têtes restreints dans la <xref:System.Net.WebHeaderCollection> objet associé à un <xref:System.Net.WebClient> objet lève une exception plus tard lorsque vous tentez d’envoyer le <xref:System.Net.WebClient> demande.  
  
 Les en-têtes restreints protégés par le système incluent, mais ne sont pas limités à ce qui suit :  
  
-   Date  
  
-   Hôte  
  
 De plus, d’autres en-têtes sont également restreints lorsque vous utilisez un <xref:System.Net.WebClient> objet. Ces en-têtes restreints incluent, mais ne sont pas limités à ce qui suit :  
  
-   Accepter  
  
-   Connexion  
  
-   Content-Length  
  
-   Attendez (lorsque la valeur est définie sur « 100-continue »  
  
-   If-Modified-Since  
  
-   Plage  
  
-   Codage de transfert  
  
 Le <xref:System.Net.HttpWebRequest> classe a des propriétés pour définir les en-têtes ci-dessus. S’il est important pour une application de définir ces en-têtes, puis le <xref:System.Net.HttpWebRequest> classe doit être utilisée à la place de la <xref:System.Net.WebRequest> classe.  
  
 Vous ne devez pas supposer que les valeurs d’en-tête resteront inchangées, car les serveurs Web et les caches peuvent modifier ou ajouter des en-têtes à une requête Web.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Net.WebClient.Headers%2A> collection pour définir le protocole HTTP `Content-Type` en-tête à `application/x-www-form-urlencoded,` pour notifier le serveur qui forment des données est attaché à la publication.  
  
 [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.WebRequest.Headers" />
        <altmember cref="P:System.Net.HttpWebRequest.Headers" />
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.Net.WebClient.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Détermine si une demande Web est en cours.</summary>
        <value>
          <see langword="true" /> si la demande Web est toujours en cours ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadDataCompleted (System.Net.DownloadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadDataCompleted(class System.Net.DownloadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadDataCompleted (e As DownloadDataCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadDataCompleted(System::Net::DownloadDataCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDownloadDataCompleted : System.Net.DownloadDataCompletedEventArgs -&gt; unit&#xA;override this.OnDownloadDataCompleted : System.Net.DownloadDataCompletedEventArgs -&gt; unit" Usage="webClient.OnDownloadDataCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.DownloadDataCompletedEventArgs" /> qui contient les données d’événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.DownloadDataCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.DownloadDataCompleted> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md)  
  
 La méthode <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#4)]
 [!code-csharp[NCLCustomWebClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadFileCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadFileCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadFileCompleted (e As AsyncCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadFileCompleted(System::ComponentModel::AsyncCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDownloadFileCompleted : System.ComponentModel.AsyncCompletedEventArgs -&gt; unit&#xA;override this.OnDownloadFileCompleted : System.ComponentModel.AsyncCompletedEventArgs -&gt; unit" Usage="webClient.OnDownloadFileCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.DownloadFileCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.DownloadFileCompleted> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#5)]
 [!code-csharp[NCLCustomWebClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadProgressChanged (System.Net.DownloadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadProgressChanged(class System.Net.DownloadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadProgressChanged (e As DownloadProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadProgressChanged(System::Net::DownloadProgressChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDownloadProgressChanged : System.Net.DownloadProgressChangedEventArgs -&gt; unit&#xA;override this.OnDownloadProgressChanged : System.Net.DownloadProgressChangedEventArgs -&gt; unit" Usage="webClient.OnDownloadProgressChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.DownloadProgressChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.DownloadProgressChanged> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#12)]
 [!code-csharp[NCLCustomWebClient#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadStringCompleted (System.Net.DownloadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadStringCompleted(class System.Net.DownloadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadStringCompleted (e As DownloadStringCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadStringCompleted(System::Net::DownloadStringCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDownloadStringCompleted : System.Net.DownloadStringCompletedEventArgs -&gt; unit&#xA;override this.OnDownloadStringCompleted : System.Net.DownloadStringCompletedEventArgs -&gt; unit" Usage="webClient.OnDownloadStringCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.DownloadStringCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.DownloadStringCompleted> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#6)]
 [!code-csharp[NCLCustomWebClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenReadCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenReadCompleted (System.Net.OpenReadCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenReadCompleted(class System.Net.OpenReadCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnOpenReadCompleted (e As OpenReadCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnOpenReadCompleted(System::Net::OpenReadCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnOpenReadCompleted : System.Net.OpenReadCompletedEventArgs -&gt; unit&#xA;override this.OnOpenReadCompleted : System.Net.OpenReadCompletedEventArgs -&gt; unit" Usage="webClient.OnOpenReadCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenReadCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.OpenReadCompletedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.OpenReadCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.OpenReadCompleted> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnOpenReadCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#7)]
 [!code-csharp[NCLCustomWebClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenWriteCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenWriteCompleted (System.Net.OpenWriteCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenWriteCompleted(class System.Net.OpenWriteCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnOpenWriteCompleted (e As OpenWriteCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnOpenWriteCompleted(System::Net::OpenWriteCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnOpenWriteCompleted : System.Net.OpenWriteCompletedEventArgs -&gt; unit&#xA;override this.OnOpenWriteCompleted : System.Net.OpenWriteCompletedEventArgs -&gt; unit" Usage="webClient.OnOpenWriteCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenWriteCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.OpenWriteCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.OpenWriteCompleted> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#8)]
 [!code-csharp[NCLCustomWebClient#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadDataCompleted (System.Net.UploadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadDataCompleted(class System.Net.UploadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadDataCompleted (e As UploadDataCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadDataCompleted(System::Net::UploadDataCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadDataCompleted : System.Net.UploadDataCompletedEventArgs -&gt; unit&#xA;override this.OnUploadDataCompleted : System.Net.UploadDataCompletedEventArgs -&gt; unit" Usage="webClient.OnUploadDataCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.UploadDataCompletedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.UploadDataCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.UploadDataCompleted> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnUploadDataCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#9)]
 [!code-csharp[NCLCustomWebClient#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadFileCompleted (System.Net.UploadFileCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadFileCompleted(class System.Net.UploadFileCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadFileCompleted (e As UploadFileCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadFileCompleted(System::Net::UploadFileCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadFileCompleted : System.Net.UploadFileCompletedEventArgs -&gt; unit&#xA;override this.OnUploadFileCompleted : System.Net.UploadFileCompletedEventArgs -&gt; unit" Usage="webClient.OnUploadFileCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadFileCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.UploadFileCompletedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.UploadFileCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.UploadFileCompleted> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnUploadFileCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#10)]
 [!code-csharp[NCLCustomWebClient#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadProgressChanged (System.Net.UploadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadProgressChanged(class System.Net.UploadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadProgressChanged (e As UploadProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadProgressChanged(System::Net::UploadProgressChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadProgressChanged : System.Net.UploadProgressChangedEventArgs -&gt; unit&#xA;override this.OnUploadProgressChanged : System.Net.UploadProgressChangedEventArgs -&gt; unit" Usage="webClient.OnUploadProgressChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.UploadProgressChangedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.UploadProgressChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.UploadProgressChanged> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnUploadProgressChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#13)]
 [!code-csharp[NCLCustomWebClient#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#13)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadStringCompleted (System.Net.UploadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadStringCompleted(class System.Net.UploadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadStringCompleted (e As UploadStringCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadStringCompleted(System::Net::UploadStringCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadStringCompleted : System.Net.UploadStringCompletedEventArgs -&gt; unit&#xA;override this.OnUploadStringCompleted : System.Net.UploadStringCompletedEventArgs -&gt; unit" Usage="webClient.OnUploadStringCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.UploadStringCompletedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.UploadStringCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.UploadStringCompleted> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnUploadStringCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#11)]
 [!code-csharp[NCLCustomWebClient#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadValuesCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadValuesCompleted (System.Net.UploadValuesCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadValuesCompleted(class System.Net.UploadValuesCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadValuesCompleted (e As UploadValuesCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadValuesCompleted(System::Net::UploadValuesCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadValuesCompleted : System.Net.UploadValuesCompletedEventArgs -&gt; unit&#xA;override this.OnUploadValuesCompleted : System.Net.UploadValuesCompletedEventArgs -&gt; unit" Usage="webClient.OnUploadValuesCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadValuesCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.UploadValuesCompletedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.UploadValuesCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui héritent de cette classe peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <xref:System.Net.WebClient.UploadValuesCompleted> événement se produit.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de cette méthode qui peut être personnalisée par une classe dérivée de <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#14)]
 [!code-csharp[NCLCustomWebClient#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#14)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnWriteStreamClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnWriteStreamClosed (System.Net.WriteStreamClosedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWriteStreamClosed(class System.Net.WriteStreamClosedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWriteStreamClosed (e As WriteStreamClosedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWriteStreamClosed(System::Net::WriteStreamClosedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWriteStreamClosed : System.Net.WriteStreamClosedEventArgs -&gt; unit&#xA;override this.OnWriteStreamClosed : System.Net.WriteStreamClosedEventArgs -&gt; unit" Usage="webClient.OnWriteStreamClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.WriteStreamClosedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.Net.WriteStreamClosedEventArgs" /> contenant des données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Net.WebClient.WriteStreamClosed" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenRead">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ouvre un flux lisible pour les données téléchargées à partir d'une ressource ayant l'URI spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenRead (address As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenRead(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenRead : string -&gt; System.IO.Stream" Usage="webClient.OpenRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI spécifié en tant que <see cref="T:System.String" />, à partir duquel télécharger des données.</param>
        <summary>Ouvre un flux accessible en lecture pour les données téléchargées à partir d'une ressource ayant l'URI spécifié en tant que <see cref="T:System.String" />.</summary>
        <returns>
          <see cref="T:System.IO.Stream" /> utilisé pour lire des données d'une ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.OpenRead%2A> méthode crée un <xref:System.IO.Stream> instance utilisée pour lire le contenu de la ressource spécifiée par le `address` paramètre. Cette méthode se bloque lors de l’ouverture du flux. Pour continuer l’exécution en attendant que le flux de données, utilisez une de la <xref:System.Net.WebClient.OpenReadAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas `null`, celle-ci est ajoutée aux `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> une fois terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant ouvre la ressource identifiée par `uriString` et affiche les résultats dans la console système. Notez que le <xref:System.IO.Stream> retourné par <xref:System.Net.WebClient.OpenRead%2A> est fermé lorsque les données ont été lues.  
  
 [!code-cpp[WebClient_OpenRead#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenRead/CPP/webclient_openread.cpp#1)]
 [!code-csharp[WebClient_OpenRead#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenRead/CS/webclient_openread.cs#1)]
 [!code-vb[WebClient_OpenRead#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenRead/VB/webclient_openread.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de données.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenRead (address As Uri) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenRead(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenRead : Uri -&gt; System.IO.Stream" Usage="webClient.OpenRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">URI spécifié en tant que <see cref="T:System.Uri" />, à partir duquel télécharger des données.</param>
        <summary>Ouvre un flux accessible en lecture pour les données téléchargées à partir d'une ressource ayant l'URI spécifié en tant que <see cref="T:System.Uri" />.</summary>
        <returns>
          <see cref="T:System.IO.Stream" /> utilisé pour lire des données d'une ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.OpenRead%2A> méthode crée un <xref:System.IO.Stream> instance utilisée pour lire le contenu de la ressource spécifiée par le `address` paramètre. Cette méthode se bloque lors de l’ouverture du flux. Pour continuer l’exécution en attendant que le flux de données, utilisez une de la <xref:System.Net.WebClient.OpenReadAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas `null`, celle-ci est ajoutée aux `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> une fois terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
 **Remarque** ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de données.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenReadAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ouvre un flux accessible en lecture et contenant la ressource spécifiée. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenReadAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenReadAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenReadAsync : Uri -&gt; unit" Usage="webClient.OpenReadAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à récupérer.</param>
        <summary>Ouvre un flux accessible en lecture et contenant la ressource spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode récupère un <xref:System.IO.Stream> instance utilisée pour accéder à la ressource spécifiée par le `address` paramètre. Le flux est obtenu à l’aide de ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le flux est disponible, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.OpenReadCompleted> événement.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> lorsque vous avez terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
 Cette méthode ne bloque pas le thread appelant pendant que l’ouverture du flux. Pour bloquer en attendant le flux de données, utilisez le <xref:System.Net.WebClient.OpenReadAsync%2A> (méthode).  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne spécifie pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu de la ressource demandée. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas `null`, celle-ci est ajoutée aux `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en associant <see cref="P:System.Net.WebClient.BaseAddress" /> et l'adresse n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenReadAsync (address As Uri, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenReadAsync(Uri ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.OpenReadAsync : Uri * obj -&gt; unit" Usage="webClient.OpenReadAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à récupérer.</param>
        <param name="userToken">Objet défini par l'utilisateur, passé à la fin de l'opération asynchrone à la méthode appelée.</param>
        <summary>Ouvre un flux accessible en lecture et contenant la ressource spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode récupère un <xref:System.IO.Stream> instance utilisée pour accéder à la ressource spécifiée par le `address` paramètre. Le flux est obtenu à l’aide de ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le flux est disponible, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.OpenReadCompleted> événement.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> lorsque vous avez terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
 Cette méthode ne bloque pas le thread appelant pendant que l’ouverture du flux. Pour bloquer en attendant le flux de données, utilisez le <xref:System.Net.WebClient.OpenRead%2A> (méthode).  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne spécifie pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu de la ressource demandée. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas `null`, celle-ci est ajoutée aux `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en associant <see cref="P:System.Net.WebClient.BaseAddress" /> et l'adresse n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenReadCompletedEventHandler OpenReadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenReadCompletedEventHandler OpenReadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenReadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OpenReadCompleted As OpenReadCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::OpenReadCompletedEventHandler ^ OpenReadCompleted;" />
      <MemberSignature Language="F#" Value="member this.OpenReadCompleted : System.Net.OpenReadCompletedEventHandler " Usage="member this.OpenReadCompleted : System.Net.OpenReadCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenReadCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors d'une opération asynchrone d'ouverture d'un flux contenant une ressource.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois une opération asynchrone d’ouverture d’un flux contenant une ressource. Ces opérations sont démarrées en appelant le <xref:System.Net.WebClient.OpenReadAsync%2A> méthodes.  
  
 Le <xref:System.Net.OpenReadCompletedEventHandler> est le délégué de cet événement. Le <xref:System.Net.OpenReadCompletedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#30](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#30)]
 [!code-csharp[NCLWebClientAsync#30](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#30)]
 [!code-vb[NCLWebClientAsync#30](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenReadTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ouvre un flux accessible en lecture contenant la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenReadTaskAsync (address As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenReadTaskAsync(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenReadTaskAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenReadTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à récupérer.</param>
        <summary>Ouvre un flux accessible en lecture contenant la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.IO.Stream" /> utilisé pour lire les données d'une ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après le flux accessible en lecture à la ressource de données a été ouverte. Cette méthode ne bloque pas le thread appelant pendant que l’ouverture du flux.  
  
 Cette méthode récupère un <xref:System.IO.Stream> instance utilisée pour accéder à la ressource spécifiée par le `address` paramètre. Le flux est obtenu à l’aide de ressources de thread automatiquement allouées à partir du pool de threads.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> lorsque vous avez terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne spécifie pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu de la ressource demandée. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas `null`, celle-ci est ajoutée aux `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en associant <see cref="P:System.Net.WebClient.BaseAddress" /> et l'adresse n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenReadTaskAsync (address As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenReadTaskAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenReadTaskAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenReadTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource à récupérer.</param>
        <summary>Ouvre un flux accessible en lecture contenant la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.IO.Stream" /> utilisé pour lire les données d'une ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après le flux accessible en lecture à la ressource de données a été ouverte. Cette méthode ne bloque pas le thread appelant pendant que l’ouverture du flux.  
  
 Cette méthode récupère un <xref:System.IO.Stream> instance utilisée pour accéder à la ressource spécifiée par le `address` paramètre. Le flux est obtenu à l’aide de ressources de thread automatiquement allouées à partir du pool de threads.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> lorsque vous avez terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne spécifie pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu de la ressource demandée. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas `null`, celle-ci est ajoutée aux `address`.  
  
 Cette méthode utilise la commande RETR pour télécharger une ressource FTP. Pour une ressource HTTP, la méthode GET est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en associant <see cref="P:System.Net.WebClient.BaseAddress" /> et l'adresse n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors du téléchargement de la ressource.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenWrite">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ouvre un flux lisible permettant d'écrire les données téléchargées sur une ressource ayant l'URI spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWrite : string -&gt; System.IO.Stream" Usage="webClient.OpenWrite address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée.</summary>
        <returns>
          <see cref="T:System.IO.Stream" /> utilisé pour écrire les données sur la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.OpenWrite%2A> méthode retourne un flux accessible en écriture qui est utilisé pour envoyer des données à une ressource. Cette méthode se bloque lors de l’ouverture du flux. Pour continuer l’exécution en attendant que le flux de données, utilisez une de la <xref:System.Net.WebClient.OpenWriteAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant lit les données à partir de la ligne de commande et utilise <xref:System.Net.WebClient.OpenWrite%2A> pour obtenir un flux pour écrire des données. Notez que le <xref:System.IO.Stream> retourné par <xref:System.Net.WebClient.OpenWrite%2A> est fermé une fois que les données sont envoyées.  
  
 [!code-cpp[WebClient_OpenWrite2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite2/CPP/webclient_openwrite2.cpp#1)]
 [!code-csharp[WebClient_OpenWrite2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite2/CS/webclient_openwrite2.cs#1)]
 [!code-vb[WebClient_OpenWrite2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite2/VB/webclient_openwrite2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As Uri) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWrite : Uri -&gt; System.IO.Stream" Usage="webClient.OpenWrite address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée.</summary>
        <returns>
          <see cref="T:System.IO.Stream" /> utilisé pour écrire les données sur la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.OpenWrite%2A> méthode retourne un flux accessible en écriture qui est utilisé pour envoyer des données à une ressource. Cette méthode se bloque lors de l’ouverture du flux. Pour continuer l’exécution en attendant que le flux de données, utilisez une de la <xref:System.Net.WebClient.OpenWriteAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As String, method As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(System::String ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWrite : string * string -&gt; System.IO.Stream" Usage="webClient.OpenWrite (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <summary>Ouvre un flux pour écrire des données dans la ressource spécifiée, à l'aide de la méthode spécifiée.</summary>
        <returns>
          <see cref="T:System.IO.Stream" /> utilisé pour écrire les données sur la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.OpenWrite%2A> méthode retourne un flux accessible en écriture qui est utilisé pour envoyer des données à une ressource. La requête sous-jacente est effectuée avec la méthode spécifiée dans le `method` paramètre. Les données sont envoyées au serveur lorsque vous fermez le flux de données. Cette méthode se bloque lors de l’ouverture du flux. Pour continuer l’exécution en attendant que le flux de données, utilisez une de la <xref:System.Net.WebClient.OpenWriteAsync%2A> méthodes.  
  
 Si le `method` paramètre spécifie une méthode qui n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne spécifie pas une adresse absolue, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant lit les données à partir de la ligne de commande et utilise <xref:System.Net.WebClient.OpenWrite%2A> pour obtenir un flux utilisé pour écrire les données. Notez que le <xref:System.IO.Stream> retourné par <xref:System.Net.WebClient.OpenWrite%2A> doit être fermé pour envoyer les données.  
  
 [!code-cpp[WebClient_OpenWrite#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite/CPP/webclient_openwrite.cpp#1)]
 [!code-csharp[WebClient_OpenWrite#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite/CS/webclient_openwrite.cs#1)]
 [!code-vb[WebClient_OpenWrite#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite/VB/webclient_openwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As Uri, method As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(Uri ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWrite : Uri * string -&gt; System.IO.Stream" Usage="webClient.OpenWrite (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <summary>Ouvre un flux pour écrire des données dans la ressource spécifiée en utilisant la méthode spécifiée.</summary>
        <returns>
          <see cref="T:System.IO.Stream" /> utilisé pour écrire les données sur la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.OpenWrite%2A> méthode retourne un flux accessible en écriture qui est utilisé pour envoyer des données à une ressource. Cette méthode se bloque lors de l’ouverture du flux. Pour continuer l’exécution en attendant que le flux de données, utilisez une de la <xref:System.Net.WebClient.OpenWriteAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenWriteAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenWriteAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenWriteAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteAsync : Uri -&gt; unit" Usage="webClient.OpenWriteAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode récupère un flux accessible en écriture qui est utilisé pour envoyer des données à une ressource. Le flux est récupéré à l’aide de ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le flux est disponible, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.OpenWriteCompleted> événement. Lorsque vous fermez le flux, le thread se bloque jusqu'à ce que la demande est envoyée à `address` et une réponse est reçue.  
  
 Cette méthode ne bloque pas le thread appelant pendant que le flux est ouvert. Pour bloquer en attendant le flux de données, utilisez une de la <xref:System.Net.WebClient.OpenWrite%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenWriteAsync (address As Uri, method As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenWriteAsync(Uri ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteAsync : Uri * string -&gt; unit" Usage="webClient.OpenWriteAsync (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode récupère un flux accessible en écriture qui est utilisé pour envoyer des données à une ressource. Le flux est récupéré à l’aide de ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le flux est disponible, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.OpenWriteCompleted> événement. Lorsque vous fermez le flux, le thread se bloque jusqu'à ce que la demande est envoyée à `address` et une réponse est reçue.  
  
 Cette méthode ne bloque pas le thread appelant pendant que le flux est ouvert. Pour bloquer en attendant le flux de données, utilisez une de la <xref:System.Net.WebClient.OpenWrite%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenWriteAsync (address As Uri, method As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenWriteAsync(Uri ^ address, System::String ^ method, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteAsync : Uri * string * obj -&gt; unit" Usage="webClient.OpenWriteAsync (address, method, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="userToken">Objet défini par l'utilisateur, passé à la fin de l'opération asynchrone à la méthode appelée.</param>
        <summary>Ouvre un flux pour écrire des données dans la ressource spécifiée, à l'aide de la méthode spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode récupère un flux accessible en écriture qui est utilisé pour envoyer des données à une ressource. Le flux de données est récupérée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le flux est disponible, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.OpenWriteCompleted> événement. Le contenu du flux de données est envoyé au serveur lorsque vous fermez le flux de données.  
  
 Si le `method` paramètre spécifie une méthode qui n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Cette méthode ne bloque pas le thread appelant pendant que le flux est ouvert. Pour bloquer en attendant le flux de données, utilisez une de la <xref:System.Net.WebClient.OpenWrite%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenWriteCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OpenWriteCompleted As OpenWriteCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::OpenWriteCompletedEventHandler ^ OpenWriteCompleted;" />
      <MemberSignature Language="F#" Value="member this.OpenWriteCompleted : System.Net.OpenWriteCompletedEventHandler " Usage="member this.OpenWriteCompleted : System.Net.OpenWriteCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenWriteCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors d'une opération asynchrone d'ouverture d'un flux pour écrire des données dans une ressource.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois une opération asynchrone pour ouvrir un flux qui est utilisé pour envoyer des données à une ressource. Ces opérations sont démarrées en appelant le <xref:System.Net.WebClient.OpenWriteAsync%2A> méthodes.  
  
 Le <xref:System.Net.OpenWriteCompletedEventHandler> est le délégué de cet événement. Le <xref:System.Net.OpenWriteCompletedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#14)]
 [!code-csharp[NCLWebClientAsync#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#14)]
 [!code-vb[NCLWebClientAsync#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenWriteTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteTaskAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenWriteTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.IO.Stream" /> utilisé pour écrire des données sur la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après le flux de données accessible en écriture à la ressource de données a été ouverte. Cette méthode ne bloque pas le thread appelant pendant que l’ouverture du flux.  
  
 Cette méthode récupère un <xref:System.IO.Stream> instance utilisée pour écrire des données dans la ressource spécifiée par le `address` paramètre. Le flux est obtenu à l’aide de ressources de thread automatiquement allouées à partir du pool de threads.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> lorsque vous avez terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
 Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteTaskAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenWriteTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.IO.Stream" /> utilisé pour écrire des données sur la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après le flux de données accessible en écriture à la ressource de données a été ouverte. Cette méthode ne bloque pas le thread appelant pendant que l’ouverture du flux.  
  
 Cette méthode récupère un <xref:System.IO.Stream> instance utilisée pour écrire des données dans la ressource spécifiée par le `address` paramètre. Le flux est obtenu à l’aide de ressources de thread automatiquement allouées à partir du pool de threads.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> lorsque vous avez terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
 Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As String, method As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(System::String ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteTaskAsync : string * string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenWriteTaskAsync (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.IO.Stream" /> utilisé pour écrire des données sur la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après le flux de données accessible en écriture à la ressource de données a été ouverte. Cette méthode ne bloque pas le thread appelant pendant que l’ouverture du flux.  
  
 Cette méthode récupère un <xref:System.IO.Stream> instance utilisée pour écrire des données dans la ressource spécifiée par le `address` paramètre. Le flux est obtenu à l’aide de ressources de thread automatiquement allouées à partir du pool de threads.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> lorsque vous avez terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
 Si le `method` paramètre spécifie une méthode qui n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
 Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As Uri, method As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(Uri ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteTaskAsync : Uri * string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenWriteTaskAsync (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <summary>Ouvre un flux pour l'écriture de données sur la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.IO.Stream" /> utilisé pour écrire des données sur la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après le flux de données accessible en écriture à la ressource de données a été ouverte. Cette méthode ne bloque pas le thread appelant pendant que l’ouverture du flux.  
  
 Cette méthode récupère un <xref:System.IO.Stream> instance utilisée pour écrire des données dans la ressource spécifiée par le `address` paramètre. Le flux est obtenu à l’aide de ressources de thread automatiquement allouées à partir du pool de threads.  
  
> [!NOTE]
>  Vous devez appeler <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> lorsque vous avez terminé avec le <xref:System.IO.Stream> pour éviter de manquer de ressources système.  
  
 Si le `method` paramètre spécifie une méthode qui n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
 Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IWebProxy ^ Proxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Proxy : System.Net.IWebProxy with get, set" Usage="System.Net.WebClient.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le proxy utilisé par cet objet <see cref="T:System.Net.WebClient" />.</summary>
        <value>Instance de <see cref="T:System.Net.IWebProxy" /> utilisée pour envoyer des demandes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.Proxy%2A> propriété identifie le <xref:System.Net.IWebProxy> instance qui communique avec des serveurs distants pour le compte de cela <xref:System.Net.WebClient> objet. Le proxy est défini par le système à l’aide de fichiers de configuration et les paramètres de réseau Local d’Internet Explorer. Pour spécifier qu’aucun proxy doit être utilisé, définissez la <xref:System.Net.WebClient.Proxy%2A> propriété `null`.  
  
 Pour plus d’informations sur la détection automatique du proxy, consultez [détection automatique de Proxy](~/docs/framework/network-programming/automatic-proxy-detection.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Net.WebClient.Proxy" /> a la valeur <see langword="null" />.</exception>
        <permission cref="T:System.Net.WebPermission">qui est illimitée. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Net.WebResponse" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Net.HttpWebResponse" />
        <altmember cref="T:System.Net.FtpWebRequest" />
        <altmember cref="T:System.Net.FtpWebResponse" />
        <altmember cref="T:System.Net.GlobalProxySelection" />
        <altmember cref="T:System.Net.WebProxy" />
      </Docs>
    </Member>
    <Member MemberName="QueryString">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection QueryString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection QueryString" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.QueryString" />
      <MemberSignature Language="VB.NET" Value="Public Property QueryString As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ QueryString { System::Collections::Specialized::NameValueCollection ^ get(); void set(System::Collections::Specialized::NameValueCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueryString : System.Collections.Specialized.NameValueCollection with get, set" Usage="System.Net.WebClient.QueryString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une collection de paires nom/valeur de requête associées à la demande.</summary>
        <value>
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> qui contient les paires nom/valeur de requête associées à la demande. Si aucune paire n'est associée à la demande, la valeur est un <see cref="T:System.Collections.Specialized.NameValueCollection" /> vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.QueryString%2A> propriété contient un <xref:System.Collections.Specialized.NameValueCollection> instance qui contient les paires nom/valeur qui sont ajoutées à l’URI sous la forme d’une chaîne de requête. Le contenu de la <xref:System.Net.WebClient.QueryString%2A> propriété sont précédés d’un point d’interrogation ( ?) et les paires nom/valeur sont séparées par des uns des autres par une esperluette (&).  
  
   
  
## Examples  
 L’exemple de code suivant utilise l’entrée utilisateur à partir de la ligne de commande et génère un <xref:System.Collections.Specialized.NameValueCollection> qui est affectée à la <xref:System.Net.WebClient.QueryString%2A> propriété. Il télécharge ensuite la réponse à partir du serveur dans un fichier local.  
  
 [!code-cpp[WebClient_QueryString#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_QueryString/CPP/webclient_querystring.cpp#1)]
 [!code-csharp[WebClient_QueryString#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_QueryString/CS/webclient_querystring.cs#1)]
 [!code-vb[WebClient_QueryString#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_QueryString/VB/webclient_querystring.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseHeaders">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection ResponseHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection ResponseHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.ResponseHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResponseHeaders As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::WebHeaderCollection ^ ResponseHeaders { System::Net::WebHeaderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ResponseHeaders : System.Net.WebHeaderCollection" Usage="System.Net.WebClient.ResponseHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de paires nom/valeur d'en-tête associées à la réponse.</summary>
        <value>
          <see cref="T:System.Net.WebHeaderCollection" /> qui contient des paires nom/valeur d'en-tête associées à la réponse ou <see langword="null" /> si aucune réponse n'a été reçue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.ResponseHeaders%2A> propriété contient un <xref:System.Net.WebHeaderCollection> instance contenant des informations d’en-tête de la <xref:System.Net.WebClient> reçoit avec la réponse.  
  
   
  
## Examples  
 L’exemple de code suivant télécharge et affiche le <xref:System.Net.WebClient.ResponseHeaders%2A> retourné par un serveur.  
  
 [!code-cpp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#2)]
 [!code-csharp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#2)]
 [!code-vb[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transmet une mémoire tampon de données à une ressource ayant l'URI spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As String, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(System::String ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadData : string * byte[] -&gt; byte[]" Usage="webClient.UploadData (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transmet une mémoire tampon de données à une ressource identifiée par un URI.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadData%2A> méthode envoie un tampon de données à une ressource.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée. Si la requête sous-jacente n’est pas comprise par le serveur, les classes de protocole sous-jacente déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Le <xref:System.Net.WebClient.UploadData%2A> méthode envoie le contenu de `data` au serveur sans l’encoder. Cette méthode se bloque lors du téléchargement de données. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadDataAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant convertit une chaîne entrée à partir de la console à un <xref:System.Byte> de tableau et publie le tableau sur le serveur spécifié à l’aide <xref:System.Net.WebClient.UploadData%2A>. Toute réponse du serveur s’affiche dans la console.  
  
 [!code-cpp[WebClient_UpLoadData2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData2/CPP/webclient_uploaddata2.cpp#1)]
 [!code-csharp[WebClient_UpLoadData2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData2/CS/webclient_uploaddata2.cs#1)]
 [!code-vb[WebClient_UpLoadData2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData2/VB/webclient_uploaddata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="data" /> est <see langword="null" />.  
  
- ou - 
Une erreur s'est produite lors de l'envoi des données.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As Uri, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(Uri ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadData : Uri * byte[] -&gt; byte[]" Usage="webClient.UploadData (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transmet une mémoire tampon de données à une ressource identifiée par un URI.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadData%2A> méthode envoie un tampon de données à une ressource.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée. Si la requête sous-jacente n’est pas comprise par le serveur, les classes de protocole sous-jacente déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Le <xref:System.Net.WebClient.UploadData%2A> méthode envoie le contenu de `data` au serveur sans l’encoder. Cette méthode se bloque lors du téléchargement de données. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadDataAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="data" /> est <see langword="null" />.  
  
- ou - 
Une erreur s'est produite lors de l'envoi des données.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As String, method As String, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(System::String ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadData : string * string * byte[] -&gt; byte[]" Usage="webClient.UploadData (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer les données à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transfère un tampon de données vers la ressource spécifiée, à l'aide de la méthode spécifiée.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadData%2A> méthode envoie un tampon de données à une ressource à l’aide de la méthode HTTP spécifiée dans le `method` paramètre et retourne une réponse à partir du serveur. Cette méthode se bloque lors du téléchargement de données. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadDataAsync%2A> méthodes.  
  
 Le <xref:System.Net.WebClient.UploadData%2A> méthode envoie le contenu de `data` au serveur sans l’encoder.  
  
 Si le `method` paramètre spécifie un verbe qui n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant convertit une chaîne entrée à partir de la console dans un tableau d’octets et publie le tableau sur le serveur spécifié à l’aide <xref:System.Net.WebClient.UploadData%2A>. Toute réponse du serveur s’affiche dans la console.  
  
 [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="data" /> est <see langword="null" />.  
  
- ou - 
Une erreur s'est produite lors du transfert des données.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As Uri, method As String, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadData : Uri * string * byte[] -&gt; byte[]" Usage="webClient.UploadData (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer les données à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transfère un tampon de données vers la ressource spécifiée, à l'aide de la méthode spécifiée.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadData%2A> méthode envoie un tampon de données à une ressource à l’aide de la méthode HTTP spécifiée dans le `method` paramètre et retourne une réponse à partir du serveur. Cette méthode se bloque lors du téléchargement de données. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadDataAsync%2A> méthodes.  
  
 Le <xref:System.Net.WebClient.UploadData%2A> méthode envoie le contenu de `data` au serveur sans l’encoder.  
  
 Si le `method` paramètre spécifie un verbe qui n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="data" /> est <see langword="null" />.  
  
- ou - 
Une erreur s'est produite lors du transfert des données.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadDataAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transmet une mémoire tampon de données à une ressource identifiée par un URI. Cette méthode ne bloque pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadDataAsync (address As Uri, data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadDataAsync(Uri ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataAsync : Uri * byte[] -&gt; unit" Usage="webClient.UploadDataAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transfère un tampon de données à une ressource identifiée par un URI, à l'aide de la méthode POST. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie un tampon de données à une ressource. Le tampon de données est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Les données ne sont pas encodées. Pour recevoir une notification lorsque le chargement des données est terminée, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadDataCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant l’envoi de données. Pour envoyer des données et bloquer en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadData%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadDataAsync (address As Uri, method As String, data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadDataAsync(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataAsync : Uri * string * byte[] -&gt; unit" Usage="webClient.UploadDataAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transfère un tampon de données à une ressource identifiée par un URI, à l'aide de la méthode spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie un tampon de données à une ressource. Le tampon de données est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Les données ne sont pas encodées. Pour recevoir une notification lorsque le chargement des données est terminée, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadDataCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant l’envoi de données. Pour envoyer des données et bloquer en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadData%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadDataAsync (address As Uri, method As String, data As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadDataAsync(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.UploadDataAsync : Uri * string * byte[] * obj -&gt; unit" Usage="webClient.UploadDataAsync (address, method, data, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <param name="userToken">Objet défini par l'utilisateur, passé à la fin de l'opération asynchrone à la méthode appelée.</param>
        <summary>Transfère un tampon de données à une ressource identifiée par un URI, à l'aide de la méthode et du jeton d'identification spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie un tampon de données à une ressource. Le tampon de données est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Les données ne sont pas encodées. Pour recevoir une notification lorsque le chargement des données est terminée, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadDataCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant l’envoi de données. Pour envoyer des données et bloquer en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadData%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadDataCompletedEventHandler UploadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadDataCompletedEventHandler UploadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadDataCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadDataCompleted As UploadDataCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadDataCompletedEventHandler ^ UploadDataCompleted;" />
      <MemberSignature Language="F#" Value="member this.UploadDataCompleted : System.Net.UploadDataCompletedEventHandler " Usage="member this.UploadDataCompleted : System.Net.UploadDataCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors d'une opération asynchrone de transfert de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois une opération de transfert de données asynchrone. Les transferts de données asynchrones sont démarrés en appelant le <xref:System.Net.WebClient.UploadDataAsync%2A> méthodes.  
  
 Le <xref:System.Net.UploadDataCompletedEventHandler> est le délégué de cet événement. Le <xref:System.Net.UploadDataCompletedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#36](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#36)]
 [!code-csharp[NCLWebClientAsync#36](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#36)]
 [!code-vb[NCLWebClientAsync#36](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadDataTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transfère une mémoire tampon de données qui contient un tableau <see cref="T:System.Byte" /> pour l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.  Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As String, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(System::String ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataTaskAsync : string * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadDataTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transfère une mémoire tampon de données qui contient un tableau <see cref="T:System.Byte" /> pour l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant le corps de la réponse reçue de la ressource lorsque la mémoire tampon de données a été téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après l’un tampon de données a été chargé à la ressource.  
  
 Cette méthode envoie un tampon de données à une ressource. Le tampon de données est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Les données ne sont pas encodées.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As Uri, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(Uri ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataTaskAsync : Uri * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadDataTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transfère une mémoire tampon de données qui contient un tableau <see cref="T:System.Byte" /> pour l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant le corps de la réponse reçue de la ressource lorsque la mémoire tampon de données a été téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après l’un tampon de données a été chargé à la ressource.  
  
 Cette méthode envoie un tampon de données à une ressource. Le tampon de données est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Les données ne sont pas encodées.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As String, method As String, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(System::String ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataTaskAsync : string * string * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadDataTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transfère une mémoire tampon de données qui contient un tableau <see cref="T:System.Byte" /> pour l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant le corps de la réponse reçue de la ressource lorsque la mémoire tampon de données a été téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après l’un tampon de données a été chargé à la ressource.  
  
 Cette méthode envoie un tampon de données à une ressource. Le tampon de données est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Les données ne sont pas encodées.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As Uri, method As String, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataTaskAsync : Uri * string * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadDataTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir les données.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Mémoire tampon de données à envoyer à la ressource.</param>
        <summary>Transfère une mémoire tampon de données qui contient un tableau <see cref="T:System.Byte" /> pour l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant le corps de la réponse reçue de la ressource lorsque la mémoire tampon de données a été téléchargée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se terminer après l’un tampon de données a été chargé à la ressource.  
  
 Cette méthode envoie un tampon de données à une ressource. Le tampon de données est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Les données ne sont pas encodées.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transfère un fichier local à une ressource ayant l'URI spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As String, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(System::String ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * string -&gt; byte[]" Usage="webClient.UploadFile (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier. Par exemple, ftp://localhost/samplefile.txt.</param>
        <param name="fileName">Fichier à envoyer à la ressource. Par exemple, "samplefile.txt".</param>
        <summary>Transfère le fichier local spécifié à une ressource ayant l'URI spécifié.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadFile%2A> méthode envoie un fichier local à une ressource. Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
 Cette méthode se bloque lors du téléchargement du fichier. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadFileAsync%2A> méthodes.  
  
 Le `POST` méthode est définie par HTTP. Si la requête sous-jacente n’utilise pas HTTP et `POST` n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant transfère le fichier spécifié à l’URI spécifié à l’aide <xref:System.Net.WebClient.UploadFile%2A>. Toute réponse retournée par le serveur s’affiche sur la console.  
  
 [!code-cpp[WebClient_UpLoadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile/CPP/webclient_uploadfile.cpp#1)]
 [!code-csharp[WebClient_UpLoadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile/CS/webclient_uploadfile.cs#1)]
 [!code-vb[WebClient_UpLoadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile/VB/webclient_uploadfile.vb#1)]  
  
 L’exemple de code suivant illustre une page ASP.NET capable d’accepter les fichiers publiés et convient pour une utilisation avec le <xref:System.Net.WebClient.UploadFile%2A> (méthode). La page doit résider sur un serveur Web. Son adresse fournit la valeur pour le `address` paramètre de la <xref:System.Net.WebClient.UploadFile%2A> (méthode).  
  
 [!code-aspx-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-aspx-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou n'existe pas.  
  
- ou - 
Une erreur s'est produite lors du transfert du fichier.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour accéder au fichier local. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As Uri, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : Uri * string -&gt; byte[]" Usage="webClient.UploadFile (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier. Par exemple, ftp://localhost/samplefile.txt.</param>
        <param name="fileName">Fichier à envoyer à la ressource. Par exemple, "samplefile.txt".</param>
        <summary>Transfère le fichier local spécifié à une ressource ayant l'URI spécifié.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadFile%2A> méthode envoie un fichier local à une ressource. Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
 Cette méthode se bloque lors du téléchargement du fichier. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadFileAsync%2A> méthodes.  
  
 Le `POST` méthode est définie par HTTP. Si la requête sous-jacente n’utilise pas HTTP et `POST` n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou n'existe pas.  
  
- ou - 
Une erreur s'est produite lors du transfert du fichier.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour accéder au fichier local. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As String, method As String, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(System::String ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * string * string -&gt; byte[]" Usage="webClient.UploadFile (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier.</param>
        <param name="method">Méthode utilisée pour envoyer le fichier à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="fileName">Fichier à envoyer à la ressource.</param>
        <summary>Transfère le fichier local spécifié vers la ressource spécifiée en utilisant la méthode spécifiée.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’une adresse spécifie une ressource HTTP, la <xref:System.Net.WebClient.UploadFile%2A> méthode envoie un fichier local à une ressource à l’aide de la méthode HTTP spécifiée dans le `method` paramètre et retourne une réponse à partir du serveur. Cette méthode se bloque lors du téléchargement du fichier. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadFileAsync%2A> méthodes.  
  
 Si le `method` paramètre spécifie un verbe qui n’est pas interprété par le serveur ou le `address` ressource, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant transfère le fichier spécifié à l’URI spécifié à l’aide <xref:System.Net.WebClient.UploadFile%2A>. Toute réponse retournée par le serveur s’affiche sur la console.  
  
 [!code-cpp[WebClient_UpLoadFile2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CPP/webclient_uploadfile2.cpp#1)]
 [!code-csharp[WebClient_UpLoadFile2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CS/webclient_uploadfile2.cs#1)]
 [!code-vb[WebClient_UpLoadFile2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile2/VB/webclient_uploadfile2.vb#1)]  
  
 L’exemple de code suivant illustre une page ASP.NET capable d’accepter les fichiers publiés et convient pour une utilisation avec le <xref:System.Net.WebClient.UploadFile%2A> (méthode). La page doit résider sur un serveur Web. Son adresse fournit la valeur pour le `address` paramètre de la <xref:System.Net.WebClient.UploadFile%2A> (méthode).  
  
 [!code-aspx-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-aspx-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou n'existe pas.  
  
- ou - 
Une erreur s'est produite lors du transfert du fichier.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour accéder au fichier local. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As Uri, method As String, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(Uri ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : Uri * string * string -&gt; byte[]" Usage="webClient.UploadFile (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier.</param>
        <param name="method">Méthode utilisée pour envoyer le fichier à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="fileName">Fichier à envoyer à la ressource.</param>
        <summary>Transfère le fichier local spécifié vers la ressource spécifiée en utilisant la méthode spécifiée.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’une adresse spécifie une ressource HTTP, la <xref:System.Net.WebClient.UploadFile%2A> méthode envoie un fichier local à une ressource à l’aide de la méthode HTTP spécifiée dans le `method` paramètre et retourne une réponse à partir du serveur. Cette méthode se bloque lors du téléchargement du fichier. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadFileAsync%2A> méthodes.  
  
 Si le `method` paramètre spécifie un verbe qui n’est pas interprété par le serveur ou le `address` ressource, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou n'existe pas.  
  
- ou - 
Une erreur s'est produite lors du transfert du fichier.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour accéder au fichier local. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFileAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transfère le fichier local spécifié vers la ressource spécifiée. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFileAsync (address As Uri, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFileAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileAsync : Uri * string -&gt; unit" Usage="webClient.UploadFileAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="fileName">Fichier à envoyer à la ressource.</param>
        <summary>Transfère le fichier local spécifié vers la ressource spécifiée en utilisant la méthode POST. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le fichier est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le téléchargement du fichier est terminée, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadFileCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant que le fichier est envoyé. Pour envoyer un fichier et le bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadFile%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou le chemin d'accès spécifié pour le fichier n'existe pas.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour accéder au fichier local. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFileAsync (address As Uri, method As String, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFileAsync(Uri ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileAsync : Uri * string * string -&gt; unit" Usage="webClient.UploadFileAsync (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="fileName">Fichier à envoyer à la ressource.</param>
        <summary>Transfère le fichier local spécifié vers la ressource spécifiée en utilisant la méthode POST. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le fichier est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le téléchargement du fichier est terminée, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadFileCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant que le fichier est envoyé. Pour envoyer un fichier et le bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadFile%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou le chemin d'accès spécifié pour le fichier n'existe pas.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour accéder au fichier local. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFileAsync (address As Uri, method As String, fileName As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFileAsync(Uri ^ address, System::String ^ method, System::String ^ fileName, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.UploadFileAsync : Uri * string * string * obj -&gt; unit" Usage="webClient.UploadFileAsync (address, method, fileName, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="fileName">Fichier à envoyer à la ressource.</param>
        <param name="userToken">Objet défini par l'utilisateur, passé à la fin de l'opération asynchrone à la méthode appelée.</param>
        <summary>Transfère le fichier local spécifié vers la ressource spécifiée en utilisant la méthode POST. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le fichier est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque le téléchargement du fichier est terminée, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadFileCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant que le fichier est envoyé. Pour envoyer un fichier et le bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadFile%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou le chemin d'accès spécifié pour le fichier n'existe pas.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour accéder au fichier local. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadFileCompletedEventHandler UploadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadFileCompletedEventHandler UploadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadFileCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadFileCompleted As UploadFileCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadFileCompletedEventHandler ^ UploadFileCompleted;" />
      <MemberSignature Language="F#" Value="member this.UploadFileCompleted : System.Net.UploadFileCompletedEventHandler " Usage="member this.UploadFileCompleted : System.Net.UploadFileCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadFileCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors d'une opération asynchrone de transfert de fichiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois qu'une opération de téléchargement de fichier asynchrone se termine. Téléchargements de fichier asynchrones sont démarrés en appelant le <xref:System.Net.WebClient.UploadFileAsync%2A> méthodes.  
  
 Le <xref:System.Net.UploadFileCompletedEventHandler> est le délégué de cet événement. Le <xref:System.Net.UploadFileCompletedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFileTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Télécharge le fichier local spécifié sur une ressource en tant qu'opération asynchrone à l'aide d'un objet de tâche. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As String, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(System::String ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileTaskAsync : string * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadFileTaskAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="fileName">Fichier local à envoyer à la ressource.</param>
        <summary>Télécharge le fichier local spécifié sur une ressource en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant le corps de la réponse reçue de la ressource lorsque le fichier a été téléchargé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que le fichier a été chargé à la ressource. Le fichier est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou le chemin d'accès spécifié pour le fichier n'existe pas.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As Uri, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileTaskAsync : Uri * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadFileTaskAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="fileName">Fichier local à envoyer à la ressource.</param>
        <summary>Télécharge le fichier local spécifié sur une ressource en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant le corps de la réponse reçue de la ressource lorsque le fichier a été téléchargé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que le fichier a été chargé à la ressource. Le fichier est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou le chemin d'accès spécifié pour le fichier n'existe pas.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As String, method As String, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(System::String ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileTaskAsync : string * string * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadFileTaskAsync (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="fileName">Fichier local à envoyer à la ressource.</param>
        <summary>Télécharge le fichier local spécifié sur une ressource en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant le corps de la réponse reçue de la ressource lorsque le fichier a été téléchargé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que le fichier a été chargé à la ressource. Le fichier est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 PAR défaut, cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou le chemin d'accès spécifié pour le fichier n'existe pas.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As Uri, method As String, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(Uri ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileTaskAsync : Uri * string * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadFileTaskAsync (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir le fichier. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="method">Méthode utilisée pour envoyer des données à la ressource. Si la valeur est <see langword="null" />, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="fileName">Fichier local à envoyer à la ressource.</param>
        <summary>Télécharge le fichier local spécifié sur une ressource en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> contenant le corps de la réponse reçue de la ressource lorsque le fichier a été téléchargé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que le fichier a été chargé à la ressource. Le fichier est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 PAR défaut, cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="fileName" /> est <see langword="null" />, est <see cref="F:System.String.Empty" />, contient des caractères non valides ou le chemin d'accès spécifié pour le fichier n'existe pas.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
L'en-tête <see langword="Content-type" /> commence par <see langword="multipart" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.UploadProgressChangedEventHandler UploadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadProgressChangedEventHandler UploadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadProgressChanged As UploadProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadProgressChangedEventHandler ^ UploadProgressChanged;" />
      <MemberSignature Language="F#" Value="member this.UploadProgressChanged : System.Net.UploadProgressChangedEventHandler " Usage="member this.UploadProgressChanged : System.Net.UploadProgressChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une opération de transfert asynchrone transmet avec succès une partie ou l'ensemble des données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois qu’un transfert asynchrone est en cours. Cet événement est déclenché lorsque les transferts sont démarrés en utilisant l’une des méthodes suivantes.  
  
|Méthode|Description |  
|------------|-----------------|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|Envoie un <xref:System.Byte> tableau à la ressource, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|Envoie un fichier local à la ressource, sans bloquer le thread appelant.|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Envoie un <xref:System.Collections.Specialized.NameValueCollection> à la ressource et retourne un <xref:System.Byte> tableau contenant une réponse, sans bloquer le thread appelant.|  
  
 Le <xref:System.Net.UploadProgressChangedEventHandler> est le délégué de cet événement. Le <xref:System.Net.UploadProgressChangedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 L’exemple de code suivant illustre une implémentation d’un gestionnaire pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As String, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(System::String ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadString : string * string -&gt; string" Usage="webClient.UploadString (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée en utilisant la méthode POST.</summary>
        <returns>
          <see cref="T:System.String" /> contenant la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Cette méthode se bloque pendant que la chaîne est transmise. Pour envoyer une chaîne et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadStringAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’appel de cette méthode.  
  
 [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As Uri, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(Uri ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadString : Uri * string -&gt; string" Usage="webClient.UploadString (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée en utilisant la méthode POST.</summary>
        <returns>
          <see cref="T:System.String" /> contenant la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Cette méthode se bloque pendant que la chaîne est transmise. Pour envoyer une chaîne et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadStringAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" »), et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As String, method As String, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(System::String ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadString : string * string * string -&gt; string" Usage="webClient.UploadString (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Cet URI doit identifier une ressource capable d’accepter une demande envoyée à l’aide de la méthode <c>method</c>.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer la chaîne à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée en utilisant la méthode indiquée.</summary>
        <returns>
          <see cref="T:System.String" /> contenant la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Cette méthode se bloque pendant que la chaîne est transmise. Pour envoyer une chaîne et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadStringAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’appel de cette méthode.  
  
 [!code-cpp[NCLWebClientAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#2)]
 [!code-csharp[NCLWebClientAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#2)]
 [!code-vb[NCLWebClientAsync#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As Uri, method As String, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(Uri ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadString : Uri * string * string -&gt; string" Usage="webClient.UploadString (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Cet URI doit identifier une ressource capable d’accepter une demande envoyée à l’aide de la méthode <c>method</c>.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer la chaîne à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée en utilisant la méthode indiquée.</summary>
        <returns>
          <see cref="T:System.String" /> contenant la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Cette méthode se bloque pendant que la chaîne est transmise. Pour envoyer une chaîne et poursuivre l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadStringAsync%2A> méthodes.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadStringAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadStringAsync (address As Uri, data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadStringAsync(Uri ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringAsync : Uri * string -&gt; unit" Usage="webClient.UploadStringAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie une chaîne à une ressource. La chaîne est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Pour recevoir une notification lorsque le chargement de la chaîne est terminé, vous pouvez ajouter un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadStringCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant l’envoi de la chaîne. Pour envoyer une chaîne et un bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadString%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadStringAsync (address As Uri, method As String, data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadStringAsync(Uri ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringAsync : Uri * string * string -&gt; unit" Usage="webClient.UploadStringAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer le fichier à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie une chaîne à une ressource. La chaîne est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Pour recevoir une notification lorsque le chargement de la chaîne est terminé, vous pouvez ajouter un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadStringCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant l’envoi de la chaîne. Pour envoyer une chaîne et un bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadString%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadStringAsync (address As Uri, method As String, data As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadStringAsync(Uri ^ address, System::String ^ method, System::String ^ data, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.UploadStringAsync : Uri * string * string * obj -&gt; unit" Usage="webClient.UploadStringAsync (address, method, data, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer le fichier à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Chaîne à transférer.</param>
        <param name="userToken">Objet défini par l'utilisateur, passé à la fin de l'opération asynchrone à la méthode appelée.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie une chaîne à une ressource. La chaîne est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Pour recevoir une notification lorsque le chargement de la chaîne est terminé, vous pouvez ajouter un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadStringCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant l’envoi de la chaîne. Pour envoyer une chaîne et un bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadString%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadStringCompletedEventHandler UploadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadStringCompletedEventHandler UploadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadStringCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadStringCompleted As UploadStringCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadStringCompletedEventHandler ^ UploadStringCompleted;" />
      <MemberSignature Language="F#" Value="member this.UploadStringCompleted : System.Net.UploadStringCompletedEventHandler " Usage="member this.UploadStringCompleted : System.Net.UploadStringCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors d'une opération asynchrone de transfert de chaînes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois qu'une opération de chargement asynchrone de chaîne se termine. Les téléchargements asynchrones de chaînes sont démarrés en appelant le <xref:System.Net.WebClient.UploadStringAsync%2A> méthodes.  
  
 Le <xref:System.Net.UploadStringCompletedEventHandler> est le délégué de cet événement. Le <xref:System.Net.UploadStringCompletedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition d’un gestionnaire d’événements pour cet événement.  
  
 [!code-cpp[NCLWebClientAsync#38](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#38)]
 [!code-csharp[NCLWebClientAsync#38](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#38)]
 [!code-vb[NCLWebClientAsync#38](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadStringTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As String, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(System::String ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringTaskAsync : string * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.UploadStringTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.String" /> qui contient la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la chaîne a été chargée à la ressource. La chaîne est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Cette méthode se bloque pendant que la chaîne est transmise.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As Uri, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(Uri ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringTaskAsync : Uri * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.UploadStringTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.String" /> qui contient la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la chaîne a été chargée à la ressource. La chaîne est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Cette méthode se bloque pendant que la chaîne est transmise.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As String, method As String, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(System::String ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringTaskAsync : string * string * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.UploadStringTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer le fichier à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.String" /> qui contient la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la chaîne a été chargée à la ressource. La chaîne est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Cette méthode se bloque pendant que la chaîne est transmise.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As Uri, method As String, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(Uri ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringTaskAsync : Uri * string * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.UploadStringTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la chaîne. Pour les ressources HTTP, cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode POST, tel qu'un script ou une page ASP.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer le fichier à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">Chaîne à transférer.</param>
        <summary>Transfère la chaîne spécifiée vers la ressource spécifiée en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.String" /> qui contient la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la chaîne a été chargée à la ressource. La chaîne est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Cette méthode se bloque pendant que la chaîne est transmise.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadValues">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transfère une collection nom/valeur à une ressource ayant l'URI spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As String, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(System::String ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValues : string * System.Collections.Specialized.NameValueCollection -&gt; byte[]" Usage="webClient.UploadValues (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadValues%2A> méthode envoie un <xref:System.Collections.Specialized.NameValueCollection> à un serveur. Cette méthode se bloque lors du téléchargement de données. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadValuesAsync%2A> méthodes.  
  
 Si la requête sous-jacente n’est pas comprise par le serveur, les classes de protocole sous-jacente déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si l’en-tête Content-type est `null`, le <xref:System.Net.WebClient.UploadValues%2A> méthode définit sur « application/x--www-form-urlencoded ».  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant rassemble des informations à partir de l’utilisateur (nom, âge et adresse) et publie les valeurs sur le serveur à l’aide <xref:System.Net.WebClient.UploadValues%2A>. Toute réponse du serveur s’affiche sur la console.  
  
 [!code-cpp[WebClient_UploadValues#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues/CPP/webclient_uploadvalues.cpp#1)]
 [!code-csharp[WebClient_UploadValues#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues/CS/webclient_uploadvalues.cs#1)]
 [!code-vb[WebClient_UploadValues#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues/VB/webclient_uploadvalues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="data" /> est <see langword="null" />.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
L'en-tête <see langword="Content-type" /> n'est pas <see langword="null" /> ou "application/x-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As Uri, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(Uri ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValues : Uri * System.Collections.Specialized.NameValueCollection -&gt; byte[]" Usage="webClient.UploadValues (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadValues%2A> méthode envoie un <xref:System.Collections.Specialized.NameValueCollection> à un serveur. Cette méthode se bloque lors du téléchargement de données. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadValuesAsync%2A> méthodes.  
  
 Si la requête sous-jacente n’est pas comprise par le serveur, les classes de protocole sous-jacente déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si l’en-tête Content-type est `null`, le <xref:System.Net.WebClient.UploadValues%2A> méthode définit sur « application/x--www-form-urlencoded ».  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="data" /> est <see langword="null" />.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
L'en-tête <see langword="Content-type" /> n'est pas <see langword="null" /> ou "application/x-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As String, method As String, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(System::String ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValues : string * string * System.Collections.Specialized.NameValueCollection -&gt; byte[]" Usage="webClient.UploadValues (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer le fichier à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié, à l'aide de la méthode spécifiée.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadValues%2A> méthode envoie un <xref:System.Collections.Specialized.NameValueCollection> à une ressource à l’aide de la méthode spécifiée dans le `method` paramètre et retourne une réponse à partir du serveur. Cette méthode se bloque lors du téléchargement de données. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadValuesAsync%2A> méthodes.  
  
 Si le `Content-type` en-tête est `null`, le <xref:System.Net.WebClient.UploadValues%2A> méthode lui affecte `application/x-www-form-urlencoded`.  
  
 Si le `method` paramètre spécifie un verbe qui n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 L’exemple de code suivant rassemble des informations à partir de l’utilisateur (nom, âge et adresse) et publie les valeurs sur le serveur à l’aide <xref:System.Net.WebClient.UploadValues%2A>. Toute réponse du serveur s’affiche sur la console.  
  
 [!code-cpp[WebClient_UploadValues2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues2/CPP/webclient_uploadvalues2.cpp#1)]
 [!code-csharp[WebClient_UploadValues2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues2/CS/webclient_uploadvalues2.cs#1)]
 [!code-vb[WebClient_UploadValues2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues2/VB/webclient_uploadvalues2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="data" /> est <see langword="null" />.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
La valeur d'en-tête <see langword="Content-type" /> n'est pas <see langword="null" /> ni <see langword="application/x-www-form-urlencoded" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As Uri, method As String, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValues : Uri * string * System.Collections.Specialized.NameValueCollection -&gt; byte[]" Usage="webClient.UploadValues (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer le fichier à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié, à l'aide de la méthode spécifiée.</summary>
        <returns>Tableau de <see cref="T:System.Byte" /> contenant le corps de la réponse de la ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.WebClient.UploadValues%2A> méthode envoie un <xref:System.Collections.Specialized.NameValueCollection> à une ressource à l’aide de la méthode spécifiée dans le `method` paramètre et retourne une réponse à partir du serveur. Cette méthode se bloque lors du téléchargement de données. Pour continuer l’exécution en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadValuesAsync%2A> méthodes.  
  
 Si le `Content-type` en-tête est `null`, le <xref:System.Net.WebClient.UploadValues%2A> méthode lui affecte `application/x-www-form-urlencoded`.  
  
 Si le `method` paramètre spécifie un verbe qui n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="data" /> est <see langword="null" />.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
La valeur d'en-tête <see langword="Content-type" /> n'est pas <see langword="null" /> ni <see langword="application/x-www-form-urlencoded" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadValuesAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadValuesAsync (address As Uri, data As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadValuesAsync(Uri ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesAsync : Uri * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="webClient.UploadValuesAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection. Cet URI doit identifier une ressource capable d'accepter une demande envoyée à l'aide de la méthode par défaut.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère les données de la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie une chaîne à une ressource. La chaîne est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Avant de charger la chaîne, cette méthode convertit en un <xref:System.Byte> de tableau à l’aide de l’encodage spécifié dans le <xref:System.Net.WebClient.Encoding%2A> propriété. Pour recevoir une notification lorsque le chargement de la chaîne est terminé, vous pouvez ajouter un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadStringCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant l’envoi de la chaîne. Pour envoyer une chaîne et un bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadString%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadValuesAsync (address As Uri, method As String, data As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadValuesAsync(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesAsync : Uri * string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="webClient.UploadValuesAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection. Cet URI doit identifier une ressource capable d’accepter une demande envoyée à l’aide de la méthode <c>method</c>.</param>
        <param name="method">Méthode utilisée pour envoyer la chaîne à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère les données de la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié, à l'aide de la méthode spécifiée. Cette méthode ne bloque pas le thread appelant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie les données contenues dans un <xref:System.Collections.Specialized.NameValueCollection> à la `address` ressource. Utilisez cette méthode pour envoyer des données de formulaire à un URI pour le traitement. Les données sont envoyées à l’aide du type de média form-UrlEncode ; la valeur d’en-tête Content-Type doit être définie à « application/x--www-form-urlencoded ». L’en-tête est défini correctement par défaut. Le <xref:System.Net.WebClient.UploadValuesAsync%2A> méthodes lèvent une <xref:System.Net.WebException> si vous appelez cette méthode avec un ensemble différent de valeur en-tête Content-Type dans le <xref:System.Net.WebClient.Headers%2A> collection.  
  
 Si le `method` méthode n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Le <xref:System.Collections.Specialized.NameValueCollection> est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque l’opération de chargement est terminée, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadValuesCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant l’envoi de la chaîne. Pour envoyer une chaîne et un bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadValues%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadValuesAsync (address As Uri, method As String, data As NameValueCollection, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadValuesAsync(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesAsync : Uri * string * System.Collections.Specialized.NameValueCollection * obj -&gt; unit" Usage="webClient.UploadValuesAsync (address, method, data, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection. Cet URI doit identifier une ressource capable d’accepter une demande envoyée à l’aide de la méthode <c>method</c>.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer la chaîne à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <param name="userToken">Objet défini par l'utilisateur, passé à la fin de l'opération asynchrone à la méthode appelée.</param>
        <summary>Transfère les données de la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié, à l'aide de la méthode spécifiée. Cette méthode ne bloque pas le thread appelant et permet à l'appelant de passer un objet à la méthode qui est appelée lorsque l'opération se termine.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode envoie les données contenues dans un <xref:System.Collections.Specialized.NameValueCollection> à la `address` ressource. Utilisez cette méthode pour envoyer des données de formulaire à un URI pour le traitement. Les données sont envoyées à l’aide du type de média form-UrlEncode ; la valeur d’en-tête Content-Type doit être définie à « application/x--www-form-urlencoded ». L’en-tête est défini correctement par défaut. Le <xref:System.Net.WebClient.UploadValuesAsync%2A> méthodes lèvent une <xref:System.Net.WebException> si vous appelez cette méthode avec un ensemble différent de valeur en-tête Content-Type dans le <xref:System.Net.WebClient.Headers%2A> collection.  
  
 Si le `method` méthode n’est pas compris par le serveur, les classes de protocole sous-jacentes déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Le <xref:System.Collections.Specialized.NameValueCollection> est envoyé de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads. Pour recevoir une notification lorsque l’opération de chargement est terminée, ajoutez un gestionnaire d’événements pour le <xref:System.Net.WebClient.UploadValuesCompleted> événement.  
  
 Cette méthode ne bloque pas le thread appelant pendant l’envoi de la chaîne. Pour envoyer une chaîne et un bloc en attendant la réponse du serveur, utilisez une de la <xref:System.Net.WebClient.UploadValues%2A> méthodes.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas vide, elle est ajoutée à `address`.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> n'est pas valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadValuesCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadValuesCompleted As UploadValuesCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadValuesCompletedEventHandler ^ UploadValuesCompleted;" />
      <MemberSignature Language="F#" Value="member this.UploadValuesCompleted : System.Net.UploadValuesCompletedEventHandler " Usage="member this.UploadValuesCompleted : System.Net.UploadValuesCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadValuesCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors d'un transfert asynchrone d'une collection nom/valeur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois qu’un transfert asynchrone d’un <xref:System.Collections.Specialized.NameValueCollection> données de l’objet est terminée. Ces téléchargements sont démarrés en appelant le <xref:System.Net.WebClient.UploadValuesAsync%2A> méthodes.  
  
 Le <xref:System.Net.UploadValuesCompletedEventHandler> est le délégué de cet événement. Le <xref:System.Net.UploadValuesCompletedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadValuesTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche. Ces méthodes ne bloquent pas le thread appelant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As String, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(System::String ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesTaskAsync : string * System.Collections.Specialized.NameValueCollection -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadValuesTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> qui contient la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la collection nom/valeur a été chargée à la ressource. La collection nom/valeur est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si la requête sous-jacente n’est pas comprise par le serveur, les classes de protocole sous-jacente déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si l’en-tête Content-type est `null`, cette méthode il définit sur « application/x--www-form-urlencoded ».  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
L'en-tête <see langword="Content-type" /> n'est pas <see langword="null" /> ou "application/x-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As Uri, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(Uri ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesTaskAsync : Uri * System.Collections.Specialized.NameValueCollection -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadValuesTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> qui contient la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la collection nom/valeur a été chargée à la ressource. La collection nom/valeur est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si la requête sous-jacente n’est pas comprise par le serveur, les classes de protocole sous-jacente déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si l’en-tête Content-type est `null`, cette méthode il définit sur « application/x--www-form-urlencoded ».  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
La valeur d'en-tête <see langword="Content-type" /> n'est pas <see langword="null" /> ni <see langword="application/x-www-form-urlencoded" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As String, method As String, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(System::String ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesTaskAsync : string * string * System.Collections.Specialized.NameValueCollection -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadValuesTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer la collection à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> qui contient la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la collection nom/valeur a été chargée à la ressource. La collection nom/valeur est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si la requête sous-jacente n’est pas comprise par le serveur, les classes de protocole sous-jacente déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si l’en-tête Content-type est `null`, cette méthode il définit sur « application/x--www-form-urlencoded ».  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
L'en-tête <see langword="Content-type" /> n'est pas <see langword="null" /> ou "application/x-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As Uri, method As String, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesTaskAsync : Uri * string * System.Collections.Specialized.NameValueCollection -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadValuesTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">URI de la ressource devant recevoir la collection.</param>
        <param name="method">Méthode HTTP utilisée pour envoyer la collection à la ressource. Si la valeur est null, la valeur par défaut est POST pour http et STOR pour ftp.</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> à envoyer à la ressource.</param>
        <summary>Transfère la collection nom/valeur spécifiée à la ressource identifiée par l'URI spécifié en tant qu'opération asynchrone à l'aide d'un objet de tâche.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un tableau <see cref="T:System.Byte" /> qui contient la réponse envoyée par le serveur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette opération ne bloque pas. Retourné <xref:System.Threading.Tasks.Task%601> objet se termine une fois que la collection nom/valeur a été chargée à la ressource. La collection nom/valeur est envoyée de façon asynchrone à l’aide des ressources de thread automatiquement allouées à partir du pool de threads.  
  
 Les opérations asynchrones qui ne sont pas terminées peuvent être annulées à l’aide de la <xref:System.Net.WebClient.CancelAsync%2A> (méthode).  
  
 Si la requête sous-jacente n’est pas comprise par le serveur, les classes de protocole sous-jacente déterminent ce qui se produit. En règle générale, un <xref:System.Net.WebException> est levée avec le <xref:System.Net.WebException.Status%2A> la valeur de propriété pour indiquer l’erreur.  
  
 Si l’en-tête Content-type est `null`, cette méthode il définit sur « application/x--www-form-urlencoded ».  
  
 Si le <xref:System.Net.WebClient.BaseAddress%2A> propriété n’est pas une chaîne vide (" ») et `address` ne contient pas un URI absolu, `address` doit être un URI relatif qui est combiné avec <xref:System.Net.WebClient.BaseAddress%2A> pour former l’URI absolu des données demandées. Si le <xref:System.Net.WebClient.QueryString%2A> propriété n’est pas une chaîne vide, elle est ajoutée à `address`.  
  
 Cette méthode utilise la commande STOR pour transférer une ressource FTP. Pour une ressource HTTP, la méthode POST est utilisée.  
  
> [!NOTE]
>  Ce membre génère des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau dans le .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="data" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">L'URI formé en combinant la propriété <see cref="P:System.Net.WebClient.BaseAddress" /> et <paramref name="address" /> est non valide.  
  
- ou - 
 <paramref name="method" /> ne peut pas être utilisé pour envoyer du contenu.  
  
- ou - 
Il n'y avait pas de réponse du serveur hébergeant la ressource.  
  
- ou - 
Une erreur s'est produite lors de l'ouverture du flux.  
  
- ou - 
L'en-tête <see langword="Content-type" /> n'est pas <see langword="null" /> ou "application/x-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCredentials : bool with get, set" Usage="System.Net.WebClient.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui contrôle si les <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> sont envoyés avec les demandes.</summary>
        <value>
          <see langword="true" /> si les informations d'identification par défaut sont utilisées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définissez cette propriété sur `true` lorsque des requêtes effectuées par ce <xref:System.Net.WebClient> objet doit, si requis par le serveur, être authentifié à l’aide les informations d’identification par défaut de l’utilisateur actuellement connecté. Pour les applications clientes, il s’agit du comportement souhaité dans la plupart des scénarios. Pour les applications de couche intermédiaire, telles que les applications ASP.NET, au lieu d’utiliser cette propriété, vous devez généralement définir la <xref:System.Net.WebClient.Credentials%2A> propriété pour les informations d’identification du client au nom duquel la demande est effectuée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir cette propriété.  
  
 [!code-cpp[NCLWebClientAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#3)]
 [!code-csharp[NCLWebClientAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#3)]
 [!code-vb[NCLWebClientAsync#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStreamClosed">
      <MemberSignature Language="C#" Value="public event System.Net.WriteStreamClosedEventHandler WriteStreamClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.WriteStreamClosedEventHandler WriteStreamClosed" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.WriteStreamClosed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WriteStreamClosed As WriteStreamClosedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::WriteStreamClosedEventHandler ^ WriteStreamClosed;" />
      <MemberSignature Language="F#" Value="member this.WriteStreamClosed : System.Net.WriteStreamClosedEventHandler " Usage="member this.WriteStreamClosed : System.Net.WriteStreamClosedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WriteStreamClosedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors de la fermeture d'une opération asynchrone permettant d'écrire des données dans une ressource à l'aide d'un flux d'écriture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché chaque fois une opération asynchrone utilisée pour écrire des données à une ressource à l’aide d’un flux d’écriture est fermée. Ces opérations entraînent des appels à la <xref:System.Net.WebClient.OpenWriteTaskAsync%2A> méthodes.  
  
 Le <xref:System.Net.WriteStreamClosedEventHandler> est le délégué de cet événement. Le <xref:System.Net.WriteStreamClosedEventArgs> classe fournit le Gestionnaire d’événements avec les données d’événement.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>