<Type Name="AuthenticationManager" FullName="System.Net.AuthenticationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1a0f9aa5169b172cc926e0915d06e5d5dfc19af4" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37643622" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AuthenticationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthenticationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.AuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthenticationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AuthenticationManager" />
  <TypeSignature Language="F#" Value="type AuthenticationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gère les modules d’authentification appelés pendant le processus d’authentification du client.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.AuthenticationManager> est une classe statique qui gère les modules d’authentification qui utilise une application. Quand une demande est faite pour des ressources protégées, la <xref:System.Net.AuthenticationManager> appelle le <xref:System.Net.AuthenticationManager.Authenticate%2A> méthode pour obtenir un <xref:System.Net.Authorization> instance à utiliser dans les demandes suivantes.  
  
 Le <xref:System.Net.AuthenticationManager> interroge chaque module d’authentification inscrit en appelant le <xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=nameWithType> méthode pour chaque module. Le premier module d’authentification pour retourner un <xref:System.Net.Authorization> instance est utilisée pour authentifier la demande.  
  
 Les modules qui fournissent la base, digest, negotiate, NTLM, et les types d’authentification Kerberos sont inscrits avec le <xref:System.Net.AuthenticationManager> par défaut. Les modules d’authentification supplémentaires qui implémentent le <xref:System.Net.IAuthenticationModule> interface peut être ajoutée à l’aide de la <xref:System.Net.AuthenticationManager.Register%2A> (méthode). Modules d’authentification sont appelés dans l’ordre dans lequel ils ont été ajoutés à la liste.  
  
> [!NOTE]
>  Kerberos et negotiate type d’authentification n’est pas pris en charge sur Windows 95/98 ou Windows NT 4.0.  
  
   
  
## Examples  
 [!code-cpp[System.Net.Authentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#1)]
 [!code-csharp[System.Net.Authentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#1)]
 [!code-vb[System.Net.Authentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization Authenticate(string challenge, class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Authenticate (challenge As String, request As WebRequest, credentials As ICredentials) As Authorization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Authorization ^ Authenticate(System::String ^ challenge, System::Net::WebRequest ^ request, System::Net::ICredentials ^ credentials);" />
      <MemberSignature Language="F#" Value="static member Authenticate : string * System.Net.WebRequest * System.Net.ICredentials -&gt; System.Net.Authorization" Usage="System.Net.AuthenticationManager.Authenticate (challenge, request, credentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="System.String" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="challenge">Stimulation retournée par la ressource Internet.</param>
        <param name="request">
          <see cref="T:System.Net.WebRequest" /> qui a lancé la stimulation d’authentification.</param>
        <param name="credentials">
          <see cref="T:System.Net.ICredentials" /> associé à cette demande.</param>
        <summary>Appelle chaque module d’authentification inscrit afin de rechercher le premier module pouvant répondre à la demande d’authentification.</summary>
        <returns>Instance de la classe <see cref="T:System.Net.Authorization" /> contenant le résultat de la tentative d’autorisation. Si aucun module d’authentification ne peut répondre à la stimulation, cette méthode retourne <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.AuthenticationManager.Authenticate%2A> les appels de méthode le <xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=nameWithType> méthode sur chaque module d’authentification inscrit jusqu'à ce qu’un des modules répond avec un <xref:System.Net.Authorization> instance.  
  
 Le premier <xref:System.Net.Authorization> instance retournée est utilisé pour authentifier la demande. Si aucun module d’authentification ne peut authentifier la demande, le <xref:System.Net.AuthenticationManager.Authenticate%2A> retourne de la méthode `null`.  
  
 Modules d’authentification sont appelés dans l’ordre dans lequel ils sont inscrits avec le <xref:System.Net.AuthenticationManager>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="challenge" /> est <see langword="null" />.  - ou - <paramref name="request" /> a la valeur <see langword="null" />.  - ou - <paramref name="credentials" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CredentialPolicy">
      <MemberSignature Language="C#" Value="public static System.Net.ICredentialPolicy CredentialPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICredentialPolicy CredentialPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CredentialPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CredentialPolicy As ICredentialPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::ICredentialPolicy ^ CredentialPolicy { System::Net::ICredentialPolicy ^ get(); void set(System::Net::ICredentialPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CredentialPolicy : System.Net.ICredentialPolicy with get, set" Usage="System.Net.AuthenticationManager.CredentialPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la stratégie d’informations d’identification à utiliser pour les demandes de ressources effectuées à l’aide de la classe <see cref="T:System.Net.HttpWebRequest" />.</summary>
        <value>Objet qui implémente l'interface <see cref="T:System.Net.ICredentialPolicy" /> déterminant si des informations d'identification sont envoyées avec les demandes. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stratégie d’informations d’identification détermine s’il faut envoyer des informations d’identification lorsque vous envoyez une demande pour une ressource réseau, tel que le contenu d’une page Web. Si les informations d’identification sont envoyées, les serveurs qui requièrent une authentification du client peuvent tenter d’authentifier le client lorsque la demande est reçue au lieu d’envoyer une réponse indiquant que les informations d’identification du client sont requises. Bien que cela permet d’économiser un aller-retour au serveur, cela doit être évalué par rapport au risque de sécurité inhérent à l’envoi des informations d’identification sur le réseau. Lorsque le serveur de destination ne requiert pas l’authentification du client, il est préférable de ne pas envoyer les informations d’identification.  
  
 La stratégie d’informations d’identification sera appelée uniquement pour les demandes qui spécifient des informations d’identification ou utilisent un <xref:System.Net.WebProxy> objet qui spécifie les informations d’identification.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la définition de la stratégie d’informations d’identification.  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomTargetNameDictionary">
      <MemberSignature Language="C#" Value="public static System.Collections.Specialized.StringDictionary CustomTargetNameDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Specialized.StringDictionary CustomTargetNameDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CustomTargetNameDictionary" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CustomTargetNameDictionary As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Specialized::StringDictionary ^ CustomTargetNameDictionary { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomTargetNameDictionary : System.Collections.Specialized.StringDictionary" Usage="System.Net.AuthenticationManager.CustomTargetNameDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le dictionnaire qui contient des noms de principaux du service (Service Principal Names, SPN) utilisés pour identifier des hôtes pendant l’authentification Kerberos pour les demandes effectuées à l’aide de <see cref="T:System.Net.WebRequest" /> et de ses classes dérivées.</summary>
        <value>
          <see cref="T:System.Collections.Specialized.StringDictionary" /> accessible en écriture qui contient les valeurs SPN des clés composées d'informations hôte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un SPN est un nom par lequel un client identifie une instance d’un service ou une application sur un serveur à des fins d’authentification mutuelle. L’authentification mutuelle est demandée par défaut, et vous pouvez l’exiger en définissant <xref:System.Net.WebRequest.AuthenticationLevel%2A?displayProperty=nameWithType> à <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> dans votre demande.  
  
 Quand un <xref:System.Net.WebRequest> nécessite une authentification mutuelle, le SPN pour la destination doit être fournie par le client. Si vous connaissez le SPN, vous pouvez l’ajouter à la <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> avant d’envoyer la demande. Si vous n’avez pas ajouté d’informations SPN à ce dictionnaire, la <xref:System.Net.AuthenticationManager> utilise le <xref:System.Net.WebRequest.RequestUri%2A> méthode pour composer le SPN le plus probable ; Toutefois, ceci est une valeur calculée et peuvent être erronée. Si l’authentification mutuelle est tentée et échoue, vous pouvez vérifier le dictionnaire afin de déterminer le SPN calculé. Aucun SPN n’est entré dans le dictionnaire si le protocole d’authentification ne prend pas en charge l’authentification mutuelle.  
  
 Pour ajouter une valeur SPN à ce dictionnaire, utilisez le <xref:System.Uri.AbsoluteUri%2A> de la <xref:System.Net.WebRequest.RequestUri%2A> comme clé. En interne, la clé est tronquée pour inclure le <xref:System.Uri.Scheme%2A>, <xref:System.Uri.Host%2A>et le <xref:System.Uri.Port%2A> si elle n’est pas le port par défaut.  
  
> [!NOTE]
>  L’accès aux méthodes et propriétés de la <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> nécessite sans restriction <xref:System.Net.WebPermission>.  
  
> [!NOTE]
>  Lorsque l’authentification Kerberos est effectuée via un proxy, le proxy et le nom d’hôte ultime doivent être résolus en un SPN. La résolution de noms de proxy est protégée par un délai d’expiration. Résolution du nom d’hôte ultimate un SPN requiert une recherche DNS, et il n’existe aucun délai d’expiration directement associé à cette opération. Par conséquent, les opérations synchrones prenne plus de temps au délai d’attente. Pour pallier ce problème, ajouter le préfixe URI de l’hôte ultime au cache SPN avant d’effectuer des demandes à ce dernier.  
  
 La version 3.5 SP1 spécifie désormais par défaut le nom d’hôte utilisé dans l’URL de requête dans le SPN lors de l’échange d’authentification NTLM (NT LAN Manager) quand la propriété <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> n’est pas définie. Le nom d’hôte utilisé dans l’URL de requête peut être différent de l’en-tête d’hôte spécifié dans <xref:System.Net.HttpRequestHeader?displayProperty=nameWithType> dans la requête du client. Le nom d’hôte utilisé dans l’URL de requête peut être différent du nom d’hôte réel du serveur, du nom d’ordinateur du serveur, de l’adresse IP de l’ordinateur ou de l’adresse de bouclage. Dans ce cas, Windows fait échouer la requête d’authentification. Pour résoudre ce problème, vous devrez peut-être avertir Windows que le nom d’hôte utilisé dans l’URL de demande dans le client demande (« contoso », par exemple) est en fait un autre nom pour l’ordinateur local.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage du contenu de la <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A>.  
  
 [!code-cpp[NclCredPolicy#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#5)]
 [!code-csharp[NclCredPolicy#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization PreAuthenticate(class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PreAuthenticate (request As WebRequest, credentials As ICredentials) As Authorization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Authorization ^ PreAuthenticate(System::Net::WebRequest ^ request, System::Net::ICredentials ^ credentials);" />
      <MemberSignature Language="F#" Value="static member PreAuthenticate : System.Net.WebRequest * System.Net.ICredentials -&gt; System.Net.Authorization" Usage="System.Net.AuthenticationManager.PreAuthenticate (request, credentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="request">
          <see cref="T:System.Net.WebRequest" /> adressé à une ressource Internet.</param>
        <param name="credentials">
          <see cref="T:System.Net.ICredentials" /> associé à la demande.</param>
        <summary>Pré-authentifie une demande.</summary>
        <returns>Instance de la classe <see cref="T:System.Net.Authorization" /> si la demande peut être pré-authentifiée ; sinon, <see langword="null" />. Si <paramref name="credentials" /> est <see langword="null" />, cette méthode retourne <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le module d’authentification peut pré-authentifier la demande, le <xref:System.Net.AuthenticationManager.PreAuthenticate%2A> méthode retourne une instance de l’authentification et envoie les informations d’autorisation pour le serveur de manière préemptive au lieu d’attendre de la ressource à émettre un défi. Ce comportement est décrit dans la section 3.3 de la RFC 2617 (l’authentification HTTP : authentification de base et Digest accès). Modules d’authentification qui prennent en charge la pré-authentification autoriser les clients à améliorer l’efficacité du serveur en évitant des allers-retours entraînés par les demandes d’authentification.  
  
 Modules d’autorisation qui peuvent effectuer la pré-authentification demande ensemble la <xref:System.Net.IAuthenticationModule.CanPreAuthenticate%2A?displayProperty=nameWithType> propriété `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="request" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static void Register (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Register(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Register (authenticationModule As IAuthenticationModule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Register(System::Net::IAuthenticationModule ^ authenticationModule);" />
      <MemberSignature Language="F#" Value="static member Register : System.Net.IAuthenticationModule -&gt; unit" Usage="System.Net.AuthenticationManager.Register authenticationModule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">
          <see cref="T:System.Net.IAuthenticationModule" /> à inscrire auprès du gestionnaire d’authentification.</param>
        <summary>Inscrit un module d’authentification auprès du gestionnaire d’authentification.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.AuthenticationManager.Register%2A> méthode ajoute des modules d’authentification à la fin de la liste des modules appelés par le <xref:System.Net.AuthenticationManager.Authenticate%2A> (méthode). Modules d’authentification sont appelés dans l’ordre dans lequel ils ont été ajoutés à la liste. Si un module avec le même <xref:System.Net.IAuthenticationModule.AuthenticationType%2A> est déjà inscrit, cette méthode supprime le module inscrit et ajoute `authenticationModule` à la fin de la liste.  
  
   
  
## Examples  
 L’exemple suivant inscrit un module d’authentification avec le Gestionnaire d’authentification. Pour obtenir un exemple complet, consultez la <xref:System.Net.AuthenticationManager> classe.  
  
 [!code-cpp[System.Net.Sockets.Authentication#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour l’exécution de code non managé. Énumération associée : <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RegisteredModules">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerator RegisteredModules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IEnumerator RegisteredModules" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.RegisteredModules" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RegisteredModules As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::IEnumerator ^ RegisteredModules { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegisteredModules : System.Collections.IEnumerator" Usage="System.Net.AuthenticationManager.RegisteredModules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la liste des modules d’authentification qui sont inscrits auprès du gestionnaire d’authentification.</summary>
        <value>
          <see cref="T:System.Collections.IEnumerator" /> qui permet de lire les modules d'authentification inscrits.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.AuthenticationManager.RegisteredModules%2A> propriété fournit un <xref:System.Collections.IEnumerator> instance qui permet à la liste des inscrit des modules d’authentification à lire. Le <xref:System.Net.AuthenticationManager.Register%2A> méthode ajoute des modules à la liste et le <xref:System.Net.AuthenticationManager.Unregister%2A> méthode supprime les modules à partir de celui-ci.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Net.AuthenticationManager.RegisteredModules%2A> propriété pour obtenir la liste des modules d’authentification qui sont inscrits auprès du Gestionnaire d’authentification. Pour obtenir un exemple complet, consultez la <xref:System.Net.AuthenticationManager> classe.  
  
 [!code-cpp[System.Net.Authentication#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#8)]
 [!code-csharp[System.Net.Authentication#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#8)]
 [!code-vb[System.Net.Authentication#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unregister">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Supprime les modules d’authentification de la liste des modules inscrits.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (authenticationModule As IAuthenticationModule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::Net::IAuthenticationModule ^ authenticationModule);" />
      <MemberSignature Language="F#" Value="static member Unregister : System.Net.IAuthenticationModule -&gt; unit" Usage="System.Net.AuthenticationManager.Unregister authenticationModule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">
          <see cref="T:System.Net.IAuthenticationModule" /> à supprimer de la liste des modules inscrits.</param>
        <summary>Supprime le module d’authentification spécifié de la liste des modules inscrits.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.AuthenticationManager.Unregister%2A> méthode supprime le module d’authentification spécifié de la liste des modules d’authentification appelés le <xref:System.Net.AuthenticationManager.Authenticate%2A> (méthode). Le module doit avoir été ajouté à la liste en utilisant la <xref:System.Net.AuthenticationManager.Register%2A> méthode avant de pouvoir être supprimée à partir de la liste.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Net.AuthenticationManager.Unregister%2A> méthode pour supprimer le module d’authentification spécifié de la liste des modules inscrits. Pour obtenir un exemple complet, consultez la <xref:System.Net.AuthenticationManager> classe.  
  
 [!code-cpp[System.Net.Sockets.Authentication#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.Net.IAuthenticationModule" /> spécifié n’est pas inscrit.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour l’exécution de code non managé. Énumération associée : <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string authenticationScheme);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string authenticationScheme) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (authenticationScheme As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ authenticationScheme);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Net.AuthenticationManager.Unregister authenticationScheme" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationScheme" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="authenticationScheme">Schéma d’authentification du module à supprimer.</param>
        <summary>Supprime les modules d’authentification avec le schéma d’authentification spécifié de la liste des modules inscrits.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.AuthenticationManager.Unregister%2A> méthode supprime le module d’authentification avec le schéma d’authentification spécifié de la liste des modules d’authentification appelés le <xref:System.Net.AuthenticationManager.Authenticate%2A> (méthode). Le module doit avoir été ajouté à la liste en utilisant la <xref:System.Net.AuthenticationManager.Register%2A> méthode avant de pouvoir être supprimée à partir de la liste.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Net.AuthenticationManager.Unregister%2A> méthode pour supprimer un module d’authentification avec le schéma d’authentification spécifié de la liste des modules inscrits.  
  
 [!code-cpp[AuthenticationManager_UnRegister2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CPP/authenticationmanager_unregister2.cpp#2)]
 [!code-csharp[AuthenticationManager_UnRegister2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CS/authenticationmanager_unregister2.cs#2)]
 [!code-vb[AuthenticationManager_UnRegister2#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/VB/authenticationmanager_unregister2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationScheme" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Aucun module n’est inscrit pour ce schéma d’authentification.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour l’exécution de code non managé. Énumération associée : <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>