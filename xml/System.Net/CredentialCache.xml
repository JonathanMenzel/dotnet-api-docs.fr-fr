<Type Name="CredentialCache" FullName="System.Net.CredentialCache">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c8adb4cedb40d4aaba2c3d2d9af0eab770f127ee" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37643596" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CredentialCache : System.Collections.IEnumerable, System.Net.ICredentials, System.Net.ICredentialsByHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CredentialCache extends System.Object implements class System.Collections.IEnumerable, class System.Net.ICredentials, class System.Net.ICredentialsByHost" />
  <TypeSignature Language="DocId" Value="T:System.Net.CredentialCache" />
  <TypeSignature Language="VB.NET" Value="Public Class CredentialCache&#xA;Implements ICredentials, ICredentialsByHost, IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CredentialCache : System::Collections::IEnumerable, System::Net::ICredentials, System::Net::ICredentialsByHost" />
  <TypeSignature Language="F#" Value="type CredentialCache = class&#xA;    interface ICredentials&#xA;    interface ICredentialsByHost&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Net.ICredentials</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Net.ICredentialsByHost</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides storage for multiple credentials.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.CredentialCache> classe stocke les informations d’identification de plusieurs ressources Internet. Les informations d’identification pour ces ressources dans les applications qui doivent accéder à plusieurs ressources peuvent stocker un <xref:System.Net.CredentialCache> instance qui fournit l’ensemble approprié d’informations d’identification à la ressource Internet. Lorsque le <xref:System.Net.CredentialCache.GetCredential%2A> méthode est appelée, elle compare l’identificateur URI (Uniform Resource) et type d’authentification fourni avec ceux stockés dans le cache et retourne le premier jeu d’informations d’identification correspondant.  
  
 Le <xref:System.Net.CredentialCache.DefaultCredentials%2A> propriété contient les informations d’identification système du contexte de sécurité actuel. Pour les applications clientes, elles représentent le nom d’utilisateur, le mot de passe et le domaine de l’utilisateur actuellement connecté. Pour les applications ASP.NET, les informations d’identification par défaut sont les informations d’identification de l’utilisateur connecté ou de l’utilisateur représenté.  
  
   
  
## Examples  
 Le code suivant exemple initialise un <xref:System.Net.CredentialCache> avec plusieurs informations d’identification de sécurité et utilise ces informations d’identification avec un <xref:System.Net.WebRequest>.  
  
 [!code-cpp[Classic CredentialCache.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CredentialCache.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CS/source.cs#1)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic CredentialCache.Add Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.ICredentials" />
    <altmember cref="P:System.Net.WebRequest.Credentials" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CredentialCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CredentialCache();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.Net.CredentialCache" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le constructeur crée un <xref:System.Net.CredentialCache> instance.  
  
   
  
## Examples  
 Le code suivant exemple initialise un <xref:System.Net.CredentialCache> avec plusieurs informations d’identification de sécurité et utilise ces informations d’identification avec un <xref:System.Net.WebRequest>.  
  
 [!code-cpp[Classic CredentialCache.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CredentialCache.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CS/source.cs#1)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic CredentialCache.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adds a <see cref="T:System.Net.NetworkCredential" /> instance to the credential cache.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Uri uriPrefix, string authType, System.Net.NetworkCredential cred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Uri uriPrefix, string authType, class System.Net.NetworkCredential cred) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (uriPrefix As Uri, authType As String, cred As NetworkCredential)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(Uri ^ uriPrefix, System::String ^ authType, System::Net::NetworkCredential ^ cred);" />
      <MemberSignature Language="F#" Value="member this.Add : Uri * string * System.Net.NetworkCredential -&gt; unit" Usage="credentialCache.Add (uriPrefix, authType, cred)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
        <Parameter Name="cred" Type="System.Net.NetworkCredential" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.Uri" /> that specifies the URI prefix of the resources that the credential grants access to.</param>
        <param name="authType">The authentication scheme used by the resource named in <c>uriPrefix</c>.</param>
        <param name="cred">The <see cref="T:System.Net.NetworkCredential" /> to add to the credential cache.</param>
        <summary>Adds a <see cref="T:System.Net.NetworkCredential" /> instance to the credential cache for use with protocols other than SMTP and associates it with a Uniform Resource Identifier (URI) prefix and authentication protocol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.CredentialCache.Add%2A> méthode endroits un <xref:System.Net.NetworkCredential> instance pour une utilisation avec des protocoles autres que SMTP dans le <xref:System.Net.CredentialCache>. Le cache stocke les informations d’identification dans l’ordre dans lequel ils sont ajoutés à ce dernier. Lorsque le <xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29> est appelée, elle retourne la correspondance appropriée <xref:System.Net.NetworkCredential> instance.  
  
   
  
## Examples  
 Le code suivant exemple initialise un <xref:System.Net.CredentialCache> avec plusieurs informations d’identification de sécurité et utilise ces informations d’identification avec un <xref:System.Net.WebRequest>.  
  
 [!code-cpp[Classic CredentialCache.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CredentialCache.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CS/source.cs#1)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic CredentialCache.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> is <see langword="null" />.  -or-  <paramref name="authType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The same credentials are added more than once.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string host, int port, string authenticationType, System.Net.NetworkCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string host, int32 port, string authenticationType, class System.Net.NetworkCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (host As String, port As Integer, authenticationType As String, credential As NetworkCredential)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ host, int port, System::String ^ authenticationType, System::Net::NetworkCredential ^ credential);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int * string * System.Net.NetworkCredential -&gt; unit" Usage="credentialCache.Add (host, port, authenticationType, credential)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="authenticationType" Type="System.String" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> that identifies the host computer.</param>
        <param name="port">A <see cref="T:System.Int32" /> that specifies the port to connect to on <c>host</c>.</param>
        <param name="authenticationType">A <see cref="T:System.String" /> that identifies the authentication scheme used when connecting to <c>host</c> using <c>cred</c>.</param>
        <param name="credential">The <see cref="T:System.Net.NetworkCredential" /> to add to the credential cache.</param>
        <summary>Adds a <see cref="T:System.Net.NetworkCredential" /> instance for use with SMTP to the credential cache and associates it with a host computer, port, and authentication protocol. Credentials added using this method are valid for SMTP only. This method does not work for HTTP or FTP requests.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode place un <xref:System.Net.NetworkCredential> instance à utiliser avec SMTP dans le <xref:System.Net.CredentialCache>. Le cache stocke les informations d’identification dans l’ordre dans lequel ils sont ajoutés à ce dernier. Lorsque le <xref:System.Net.CredentialCache.GetCredential%28System.String%2CSystem.Int32%2CSystem.String%29> méthode est appelée, elle retourne un <xref:System.Net.NetworkCredential> instance qui est sélectionné en faisant correspondre le `host`, `port`, et `authType`. La comparaison s’effectue pas la casse.  
  
 Les valeurs prises en charge pour `authType` sont « NTLM », « Digest », « Kerberos » et « Negotiate ».  
  
 Informations d’identification ajoutées avec cette méthode ne sont valides pour une utilisation avec SMTP. Cette méthode ne fonctionne pas pour les protocoles HTTP ou FTP.  
  
   
  
## Examples  
 Le code suivant exemple initialise un <xref:System.Net.CredentialCache> avec plusieurs informations d’identification pour une utilisation avec SMTP et utilise une de ces informations d’identification avec un <xref:System.Net.Mail.SmtpClient>.  
  
 [!code-cpp[NCL_Credential.Cache.Add_SMTP#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCL_Credential.Cache.Add_SMTP/CPP/source.cpp#1)]
 [!code-csharp[NCL_Credential.Cache.Add_SMTP#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCL_Credential.Cache.Add_SMTP/cs/source.cs#1)]
 [!code-vb[NCL_Credential.Cache.Add_SMTP#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCL_Credential.Cache.Add_SMTP/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="host" /> is <see langword="null" />.  -or-  <paramref name="authType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="authType" /> not an accepted value.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> is less than zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultCredentials">
      <MemberSignature Language="C#" Value="public static System.Net.ICredentials DefaultCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICredentials DefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.CredentialCache.DefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultCredentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::ICredentials ^ DefaultCredentials { System::Net::ICredentials ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCredentials : System.Net.ICredentials" Usage="System.Net.CredentialCache.DefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the system credentials of the application.</summary>
        <value>Un <see cref="T:System.Net.ICredentials" /> qui représente les informations d’identification de système de l’application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.CredentialCache.DefaultCredentials%2A> propriété s’applique uniquement à NTLM, negotiate et l’authentification basée sur Kerberos.  
  
 <xref:System.Net.CredentialCache.DefaultCredentials%2A> représente les informations d’identification du système pour le contexte de sécurité actuel dans lequel l’application est en cours d’exécution. Pour une application côté client, il s’agit généralement les informations d’identification Windows (nom d’utilisateur, mot de passe et domaine) de l’utilisateur exécutant l’application. Pour les applications ASP.NET, les informations d’identification par défaut sont les informations d’identification de l’utilisateur connecté, ou que l’utilisateur représenté.  
  
 Pour obtenir les informations d’identification en tant qu’un <xref:System.Net.NetworkCredential> d’instance, utilisez le <xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A> propriété.  
  
 Les valeurs prises en charge pour `authType` sont « NTLM », « Digest », « Kerberos » et « Negotiate ». Cette méthode ne fonctionne pas pour les protocoles HTTP ou FTP.  
  
> [!NOTE]
>  Le <xref:System.Net.ICredentials> instance retournée par <xref:System.Net.CredentialCache.DefaultCredentials%2A> ne peut pas être utilisé pour afficher le nom d’utilisateur, le mot de passe ou le domaine du contexte de sécurité actuel.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Net.CredentialCache.DefaultCredentials%2A> propriété à obtenir les informations d’identification de système de l’application.  
  
 [!code-cpp[CredentialCache_DefaultCredentials#1](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_DefaultCredentials/CPP/credentialcache_defaultcredentials.cpp#1)]
 [!code-csharp[CredentialCache_DefaultCredentials#1](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_DefaultCredentials/CS/credentialcache_defaultcredentials.cs#1)]
 [!code-vb[CredentialCache_DefaultCredentials#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_DefaultCredentials/VB/credentialcache_defaultcredentials.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">pour lire la variable d’environnement de nom d’utilisateur. Énumération associée : <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DefaultNetworkCredentials">
      <MemberSignature Language="C#" Value="public static System.Net.NetworkCredential DefaultNetworkCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.NetworkCredential DefaultNetworkCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.CredentialCache.DefaultNetworkCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultNetworkCredentials As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::NetworkCredential ^ DefaultNetworkCredentials { System::Net::NetworkCredential ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultNetworkCredentials : System.Net.NetworkCredential" Usage="System.Net.CredentialCache.DefaultNetworkCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the network credentials of the current security context.</summary>
        <value>Un <see cref="T:System.Net.NetworkCredential" /> qui représente les informations d’identification réseau de l’utilisateur actuel ou l’application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les informations d’identification retournées par la <xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A> propriété s’applique uniquement aux NTLM, negotiate et l’authentification basée sur Kerberos.  
  
 Les informations d’identification retournées par <xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A> représente les informations d’identification de l’authentification pour le contexte de sécurité actuel dans lequel l’application est en cours d’exécution. Pour une application côté client, il s’agit généralement les informations d’identification Windows (nom d’utilisateur, mot de passe et domaine) de l’utilisateur exécutant l’application. Pour les applications ASP.NET, les informations d’identification du réseau par défaut sont les informations d’identification de l’utilisateur connecté, ou que l’utilisateur représenté.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">pour lire la variable d’environnement de nom d’utilisateur. Énumération associée : <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCredential">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a <see cref="T:System.Net.NetworkCredential" /> instance associated with a specified Uniform Resource Identifier (URI) or host, and authentication type.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential GetCredential (Uri uriPrefix, string authType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.NetworkCredential GetCredential(class System.Uri uriPrefix, string authType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCredential (uriPrefix As Uri, authType As String) As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Net::NetworkCredential ^ GetCredential(Uri ^ uriPrefix, System::String ^ authType);" />
      <MemberSignature Language="F#" Value="abstract member GetCredential : Uri * string -&gt; System.Net.NetworkCredential&#xA;override this.GetCredential : Uri * string -&gt; System.Net.NetworkCredential" Usage="credentialCache.GetCredential (uriPrefix, authType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.ICredentials.GetCredential(System.Uri,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.Uri" /> that specifies the URI prefix of the resources that the credential grants access to.</param>
        <param name="authType">The authentication scheme used by the resource named in <c>uriPrefix</c>.</param>
        <summary>Returns the <see cref="T:System.Net.NetworkCredential" /> instance associated with the specified Uniform Resource Identifier (URI) and authentication type.</summary>
        <returns>A <see cref="T:System.Net.NetworkCredential" /> or, if there is no matching credential in the cache, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29> méthode recherche le <xref:System.Net.CredentialCache> et retourne le <xref:System.Net.NetworkCredential> instance pour le type d’URI et l’autorisation spécifié. Si le <xref:System.Net.CredentialCache> ne contient aucune mise en correspondance <xref:System.Net.NetworkCredential> instance, `null` est retournée.  
  
 <xref:System.Net.CredentialCache.GetCredential%2A> utilise le préfixe URI correspondant le plus long dans le cache pour déterminer le jeu d’informations d’identification à retourner pour un type d’autorisation. Le tableau suivant présente des exemples.  
  
|Préfixe URI|Correspondances|  
|----------------|-------------|  
|`http://www.contoso.com/portal/news.htm`|Demandes de la page Web spécifique `news.htm`.|  
|`http://www.contoso.com/portal/`|Demandes de tout le contenu dans le `portal` chemin d’accès, à l’exception de la page `news.htm`.|  
|`http://www.contoso.com/`|Demandes de toutes les ressources nécessaires à `www.contoso.com`, sauf celles qui sont dans le `portal` chemin d’accès.|  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29> méthode pour retourner le <xref:System.Net.NetworkCredential> instance associée au type spécifié de l’URI et l’authentification.  
  
 [!code-cpp[CredentialCache_GetCredential#1](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_GetCredential/CPP/credentialcache_getcredential.cpp#1)]
 [!code-csharp[CredentialCache_GetCredential#1](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_GetCredential/CS/credentialcache_getcredential.cs#1)]
 [!code-vb[CredentialCache_GetCredential#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_GetCredential/VB/credentialcache_getcredential.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> or <paramref name="authType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential GetCredential (string host, int port, string authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.NetworkCredential GetCredential(string host, int32 port, string authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCredential (host As String, port As Integer, authenticationType As String) As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Net::NetworkCredential ^ GetCredential(System::String ^ host, int port, System::String ^ authenticationType);" />
      <MemberSignature Language="F#" Value="abstract member GetCredential : string * int * string -&gt; System.Net.NetworkCredential&#xA;override this.GetCredential : string * int * string -&gt; System.Net.NetworkCredential" Usage="credentialCache.GetCredential (host, port, authenticationType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="authenticationType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> that identifies the host computer.</param>
        <param name="port">A <see cref="T:System.Int32" /> that specifies the port to connect to on <c>host</c>.</param>
        <param name="authenticationType">A <see cref="T:System.String" /> that identifies the authentication scheme used when connecting to <c>host</c>.</param>
        <summary>Returns the <see cref="T:System.Net.NetworkCredential" /> instance associated with the specified host, port, and authentication protocol.</summary>
        <returns>A <see cref="T:System.Net.NetworkCredential" /> or, if there is no matching credential in the cache, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode recherche le <xref:System.Net.CredentialCache> et retourne le <xref:System.Net.NetworkCredential> instance pour l’hôte spécifié, le port et le type d’autorisation. Le `host`, `port`, et `authType` valeurs passées à cette méthode sont comparées aux valeurs spécifiées lorsque les informations d’identification a été ajoutée à la <xref:System.Net.CredentialCache> à l’aide de la <xref:System.Net.CredentialCache.Add%2A> méthodes.  
  
 Les valeurs prises en charge pour `authType` sont « NTLM », « Digest », « Kerberos » et « Negotiate ».  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="host" /> is <see langword="null" />.  -or-  <paramref name="authType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="authType" /> not an accepted value.  -or-  <paramref name="host" /> is equal to the empty string ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> is less than zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="credentialCache.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that can iterate through the <see cref="T:System.Net.CredentialCache" /> instance.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Net.CredentialCache" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Net.CredentialCache.GetEnumerator%2A> méthode retourne un énumérateur qui peut itérer la <xref:System.Net.CredentialCache> instance.  
  
 [!code-cpp[CredentialCache_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_GetEnumerator/CPP/credentialcache_getenumerator.cpp#1)]
 [!code-csharp[CredentialCache_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_GetEnumerator/CS/credentialcache_getenumerator.cs#1)]
 [!code-vb[CredentialCache_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_GetEnumerator/VB/credentialcache_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Deletes a <see cref="T:System.Net.NetworkCredential" /> instance from the cache.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (Uri uriPrefix, string authType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Uri uriPrefix, string authType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Remove(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (uriPrefix As Uri, authType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(Uri ^ uriPrefix, System::String ^ authType);" />
      <MemberSignature Language="F#" Value="member this.Remove : Uri * string -&gt; unit" Usage="credentialCache.Remove (uriPrefix, authType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.Uri" /> that specifies the URI prefix of the resources that the credential is used for.</param>
        <param name="authType">The authentication scheme used by the host named in <c>uriPrefix</c>.</param>
        <summary>Deletes a <see cref="T:System.Net.NetworkCredential" /> instance from the cache if it is associated with the specified Uniform Resource Identifier (URI) prefix and authentication protocol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode supprime un <xref:System.Net.NetworkCredential> instance à partir de la <xref:System.Net.CredentialCache> si le protocole d’authentification et le préfixe URI spécifié correspondent à ceux associés avec les informations d’identification. Appels multiples à la <xref:System.Net.CredentialCache.Remove%2A> méthode pour le même <xref:System.Net.NetworkCredential> n’ont aucun effet.  
  
 Si `authType` est `null` ou `uriPrefix` est `null`, ou aucune information d’identification correspondante n’est trouvé dans le cache, cette méthode ne fait rien.  
  
   
  
## Examples  
 L’exemple de code suivant utilise cette méthode pour supprimer un <xref:System.Net.NetworkCredential> instance à partir du cache.  
  
 [!code-cpp[CredentialCache_Add_Remove#3](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_Add_Remove/CPP/credentialcache_add_remove.cpp#3)]
 [!code-csharp[CredentialCache_Add_Remove#3](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_Add_Remove/CS/credentialcache_add_remove.cs#3)]
 [!code-vb[CredentialCache_Add_Remove#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_Add_Remove/VB/credentialcache_add_remove.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string host, int port, string authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string host, int32 port, string authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (host As String, port As Integer, authenticationType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ host, int port, System::String ^ authenticationType);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * int * string -&gt; unit" Usage="credentialCache.Remove (host, port, authenticationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="authenticationType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> that identifies the host computer.</param>
        <param name="port">A <see cref="T:System.Int32" /> that specifies the port to connect to on <c>host</c>.</param>
        <param name="authenticationType">A <see cref="T:System.String" /> that identifies the authentication scheme used when connecting to <c>host</c>.</param>
        <summary>Deletes a <see cref="T:System.Net.NetworkCredential" /> instance from the cache if it is associated with the specified host, port, and authentication protocol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode supprime un <xref:System.Net.NetworkCredential> instance à partir de la <xref:System.Net.CredentialCache> si le protocole hôte, port et d’authentification spécifié correspondent à ceux associés à l’information d’identification. Appels multiples à la <xref:System.Net.CredentialCache.Remove%2A> méthode pour le même <xref:System.Net.NetworkCredential> n’ont aucun effet.  
  
 Si `authType` est `null` ou `uriPrefix` est `null`, ou aucune information d’identification correspondante n’est trouvé dans le cache, cette méthode ne fait rien.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>